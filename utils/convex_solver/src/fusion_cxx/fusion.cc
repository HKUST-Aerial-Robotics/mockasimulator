#include "mosek/monty.h"
#include "fusion_p.h"
std::ostream & mosek::fusion::operator<<(std::ostream & os,mosek::fusion::StatusKey val){switch (val){case StatusKey::Unknown: os << "StatusKey::Unknown"; break;case StatusKey::Basic: os << "StatusKey::Basic"; break;case StatusKey::SuperBasic: os << "StatusKey::SuperBasic"; break;case StatusKey::OnBound: os << "StatusKey::OnBound"; break;case StatusKey::Infinity: os << "StatusKey::Infinity"; break;default: os << "StatusKey.<invalid>"; break;}return os;}std::ostream & mosek::fusion::operator<<(std::ostream & os,mosek::fusion::SolutionType val){switch (val){case SolutionType::Default: os << "SolutionType::Default"; break;case SolutionType::Basic: os << "SolutionType::Basic"; break;case SolutionType::Interior: os << "SolutionType::Interior"; break;case SolutionType::Integer: os << "SolutionType::Integer"; break;default: os << "SolutionType.<invalid>"; break;}return os;}std::ostream & mosek::fusion::operator<<(std::ostream & os,mosek::fusion::ProblemStatus val){switch (val){case ProblemStatus::Unknown: os << "ProblemStatus::Unknown"; break;case ProblemStatus::PrimalAndDualFeasible: os << "ProblemStatus::PrimalAndDualFeasible"; break;case ProblemStatus::PrimalFeasible: os << "ProblemStatus::PrimalFeasible"; break;case ProblemStatus::DualFeasible: os << "ProblemStatus::DualFeasible"; break;case ProblemStatus::PrimalInfeasible: os << "ProblemStatus::PrimalInfeasible"; break;case ProblemStatus::DualInfeasible: os << "ProblemStatus::DualInfeasible"; break;case ProblemStatus::PrimalAndDualInfeasible: os << "ProblemStatus::PrimalAndDualInfeasible"; break;case ProblemStatus::IllPosed: os << "ProblemStatus::IllPosed"; break;case ProblemStatus::PrimalInfeasibleOrUnbounded: os << "ProblemStatus::PrimalInfeasibleOrUnbounded"; break;default: os << "ProblemStatus.<invalid>"; break;}return os;}std::ostream & mosek::fusion::operator<<(std::ostream & os,mosek::fusion::AccSolutionStatus val){switch (val){case AccSolutionStatus::Anything: os << "AccSolutionStatus::Anything"; break;case AccSolutionStatus::Optimal: os << "AccSolutionStatus::Optimal"; break;case AccSolutionStatus::NearOptimal: os << "AccSolutionStatus::NearOptimal"; break;case AccSolutionStatus::Feasible: os << "AccSolutionStatus::Feasible"; break;case AccSolutionStatus::Certificate: os << "AccSolutionStatus::Certificate"; break;default: os << "AccSolutionStatus.<invalid>"; break;}return os;}std::ostream & mosek::fusion::operator<<(std::ostream & os,mosek::fusion::SolutionStatus val){switch (val){case SolutionStatus::Undefined: os << "SolutionStatus::Undefined"; break;case SolutionStatus::Unknown: os << "SolutionStatus::Unknown"; break;case SolutionStatus::Optimal: os << "SolutionStatus::Optimal"; break;case SolutionStatus::NearOptimal: os << "SolutionStatus::NearOptimal"; break;case SolutionStatus::Feasible: os << "SolutionStatus::Feasible"; break;case SolutionStatus::NearFeasible: os << "SolutionStatus::NearFeasible"; break;case SolutionStatus::Certificate: os << "SolutionStatus::Certificate"; break;case SolutionStatus::NearCertificate: os << "SolutionStatus::NearCertificate"; break;case SolutionStatus::IllposedCert: os << "SolutionStatus::IllposedCert"; break;default: os << "SolutionStatus.<invalid>"; break;}return os;}std::ostream & mosek::fusion::operator<<(std::ostream & os,mosek::fusion::ObjectiveSense val){switch (val){case ObjectiveSense::Undefined: os << "ObjectiveSense::Undefined"; break;case ObjectiveSense::Minimize: os << "ObjectiveSense::Minimize"; break;case ObjectiveSense::Maximize: os << "ObjectiveSense::Maximize"; break;default: os << "ObjectiveSense.<invalid>"; break;}return os;}std::ostream & mosek::fusion::operator<<(std::ostream & os,mosek::fusion::QConeKey val){switch (val){case QConeKey::InQCone: os << "QConeKey::InQCone"; break;case QConeKey::InRotatedQCone: os << "QConeKey::InRotatedQCone"; break;default: os << "QConeKey.<invalid>"; break;}return os;}std::ostream & mosek::fusion::operator<<(std::ostream & os,mosek::fusion::PSDKey val){switch (val){case PSDKey::IsSymPSD: os << "PSDKey::IsSymPSD"; break;case PSDKey::IsTrilPSD: os << "PSDKey::IsTrilPSD"; break;default: os << "PSDKey.<invalid>"; break;}return os;}std::ostream & mosek::fusion::operator<<(std::ostream & os,mosek::fusion::RelationKey val){switch (val){case RelationKey::EqualsTo: os << "RelationKey::EqualsTo"; break;case RelationKey::LessThan: os << "RelationKey::LessThan"; break;case RelationKey::GreaterThan: os << "RelationKey::GreaterThan"; break;case RelationKey::IsFree: os << "RelationKey::IsFree"; break;case RelationKey::InRange: os << "RelationKey::InRange"; break;default: os << "RelationKey.<invalid>"; break;}return os;}mosek::fusion::Sort::Sort(mosek::fusion::p_Sort *_impl) : _impl(_impl) { /*std::cout << "Sort() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::Sort::~Sort() { delete _impl; _impl = nullptr; }mosek::fusion::p_Sort::p_Sort  (::mosek::fusion::Sort * _pubthis) :     _pubthis(_pubthis){}void mosek::fusion::Sort::argTransposeSort  ( std::shared_ptr< monty::ndarray< long long,1 > > _143,    std::shared_ptr< monty::ndarray< long long,1 > > _144,    int _145,    int _146,    int _147,    std::shared_ptr< monty::ndarray< long long,1 > > _148) { mosek::fusion::p_Sort::argTransposeSort(_143,_144,_145,_146,_147,_148); }void mosek::fusion::p_Sort::argTransposeSort( std::shared_ptr< monty::ndarray< long long,1 > > _143,std::shared_ptr< monty::ndarray< long long,1 > > _144,int _145,int _146,int _147,std::shared_ptr< monty::ndarray< long long,1 > > _148){ int _7493 = (int)0; int _7494 = ((_145 * _147) + (int)1); for (int _149 = _7493;_149<_7494;++_149){ (((*_144)(_149)) = (int)0); }int _7495 = (int)0; int _7496 = (int)((_148)->size(0)); for (int _150 = _7495;_150<_7496;++_150){ ( ++ ((*_144)(((((((*_148)(((*_143)(_150)))) / (_146 * _147)) * _147) + (((*_148)(((*_143)(_150)))) % _147)) + (int)1))) ); }int _7497 = (int)0; int _7498 = (_145 * _147); for (int _151 = _7497;_151<_7498;++_151){ (((*_144)((_151 + (int)1))) = (((*_144)((_151 + (int)1))) + ((*_144)(_151)))); }std::shared_ptr< monty::ndarray< long long,1 > > _152 = ([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _7499; for (int _153=(int)0, _7500=(int)((_143)->size(0)); _153 < _7500;++_153)_7499.push_back(((*_143)(_153))); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7499.size()),_7499.begin(),_7499.end())); })(); long long _7501 = (long long)0; long long _7502 = (long long)((_148)->size(0)); for (long long _154 = _7501;_154<_7502;++_154){ long long _155 = (((((*_148)(((*_152)(_154)))) / (_146 * _147)) * _147) + (((*_148)(((*_152)(_154)))) % _147)); (((*_143)(((*_144)(_155)))) = ((*_152)(_154))); ( ++ ((*_144)(_155)) ); }}void mosek::fusion::Sort::argsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _156,    std::shared_ptr< monty::ndarray< long long,1 > > _157) { mosek::fusion::p_Sort::argsort(_156,_157); }void mosek::fusion::p_Sort::argsort( std::shared_ptr< monty::ndarray< long long,1 > > _156,std::shared_ptr< monty::ndarray< long long,1 > > _157){ ::mosek::fusion::p_Sort::argsort(_156,_157,(long long)((int)0),(long long)((int)((_156)->size(0))),false); }void mosek::fusion::Sort::argsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _158,    std::shared_ptr< monty::ndarray< int,1 > > _159) { mosek::fusion::p_Sort::argsort(_158,_159); }void mosek::fusion::p_Sort::argsort( std::shared_ptr< monty::ndarray< long long,1 > > _158,std::shared_ptr< monty::ndarray< int,1 > > _159){ ::mosek::fusion::p_Sort::argsort(_158,_159,(long long)((int)0),(long long)((int)((_158)->size(0))),false); }void mosek::fusion::Sort::argsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _160,    std::shared_ptr< monty::ndarray< long long,1 > > _161,    std::shared_ptr< monty::ndarray< long long,1 > > _162) { mosek::fusion::p_Sort::argsort(_160,_161,_162); }void mosek::fusion::p_Sort::argsort( std::shared_ptr< monty::ndarray< long long,1 > > _160,std::shared_ptr< monty::ndarray< long long,1 > > _161,std::shared_ptr< monty::ndarray< long long,1 > > _162){ ::mosek::fusion::p_Sort::argsort(_160,_161,_162,(long long)((int)0),(long long)((int)((_160)->size(0))),false); }void mosek::fusion::Sort::argsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _163,    std::shared_ptr< monty::ndarray< int,1 > > _164,    std::shared_ptr< monty::ndarray< int,1 > > _165) { mosek::fusion::p_Sort::argsort(_163,_164,_165); }void mosek::fusion::p_Sort::argsort( std::shared_ptr< monty::ndarray< long long,1 > > _163,std::shared_ptr< monty::ndarray< int,1 > > _164,std::shared_ptr< monty::ndarray< int,1 > > _165){ ::mosek::fusion::p_Sort::argsort(_163,_164,_165,(long long)((int)0),(long long)((int)((_163)->size(0))),false); }void mosek::fusion::Sort::argsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _166,    std::shared_ptr< monty::ndarray< long long,1 > > _167,    long long _168,    long long _169) { mosek::fusion::p_Sort::argsort(_166,_167,_168,_169); }void mosek::fusion::p_Sort::argsort( std::shared_ptr< monty::ndarray< long long,1 > > _166,std::shared_ptr< monty::ndarray< long long,1 > > _167,long long _168,long long _169){ ::mosek::fusion::p_Sort::argsort(_166,_167,_168,_169,false); }void mosek::fusion::Sort::argsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _170,    std::shared_ptr< monty::ndarray< int,1 > > _171,    long long _172,    long long _173) { mosek::fusion::p_Sort::argsort(_170,_171,_172,_173); }void mosek::fusion::p_Sort::argsort( std::shared_ptr< monty::ndarray< long long,1 > > _170,std::shared_ptr< monty::ndarray< int,1 > > _171,long long _172,long long _173){ ::mosek::fusion::p_Sort::argsort(_170,_171,_172,_173,false); }void mosek::fusion::Sort::argsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _174,    std::shared_ptr< monty::ndarray< long long,1 > > _175,    std::shared_ptr< monty::ndarray< long long,1 > > _176,    long long _177,    long long _178) { mosek::fusion::p_Sort::argsort(_174,_175,_176,_177,_178); }void mosek::fusion::p_Sort::argsort( std::shared_ptr< monty::ndarray< long long,1 > > _174,std::shared_ptr< monty::ndarray< long long,1 > > _175,std::shared_ptr< monty::ndarray< long long,1 > > _176,long long _177,long long _178){ ::mosek::fusion::p_Sort::argsort(_174,_175,_176,_177,_178,false); }void mosek::fusion::Sort::argsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _179,    std::shared_ptr< monty::ndarray< int,1 > > _180,    std::shared_ptr< monty::ndarray< int,1 > > _181,    long long _182,    long long _183) { mosek::fusion::p_Sort::argsort(_179,_180,_181,_182,_183); }void mosek::fusion::p_Sort::argsort( std::shared_ptr< monty::ndarray< long long,1 > > _179,std::shared_ptr< monty::ndarray< int,1 > > _180,std::shared_ptr< monty::ndarray< int,1 > > _181,long long _182,long long _183){ ::mosek::fusion::p_Sort::argsort(_179,_180,_181,_182,_183,false); }void mosek::fusion::Sort::argsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _184,    std::shared_ptr< monty::ndarray< long long,1 > > _185,    long long _186,    long long _187,    bool _188) { mosek::fusion::p_Sort::argsort(_184,_185,_186,_187,_188); }void mosek::fusion::p_Sort::argsort( std::shared_ptr< monty::ndarray< long long,1 > > _184,std::shared_ptr< monty::ndarray< long long,1 > > _185,long long _186,long long _187,bool _188){ if (((! _188) || ((_187 - _186) < (int)16))){ ::mosek::fusion::Utils::Tools::argsort(_184,_185,_186,_187); }else if ((! ::mosek::fusion::p_Sort::issorted(_184,_185,_186,_187,_188))){ std::shared_ptr< monty::ndarray< long long,1 > > _189 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)4))); int _190 = (int)2; ::mosek::fusion::p_Sort::getminmax(_184,_185,nullptr,_186,_187,_189); if (((((*_189)((int)1)) - ((*_189)((int)0))) < (_190 * (_187 - _186)))){ ::mosek::fusion::p_Sort::argbucketsort(_184,_185,_186,_187,((*_189)((int)0)),((*_189)((int)1))); }else { ::mosek::fusion::Utils::Tools::argsort(_184,_185,_186,_187); }}else {}}void mosek::fusion::Sort::argsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _191,    std::shared_ptr< monty::ndarray< int,1 > > _192,    long long _193,    long long _194,    bool _195) { mosek::fusion::p_Sort::argsort(_191,_192,_193,_194,_195); }void mosek::fusion::p_Sort::argsort( std::shared_ptr< monty::ndarray< long long,1 > > _191,std::shared_ptr< monty::ndarray< int,1 > > _192,long long _193,long long _194,bool _195){ if (((! _195) || ((_194 - _193) < (int)16))){ ::mosek::fusion::Utils::Tools::argsort(_191,_192,_193,_194); }else if ((! ::mosek::fusion::p_Sort::issorted(_191,_192,_193,_194,_195))){ std::shared_ptr< monty::ndarray< int,1 > > _196 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)4))); int _197 = (int)2; ::mosek::fusion::p_Sort::getminmax(_191,_192,nullptr,_193,_194,_196); if (((((*_196)((int)1)) - ((*_196)((int)0))) < (_197 * (_194 - _193)))){ ::mosek::fusion::p_Sort::argbucketsort(_191,_192,_193,_194,((*_196)((int)0)),((*_196)((int)1))); }else { ::mosek::fusion::Utils::Tools::argsort(_191,_192,_193,_194); }}else {}}void mosek::fusion::Sort::argsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _198,    std::shared_ptr< monty::ndarray< long long,1 > > _199,    std::shared_ptr< monty::ndarray< long long,1 > > _200,    long long _201,    long long _202,    bool _203) { mosek::fusion::p_Sort::argsort(_198,_199,_200,_201,_202,_203); }void mosek::fusion::p_Sort::argsort( std::shared_ptr< monty::ndarray< long long,1 > > _198,std::shared_ptr< monty::ndarray< long long,1 > > _199,std::shared_ptr< monty::ndarray< long long,1 > > _200,long long _201,long long _202,bool _203){ if (((! _203) || ((_202 - _201) < (int)16))){ ::mosek::fusion::Utils::Tools::argsort(_198,_199,_200,_201,_202); }else if ((! ::mosek::fusion::p_Sort::issorted(_198,_199,_200,_201,_202,_203))){ std::shared_ptr< monty::ndarray< long long,1 > > _204 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)4))); int _205 = (int)2; ::mosek::fusion::p_Sort::getminmax(_198,_199,_200,_201,_202,_204); if ((((((*_204)((int)1)) - ((*_204)((int)0))) < (_205 * (_202 - _201))) && ((((*_204)((int)3)) - ((*_204)((int)2))) < (_205 * (_202 - _201))))){ ::mosek::fusion::p_Sort::argbucketsort(_198,_200,_201,_202,((*_204)((int)2)),((*_204)((int)3))); ::mosek::fusion::p_Sort::argbucketsort(_198,_199,_201,_202,((*_204)((int)0)),((*_204)((int)1))); }else { ::mosek::fusion::Utils::Tools::argsort(_198,_199,_200,_201,_202); }}else {}}void mosek::fusion::Sort::argsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _206,    std::shared_ptr< monty::ndarray< int,1 > > _207,    std::shared_ptr< monty::ndarray< int,1 > > _208,    long long _209,    long long _210,    bool _211) { mosek::fusion::p_Sort::argsort(_206,_207,_208,_209,_210,_211); }void mosek::fusion::p_Sort::argsort( std::shared_ptr< monty::ndarray< long long,1 > > _206,std::shared_ptr< monty::ndarray< int,1 > > _207,std::shared_ptr< monty::ndarray< int,1 > > _208,long long _209,long long _210,bool _211){ if (((! _211) || ((_210 - _209) < (int)16))){ ::mosek::fusion::Utils::Tools::argsort(_206,_207,_208,_209,_210); }else if ((! ::mosek::fusion::p_Sort::issorted(_206,_207,_208,_209,_210,_211))){ std::shared_ptr< monty::ndarray< int,1 > > _212 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)4))); int _213 = (int)2; ::mosek::fusion::p_Sort::getminmax(_206,_207,_208,_209,_210,_212); if ((((((*_212)((int)1)) - ((*_212)((int)0))) < (_213 * (_210 - _209))) && ((((*_212)((int)3)) - ((*_212)((int)2))) < (_213 * (_210 - _209))))){ ::mosek::fusion::p_Sort::argbucketsort(_206,_208,_209,_210,((*_212)((int)2)),((*_212)((int)3))); ::mosek::fusion::p_Sort::argbucketsort(_206,_207,_209,_210,((*_212)((int)0)),((*_212)((int)1))); }else { ::mosek::fusion::Utils::Tools::argsort(_206,_207,_208,_209,_210); }}else {}}void mosek::fusion::Sort::argbucketsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _214,    std::shared_ptr< monty::ndarray< long long,1 > > _215,    long long _216,    long long _217,    long long _218,    long long _219) { mosek::fusion::p_Sort::argbucketsort(_214,_215,_216,_217,_218,_219); }void mosek::fusion::p_Sort::argbucketsort( std::shared_ptr< monty::ndarray< long long,1 > > _214,std::shared_ptr< monty::ndarray< long long,1 > > _215,long long _216,long long _217,long long _218,long long _219){ ::mosek::fusion::Utils::Tools::bucketsort(_214,_216,_217,_215,_218,_219); }void mosek::fusion::Sort::argbucketsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _220,    std::shared_ptr< monty::ndarray< int,1 > > _221,    long long _222,    long long _223,    int _224,    int _225) { mosek::fusion::p_Sort::argbucketsort(_220,_221,_222,_223,_224,_225); }void mosek::fusion::p_Sort::argbucketsort( std::shared_ptr< monty::ndarray< long long,1 > > _220,std::shared_ptr< monty::ndarray< int,1 > > _221,long long _222,long long _223,int _224,int _225){ ::mosek::fusion::Utils::Tools::bucketsort(_220,_222,_223,_221,_224,_225); }void mosek::fusion::Sort::getminmax  ( std::shared_ptr< monty::ndarray< long long,1 > > _226,    std::shared_ptr< monty::ndarray< long long,1 > > _227,    std::shared_ptr< monty::ndarray< long long,1 > > _228,    long long _229,    long long _230,    std::shared_ptr< monty::ndarray< long long,1 > > _231) { mosek::fusion::p_Sort::getminmax(_226,_227,_228,_229,_230,_231); }void mosek::fusion::p_Sort::getminmax( std::shared_ptr< monty::ndarray< long long,1 > > _226,std::shared_ptr< monty::ndarray< long long,1 > > _227,std::shared_ptr< monty::ndarray< long long,1 > > _228,long long _229,long long _230,std::shared_ptr< monty::ndarray< long long,1 > > _231){ (((*_231)((int)0)) = ((*_227)(((*_226)(_229))))); (((*_231)((int)1)) = ((*_227)(((*_226)(_229))))); long long _7503 = (_229 + (int)1); long long _7504 = _230; for (long long _232 = _7503;_232<_7504;++_232){ if ((((*_231)((int)0)) > ((*_227)(((*_226)(_232)))))){ (((*_231)((int)0)) = ((*_227)(((*_226)(_232))))); }else {}if ((((*_231)((int)1)) < ((*_227)(((*_226)(_232)))))){ (((*_231)((int)1)) = ((*_227)(((*_226)(_232))))); }else {}}if (_228){ (((*_231)((int)2)) = ((*_228)(((*_226)(_229))))); (((*_231)((int)3)) = ((*_228)(((*_226)(_229))))); long long _7505 = (_229 + (int)1); long long _7506 = _230; for (long long _233 = _7505;_233<_7506;++_233){ if ((((*_231)((int)2)) > ((*_228)(((*_226)(_233)))))){ (((*_231)((int)2)) = ((*_228)(((*_226)(_233))))); }else {}if ((((*_231)((int)3)) < ((*_228)(((*_226)(_233)))))){ (((*_231)((int)3)) = ((*_228)(((*_226)(_233))))); }else {}}}else {}}void mosek::fusion::Sort::getminmax  ( std::shared_ptr< monty::ndarray< long long,1 > > _234,    std::shared_ptr< monty::ndarray< int,1 > > _235,    std::shared_ptr< monty::ndarray< int,1 > > _236,    long long _237,    long long _238,    std::shared_ptr< monty::ndarray< int,1 > > _239) { mosek::fusion::p_Sort::getminmax(_234,_235,_236,_237,_238,_239); }void mosek::fusion::p_Sort::getminmax( std::shared_ptr< monty::ndarray< long long,1 > > _234,std::shared_ptr< monty::ndarray< int,1 > > _235,std::shared_ptr< monty::ndarray< int,1 > > _236,long long _237,long long _238,std::shared_ptr< monty::ndarray< int,1 > > _239){ (((*_239)((int)0)) = ((*_235)(((*_234)(_237))))); (((*_239)((int)1)) = ((*_235)(((*_234)(_237))))); long long _7507 = (_237 + (int)1); long long _7508 = _238; for (long long _240 = _7507;_240<_7508;++_240){ if ((((*_239)((int)0)) > ((*_235)(((*_234)(_240)))))){ (((*_239)((int)0)) = ((*_235)(((*_234)(_240))))); }else {}if ((((*_239)((int)1)) < ((*_235)(((*_234)(_240)))))){ (((*_239)((int)1)) = ((*_235)(((*_234)(_240))))); }else {}}if (_236){ (((*_239)((int)2)) = ((*_236)(((*_234)(_237))))); (((*_239)((int)3)) = ((*_236)(((*_234)(_237))))); long long _7509 = (_237 + (int)1); long long _7510 = _238; for (long long _241 = _7509;_241<_7510;++_241){ if ((((*_239)((int)2)) > ((*_236)(((*_234)(_241)))))){ (((*_239)((int)2)) = ((*_236)(((*_234)(_241))))); }else {}if ((((*_239)((int)3)) < ((*_236)(((*_234)(_241)))))){ (((*_239)((int)3)) = ((*_236)(((*_234)(_241))))); }else {}}}else {}}bool mosek::fusion::Sort::issorted  ( std::shared_ptr< monty::ndarray< long long,1 > > _242,    std::shared_ptr< monty::ndarray< long long,1 > > _243,    long long _244,    long long _245,    bool _246) { return mosek::fusion::p_Sort::issorted(_242,_243,_244,_245,_246); }bool mosek::fusion::p_Sort::issorted( std::shared_ptr< monty::ndarray< long long,1 > > _242,std::shared_ptr< monty::ndarray< long long,1 > > _243,long long _244,long long _245,bool _246){ long long _7511 = _244; long long _7512 = (_245 - (int)1); for (long long _247 = _7511;_247<_7512;++_247){ if ((((*_243)(((*_242)(_247)))) > ((*_243)(((*_242)((_247 + (int)1))))))){ return false; }else {}}return true; }bool mosek::fusion::Sort::issorted  ( std::shared_ptr< monty::ndarray< long long,1 > > _248,    std::shared_ptr< monty::ndarray< int,1 > > _249,    long long _250,    long long _251,    bool _252) { return mosek::fusion::p_Sort::issorted(_248,_249,_250,_251,_252); }bool mosek::fusion::p_Sort::issorted( std::shared_ptr< monty::ndarray< long long,1 > > _248,std::shared_ptr< monty::ndarray< int,1 > > _249,long long _250,long long _251,bool _252){ long long _7513 = _250; long long _7514 = (_251 - (int)1); for (long long _253 = _7513;_253<_7514;++_253){ if ((((*_249)(((*_248)(_253)))) > ((*_249)(((*_248)((_253 + (int)1))))))){ return false; }else {}}return true; }bool mosek::fusion::Sort::issorted  ( std::shared_ptr< monty::ndarray< long long,1 > > _254,    std::shared_ptr< monty::ndarray< long long,1 > > _255,    std::shared_ptr< monty::ndarray< long long,1 > > _256,    long long _257,    long long _258,    bool _259) { return mosek::fusion::p_Sort::issorted(_254,_255,_256,_257,_258,_259); }bool mosek::fusion::p_Sort::issorted( std::shared_ptr< monty::ndarray< long long,1 > > _254,std::shared_ptr< monty::ndarray< long long,1 > > _255,std::shared_ptr< monty::ndarray< long long,1 > > _256,long long _257,long long _258,bool _259){ long long _7515 = _257; long long _7516 = (_258 - (int)1); for (long long _260 = _7515;_260<_7516;++_260){ if (((((*_255)(((*_254)(_260)))) > ((*_255)(((*_254)((_260 + (int)1)))))) || ((((*_255)(((*_254)((_260 + (int)1))))) == ((*_255)(((*_254)(_260))))) && (((*_256)(((*_254)(_260)))) > ((*_256)(((*_254)((_260 + (int)1))))))))){ return false; }else {}}return true; }bool mosek::fusion::Sort::issorted  ( std::shared_ptr< monty::ndarray< long long,1 > > _261,    std::shared_ptr< monty::ndarray< int,1 > > _262,    std::shared_ptr< monty::ndarray< int,1 > > _263,    long long _264,    long long _265,    bool _266) { return mosek::fusion::p_Sort::issorted(_261,_262,_263,_264,_265,_266); }bool mosek::fusion::p_Sort::issorted( std::shared_ptr< monty::ndarray< long long,1 > > _261,std::shared_ptr< monty::ndarray< int,1 > > _262,std::shared_ptr< monty::ndarray< int,1 > > _263,long long _264,long long _265,bool _266){ long long _7517 = _264; long long _7518 = (_265 - (int)1); for (long long _267 = _7517;_267<_7518;++_267){ if (((((*_262)(((*_261)(_267)))) > ((*_262)(((*_261)((_267 + (int)1)))))) || ((((*_262)(((*_261)(_267)))) == ((*_262)(((*_261)((_267 + (int)1)))))) && (((*_263)(((*_261)(_267)))) > ((*_263)(((*_261)((_267 + (int)1))))))))){ return false; }else {}}return true; }void mosek::fusion::p_Sort::destroy(){}void mosek::fusion::Sort::destroy() { mosek::fusion::p_Sort::_get_impl(this)->destroy(); }mosek::fusion::IndexCounter::IndexCounter(mosek::fusion::p_IndexCounter *_impl) : _impl(_impl) { /*std::cout << "IndexCounter() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::IndexCounter::~IndexCounter() { delete _impl; _impl = nullptr; }mosek::fusion::p_IndexCounter::p_IndexCounter  (::mosek::fusion::IndexCounter * _pubthis) :     _pubthis(_pubthis){}mosek::fusion::IndexCounter::t mosek::fusion::p_IndexCounter::_new_IndexCounter  (monty::rc_ptr< ::mosek::fusion::Set > _268){ return new mosek::fusion::IndexCounter(_268); }mosek::fusion::IndexCounter::IndexCounter  (monty::rc_ptr< ::mosek::fusion::Set > _268) :    IndexCounter(new mosek::fusion::p_IndexCounter(this)){ mosek::fusion::p_IndexCounter::_get_impl(this)->_initialize(_268); }void mosek::fusion::p_IndexCounter::_initialize  (monty::rc_ptr< ::mosek::fusion::Set > _268){monty::rc_reserve __reserve_this(_pubthis); { { (n = mosek::fusion::p_Set::_get_impl(_268)->nd); (ii = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(n)))); (st = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(n)))); (start = (long long)0); (strides = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(n)))); int _7519 = (int)0; int _7520 = n; for (int _269 = _7519;_269<_7520;++_269){ (((*strides)(_269)) = _268->stride(_269)); }(dims = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(n)))); int _7521 = (int)0; int _7522 = n; for (int _270 = _7521;_270<_7522;++_270){ (((*dims)(_270)) = _268->dim(_270)); }}}}mosek::fusion::IndexCounter::t mosek::fusion::p_IndexCounter::_new_IndexCounter  (long long _271,    std::shared_ptr< monty::ndarray< int,1 > > _272,    monty::rc_ptr< ::mosek::fusion::Set > _273){ return new mosek::fusion::IndexCounter(_271,_272,_273); }mosek::fusion::IndexCounter::IndexCounter  (long long _271,    std::shared_ptr< monty::ndarray< int,1 > > _272,    monty::rc_ptr< ::mosek::fusion::Set > _273) :    IndexCounter(new mosek::fusion::p_IndexCounter(this)){ mosek::fusion::p_IndexCounter::_get_impl(this)->_initialize(_271,_272,_273); }void mosek::fusion::p_IndexCounter::_initialize  (long long _271,    std::shared_ptr< monty::ndarray< int,1 > > _272,    monty::rc_ptr< ::mosek::fusion::Set > _273){monty::rc_reserve __reserve_this(_pubthis); { { (n = (int)((_272)->size(0))); (ii = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(n)))); (st = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(n)))); int _7523 = (int)0; int _7524 = n; for (int _274 = _7523;_274<_7524;++_274){ (((*st)(_274)) = _271); }(strides = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(n)))); int _7525 = (int)0; int _7526 = n; for (int _275 = _7525;_275<_7526;++_275){ (((*strides)(_275)) = _273->stride(_275)); }(dims = _272); (start = _271); }}}mosek::fusion::IndexCounter::t mosek::fusion::p_IndexCounter::_new_IndexCounter  (long long _276,    std::shared_ptr< monty::ndarray< int,1 > > _277,    std::shared_ptr< monty::ndarray< long long,1 > > _278){ return new mosek::fusion::IndexCounter(_276,_277,_278); }mosek::fusion::IndexCounter::IndexCounter  (long long _276,    std::shared_ptr< monty::ndarray< int,1 > > _277,    std::shared_ptr< monty::ndarray< long long,1 > > _278) :    IndexCounter(new mosek::fusion::p_IndexCounter(this)){ mosek::fusion::p_IndexCounter::_get_impl(this)->_initialize(_276,_277,_278); }void mosek::fusion::p_IndexCounter::_initialize  (long long _276,    std::shared_ptr< monty::ndarray< int,1 > > _277,    std::shared_ptr< monty::ndarray< long long,1 > > _278){monty::rc_reserve __reserve_this(_pubthis); { { (n = (int)((_277)->size(0))); (ii = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(n)))); (st = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(n)))); int _7527 = (int)0; int _7528 = n; for (int _279 = _7527;_279<_7528;++_279){ (((*st)(_279)) = _276); }(strides = _278); (dims = _277); (start = _276); }}}bool mosek::fusion::IndexCounter::atEnd  ( ) { return mosek::fusion::p_IndexCounter::_get_impl(this)->atEnd(); }bool mosek::fusion::p_IndexCounter::atEnd( ){ return (((*ii)((n - (int)1))) >= ((*dims)((n - (int)1)))); }std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::IndexCounter::getIndex  ( ) { return mosek::fusion::p_IndexCounter::_get_impl(this)->getIndex(); }std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_IndexCounter::getIndex( ){ return ii; }long long mosek::fusion::IndexCounter::next  ( ) { return mosek::fusion::p_IndexCounter::_get_impl(this)->next(); }long long mosek::fusion::p_IndexCounter::next( ){ long long _280 = _pubthis->get(); _pubthis->inc(); return _280; }long long mosek::fusion::IndexCounter::get  ( ) { return mosek::fusion::p_IndexCounter::_get_impl(this)->get(); }long long mosek::fusion::p_IndexCounter::get( ){ return ((*st)((int)0)); }void mosek::fusion::IndexCounter::inc  ( ) { mosek::fusion::p_IndexCounter::_get_impl(this)->inc(); }void mosek::fusion::p_IndexCounter::inc( ){ ( ++ ((*ii)((int)0)) ); (((*st)((int)0)) = (((*st)((int)0)) + ((*strides)((n - (int)1))))); int _281; { (_281 = (int)0); for (;((_281 < (n - (int)1)) && (((*ii)(_281)) == ((*dims)(((n - _281) - (int)1)))));( ++ _281 )){ (((*ii)(_281)) = (int)0); ( ++ ((*ii)((_281 + (int)1))) ); (((*st)((_281 + (int)1))) = (((*st)((_281 + (int)1))) + ((*strides)(((n - _281) - (int)2))))); }}int _7529 = (int)0; int _7530 = _281; for (int _282 = _7529;_282<_7530;++_282){ (((*st)(_282)) = ((*st)(_281))); }}void mosek::fusion::IndexCounter::reset  ( ) { mosek::fusion::p_IndexCounter::_get_impl(this)->reset(); }void mosek::fusion::p_IndexCounter::reset( ){ (st = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(n)))); int _7531 = (int)0; int _7532 = n; for (int _283 = _7531;_283<_7532;++_283){ (((*st)(_283)) = start); }}void mosek::fusion::p_IndexCounter::destroy(){dims.reset();strides.reset();st.reset();ii.reset();}void mosek::fusion::IndexCounter::destroy() { mosek::fusion::p_IndexCounter::_get_impl(this)->destroy(); }mosek::fusion::CommonTools::CommonTools(mosek::fusion::p_CommonTools *_impl) : _impl(_impl) { /*std::cout << "CommonTools() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::CommonTools::~CommonTools() { delete _impl; _impl = nullptr; }mosek::fusion::p_CommonTools::p_CommonTools  (::mosek::fusion::CommonTools * _pubthis) :     _pubthis(_pubthis){}void mosek::fusion::CommonTools::ndIncr  ( std::shared_ptr< monty::ndarray< int,1 > > _284,    std::shared_ptr< monty::ndarray< int,1 > > _285,    std::shared_ptr< monty::ndarray< int,1 > > _286) { mosek::fusion::p_CommonTools::ndIncr(_284,_285,_286); }void mosek::fusion::p_CommonTools::ndIncr( std::shared_ptr< monty::ndarray< int,1 > > _284,std::shared_ptr< monty::ndarray< int,1 > > _285,std::shared_ptr< monty::ndarray< int,1 > > _286){ int _287 = ((int)((_284)->size(0)) - (int)1); ( ++ ((*_284)(_287)) ); while (((_287 > (int)0) && (((*_284)(_287)) >= ((*_286)(_287))))) { (((*_284)(_287)) = ((*_285)(_287))); ( ++ ((*_284)((_287 - (int)1))) ); }}void mosek::fusion::CommonTools::transposeTriplets  ( std::shared_ptr< monty::ndarray< int,1 > > _288,    std::shared_ptr< monty::ndarray< int,1 > > _289,    std::shared_ptr< monty::ndarray< double,1 > > _290,    std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< long long,1 > >,1 > > _291,    std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< long long,1 > >,1 > > _292,    std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > _293,    long long _294,    int _295,    int _296) { mosek::fusion::p_CommonTools::transposeTriplets(_288,_289,_290,_291,_292,_293,_294,_295,_296); }void mosek::fusion::p_CommonTools::transposeTriplets( std::shared_ptr< monty::ndarray< int,1 > > _288,std::shared_ptr< monty::ndarray< int,1 > > _289,std::shared_ptr< monty::ndarray< double,1 > > _290,std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< long long,1 > >,1 > > _291,std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< long long,1 > >,1 > > _292,std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > _293,long long _294,int _295,int _296){ std::shared_ptr< monty::ndarray< long long,1 > > _297 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((_295 + (int)2)))); std::shared_ptr< monty::ndarray< long long,1 > > _298 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((_296 + (int)2)))); { long long _299 = (long long)0; for (;(_299 < _294);( ++ _299 )){ (((*_298)((((*_289)(_299)) + (int)2))) = (((*_298)((((*_289)(_299)) + (int)2))) + (int)1)); (((*_297)((((*_288)(_299)) + (int)2))) = (((*_297)((((*_288)(_299)) + (int)2))) + (int)1)); }}{ int _300 = (int)1; for (;(_300 < _295);( ++ _300 )){ (((*_297)((_300 + (int)1))) = (((*_297)((_300 + (int)1))) + ((*_297)(_300)))); }}{ int _301 = (int)1; for (;(_301 < _296);( ++ _301 )){ (((*_298)((_301 + (int)1))) = (((*_298)((_301 + (int)1))) + ((*_298)(_301)))); }}std::shared_ptr< monty::ndarray< long long,1 > > _302 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_294))); std::shared_ptr< monty::ndarray< long long,1 > > _303 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_294))); std::shared_ptr< monty::ndarray< double,1 > > _304 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_294))); int _7533 = (int)0; int _7534 = _295; for (int _305 = _7533;_305<_7534;++_305){ { long long _306 = ((*_297)(_305)); for (;(_306 < ((*_297)((_305 + (int)1))));( ++ _306 )){ int _307 = ((*_289)(_306)); long long _308 = ((*_298)(_307)); (((*_302)(_308)) = _305); (((*_303)(_308)) = _307); (((*_304)(_308)) = ((*_290)(_306))); (((*_298)(_307)) = (_308 + (int)1)); }}}(((*_291)((int)0)) = _303); (((*_292)((int)0)) = _302); (((*_293)((int)0)) = _304); }void mosek::fusion::CommonTools::transposeTriplets  ( std::shared_ptr< monty::ndarray< int,1 > > _309,    std::shared_ptr< monty::ndarray< int,1 > > _310,    std::shared_ptr< monty::ndarray< double,1 > > _311,    std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > > _312,    std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > > _313,    std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > _314,    long long _315,    int _316,    int _317) { mosek::fusion::p_CommonTools::transposeTriplets(_309,_310,_311,_312,_313,_314,_315,_316,_317); }void mosek::fusion::p_CommonTools::transposeTriplets( std::shared_ptr< monty::ndarray< int,1 > > _309,std::shared_ptr< monty::ndarray< int,1 > > _310,std::shared_ptr< monty::ndarray< double,1 > > _311,std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > > _312,std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > > _313,std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > _314,long long _315,int _316,int _317){ std::shared_ptr< monty::ndarray< long long,1 > > _318 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((_316 + (int)2)))); std::shared_ptr< monty::ndarray< long long,1 > > _319 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((_317 + (int)2)))); { long long _320 = (long long)0; for (;(_320 < _315);( ++ _320 )){ (((*_319)((((*_310)(_320)) + (int)2))) = (((*_319)((((*_310)(_320)) + (int)2))) + (int)1)); (((*_318)((((*_309)(_320)) + (int)2))) = (((*_318)((((*_309)(_320)) + (int)2))) + (int)1)); }}{ int _321 = (int)1; for (;(_321 < _316);( ++ _321 )){ (((*_318)((_321 + (int)1))) = (((*_318)((_321 + (int)1))) + ((*_318)(_321)))); }}{ int _322 = (int)1; for (;(_322 < _317);( ++ _322 )){ (((*_319)((_322 + (int)1))) = (((*_319)((_322 + (int)1))) + ((*_319)(_322)))); }}std::shared_ptr< monty::ndarray< int,1 > > _323 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_315))); std::shared_ptr< monty::ndarray< int,1 > > _324 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_315))); std::shared_ptr< monty::ndarray< double,1 > > _325 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_315))); { int _326 = (int)0; for (;(_326 < _316);( ++ _326 )){ long long _7535 = ((*_318)(_326)); long long _7536 = ((*_318)((_326 + (int)1))); for (long long _327 = _7535;_327<_7536;++_327){ int _328 = ((*_310)(_327)); long long _329 = ((*_319)(_328)); (((*_323)(_329)) = _326); (((*_324)(_329)) = _328); (((*_325)(_329)) = ((*_311)(_327))); (((*_319)(_328)) = (_329 + (int)1)); }}}(((*_312)((int)0)) = _324); (((*_313)((int)0)) = _323); (((*_314)((int)0)) = _325); }void mosek::fusion::CommonTools::tripletSort  ( std::shared_ptr< monty::ndarray< int,1 > > _330,    std::shared_ptr< monty::ndarray< int,1 > > _331,    std::shared_ptr< monty::ndarray< double,1 > > _332,    std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > > _333,    std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > > _334,    std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > _335,    long long _336,    int _337,    int _338) { mosek::fusion::p_CommonTools::tripletSort(_330,_331,_332,_333,_334,_335,_336,_337,_338); }void mosek::fusion::p_CommonTools::tripletSort( std::shared_ptr< monty::ndarray< int,1 > > _330,std::shared_ptr< monty::ndarray< int,1 > > _331,std::shared_ptr< monty::ndarray< double,1 > > _332,std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > > _333,std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > > _334,std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > _335,long long _336,int _337,int _338){ std::shared_ptr< monty::ndarray< int,1 > > _339 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_336))); std::shared_ptr< monty::ndarray< long long,1 > > _340 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((_338 + (int)2)))); long long _7537 = (long long)0; long long _7538 = _336; for (long long _341 = _7537;_341<_7538;++_341){ (((*_340)((((*_331)(_341)) + (int)2))) = (((*_340)((((*_331)(_341)) + (int)2))) + (int)1)); }int _7539 = (int)1; int _7540 = _338; for (int _342 = _7539;_342<_7540;++_342){ (((*_340)((_342 + (int)1))) = (((*_340)((_342 + (int)1))) + ((*_340)(_342)))); }int _7541 = (int)0; int _7542 = (int)_336; for (int _343 = _7541;_343<_7542;++_343){ int _344 = ((*_331)(_343)); (((*_339)(((*_340)((_344 + (int)1))))) = _343); (((*_340)((_344 + (int)1))) = (((*_340)((_344 + (int)1))) + (int)1)); }std::shared_ptr< monty::ndarray< long long,1 > > _345 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((_337 + (int)2)))); std::shared_ptr< monty::ndarray< int,1 > > _346 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_336))); { int _347 = (int)0; for (;(_347 < _336);( ++ _347 )){ (((*_345)((((*_330)(_347)) + (int)2))) = (((*_345)((((*_330)(_347)) + (int)2))) + (int)1)); }}{ int _348 = (int)1; for (;(_348 < _337);( ++ _348 )){ (((*_345)((_348 + (int)1))) = (((*_345)((_348 + (int)1))) + ((*_345)(_348)))); }}{ int _349 = (int)0; for (;(_349 < _338);( ++ _349 )){ { long long _350 = ((*_340)(_349)); for (;(_350 < ((*_340)((_349 + (int)1))));( ++ _350 )){ int _351 = ((*_330)(((*_339)(_350)))); (((*_346)(((*_345)((_351 + (int)1))))) = ((*_339)(_350))); (((*_345)((_351 + (int)1))) = (((*_345)((_351 + (int)1))) + (int)1)); }}}}int _352 = (int)1; { int _353 = ((*_330)(((*_346)((int)0)))); int _354 = ((*_331)(((*_346)((int)0)))); { int _355 = (int)1; for (;(_355 < _336);( ++ _355 )){ int _356 = ((*_346)(_355)); if (((_353 != ((*_330)(_356))) || (_354 != ((*_331)(_356))))){ (_353 = ((*_330)(_356))); (_354 = ((*_331)(_356))); ( ++ _352 ); }else {}}}}std::shared_ptr< monty::ndarray< int,1 > > _357 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_352))); std::shared_ptr< monty::ndarray< int,1 > > _358 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_352))); std::shared_ptr< monty::ndarray< double,1 > > _359 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_352))); { int _360 = ((*_346)((int)0)); (((*_357)((int)0)) = ((*_330)(_360))); (((*_358)((int)0)) = ((*_331)(_360))); (((*_359)((int)0)) = ((*_332)(_360))); }int _361 = (int)1; int _7543 = (int)1; long long _7544 = _336; for (long long _362 = _7543;_362<_7544;++_362){ int _363 = ((*_346)(_362)); if (((((*_357)((_361 - (int)1))) == ((*_330)(_363))) && (((*_358)((_361 - (int)1))) == ((*_331)(_363))))){ (((*_359)((_361 - (int)1))) = (((*_359)((_361 - (int)1))) + ((*_332)(_363)))); }else { (((*_357)(_361)) = ((*_330)(_363))); (((*_358)(_361)) = ((*_331)(_363))); (((*_359)(_361)) = ((*_332)(_363))); ( ++ _361 ); }}(((*_333)((int)0)) = _357); (((*_334)((int)0)) = _358); (((*_335)((int)0)) = _359); }void mosek::fusion::CommonTools::argMSort  ( std::shared_ptr< monty::ndarray< int,1 > > _364,    std::shared_ptr< monty::ndarray< int,1 > > _365) { mosek::fusion::p_CommonTools::argMSort(_364,_365); }void mosek::fusion::p_CommonTools::argMSort( std::shared_ptr< monty::ndarray< int,1 > > _364,std::shared_ptr< monty::ndarray< int,1 > > _365){ std::shared_ptr< monty::ndarray< int,1 > > _366 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)((_364)->size(0))))); bool _367 = false; { int _368 = (int)1; for (;(_368 < (int)((_364)->size(0)));(_368 *= (int)2)){ (_367 = (! _367)); int _7545 = (int)0; int _7546 = (int)((_364)->size(0)); int _7547 = (_368 * (int)2); for (int _369 = _7545;_369<_7546;_369 += _7547){ if (_367){ ::mosek::fusion::p_CommonTools::mergeInto(_364,_366,_365,_369,(_369 + _368),(_369 + ((int)2 * _368))); }else { ::mosek::fusion::p_CommonTools::mergeInto(_366,_364,_365,_369,(_369 + _368),(_369 + ((int)2 * _368))); }}}}if (_367){ ::mosek::fusion::Utils::Tools::arraycopy(_366,(int)0,_364,(int)0,(int)((_364)->size(0))); }else {}}void mosek::fusion::p_CommonTools::mergeInto( std::shared_ptr< monty::ndarray< int,1 > > _370,std::shared_ptr< monty::ndarray< int,1 > > _371,std::shared_ptr< monty::ndarray< int,1 > > _372,int _373,int _374,int _375){ int _376 = ([&]() -> int { if ( (_375 > (int)((_370)->size(0)))) return ((int)((_370)->size(0))); else return (_375); })(); int _377 = ([&]() -> int { if ( (_374 > _376)) return (_376); else return (_374); })(); if ((_377 == _376)){ ::mosek::fusion::Utils::Tools::arraycopy(_370,_373,_371,_373,(_377 - _373)); }else { int _378 = _373; int _379 = _377; int _380; { (_380 = _373); for (;((_378 < _377) && (_379 < _376));( ++ _380 )){ if ((((*_372)(((*_370)(_378)))) < ((*_372)(((*_370)(_379)))))){ (((*_371)(_380)) = ((*_370)(_378))); ( ++ _378 ); }else { (((*_371)(_380)) = ((*_370)(_379))); ( ++ _379 ); }}}while ((_378 < _377)) { (((*_371)(_380)) = ((*_370)(_378))); ( ++ _378 ); ( ++ _380 ); }while ((_379 < _376)) { (((*_371)(_380)) = ((*_370)(_379))); ( ++ _379 ); ( ++ _380 ); }}}void mosek::fusion::CommonTools::argQsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _381,    std::shared_ptr< monty::ndarray< long long,1 > > _382,    std::shared_ptr< monty::ndarray< long long,1 > > _383,    long long _384,    long long _385) { mosek::fusion::p_CommonTools::argQsort(_381,_382,_383,_384,_385); }void mosek::fusion::p_CommonTools::argQsort( std::shared_ptr< monty::ndarray< long long,1 > > _381,std::shared_ptr< monty::ndarray< long long,1 > > _382,std::shared_ptr< monty::ndarray< long long,1 > > _383,long long _384,long long _385){ if (! _383){ ::mosek::fusion::Utils::Tools::argsort(_381,_382,_384,_385); }else { ::mosek::fusion::Utils::Tools::argsort(_381,_382,_383,_384,_385); }}void mosek::fusion::CommonTools::argQsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _386,    std::shared_ptr< monty::ndarray< int,1 > > _387,    std::shared_ptr< monty::ndarray< int,1 > > _388,    long long _389,    long long _390) { mosek::fusion::p_CommonTools::argQsort(_386,_387,_388,_389,_390); }void mosek::fusion::p_CommonTools::argQsort( std::shared_ptr< monty::ndarray< long long,1 > > _386,std::shared_ptr< monty::ndarray< int,1 > > _387,std::shared_ptr< monty::ndarray< int,1 > > _388,long long _389,long long _390){ if (! _388){ ::mosek::fusion::Utils::Tools::argsort(_386,_387,_389,_390); }else { ::mosek::fusion::Utils::Tools::argsort(_386,_387,_388,_389,_390); }}void mosek::fusion::p_CommonTools::destroy(){}void mosek::fusion::CommonTools::destroy() { mosek::fusion::p_CommonTools::_get_impl(this)->destroy(); }mosek::fusion::SolutionStruct::SolutionStruct(mosek::fusion::p_SolutionStruct *_impl) : _impl(_impl) { /*std::cout << "SolutionStruct() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::SolutionStruct::~SolutionStruct() { delete _impl; _impl = nullptr; }mosek::fusion::p_SolutionStruct::p_SolutionStruct  (::mosek::fusion::SolutionStruct * _pubthis) :     _pubthis(_pubthis){}mosek::fusion::SolutionStruct::t mosek::fusion::p_SolutionStruct::_new_SolutionStruct  (int _391,    int _392,    int _393,    int _394){ return new mosek::fusion::SolutionStruct(_391,_392,_393,_394); }mosek::fusion::SolutionStruct::SolutionStruct  (int _391,    int _392,    int _393,    int _394) :    SolutionStruct(new mosek::fusion::p_SolutionStruct(this)){ mosek::fusion::p_SolutionStruct::_get_impl(this)->_initialize(_391,_392,_393,_394); }void mosek::fusion::p_SolutionStruct::_initialize  (int _391,    int _392,    int _393,    int _394){monty::rc_reserve __reserve_this(_pubthis); { { (pobj = 0.0); (dobj = 0.0); (pstatus = ::mosek::fusion::SolutionStatus::Unknown); (dstatus = ::mosek::fusion::SolutionStatus::Unknown); (probstatus = ::mosek::fusion::ProblemStatus::Unknown); (sol_numvar = _391); (sol_numcon = _392); (sol_numcone = _393); (sol_numbarvar = _394); (slx = nullptr); (sux = nullptr); (xx = nullptr); (slc = nullptr); (suc = nullptr); (y = nullptr); (xc = nullptr); (snx = nullptr); (barx = nullptr); (bars = nullptr); if ((_391 > (int)0)){ (slx = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_391)))); (sux = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_391)))); (xx = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_391)))); }else {}if ((_394 > (int)0)){ (barx = std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > >(new monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 >(monty::shape(_394)))); (bars = std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > >(new monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 >(monty::shape(_394)))); }else {}if ((_392 > (int)0)){ (slc = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_392)))); (suc = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_392)))); (y = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_392)))); (xc = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_392)))); }else {}if ((_393 > (int)0)){ (snx = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_391)))); }else {}}}}mosek::fusion::SolutionStruct::t mosek::fusion::p_SolutionStruct::_new_SolutionStruct  (monty::rc_ptr< ::mosek::fusion::SolutionStruct > _395){ return new mosek::fusion::SolutionStruct(_395); }mosek::fusion::SolutionStruct::SolutionStruct  (monty::rc_ptr< ::mosek::fusion::SolutionStruct > _395) :    SolutionStruct(new mosek::fusion::p_SolutionStruct(this)){ mosek::fusion::p_SolutionStruct::_get_impl(this)->_initialize(_395); }void mosek::fusion::p_SolutionStruct::_initialize  (monty::rc_ptr< ::mosek::fusion::SolutionStruct > _395){monty::rc_reserve __reserve_this(_pubthis); { { (sol_numcon = mosek::fusion::p_SolutionStruct::_get_impl(_395)->sol_numcon); (sol_numvar = mosek::fusion::p_SolutionStruct::_get_impl(_395)->sol_numvar); (sol_numcone = mosek::fusion::p_SolutionStruct::_get_impl(_395)->sol_numcone); (sol_numbarvar = mosek::fusion::p_SolutionStruct::_get_impl(_395)->sol_numbarvar); (pstatus = mosek::fusion::p_SolutionStruct::_get_impl(_395)->pstatus); (dstatus = mosek::fusion::p_SolutionStruct::_get_impl(_395)->dstatus); (probstatus = mosek::fusion::p_SolutionStruct::_get_impl(_395)->probstatus); (pobj = mosek::fusion::p_SolutionStruct::_get_impl(_395)->pobj); (dobj = mosek::fusion::p_SolutionStruct::_get_impl(_395)->dobj); (xc = ([&]() -> std::shared_ptr< monty::ndarray< double,1 > > { if ( mosek::fusion::p_SolutionStruct::_get_impl(_395)->xc) return (::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_395)->xc)); else return (nullptr); })()); (xx = ([&]() -> std::shared_ptr< monty::ndarray< double,1 > > { if ( mosek::fusion::p_SolutionStruct::_get_impl(_395)->xx) return (::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_395)->xx)); else return (nullptr); })()); (slc = ([&]() -> std::shared_ptr< monty::ndarray< double,1 > > { if ( mosek::fusion::p_SolutionStruct::_get_impl(_395)->slc) return (::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_395)->slx)); else return (nullptr); })()); (suc = ([&]() -> std::shared_ptr< monty::ndarray< double,1 > > { if ( mosek::fusion::p_SolutionStruct::_get_impl(_395)->suc) return (::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_395)->sux)); else return (nullptr); })()); (y = ([&]() -> std::shared_ptr< monty::ndarray< double,1 > > { if ( mosek::fusion::p_SolutionStruct::_get_impl(_395)->y) return (::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_395)->y)); else return (nullptr); })()); if (mosek::fusion::p_SolutionStruct::_get_impl(_395)->barx){ (barx = ([=]()->std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > { std::vector< std::shared_ptr< monty::ndarray< double,1 > > > _7548; for (int _396=(int)0, _7549=(int)((mosek::fusion::p_SolutionStruct::_get_impl(_395)->barx)->size(0)); _396 < _7549;++_396)_7548.push_back(::mosek::fusion::Utils::Tools::arraycopy(((*mosek::fusion::p_SolutionStruct::_get_impl(_395)->barx)(_396)))); return std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > >(new monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 >(monty::shape(_7548.size()),_7548.begin(),_7548.end())); })()); }else { (barx = nullptr); }if (mosek::fusion::p_SolutionStruct::_get_impl(_395)->bars){ (bars = ([=]()->std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > { std::vector< std::shared_ptr< monty::ndarray< double,1 > > > _7550; for (int _397=(int)0, _7551=(int)((mosek::fusion::p_SolutionStruct::_get_impl(_395)->bars)->size(0)); _397 < _7551;++_397)_7550.push_back(::mosek::fusion::Utils::Tools::arraycopy(((*mosek::fusion::p_SolutionStruct::_get_impl(_395)->bars)(_397)))); return std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > >(new monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 >(monty::shape(_7550.size()),_7550.begin(),_7550.end())); })()); }else { (bars = nullptr); }(slx = ([&]() -> std::shared_ptr< monty::ndarray< double,1 > > { if ( mosek::fusion::p_SolutionStruct::_get_impl(_395)->slx) return (::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_395)->slx)); else return (nullptr); })()); (sux = ([&]() -> std::shared_ptr< monty::ndarray< double,1 > > { if ( mosek::fusion::p_SolutionStruct::_get_impl(_395)->sux) return (::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_395)->sux)); else return (nullptr); })()); (snx = ([&]() -> std::shared_ptr< monty::ndarray< double,1 > > { if ( mosek::fusion::p_SolutionStruct::_get_impl(_395)->snx) return (::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_395)->snx)); else return (nullptr); })()); }}}monty::rc_ptr< ::mosek::fusion::SolutionStruct > mosek::fusion::SolutionStruct::clone  ( ) { return mosek::fusion::p_SolutionStruct::_get_impl(this)->clone(); }monty::rc_ptr< ::mosek::fusion::SolutionStruct > mosek::fusion::p_SolutionStruct::clone( ){ return ::mosek::fusion::p_SolutionStruct::_new_SolutionStruct(_pubthis); }void mosek::fusion::SolutionStruct::resize  ( int _398,    int _399,    int _400,    int _401) { mosek::fusion::p_SolutionStruct::_get_impl(this)->resize(_398,_399,_400,_401); }void mosek::fusion::p_SolutionStruct::resize( int _398,int _399,int _400,int _401){ if ((_401 < (int)0)){ }else if ((_401 <= sol_numbarvar)){ (sol_numbarvar = _401); }else if ((_398 <= (int)((barx)->size(0)))){ int _7552 = sol_numvar; int _7553 = _398; for (int _402 = _7552;_402<_7553;++_402){ (((*barx)(_402)) = nullptr); (((*bars)(_402)) = nullptr); }}else { int _403; if (((sol_numbarvar * (int)2) > (_401 + (int)100))){ (_403 = (sol_numbarvar * (int)2)); }else { (_403 = (_401 + (int)100)); }std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > _404 = std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > >(new monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 >(monty::shape(_403))); int _7554 = (int)0; int _7555 = (int)((barx)->size(0)); for (int _405 = _7554;_405<_7555;++_405){ (((*_404)(_405)) = ((*barx)(_405))); }(barx = _404); std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > _406 = std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > >(new monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 >(monty::shape(_403))); int _7556 = (int)0; int _7557 = (int)((bars)->size(0)); for (int _407 = _7556;_407<_7557;++_407){ (((*_406)(_407)) = ((*bars)(_407))); }(bars = _406); (sol_numbarvar = _401); }if ((_398 < (int)0)){ }else if ((_398 <= sol_numvar)){ (sol_numvar = _398); }else if ((_398 <= (int)((xx)->size(0)))){ int _7558 = sol_numvar; int _7559 = _398; for (int _408 = _7558;_408<_7559;++_408){ (((*slx)(_408)) = 0.0); (((*sux)(_408)) = 0.0); (((*xx)(_408)) = 0.0); }(sol_numvar = _398); }else { int _409; if (((sol_numvar * (int)2) > (_398 + (int)100))){ (_409 = (sol_numvar * (int)2)); }else { (_409 = (_398 + (int)100)); }std::shared_ptr< monty::ndarray< double,1 > > _410 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_409))); ::mosek::fusion::Utils::Tools::arraycopy(slx,(int)0,_410,(int)0,(int)((slx)->size(0))); (slx = _410); std::shared_ptr< monty::ndarray< double,1 > > _411 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_409))); ::mosek::fusion::Utils::Tools::arraycopy(sux,(int)0,_411,(int)0,(int)((sux)->size(0))); (sux = _411); std::shared_ptr< monty::ndarray< double,1 > > _412 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_409))); ::mosek::fusion::Utils::Tools::arraycopy(xx,(int)0,_412,(int)0,(int)((xx)->size(0))); (xx = _412); { int _413 = sol_numvar; for (;(_413 < _398);( ++ _413 )){ (((*slx)(_413)) = 0.0); (((*sux)(_413)) = 0.0); (((*xx)(_413)) = 0.0); }}(sol_numvar = _398); }if ((_399 < (int)0)){ }else if ((_399 <= sol_numcon)){ (sol_numcon = _399); }else if ((_399 <= (int)((xx)->size(0)))){ int _7560 = sol_numcon; int _7561 = _399; for (int _414 = _7560;_414<_7561;++_414){ (((*slc)(_414)) = 0.0); (((*suc)(_414)) = 0.0); (((*xc)(_414)) = 0.0); (((*y)(_414)) = 0.0); }(sol_numcon = _399); }else { int _415; if (((sol_numcon * (int)2) > (_399 + (int)100))){ (_415 = (sol_numcon * (int)2)); }else { (_415 = (_399 + (int)100)); }std::shared_ptr< monty::ndarray< double,1 > > _416 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_415))); ::mosek::fusion::Utils::Tools::arraycopy(slc,(int)0,_416,(int)0,(int)((slc)->size(0))); (slc = _416); std::shared_ptr< monty::ndarray< double,1 > > _417 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_415))); ::mosek::fusion::Utils::Tools::arraycopy(suc,(int)0,_417,(int)0,(int)((suc)->size(0))); (suc = _417); std::shared_ptr< monty::ndarray< double,1 > > _418 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_415))); ::mosek::fusion::Utils::Tools::arraycopy(xc,(int)0,_418,(int)0,(int)((xc)->size(0))); (xc = _418); std::shared_ptr< monty::ndarray< double,1 > > _419 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_415))); ::mosek::fusion::Utils::Tools::arraycopy(y,(int)0,_419,(int)0,(int)((y)->size(0))); (y = _419); int _7562 = sol_numcon; int _7563 = _399; for (int _420 = _7562;_420<_7563;++_420){ (((*slc)(_420)) = 0.0); (((*suc)(_420)) = 0.0); (((*xc)(_420)) = 0.0); (((*y)(_420)) = 0.0); }(sol_numcon = _399); }if ((_400 < (int)0)){ }else if ((_400 <= sol_numcone)){ (sol_numcone = _400); }else if ((_400 <= (int)((xx)->size(0)))){ int _7564 = sol_numcone; int _7565 = _400; for (int _421 = _7564;_421<_7565;++_421){ (((*snx)(_421)) = 0.0); }(sol_numcone = _400); }else { int _422; if (((sol_numcone * (int)2) > (_400 + (int)100))){ (_422 = (sol_numcone * (int)2)); }else { (_422 = (_400 + (int)100)); }std::shared_ptr< monty::ndarray< double,1 > > _423 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_422))); ::mosek::fusion::Utils::Tools::arraycopy(snx,(int)0,_423,(int)0,(int)((snx)->size(0))); (snx = _423); { int _424 = sol_numcone; for (;(_424 < _400);( ++ _424 )){ (((*snx)(_424)) = 0.0); }}(sol_numcone = _400); }}bool mosek::fusion::SolutionStruct::isDualAcceptable  ( mosek::fusion::AccSolutionStatus _425) { return mosek::fusion::p_SolutionStruct::_get_impl(this)->isDualAcceptable(_425); }bool mosek::fusion::p_SolutionStruct::isDualAcceptable( mosek::fusion::AccSolutionStatus _425){ return isAcceptable(dstatus,_425); }bool mosek::fusion::SolutionStruct::isPrimalAcceptable  ( mosek::fusion::AccSolutionStatus _426) { return mosek::fusion::p_SolutionStruct::_get_impl(this)->isPrimalAcceptable(_426); }bool mosek::fusion::p_SolutionStruct::isPrimalAcceptable( mosek::fusion::AccSolutionStatus _426){ return isAcceptable(pstatus,_426); }bool mosek::fusion::p_SolutionStruct::isAcceptable( mosek::fusion::SolutionStatus _427,mosek::fusion::AccSolutionStatus _428){ if ((_428 == ::mosek::fusion::AccSolutionStatus::Anything)){ return true; }else if ((_428 == ::mosek::fusion::AccSolutionStatus::Optimal)){ return (_427 == ::mosek::fusion::SolutionStatus::Optimal); }else if ((_428 == ::mosek::fusion::AccSolutionStatus::NearOptimal)){ return ((_427 == ::mosek::fusion::SolutionStatus::Optimal) || (_427 == ::mosek::fusion::SolutionStatus::NearOptimal)); }else if ((_428 == ::mosek::fusion::AccSolutionStatus::Feasible)){ return ((_427 == ::mosek::fusion::SolutionStatus::Optimal) || ((_427 == ::mosek::fusion::SolutionStatus::NearOptimal) || (_427 == ::mosek::fusion::SolutionStatus::Feasible))); }else if ((_428 == ::mosek::fusion::AccSolutionStatus::Certificate)){ return (_427 == ::mosek::fusion::SolutionStatus::Certificate); }else {}return false; }void mosek::fusion::p_SolutionStruct::destroy(){snx.reset();sux.reset();slx.reset();bars.reset();barx.reset();y.reset();suc.reset();slc.reset();xx.reset();xc.reset();}void mosek::fusion::SolutionStruct::destroy() { mosek::fusion::p_SolutionStruct::_get_impl(this)->destroy(); }mosek::fusion::ConNZStruct::ConNZStruct(mosek::fusion::p_ConNZStruct *_impl) : _impl(_impl) { /*std::cout << "ConNZStruct() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::ConNZStruct::~ConNZStruct() { delete _impl; _impl = nullptr; }mosek::fusion::p_ConNZStruct::p_ConNZStruct  (::mosek::fusion::ConNZStruct * _pubthis) :     _pubthis(_pubthis){}mosek::fusion::ConNZStruct::t mosek::fusion::p_ConNZStruct::_new_ConNZStruct  (std::shared_ptr< monty::ndarray< long long,1 > > _429,    std::shared_ptr< monty::ndarray< int,1 > > _430,    std::shared_ptr< monty::ndarray< double,1 > > _431,    std::shared_ptr< monty::ndarray< double,1 > > _432,    std::shared_ptr< monty::ndarray< int,1 > > _433,    std::shared_ptr< monty::ndarray< int,1 > > _434,    std::shared_ptr< monty::ndarray< int,1 > > _435){ return new mosek::fusion::ConNZStruct(_429,_430,_431,_432,_433,_434,_435); }mosek::fusion::ConNZStruct::ConNZStruct  (std::shared_ptr< monty::ndarray< long long,1 > > _429,    std::shared_ptr< monty::ndarray< int,1 > > _430,    std::shared_ptr< monty::ndarray< double,1 > > _431,    std::shared_ptr< monty::ndarray< double,1 > > _432,    std::shared_ptr< monty::ndarray< int,1 > > _433,    std::shared_ptr< monty::ndarray< int,1 > > _434,    std::shared_ptr< monty::ndarray< int,1 > > _435) :    ConNZStruct(new mosek::fusion::p_ConNZStruct(this)){ mosek::fusion::p_ConNZStruct::_get_impl(this)->_initialize(_429,_430,_431,_432,_433,_434,_435); }void mosek::fusion::p_ConNZStruct::_initialize  (std::shared_ptr< monty::ndarray< long long,1 > > _429,    std::shared_ptr< monty::ndarray< int,1 > > _430,    std::shared_ptr< monty::ndarray< double,1 > > _431,    std::shared_ptr< monty::ndarray< double,1 > > _432,    std::shared_ptr< monty::ndarray< int,1 > > _433,    std::shared_ptr< monty::ndarray< int,1 > > _434,    std::shared_ptr< monty::ndarray< int,1 > > _435){monty::rc_reserve __reserve_this(_pubthis); { { (ptrb = _429); (subj = _430); (cof = _431); (bfix = _432); (barsubi = _433); (barsubj = _434); (barmidx = _435); }}}void mosek::fusion::p_ConNZStruct::destroy(){barmidx.reset();barsubj.reset();barsubi.reset();bfix.reset();cof.reset();subj.reset();ptrb.reset();}void mosek::fusion::ConNZStruct::destroy() { mosek::fusion::p_ConNZStruct::_get_impl(this)->destroy(); }mosek::fusion::Model::Model(mosek::fusion::p_Model *_impl) : mosek::fusion::BaseModel(_impl) { /*std::cout << "Model()" << this << std::endl; */ }mosek::fusion::Model::~Model() {  /* std::cout << "~Model()" << this << std::endl << std::flush; */ }mosek::fusion::p_Model::p_Model  (::mosek::fusion::Model * _pubthis) :     mosek::fusion::p_BaseModel(_pubthis),    _pubthis(_pubthis){}mosek::fusion::Model::t mosek::fusion::p_Model::_new_Model  (monty::rc_ptr< ::mosek::fusion::Model > _436){ return new mosek::fusion::Model(_436); }mosek::fusion::Model::Model  (monty::rc_ptr< ::mosek::fusion::Model > _436) :    Model(new mosek::fusion::p_Model(this)){ mosek::fusion::p_Model::_get_impl(this)->_initialize(_436); }void mosek::fusion::p_Model::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _436){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_BaseModel::_initialize(_436);(model_name = mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer().get())->a(mosek::fusion::p_Model::_get_impl(_436)->model_name).get())->a(std::string ("(clone)")).get())->toString()); (acceptable_sol = mosek::fusion::p_Model::_get_impl(_436)->acceptable_sol); (solutionptr = mosek::fusion::p_Model::_get_impl(_436)->solutionptr); monty::rc_ptr< ::mosek::fusion::Model > _437 = _pubthis; (vars = ([=]()->std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 > > { std::vector< monty::rc_ptr< ::mosek::fusion::ModelVariable > > _7566; for (int _438=(int)0, _7567=mosek::fusion::p_Model::_get_impl(_436)->vars_used; _438 < _7567;++_438)_7566.push_back(mosek::fusion::p_ModelVariable::_get_impl(((*mosek::fusion::p_Model::_get_impl(_436)->vars)(_438)).get())->clone(_437)); return std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 >(monty::shape(_7566.size()),_7566.begin(),_7566.end())); })()); (vars_used = mosek::fusion::p_Model::_get_impl(_436)->vars_used); (var_map = mosek::fusion::Utils::p_StringIntMap::_get_impl(mosek::fusion::p_Model::_get_impl(_436)->var_map.get())->clone()); (task_vars_allocated = mosek::fusion::p_Model::_get_impl(_436)->task_vars_allocated); (task_vars_used = mosek::fusion::p_Model::_get_impl(_436)->task_vars_used); (cons = ([=]()->std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelConstraint >,1 > > { std::vector< monty::rc_ptr< ::mosek::fusion::ModelConstraint > > _7568; for (int _439=(int)0, _7569=mosek::fusion::p_Model::_get_impl(_436)->cons_used; _439 < _7569;++_439)_7568.push_back(mosek::fusion::p_ModelConstraint::_get_impl(((*mosek::fusion::p_Model::_get_impl(_436)->cons)(_439)).get())->clone(_437)); return std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelConstraint >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelConstraint >,1 >(monty::shape(_7568.size()),_7568.begin(),_7568.end())); })()); (cons_used = mosek::fusion::p_Model::_get_impl(_436)->cons_used); (con_map = mosek::fusion::Utils::p_StringIntMap::_get_impl(mosek::fusion::p_Model::_get_impl(_436)->con_map.get())->clone()); (natvarmap_Var = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _7570; for (int _440=(int)0, _7571=mosek::fusion::p_Model::_get_impl(_436)->natvarmap_num; _440 < _7571;++_440)_7570.push_back(((*mosek::fusion::p_Model::_get_impl(_436)->natvarmap_Var)(_440))); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7570.size()),_7570.begin(),_7570.end())); })()); (natvarmap_idx = ([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _7572; for (int _441=(int)0, _7573=mosek::fusion::p_Model::_get_impl(_436)->natvarmap_num; _441 < _7573;++_441)_7572.push_back(((*mosek::fusion::p_Model::_get_impl(_436)->natvarmap_idx)(_441))); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7572.size()),_7572.begin(),_7572.end())); })()); (natvarmap_num = mosek::fusion::p_Model::_get_impl(_436)->natvarmap_num); (natbarvarmap_Var = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _7574; for (int _442=(int)0, _7575=mosek::fusion::p_Model::_get_impl(_436)->natvarmap_num; _442 < _7575;++_442)_7574.push_back(((*mosek::fusion::p_Model::_get_impl(_436)->natvarmap_Var)(_442))); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7574.size()),_7574.begin(),_7574.end())); })()); (natbarvarmap_num = mosek::fusion::p_Model::_get_impl(_436)->natbarvarmap_num); (initsol_xx = nullptr); (initsol_xx_flag = nullptr); }}mosek::fusion::Model::t mosek::fusion::p_Model::_new_Model  (){ return new mosek::fusion::Model(); }mosek::fusion::Model::Model  () :    Model(new mosek::fusion::p_Model(this)){ mosek::fusion::p_Model::_get_impl(this)->_initialize(); }void mosek::fusion::p_Model::_initialize  (){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_BaseModel::_initialize(std::string (""),std::string (""));(model_name = std::string ("")); (acceptable_sol = ::mosek::fusion::AccSolutionStatus::Optimal); (solutionptr = ::mosek::fusion::SolutionType::Default); (natvarmap_Var = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)1024)))); (natvarmap_idx = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)1024)))); (natvarmap_num = (int)0); (natbarvarmap_Var = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0)))); (natbarvarmap_num = (int)0); (task_vars_allocated = (int)0); (task_vars_used = (int)0); (initsol_xx = nullptr); (initsol_xx_flag = nullptr); (vars = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 >(monty::shape((int)1024)))); (vars_used = (int)0); (var_map = ::mosek::fusion::Utils::p_StringIntMap::_new_StringIntMap()); (cons = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelConstraint >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelConstraint >,1 >(monty::shape((int)1024)))); (cons_used = (int)0); (con_map = ::mosek::fusion::Utils::p_StringIntMap::_new_StringIntMap()); }}mosek::fusion::Model::t mosek::fusion::p_Model::_new_Model  (const std::string &  _443){ return new mosek::fusion::Model(_443); }mosek::fusion::Model::Model  (const std::string &  _443) :    Model(new mosek::fusion::p_Model(this)){ mosek::fusion::p_Model::_get_impl(this)->_initialize(_443); }void mosek::fusion::p_Model::_initialize  (const std::string &  _443){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_BaseModel::_initialize(_443,std::string (""));(model_name = _443); (acceptable_sol = ::mosek::fusion::AccSolutionStatus::NearOptimal); (solutionptr = ::mosek::fusion::SolutionType::Default); (natvarmap_Var = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)1024)))); (natvarmap_idx = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)1024)))); (natvarmap_num = (int)0); (natbarvarmap_Var = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0)))); (natbarvarmap_num = (int)0); (initsol_xx = nullptr); (initsol_xx_flag = nullptr); (vars = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 >(monty::shape((int)1024)))); (vars_used = (int)0); (var_map = ::mosek::fusion::Utils::p_StringIntMap::_new_StringIntMap()); (task_vars_allocated = (int)0); (task_vars_used = (int)0); (cons = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelConstraint >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelConstraint >,1 >(monty::shape((int)1024)))); (cons_used = (int)0); (con_map = ::mosek::fusion::Utils::p_StringIntMap::_new_StringIntMap()); }}void mosek::fusion::Model::putlicensewait  ( bool _444) { mosek::fusion::p_Model::putlicensewait(_444); }void mosek::fusion::p_Model::putlicensewait( bool _444){ ::mosek::fusion::p_BaseModel::env_putlicensewait(_444); }void mosek::fusion::Model::putlicensepath  ( const std::string & _445) { mosek::fusion::p_Model::putlicensepath(_445); }void mosek::fusion::p_Model::putlicensepath( const std::string & _445){ ::mosek::fusion::p_BaseModel::env_putlicensepath(_445); }void mosek::fusion::Model::putlicensecode  ( std::shared_ptr< monty::ndarray< int,1 > > _446) { mosek::fusion::p_Model::putlicensecode(_446); }void mosek::fusion::p_Model::putlicensecode( std::shared_ptr< monty::ndarray< int,1 > > _446){ ::mosek::fusion::p_BaseModel::env_putlicensecode(_446); }void mosek::fusion::p_Model::inst( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _447,int _448,int _449,std::shared_ptr< monty::ndarray< long long,1 > > _450,int _451,std::shared_ptr< monty::ndarray< int,1 > > _452,std::shared_ptr< monty::ndarray< int,1 > > _453,std::shared_ptr< monty::ndarray< int,1 > > _454){ std::shared_ptr< monty::ndarray< long long,1 > > _455 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(((int)((_447)->size(0)) + (int)1)))); int _7576 = (int)0; int _7577 = (int)((_447)->size(0)); for (int _456 = _7576;_456<_7577;++_456){ (((*_455)((_456 + (int)1))) = (((*_455)(_456)) + ((*_447)(_456))->size())); }if (((int)((_447)->size(0)) == (int)1)){ ((*_447)((int)0))->inst(_450,_448,_449,(long long)((int)0),(long long)(_451),_452,_453,_454); }else if (((int)((_447)->size(0)) == (int)2)){ int _7578 = _448; int _7579 = _449; for (int _457 = _7578;_457<_7579;++_457){ if ((((*_450)(_457)) < ((*_455)((int)1)))){ ((*_447)((int)0))->inst(((*_450)(_457)),(long long)(((_451 + _457) - _448)),_452,_453,_454); }else { ((*_447)((int)1))->inst((((*_450)(_457)) - ((*_455)((int)1))),(long long)(((_451 + _457) - _448)),_452,_453,_454); }}}else if (((int)((_447)->size(0)) == (int)3)){ int _7580 = _448; int _7581 = _449; for (int _458 = _7580;_458<_7581;++_458){ if ((((*_450)(_458)) < ((*_455)((int)1)))){ ((*_447)((int)0))->inst(((*_450)(_458)),(long long)(((_451 + _458) - _448)),_452,_453,_454); }else if ((((*_450)(_458)) < ((*_455)((int)2)))){ ((*_447)((int)1))->inst((((*_450)(_458)) - ((*_455)((int)1))),(long long)(((_451 + _458) - _448)),_452,_453,_454); }else { ((*_447)((int)2))->inst((((*_450)(_458)) - ((*_455)((int)2))),(long long)(((_451 + _458) - _448)),_452,_453,_454); }}}else { int _459 = (int)4; long long _460 = ((*_455)((int)((_447)->size(0)))); int _461 = (int)0; { int _462 = (int)((_447)->size(0)); while ((_462 > (int)0)) { (_462 /= (int)2); ( ++ _461 ); }}if ((false && (((_449 - _448) + _460) < ((_459 * (_449 - _448)) * _461)))){ std::shared_ptr< monty::ndarray< int,1 > > _463 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((_460 + (int)1)))); int _7582 = _448; int _7583 = _449; for (int _464 = _7582;_464<_7583;++_464){ ( ++ ((*_463)(((*_450)(_464)))) ); }int _7584 = (int)0; long long _7585 = _460; for (long long _465 = _7584;_465<_7585;++_465){ (((*_463)((_465 + (int)1))) += ((*_463)(_465))); }std::shared_ptr< monty::ndarray< long long,1 > > _466 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((_449 - _448)))); int _7586 = _448; int _7587 = _449; for (int _467 = _7586;_467<_7587;++_467){ (((*_466)((((*_463)(((*_450)(_467)))) - _448))) = _467); ( ++ ((*_463)(((*_450)(_467)))) ); }int _468 = (int)0; int _469 = (int)0; while (((_469 < (int)((_466)->size(0))) && (_468 < (int)((_447)->size(0))))) { if ((((*_455)((_468 + (int)1))) < ((*_450)(((*_466)(_469)))))){ ( ++ _468 ); }else { ((*_447)(_468))->inst((((*_450)(((*_466)(_469)))) - ((*_455)(_468))),((_451 + ((*_466)(_469))) - _448),_452,_453,_454); ( ++ _469 ); }}}else { int _7588 = _448; int _7589 = _449; for (int _470 = _7588;_470<_7589;++_470){ int _471 = ((int)((_455)->size(0)) / (int)2); { int _472 = (int)0; int _473 = ((int)((_455)->size(0)) - (int)1); int _474 = (int)0; while ((_472 < _473)) { (_474 = ((_472 + _473) / (int)2)); if ((((*_450)(_470)) < ((*_455)(_474)))){ (_473 = _474); }else if ((((*_450)(_470)) >= ((*_455)((_474 + (int)1))))){ (_472 = _474); }else { (_472 = _474); (_473 = _474); }}(_471 = _474); }((*_447)(_471))->inst((((*_450)(_470)) - ((*_455)(_471))),(long long)(((_451 + _470) - _448)),_452,_453,_454); }}}}void mosek::fusion::p_Model::inst( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _475,std::shared_ptr< monty::ndarray< long long,1 > > _476,std::shared_ptr< monty::ndarray< int,1 > > _477,std::shared_ptr< monty::ndarray< int,1 > > _478,std::shared_ptr< monty::ndarray< int,1 > > _479){ ::mosek::fusion::p_Model::inst(_475,(int)0,(int)((_476)->size(0)),_476,(int)0,_477,_478,_479); }void mosek::fusion::Model::dispose  ( ) { mosek::fusion::p_Model::_get_impl(this)->dispose(); }void mosek::fusion::p_Model::dispose( ){ int _7590 = (int)0; int _7591 = vars_used; for (int _480 = _7590;_480<_7591;++_480){ (((*vars)(_480)) = nullptr); }(vars_used = (int)0); int _7592 = (int)0; int _7593 = cons_used; for (int _481 = _7592;_481<_7593;++_481){ (((*cons)(_481)) = nullptr); }(cons_used = (int)0); ::mosek::fusion::p_BaseModel::dispose(); }void mosek::fusion::p_Model::varname( int _482,const std::string & _483){ task_var_name(_482,_483); }void mosek::fusion::p_Model::nativeVarToStr( int _484,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _485){ if (((_484 < (int)0) || (_484 >= natvarmap_num))){ throw ::mosek::fusion::IndexError(std::string ("Native variable index out of bounds"));}else {}((*vars)(((*natvarmap_Var)(_484))))->elementName(((*natvarmap_idx)(_484)),_485); }int mosek::fusion::p_Model::append_linearvar( monty::rc_ptr< ::mosek::fusion::ModelVariable > _486,long long _487,mosek::fusion::RelationKey _488,double _489){ int _490 = alloc_linearvar(std::string (""),_488,_489); natvarmap_ensure((int)1); (((*natvarmap_idx)(_490)) = _487); (((*natvarmap_Var)(_490)) = vars_used); (natvarmap_num = (natvarmap_num + (int)1)); return _490; }int mosek::fusion::p_Model::append_rangedvar( monty::rc_ptr< ::mosek::fusion::ModelVariable > _491,long long _492,double _493,double _494){ int _495 = alloc_rangedvar(std::string (""),_493,_494); natvarmap_ensure((int)1); (((*natvarmap_idx)(_495)) = _492); (((*natvarmap_Var)(_495)) = vars_used); (natvarmap_num = (natvarmap_num + (int)1)); return _495; }MSKtask_t mosek::fusion::Model::getTask  ( ) { return mosek::fusion::p_Model::_get_impl(this)->getTask(); }MSKtask_t mosek::fusion::p_Model::getTask( ){ return task_get(); }void mosek::fusion::Model::flushNames  ( ) { mosek::fusion::p_Model::_get_impl(this)->flushNames(); }void mosek::fusion::p_Model::flushNames( ){ int _7594 = (int)0; int _7595 = vars_used; for (int _496 = _7594;_496<_7595;++_496){ mosek::fusion::p_ModelVariable::_get_impl(((*vars)(_496)).get())->flushNames(); }int _7596 = (int)0; int _7597 = cons_used; for (int _497 = _7596;_497<_7597;++_497){ mosek::fusion::p_ModelConstraint::_get_impl(((*cons)(_497)).get())->flushNames(); }}void mosek::fusion::Model::writeTask  ( const std::string & _498) { mosek::fusion::p_Model::_get_impl(this)->writeTask(_498); }void mosek::fusion::p_Model::writeTask( const std::string & _498){ _pubthis->flushNames(); task_setnumvar(task_vars_used); (task_vars_allocated = task_vars_used); task_write(_498); }long long mosek::fusion::Model::getSolverLIntInfo  ( const std::string & _499) { return mosek::fusion::p_Model::_get_impl(this)->getSolverLIntInfo(_499); }long long mosek::fusion::p_Model::getSolverLIntInfo( const std::string & _499){ return task_get_liinf(_499); }int mosek::fusion::Model::getSolverIntInfo  ( const std::string & _500) { return mosek::fusion::p_Model::_get_impl(this)->getSolverIntInfo(_500); }int mosek::fusion::p_Model::getSolverIntInfo( const std::string & _500){ return task_get_iinf(_500); }double mosek::fusion::Model::getSolverDoubleInfo  ( const std::string & _501) { return mosek::fusion::p_Model::_get_impl(this)->getSolverDoubleInfo(_501); }double mosek::fusion::p_Model::getSolverDoubleInfo( const std::string & _501){ return task_get_dinf(_501); }void mosek::fusion::Model::setCallbackHandler  ( mosek::cbhandler_t _502) { mosek::fusion::p_Model::_get_impl(this)->setCallbackHandler(_502); }void mosek::fusion::p_Model::setCallbackHandler( mosek::cbhandler_t _502){ task_setCallbackHandler(_502); }void mosek::fusion::Model::setDataCallbackHandler  ( mosek::datacbhandler_t _503) { mosek::fusion::p_Model::_get_impl(this)->setDataCallbackHandler(_503); }void mosek::fusion::p_Model::setDataCallbackHandler( mosek::datacbhandler_t _503){ task_setDataCallbackHandler(_503); }void mosek::fusion::Model::setLogHandler  ( mosek::msghandler_t _504) { mosek::fusion::p_Model::_get_impl(this)->setLogHandler(_504); }void mosek::fusion::p_Model::setLogHandler( mosek::msghandler_t _504){ task_setLogHandler(_504); }void mosek::fusion::Model::setSolverParam  ( const std::string & _505,    double _506) { mosek::fusion::p_Model::_get_impl(this)->setSolverParam(_505,_506); }void mosek::fusion::p_Model::setSolverParam( const std::string & _505,double _506){ ::mosek::fusion::p_Parameters::setParameter(_pubthis,_505,_506); }void mosek::fusion::Model::setSolverParam  ( const std::string & _507,    int _508) { mosek::fusion::p_Model::_get_impl(this)->setSolverParam(_507,_508); }void mosek::fusion::p_Model::setSolverParam( const std::string & _507,int _508){ ::mosek::fusion::p_Parameters::setParameter(_pubthis,_507,_508); }void mosek::fusion::Model::setSolverParam  ( const std::string & _509,    const std::string & _510) { mosek::fusion::p_Model::_get_impl(this)->setSolverParam(_509,_510); }void mosek::fusion::p_Model::setSolverParam( const std::string & _509,const std::string & _510){ ::mosek::fusion::p_Parameters::setParameter(_pubthis,_509,_510); }void mosek::fusion::Model::breakSolver  ( ) { mosek::fusion::p_Model::_get_impl(this)->breakSolver(); }void mosek::fusion::p_Model::breakSolver( ){ task_break_solve(); }void mosek::fusion::Model::solve  ( ) { mosek::fusion::p_Model::_get_impl(this)->solve(); }void mosek::fusion::p_Model::solve( ){ task_setnumvar(task_vars_used); (task_vars_allocated = task_vars_used); flush_initsol(::mosek::fusion::SolutionType::Interior); flush_initsol(::mosek::fusion::SolutionType::Integer); flush_initsol(::mosek::fusion::SolutionType::Basic); task_solve(); }void mosek::fusion::Model::flushSolutions  ( ) { mosek::fusion::p_Model::_get_impl(this)->flushSolutions(); }void mosek::fusion::p_Model::flushSolutions( ){ flush_initsol(::mosek::fusion::SolutionType::Interior); flush_initsol(::mosek::fusion::SolutionType::Integer); flush_initsol(::mosek::fusion::SolutionType::Basic); }void mosek::fusion::p_Model::flush_initsol( mosek::fusion::SolutionType _511){ if (initsol_xx){ try { monty::rc_ptr< ::mosek::fusion::SolutionStruct > _513 = get_sol_cache(_511,true); if (mosek::fusion::p_SolutionStruct::_get_impl(_513)->xx){ int _7598 = (int)0; int _7599 = (int)((initsol_xx)->size(0)); for (int _514 = _7598;_514<_7599;++_514){ if ((! ((*initsol_xx_flag)(_514)))){ (((*initsol_xx)(_514)) = ((*mosek::fusion::p_SolutionStruct::_get_impl(_513)->xx)(_514))); }else {}}}else { int _7600 = (int)0; int _7601 = (int)((initsol_xx)->size(0)); for (int _515 = _7600;_515<_7601;++_515){ if ((! ((*initsol_xx_flag)(_515)))){ (((*initsol_xx)(_515)) = 0.0); }else {}}}}catch (mosek::fusion::SolutionError _512){ int _7602 = (int)0; int _7603 = (int)((initsol_xx)->size(0)); for (int _516 = _7602;_516<_7603;++_516){ if ((! ((*initsol_xx_flag)(_516)))){ (((*initsol_xx)(_516)) = 0.0); }else {}}}task_putxx_slice(_511,(int)0,(int)((initsol_xx)->size(0)),initsol_xx); }else {}}mosek::fusion::SolutionStatus mosek::fusion::Model::getDualSolutionStatus  ( ) { return mosek::fusion::p_Model::_get_impl(this)->getDualSolutionStatus(); }mosek::fusion::SolutionStatus mosek::fusion::p_Model::getDualSolutionStatus( ){ monty::rc_ptr< ::mosek::fusion::SolutionStruct > _517 = nullptr; if ((solutionptr == ::mosek::fusion::SolutionType::Default)){ if (sol_itg){ (_517 = sol_itg); }else if (sol_bas){ (_517 = sol_bas); }else { (_517 = sol_itr); }}else if ((solutionptr == ::mosek::fusion::SolutionType::Interior)){ (_517 = sol_itr); }else if ((solutionptr == ::mosek::fusion::SolutionType::Basic)){ (_517 = sol_bas); }else if ((solutionptr == ::mosek::fusion::SolutionType::Integer)){ (_517 = sol_itg); }else {}if (! _517){ return ::mosek::fusion::SolutionStatus::Undefined; }else if ((! synched)){ return ::mosek::fusion::SolutionStatus::Unknown; }else { return mosek::fusion::p_SolutionStruct::_get_impl(_517)->dstatus; }}mosek::fusion::SolutionStatus mosek::fusion::Model::getPrimalSolutionStatus  ( ) { return mosek::fusion::p_Model::_get_impl(this)->getPrimalSolutionStatus(); }mosek::fusion::SolutionStatus mosek::fusion::p_Model::getPrimalSolutionStatus( ){ monty::rc_ptr< ::mosek::fusion::SolutionStruct > _518 = nullptr; if ((solutionptr == ::mosek::fusion::SolutionType::Default)){ if (sol_itg){ (_518 = sol_itg); }else if (sol_bas){ (_518 = sol_bas); }else { (_518 = sol_itr); }}else if ((solutionptr == ::mosek::fusion::SolutionType::Basic)){ (_518 = sol_bas); }else if ((solutionptr == ::mosek::fusion::SolutionType::Integer)){ (_518 = sol_itg); }else { (_518 = sol_itr); }if (! _518){ return ::mosek::fusion::SolutionStatus::Undefined; }else if ((! synched)){ return ::mosek::fusion::SolutionStatus::Unknown; }else { return mosek::fusion::p_SolutionStruct::_get_impl(_518)->pstatus; }}double mosek::fusion::Model::dualObjValue  ( ) { return mosek::fusion::p_Model::_get_impl(this)->dualObjValue(); }double mosek::fusion::p_Model::dualObjValue( ){ return mosek::fusion::p_SolutionStruct::_get_impl(get_sol_cache(::mosek::fusion::SolutionType::Default,false))->dobj; }double mosek::fusion::Model::primalObjValue  ( ) { return mosek::fusion::p_Model::_get_impl(this)->primalObjValue(); }double mosek::fusion::p_Model::primalObjValue( ){ return mosek::fusion::p_SolutionStruct::_get_impl(get_sol_cache(::mosek::fusion::SolutionType::Default,true))->pobj; }monty::rc_ptr< ::mosek::fusion::SolutionStruct > mosek::fusion::p_Model::get_sol_cache( mosek::fusion::SolutionType _519,bool _520,bool _521){ monty::rc_ptr< ::mosek::fusion::SolutionStruct > _522 = nullptr; mosek::fusion::SolutionType _523 = _519; if ((_523 == ::mosek::fusion::SolutionType::Default)){ (_523 = solutionptr); }else {}if ((_523 == ::mosek::fusion::SolutionType::Default)){ if (sol_itg){ (_522 = sol_itg); }else if (sol_bas){ (_522 = sol_bas); }else { (_522 = sol_itr); }}else if ((_523 == ::mosek::fusion::SolutionType::Interior)){ (_522 = sol_itr); }else if ((_523 == ::mosek::fusion::SolutionType::Basic)){ (_522 = sol_bas); }else if ((_523 == ::mosek::fusion::SolutionType::Integer)){ (_522 = sol_itg); }else {}if (! _522){ throw ::mosek::fusion::SolutionError(std::string ("Solution not available"));}else { if ((_521 || ((_520 && _522->isPrimalAcceptable(acceptable_sol)) || ((! _520) && _522->isDualAcceptable(acceptable_sol))))){ return _522; }else { monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _524 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer(); mosek::fusion::SolutionStatus _525 = mosek::fusion::p_SolutionStruct::_get_impl(_522)->pstatus; if ((! _520)){ (_525 = mosek::fusion::p_SolutionStruct::_get_impl(_522)->dstatus); }else {}mosek::fusion::Utils::p_StringBuffer::_get_impl(_524.get())->a(std::string ("Solution status is ")); if ((_525 == ::mosek::fusion::SolutionStatus::Undefined)){ mosek::fusion::Utils::p_StringBuffer::_get_impl(_524.get())->a(std::string ("Undefined")); }else if ((_525 == ::mosek::fusion::SolutionStatus::Unknown)){ mosek::fusion::Utils::p_StringBuffer::_get_impl(_524.get())->a(std::string ("Unknown")); }else if ((_525 == ::mosek::fusion::SolutionStatus::Optimal)){ mosek::fusion::Utils::p_StringBuffer::_get_impl(_524.get())->a(std::string ("Optimal")); }else if ((_525 == ::mosek::fusion::SolutionStatus::NearOptimal)){ mosek::fusion::Utils::p_StringBuffer::_get_impl(_524.get())->a(std::string ("NearOptimal")); }else if ((_525 == ::mosek::fusion::SolutionStatus::Feasible)){ mosek::fusion::Utils::p_StringBuffer::_get_impl(_524.get())->a(std::string ("Feasible")); }else if ((_525 == ::mosek::fusion::SolutionStatus::NearFeasible)){ mosek::fusion::Utils::p_StringBuffer::_get_impl(_524.get())->a(std::string ("NearFeasible")); }else if ((_525 == ::mosek::fusion::SolutionStatus::Certificate)){ mosek::fusion::Utils::p_StringBuffer::_get_impl(_524.get())->a(std::string ("Certificate")); }else if ((_525 == ::mosek::fusion::SolutionStatus::NearCertificate)){ mosek::fusion::Utils::p_StringBuffer::_get_impl(_524.get())->a(std::string ("NearCertificate")); }else if ((_525 == ::mosek::fusion::SolutionStatus::IllposedCert)){ mosek::fusion::Utils::p_StringBuffer::_get_impl(_524.get())->a(std::string ("IllposedCert")); }else {}mosek::fusion::Utils::p_StringBuffer::_get_impl(_524.get())->a(std::string (" but at least ")); if ((acceptable_sol == ::mosek::fusion::AccSolutionStatus::Anything)){ mosek::fusion::Utils::p_StringBuffer::_get_impl(_524.get())->a(std::string ("Anything")); }else if ((acceptable_sol == ::mosek::fusion::AccSolutionStatus::Optimal)){ mosek::fusion::Utils::p_StringBuffer::_get_impl(_524.get())->a(std::string ("Optimal")); }else if ((acceptable_sol == ::mosek::fusion::AccSolutionStatus::NearOptimal)){ mosek::fusion::Utils::p_StringBuffer::_get_impl(_524.get())->a(std::string ("NearOptimal")); }else if ((acceptable_sol == ::mosek::fusion::AccSolutionStatus::Feasible)){ mosek::fusion::Utils::p_StringBuffer::_get_impl(_524.get())->a(std::string ("Feasible")); }else if ((acceptable_sol == ::mosek::fusion::AccSolutionStatus::Certificate)){ mosek::fusion::Utils::p_StringBuffer::_get_impl(_524.get())->a(std::string ("Certificate")); }else {}mosek::fusion::Utils::p_StringBuffer::_get_impl(_524.get())->a(std::string (" is expected")); throw ::mosek::fusion::SolutionError(mosek::fusion::Utils::p_StringBuffer::_get_impl(_524.get())->toString());}}}monty::rc_ptr< ::mosek::fusion::SolutionStruct > mosek::fusion::p_Model::get_sol_cache( mosek::fusion::SolutionType _526,bool _527){ return get_sol_cache(_526,_527,false); }void mosek::fusion::p_Model::setSolution_xx( std::shared_ptr< monty::ndarray< int,1 > > _528,std::shared_ptr< monty::ndarray< double,1 > > _529){ ensure_initsol_xx(); int _7604 = (int)0; int _7605 = (int)((_528)->size(0)); for (int _530 = _7604;_530<_7605;++_530){ (((*initsol_xx)(((*_528)(_530)))) = ((*_529)(_530))); (((*initsol_xx_flag)(((*_528)(_530)))) = true); }}void mosek::fusion::p_Model::ensure_initsol_xx( ){ if (! initsol_xx){ (initsol_xx = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(natvarmap_num)))); (initsol_xx_flag = ([=]()->std::shared_ptr< monty::ndarray< bool,1 > > { std::vector< bool > _7606; for (int _531=(int)0, _7607=natvarmap_num; _531 < _7607;++_531)_7606.push_back(false); return std::shared_ptr< monty::ndarray< bool,1 > >(new monty::ndarray< bool,1 >(monty::shape(_7606.size()),_7606.begin(),_7606.end())); })()); }else if (((int)((initsol_xx)->size(0)) < natvarmap_num)){ std::shared_ptr< monty::ndarray< double,1 > > _532 = initsol_xx; std::shared_ptr< monty::ndarray< bool,1 > > _533 = initsol_xx_flag; (initsol_xx = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(natvarmap_num)))); (initsol_xx_flag = std::shared_ptr< monty::ndarray< bool,1 > >(new monty::ndarray< bool,1 >(monty::shape(natvarmap_num)))); ::mosek::fusion::Utils::Tools::arraycopy(_532,(int)0,initsol_xx,(int)0,natvarmap_num); int _7608 = (int)0; int _7609 = natvarmap_num; for (int _534 = _7608;_534<_7609;++_534){ (((*initsol_xx_flag)(_534)) = ((*_533)(_534))); }}else {}}std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > mosek::fusion::p_Model::getSolution_bars( mosek::fusion::SolutionType _535){ return mosek::fusion::p_SolutionStruct::_get_impl(get_sol_cache(_535,false))->bars; }std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > mosek::fusion::p_Model::getSolution_barx( mosek::fusion::SolutionType _536){ return mosek::fusion::p_SolutionStruct::_get_impl(get_sol_cache(_536,false))->barx; }std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Model::getSolution_y( mosek::fusion::SolutionType _537){ return mosek::fusion::p_SolutionStruct::_get_impl(get_sol_cache(_537,false))->y; }std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Model::getSolution_xc( mosek::fusion::SolutionType _538){ return mosek::fusion::p_SolutionStruct::_get_impl(get_sol_cache(_538,true))->xc; }std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Model::getSolution_snx( mosek::fusion::SolutionType _539){ return mosek::fusion::p_SolutionStruct::_get_impl(get_sol_cache(_539,false))->snx; }std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Model::getSolution_suc( mosek::fusion::SolutionType _540){ return mosek::fusion::p_SolutionStruct::_get_impl(get_sol_cache(_540,false))->suc; }std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Model::getSolution_slc( mosek::fusion::SolutionType _541){ return mosek::fusion::p_SolutionStruct::_get_impl(get_sol_cache(_541,false))->slc; }std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Model::getSolution_sux( mosek::fusion::SolutionType _542){ return mosek::fusion::p_SolutionStruct::_get_impl(get_sol_cache(_542,false))->sux; }std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Model::getSolution_slx( mosek::fusion::SolutionType _543){ return mosek::fusion::p_SolutionStruct::_get_impl(get_sol_cache(_543,false))->slx; }std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Model::getSolution_xx( mosek::fusion::SolutionType _544){ return mosek::fusion::p_SolutionStruct::_get_impl(get_sol_cache(_544,true))->xx; }void mosek::fusion::Model::selectedSolution  ( mosek::fusion::SolutionType _545) { mosek::fusion::p_Model::_get_impl(this)->selectedSolution(_545); }void mosek::fusion::p_Model::selectedSolution( mosek::fusion::SolutionType _545){ (solutionptr = _545); }mosek::fusion::AccSolutionStatus mosek::fusion::Model::getAcceptedSolutionStatus  ( ) { return mosek::fusion::p_Model::_get_impl(this)->getAcceptedSolutionStatus(); }mosek::fusion::AccSolutionStatus mosek::fusion::p_Model::getAcceptedSolutionStatus( ){ return acceptable_sol; }void mosek::fusion::Model::acceptedSolutionStatus  ( mosek::fusion::AccSolutionStatus _546) { mosek::fusion::p_Model::_get_impl(this)->acceptedSolutionStatus(_546); }void mosek::fusion::p_Model::acceptedSolutionStatus( mosek::fusion::AccSolutionStatus _546){ (acceptable_sol = _546); }mosek::fusion::ProblemStatus mosek::fusion::Model::getProblemStatus  ( mosek::fusion::SolutionType _547) { return mosek::fusion::p_Model::_get_impl(this)->getProblemStatus(_547); }mosek::fusion::ProblemStatus mosek::fusion::p_Model::getProblemStatus( mosek::fusion::SolutionType _547){ monty::rc_ptr< ::mosek::fusion::SolutionStruct > _548 = nullptr; if ((_547 == ::mosek::fusion::SolutionType::Default)){ if (sol_itg){ (_548 = sol_itg); }else if (sol_bas){ (_548 = sol_bas); }else { (_548 = sol_itr); }}else if ((_547 == ::mosek::fusion::SolutionType::Interior)){ (_548 = sol_itr); }else if ((_547 == ::mosek::fusion::SolutionType::Basic)){ (_548 = sol_bas); }else if ((_547 == ::mosek::fusion::SolutionType::Integer)){ (_548 = sol_itg); }else {}if (! _548){ return ::mosek::fusion::ProblemStatus::Unknown; }else { return mosek::fusion::p_SolutionStruct::_get_impl(_548)->probstatus; }}mosek::fusion::SolutionStatus mosek::fusion::Model::getDualSolutionStatus  ( mosek::fusion::SolutionType _549) { return mosek::fusion::p_Model::_get_impl(this)->getDualSolutionStatus(_549); }mosek::fusion::SolutionStatus mosek::fusion::p_Model::getDualSolutionStatus( mosek::fusion::SolutionType _549){ return getSolutionStatus(_549,false); }mosek::fusion::SolutionStatus mosek::fusion::Model::getPrimalSolutionStatus  ( mosek::fusion::SolutionType _550) { return mosek::fusion::p_Model::_get_impl(this)->getPrimalSolutionStatus(_550); }mosek::fusion::SolutionStatus mosek::fusion::p_Model::getPrimalSolutionStatus( mosek::fusion::SolutionType _550){ return getSolutionStatus(_550,true); }mosek::fusion::SolutionStatus mosek::fusion::p_Model::getSolutionStatus( mosek::fusion::SolutionType _551,bool _552){ try { monty::rc_ptr< ::mosek::fusion::SolutionStruct > _554 = get_sol_cache(_551,_552,true); if (_552){ return mosek::fusion::p_SolutionStruct::_get_impl(_554)->pstatus; }else { return mosek::fusion::p_SolutionStruct::_get_impl(_554)->dstatus; }}catch (mosek::fusion::SolutionError _553){ return ::mosek::fusion::SolutionStatus::Undefined; }}void mosek::fusion::p_Model::objective_( const std::string & _555,mosek::fusion::ObjectiveSense _556,monty::rc_ptr< ::mosek::fusion::Expression > _557){ task_putobjectivename(_555); if ((mosek::fusion::p_Set::_get_impl(_557->getShape())->size != (long long)1)){ throw ::mosek::fusion::LengthError(std::string ("Objective expression must be of size 1."));}else {}if (((_556 != ::mosek::fusion::ObjectiveSense::Minimize) && (_556 != ::mosek::fusion::ObjectiveSense::Maximize))){ throw ::mosek::fusion::LengthError(std::string ("Objective sense required."));}else {}monty::rc_ptr< ::mosek::fusion::FlatExpr > _558 = _557->eval(); { int _7610 = (int)0; int _7611 = (int)((mosek::fusion::p_FlatExpr::_get_impl(_558)->x)->size(0)); for (int _559 = _7610;_559<_7611;++_559){ if ((((*mosek::fusion::p_FlatExpr::_get_impl(_558)->x)(_559))->getModel() && (((*mosek::fusion::p_FlatExpr::_get_impl(_558)->x)(_559))->getModel() != _pubthis))){ throw ::mosek::fusion::ModelError(std::string ("Expression belong to different models"));}else {}}}std::shared_ptr< monty::ndarray< int,1 > > _560 = nullptr; std::shared_ptr< monty::ndarray< double,1 > > _561 = nullptr; int _562 = (int)0; int _563 = (int)0; std::shared_ptr< monty::ndarray< int,1 > > _564 = nullptr; std::shared_ptr< monty::ndarray< int,1 > > _565 = nullptr; std::shared_ptr< monty::ndarray< int,1 > > _566 = nullptr; { int _567 = (int)((mosek::fusion::p_FlatExpr::_get_impl(_558)->subj)->size(0)); (_564 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_567)))); (_565 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_567)))); (_566 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_567)))); ::mosek::fusion::p_Model::inst(mosek::fusion::p_FlatExpr::_get_impl(_558)->x,mosek::fusion::p_FlatExpr::_get_impl(_558)->subj,_564,_565,_566); (_563 = (int)0); { int _568 = (int)0; for (;(_568 < _567);( ++ _568 )){ if ((((*_564)(_568)) >= (int)0)){ ( ++ _563 ); }else {}}}(_562 = (_567 - _563)); if ((_563 > (int)0)){ (_560 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_563)))); }else {}if ((_562 == (int)0)){ (_560 = _564); (_561 = mosek::fusion::p_FlatExpr::_get_impl(_558)->cof); }else { int _569 = (int)0; (_561 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_563)))); (_560 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_563)))); { long long _570 = ((*mosek::fusion::p_FlatExpr::_get_impl(_558)->ptrb)((int)0)); for (;(_570 < ((*mosek::fusion::p_FlatExpr::_get_impl(_558)->ptrb)((int)1)));( ++ _570 )){ if ((((*_564)(_570)) >= (int)0)){ (((*_560)(_569)) = ((*_564)(_570))); (((*_561)(_569)) = ((*mosek::fusion::p_FlatExpr::_get_impl(_558)->cof)(_570))); ( ++ _569 ); }else {}}}}}double _571 = 0.0; if (mosek::fusion::p_FlatExpr::_get_impl(_558)->bfix){ (_571 = ((*mosek::fusion::p_FlatExpr::_get_impl(_558)->bfix)((int)0))); }else {}task_putobjective((_556 == ::mosek::fusion::ObjectiveSense::Maximize),_560,_561,_571); if ((_562 > (int)0)){ long long _572 = (long long)0; { long long _573 = ((*mosek::fusion::p_FlatExpr::_get_impl(_558)->ptrb)((int)0)); for (;(_573 < ((*mosek::fusion::p_FlatExpr::_get_impl(_558)->ptrb)((int)1)));( ++ _573 )){ if ((((*_564)(_573)) < (int)0)){ ( ++ _572 ); }else {}}}if ((_572 > (int)0)){ std::shared_ptr< monty::ndarray< long long,1 > > _574 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_572))); std::shared_ptr< monty::ndarray< long long,1 > > _575 = mosek::fusion::p_FlatExpr::_get_impl(_558)->ptrb; { int _576 = (int)0; { long long _577 = ((*_575)((int)0)); for (;(_577 < ((*_575)((int)1)));( ++ _577 )){ if ((((*_564)(_577)) < (int)0)){ (((*_574)(_576)) = (long long)_577); ( ++ _576 ); }else {}}}}::mosek::fusion::p_Sort::argsort(_574,_564,(long long)0,_572); { int _578 = (int)0; while ((_578 < _572)) { int _579 = _578; ( ++ _578 ); while (((_578 < _572) && (((*_564)(((*_574)(_578)))) == ((*_564)(((*_574)((_578 - (int)1)))))))) { ( ++ _578 ); }int _580 = (_578 - _579); ::mosek::fusion::p_Sort::argsort(_574,_565,_566,(long long)_579,(long long)_578); int _581 = (int)1; int _7612 = (_579 + (int)1); int _7613 = _578; for (int _582 = _7612;_582<_7613;++_582){ long long _583 = ((*_574)(_582)); long long _584 = ((*_574)((_582 - (int)1))); if (((((*_565)(_583)) != ((*_565)(_584))) || (((*_566)(_583)) != ((*_566)(_584))))){ ( ++ _581 ); }else {}}int _585 = (int)0; std::shared_ptr< monty::ndarray< int,1 > > _586 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_581))); std::shared_ptr< monty::ndarray< int,1 > > _587 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_581))); std::shared_ptr< monty::ndarray< double,1 > > _588 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_581))); (((*_586)((int)0)) = ((*_565)(((*_574)(_579))))); (((*_587)((int)0)) = ((*_566)(((*_574)(_579))))); if ((((*_586)((int)0)) == ((*_587)((int)0)))){ (((*_588)((int)0)) = ((*mosek::fusion::p_FlatExpr::_get_impl(_558)->cof)(((*_574)(_579))))); }else { (((*_588)((int)0)) = (0.5 * ((*mosek::fusion::p_FlatExpr::_get_impl(_558)->cof)(((*_574)(_579)))))); }int _7614 = (_579 + (int)1); int _7615 = _578; for (int _589 = _7614;_589<_7615;++_589){ long long _590 = ((*_574)(_589)); long long _591 = ((*_574)((_589 - (int)1))); if (((((*_565)(_590)) != ((*_565)(_591))) || (((*_566)(_590)) != ((*_566)(_591))))){ ( ++ _585 ); (((*_586)(_585)) = ((*_565)(_590))); (((*_587)(_585)) = ((*_566)(_590))); }else {}if ((((*_586)(_585)) == ((*_587)(_585)))){ (((*_588)(_585)) = (((*_588)(_585)) + ((*mosek::fusion::p_FlatExpr::_get_impl(_558)->cof)(_590)))); }else { (((*_588)(_585)) = (((*_588)(_585)) + (0.5 * ((*mosek::fusion::p_FlatExpr::_get_impl(_558)->cof)(_590))))); }}int _592 = (- (((*_564)(((*_574)(_579)))) + (int)1)); int _593 = task_barvardim(_592); int _594 = task_append_barmatrix(_593,_586,_587,_588); task_putbarcj(_592,_594); }}}else {}}else {}}void mosek::fusion::Model::objective  ( double _595) { mosek::fusion::p_Model::_get_impl(this)->objective(_595); }void mosek::fusion::p_Model::objective( double _595){ objective_(std::string (""),::mosek::fusion::ObjectiveSense::Minimize,::mosek::fusion::p_Expr::constTerm(_595)); }void mosek::fusion::Model::objective  ( mosek::fusion::ObjectiveSense _596,    double _597) { mosek::fusion::p_Model::_get_impl(this)->objective(_596,_597); }void mosek::fusion::p_Model::objective( mosek::fusion::ObjectiveSense _596,double _597){ objective_(std::string (""),_596,::mosek::fusion::p_Expr::constTerm(_597)); }void mosek::fusion::Model::objective  ( mosek::fusion::ObjectiveSense _598,    monty::rc_ptr< ::mosek::fusion::Variable > _599) { mosek::fusion::p_Model::_get_impl(this)->objective(_598,_599); }void mosek::fusion::p_Model::objective( mosek::fusion::ObjectiveSense _598,monty::rc_ptr< ::mosek::fusion::Variable > _599){ objective_(std::string (""),_598,_599->asExpr()); }void mosek::fusion::Model::objective  ( mosek::fusion::ObjectiveSense _600,    monty::rc_ptr< ::mosek::fusion::Expression > _601) { mosek::fusion::p_Model::_get_impl(this)->objective(_600,_601); }void mosek::fusion::p_Model::objective( mosek::fusion::ObjectiveSense _600,monty::rc_ptr< ::mosek::fusion::Expression > _601){ objective_(std::string (""),_600,_601); }void mosek::fusion::Model::objective  ( const std::string & _602,    double _603) { mosek::fusion::p_Model::_get_impl(this)->objective(_602,_603); }void mosek::fusion::p_Model::objective( const std::string & _602,double _603){ objective_(_602,::mosek::fusion::ObjectiveSense::Minimize,::mosek::fusion::p_Expr::constTerm(_603)); }void mosek::fusion::Model::objective  ( const std::string & _604,    mosek::fusion::ObjectiveSense _605,    double _606) { mosek::fusion::p_Model::_get_impl(this)->objective(_604,_605,_606); }void mosek::fusion::p_Model::objective( const std::string & _604,mosek::fusion::ObjectiveSense _605,double _606){ objective_(_604,_605,::mosek::fusion::p_Expr::constTerm(_606)); }void mosek::fusion::Model::objective  ( const std::string & _607,    mosek::fusion::ObjectiveSense _608,    monty::rc_ptr< ::mosek::fusion::Variable > _609) { mosek::fusion::p_Model::_get_impl(this)->objective(_607,_608,_609); }void mosek::fusion::p_Model::objective( const std::string & _607,mosek::fusion::ObjectiveSense _608,monty::rc_ptr< ::mosek::fusion::Variable > _609){ objective_(_607,_608,_609->asExpr()); }void mosek::fusion::Model::objective  ( const std::string & _610,    mosek::fusion::ObjectiveSense _611,    monty::rc_ptr< ::mosek::fusion::Expression > _612) { mosek::fusion::p_Model::_get_impl(this)->objective(_610,_611,_612); }void mosek::fusion::p_Model::objective( const std::string & _610,mosek::fusion::ObjectiveSense _611,monty::rc_ptr< ::mosek::fusion::Expression > _612){ objective_(_610,_611,_612); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint  ( monty::rc_ptr< ::mosek::fusion::Variable > _613,    monty::rc_ptr< ::mosek::fusion::QConeDomain > _614) { return mosek::fusion::p_Model::_get_impl(this)->constraint(_613,_614); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::constraint( monty::rc_ptr< ::mosek::fusion::Variable > _613,monty::rc_ptr< ::mosek::fusion::QConeDomain > _614){ return constraint_(std::string (""),nullptr,_613->asExpr(),_614); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint  ( const std::string & _615,    monty::rc_ptr< ::mosek::fusion::Variable > _616,    monty::rc_ptr< ::mosek::fusion::QConeDomain > _617) { return mosek::fusion::p_Model::_get_impl(this)->constraint(_615,_616,_617); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::constraint( const std::string & _615,monty::rc_ptr< ::mosek::fusion::Variable > _616,monty::rc_ptr< ::mosek::fusion::QConeDomain > _617){ return constraint_(_615,nullptr,_616->asExpr(),_617); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint  ( monty::rc_ptr< ::mosek::fusion::Set > _618,    monty::rc_ptr< ::mosek::fusion::Variable > _619,    monty::rc_ptr< ::mosek::fusion::QConeDomain > _620) { return mosek::fusion::p_Model::_get_impl(this)->constraint(_618,_619,_620); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::constraint( monty::rc_ptr< ::mosek::fusion::Set > _618,monty::rc_ptr< ::mosek::fusion::Variable > _619,monty::rc_ptr< ::mosek::fusion::QConeDomain > _620){ return constraint_(std::string (""),_618,_619->asExpr(),_620); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint  ( const std::string & _621,    monty::rc_ptr< ::mosek::fusion::Set > _622,    monty::rc_ptr< ::mosek::fusion::Variable > _623,    monty::rc_ptr< ::mosek::fusion::QConeDomain > _624) { return mosek::fusion::p_Model::_get_impl(this)->constraint(_621,_622,_623,_624); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::constraint( const std::string & _621,monty::rc_ptr< ::mosek::fusion::Set > _622,monty::rc_ptr< ::mosek::fusion::Variable > _623,monty::rc_ptr< ::mosek::fusion::QConeDomain > _624){ return constraint_(_621,_622,_623->asExpr(),_624); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint  ( monty::rc_ptr< ::mosek::fusion::Variable > _625,    monty::rc_ptr< ::mosek::fusion::RangeDomain > _626) { return mosek::fusion::p_Model::_get_impl(this)->constraint(_625,_626); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::constraint( monty::rc_ptr< ::mosek::fusion::Variable > _625,monty::rc_ptr< ::mosek::fusion::RangeDomain > _626){ return constraint_(std::string (""),nullptr,_625->asExpr(),_626); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint  ( const std::string & _627,    monty::rc_ptr< ::mosek::fusion::Variable > _628,    monty::rc_ptr< ::mosek::fusion::RangeDomain > _629) { return mosek::fusion::p_Model::_get_impl(this)->constraint(_627,_628,_629); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::constraint( const std::string & _627,monty::rc_ptr< ::mosek::fusion::Variable > _628,monty::rc_ptr< ::mosek::fusion::RangeDomain > _629){ return constraint_(_627,nullptr,_628->asExpr(),_629); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint  ( monty::rc_ptr< ::mosek::fusion::Set > _630,    monty::rc_ptr< ::mosek::fusion::Variable > _631,    monty::rc_ptr< ::mosek::fusion::RangeDomain > _632) { return mosek::fusion::p_Model::_get_impl(this)->constraint(_630,_631,_632); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::constraint( monty::rc_ptr< ::mosek::fusion::Set > _630,monty::rc_ptr< ::mosek::fusion::Variable > _631,monty::rc_ptr< ::mosek::fusion::RangeDomain > _632){ return constraint_(std::string (""),_630,_631->asExpr(),_632); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint  ( const std::string & _633,    monty::rc_ptr< ::mosek::fusion::Set > _634,    monty::rc_ptr< ::mosek::fusion::Variable > _635,    monty::rc_ptr< ::mosek::fusion::RangeDomain > _636) { return mosek::fusion::p_Model::_get_impl(this)->constraint(_633,_634,_635,_636); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::constraint( const std::string & _633,monty::rc_ptr< ::mosek::fusion::Set > _634,monty::rc_ptr< ::mosek::fusion::Variable > _635,monty::rc_ptr< ::mosek::fusion::RangeDomain > _636){ return constraint_(_633,_634,_635->asExpr(),_636); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint  ( monty::rc_ptr< ::mosek::fusion::Variable > _637,    monty::rc_ptr< ::mosek::fusion::LinearDomain > _638) { return mosek::fusion::p_Model::_get_impl(this)->constraint(_637,_638); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::constraint( monty::rc_ptr< ::mosek::fusion::Variable > _637,monty::rc_ptr< ::mosek::fusion::LinearDomain > _638){ return constraint_(std::string (""),nullptr,_637->asExpr(),_638); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint  ( const std::string & _639,    monty::rc_ptr< ::mosek::fusion::Variable > _640,    monty::rc_ptr< ::mosek::fusion::LinearDomain > _641) { return mosek::fusion::p_Model::_get_impl(this)->constraint(_639,_640,_641); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::constraint( const std::string & _639,monty::rc_ptr< ::mosek::fusion::Variable > _640,monty::rc_ptr< ::mosek::fusion::LinearDomain > _641){ return constraint_(_639,nullptr,_640->asExpr(),_641); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint  ( monty::rc_ptr< ::mosek::fusion::Set > _642,    monty::rc_ptr< ::mosek::fusion::Variable > _643,    monty::rc_ptr< ::mosek::fusion::LinearDomain > _644) { return mosek::fusion::p_Model::_get_impl(this)->constraint(_642,_643,_644); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::constraint( monty::rc_ptr< ::mosek::fusion::Set > _642,monty::rc_ptr< ::mosek::fusion::Variable > _643,monty::rc_ptr< ::mosek::fusion::LinearDomain > _644){ return constraint_(std::string (""),_642,_643->asExpr(),_644); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint  ( const std::string & _645,    monty::rc_ptr< ::mosek::fusion::Set > _646,    monty::rc_ptr< ::mosek::fusion::Variable > _647,    monty::rc_ptr< ::mosek::fusion::LinearDomain > _648) { return mosek::fusion::p_Model::_get_impl(this)->constraint(_645,_646,_647,_648); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::constraint( const std::string & _645,monty::rc_ptr< ::mosek::fusion::Set > _646,monty::rc_ptr< ::mosek::fusion::Variable > _647,monty::rc_ptr< ::mosek::fusion::LinearDomain > _648){ return constraint_(_645,_646,_647->asExpr(),_648); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint  ( monty::rc_ptr< ::mosek::fusion::Variable > _649,    monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _650) { return mosek::fusion::p_Model::_get_impl(this)->constraint(_649,_650); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::constraint( monty::rc_ptr< ::mosek::fusion::Variable > _649,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _650){ return constraint_(std::string (""),_649->asExpr(),_650); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint  ( const std::string & _651,    monty::rc_ptr< ::mosek::fusion::Variable > _652,    monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _653) { return mosek::fusion::p_Model::_get_impl(this)->constraint(_651,_652,_653); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::constraint( const std::string & _651,monty::rc_ptr< ::mosek::fusion::Variable > _652,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _653){ return constraint_(_651,_652->asExpr(),_653); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint  ( monty::rc_ptr< ::mosek::fusion::Variable > _654,    monty::rc_ptr< ::mosek::fusion::PSDDomain > _655) { return mosek::fusion::p_Model::_get_impl(this)->constraint(_654,_655); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::constraint( monty::rc_ptr< ::mosek::fusion::Variable > _654,monty::rc_ptr< ::mosek::fusion::PSDDomain > _655){ return constraint_(std::string (""),_654->asExpr(),_655); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint  ( const std::string & _656,    monty::rc_ptr< ::mosek::fusion::Variable > _657,    monty::rc_ptr< ::mosek::fusion::PSDDomain > _658) { return mosek::fusion::p_Model::_get_impl(this)->constraint(_656,_657,_658); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::constraint( const std::string & _656,monty::rc_ptr< ::mosek::fusion::Variable > _657,monty::rc_ptr< ::mosek::fusion::PSDDomain > _658){ return constraint_(_656,_657->asExpr(),_658); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint  ( monty::rc_ptr< ::mosek::fusion::Expression > _659,    monty::rc_ptr< ::mosek::fusion::QConeDomain > _660) { return mosek::fusion::p_Model::_get_impl(this)->constraint(_659,_660); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::constraint( monty::rc_ptr< ::mosek::fusion::Expression > _659,monty::rc_ptr< ::mosek::fusion::QConeDomain > _660){ return constraint_(std::string (""),nullptr,_659,_660); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint  ( const std::string & _661,    monty::rc_ptr< ::mosek::fusion::Expression > _662,    monty::rc_ptr< ::mosek::fusion::QConeDomain > _663) { return mosek::fusion::p_Model::_get_impl(this)->constraint(_661,_662,_663); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::constraint( const std::string & _661,monty::rc_ptr< ::mosek::fusion::Expression > _662,monty::rc_ptr< ::mosek::fusion::QConeDomain > _663){ return constraint_(_661,nullptr,_662,_663); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint  ( monty::rc_ptr< ::mosek::fusion::Set > _664,    monty::rc_ptr< ::mosek::fusion::Expression > _665,    monty::rc_ptr< ::mosek::fusion::QConeDomain > _666) { return mosek::fusion::p_Model::_get_impl(this)->constraint(_664,_665,_666); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::constraint( monty::rc_ptr< ::mosek::fusion::Set > _664,monty::rc_ptr< ::mosek::fusion::Expression > _665,monty::rc_ptr< ::mosek::fusion::QConeDomain > _666){ return constraint_(std::string (""),_664,_665,_666); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint  ( const std::string & _667,    monty::rc_ptr< ::mosek::fusion::Set > _668,    monty::rc_ptr< ::mosek::fusion::Expression > _669,    monty::rc_ptr< ::mosek::fusion::QConeDomain > _670) { return mosek::fusion::p_Model::_get_impl(this)->constraint(_667,_668,_669,_670); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::constraint( const std::string & _667,monty::rc_ptr< ::mosek::fusion::Set > _668,monty::rc_ptr< ::mosek::fusion::Expression > _669,monty::rc_ptr< ::mosek::fusion::QConeDomain > _670){ return constraint_(_667,_668,_669,_670); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint  ( monty::rc_ptr< ::mosek::fusion::Expression > _671,    monty::rc_ptr< ::mosek::fusion::RangeDomain > _672) { return mosek::fusion::p_Model::_get_impl(this)->constraint(_671,_672); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::constraint( monty::rc_ptr< ::mosek::fusion::Expression > _671,monty::rc_ptr< ::mosek::fusion::RangeDomain > _672){ return constraint_(std::string (""),nullptr,_671,_672); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint  ( const std::string & _673,    monty::rc_ptr< ::mosek::fusion::Expression > _674,    monty::rc_ptr< ::mosek::fusion::RangeDomain > _675) { return mosek::fusion::p_Model::_get_impl(this)->constraint(_673,_674,_675); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::constraint( const std::string & _673,monty::rc_ptr< ::mosek::fusion::Expression > _674,monty::rc_ptr< ::mosek::fusion::RangeDomain > _675){ return constraint_(_673,nullptr,_674,_675); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint  ( monty::rc_ptr< ::mosek::fusion::Set > _676,    monty::rc_ptr< ::mosek::fusion::Expression > _677,    monty::rc_ptr< ::mosek::fusion::RangeDomain > _678) { return mosek::fusion::p_Model::_get_impl(this)->constraint(_676,_677,_678); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::constraint( monty::rc_ptr< ::mosek::fusion::Set > _676,monty::rc_ptr< ::mosek::fusion::Expression > _677,monty::rc_ptr< ::mosek::fusion::RangeDomain > _678){ return constraint_(std::string (""),_676,_677,_678); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint  ( const std::string & _679,    monty::rc_ptr< ::mosek::fusion::Set > _680,    monty::rc_ptr< ::mosek::fusion::Expression > _681,    monty::rc_ptr< ::mosek::fusion::RangeDomain > _682) { return mosek::fusion::p_Model::_get_impl(this)->constraint(_679,_680,_681,_682); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::constraint( const std::string & _679,monty::rc_ptr< ::mosek::fusion::Set > _680,monty::rc_ptr< ::mosek::fusion::Expression > _681,monty::rc_ptr< ::mosek::fusion::RangeDomain > _682){ return constraint_(_679,_680,_681,_682); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint  ( monty::rc_ptr< ::mosek::fusion::Expression > _683,    monty::rc_ptr< ::mosek::fusion::LinearDomain > _684) { return mosek::fusion::p_Model::_get_impl(this)->constraint(_683,_684); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::constraint( monty::rc_ptr< ::mosek::fusion::Expression > _683,monty::rc_ptr< ::mosek::fusion::LinearDomain > _684){ return constraint_(std::string (""),nullptr,_683,_684); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint  ( const std::string & _685,    monty::rc_ptr< ::mosek::fusion::Expression > _686,    monty::rc_ptr< ::mosek::fusion::LinearDomain > _687) { return mosek::fusion::p_Model::_get_impl(this)->constraint(_685,_686,_687); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::constraint( const std::string & _685,monty::rc_ptr< ::mosek::fusion::Expression > _686,monty::rc_ptr< ::mosek::fusion::LinearDomain > _687){ return constraint_(_685,nullptr,_686,_687); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint  ( monty::rc_ptr< ::mosek::fusion::Set > _688,    monty::rc_ptr< ::mosek::fusion::Expression > _689,    monty::rc_ptr< ::mosek::fusion::LinearDomain > _690) { return mosek::fusion::p_Model::_get_impl(this)->constraint(_688,_689,_690); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::constraint( monty::rc_ptr< ::mosek::fusion::Set > _688,monty::rc_ptr< ::mosek::fusion::Expression > _689,monty::rc_ptr< ::mosek::fusion::LinearDomain > _690){ return constraint_(std::string (""),_688,_689,_690); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint  ( const std::string & _691,    monty::rc_ptr< ::mosek::fusion::Set > _692,    monty::rc_ptr< ::mosek::fusion::Expression > _693,    monty::rc_ptr< ::mosek::fusion::LinearDomain > _694) { return mosek::fusion::p_Model::_get_impl(this)->constraint(_691,_692,_693,_694); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::constraint( const std::string & _691,monty::rc_ptr< ::mosek::fusion::Set > _692,monty::rc_ptr< ::mosek::fusion::Expression > _693,monty::rc_ptr< ::mosek::fusion::LinearDomain > _694){ return constraint_(_691,_692,_693,_694); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint  ( monty::rc_ptr< ::mosek::fusion::Expression > _695,    monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _696) { return mosek::fusion::p_Model::_get_impl(this)->constraint(_695,_696); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::constraint( monty::rc_ptr< ::mosek::fusion::Expression > _695,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _696){ return constraint_(std::string (""),_695,_696); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint  ( const std::string & _697,    monty::rc_ptr< ::mosek::fusion::Expression > _698,    monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _699) { return mosek::fusion::p_Model::_get_impl(this)->constraint(_697,_698,_699); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::constraint( const std::string & _697,monty::rc_ptr< ::mosek::fusion::Expression > _698,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _699){ return constraint_(_697,_698,_699); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint  ( monty::rc_ptr< ::mosek::fusion::Expression > _700,    monty::rc_ptr< ::mosek::fusion::PSDDomain > _701) { return mosek::fusion::p_Model::_get_impl(this)->constraint(_700,_701); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::constraint( monty::rc_ptr< ::mosek::fusion::Expression > _700,monty::rc_ptr< ::mosek::fusion::PSDDomain > _701){ return constraint_(std::string (""),_700,_701); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint  ( const std::string & _702,    monty::rc_ptr< ::mosek::fusion::Expression > _703,    monty::rc_ptr< ::mosek::fusion::PSDDomain > _704) { return mosek::fusion::p_Model::_get_impl(this)->constraint(_702,_703,_704); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::constraint( const std::string & _702,monty::rc_ptr< ::mosek::fusion::Expression > _703,monty::rc_ptr< ::mosek::fusion::PSDDomain > _704){ return constraint_(_702,_703,_704); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable  ( monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _705) { return mosek::fusion::p_Model::_get_impl(this)->variable(_705); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::variable( monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _705){ return variable_(std::string (""),mosek::fusion::p_LinPSDDomain::_get_impl(_705)->shape,_705); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable  ( int _706,    int _707,    monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _708) { return mosek::fusion::p_Model::_get_impl(this)->variable(_706,_707,_708); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::variable( int _706,int _707,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _708){ return variable_(std::string (""),::mosek::fusion::p_Set::make(_706,_706,_707),_708); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable  ( int _709,    monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _710) { return mosek::fusion::p_Model::_get_impl(this)->variable(_709,_710); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::variable( int _709,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _710){ return variable_(std::string (""),::mosek::fusion::p_Set::make(_709,_709),_710); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable  ( const std::string & _711,    monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _712) { return mosek::fusion::p_Model::_get_impl(this)->variable(_711,_712); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::variable( const std::string & _711,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _712){ return variable_(_711,nullptr,_712); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable  ( const std::string & _713,    int _714,    int _715,    monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _716) { return mosek::fusion::p_Model::_get_impl(this)->variable(_713,_714,_715,_716); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::variable( const std::string & _713,int _714,int _715,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _716){ return variable_(_713,::mosek::fusion::p_Set::make(_714,_714,_715),_716); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable  ( const std::string & _717,    int _718,    monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _719) { return mosek::fusion::p_Model::_get_impl(this)->variable(_717,_718,_719); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::variable( const std::string & _717,int _718,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _719){ return variable_(_717,::mosek::fusion::p_Set::make(_718,_718),_719); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable  ( const std::string & _720,    monty::rc_ptr< ::mosek::fusion::Set > _721,    monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _722) { return mosek::fusion::p_Model::_get_impl(this)->variable(_720,_721,_722); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::variable( const std::string & _720,monty::rc_ptr< ::mosek::fusion::Set > _721,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _722){ return variable_(_720,_721,_722); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable  ( monty::rc_ptr< ::mosek::fusion::PSDDomain > _723) { return mosek::fusion::p_Model::_get_impl(this)->variable(_723); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::variable( monty::rc_ptr< ::mosek::fusion::PSDDomain > _723){ return variable_(std::string (""),mosek::fusion::p_PSDDomain::_get_impl(_723)->shape,_723); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable  ( int _724,    int _725,    monty::rc_ptr< ::mosek::fusion::PSDDomain > _726) { return mosek::fusion::p_Model::_get_impl(this)->variable(_724,_725,_726); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::variable( int _724,int _725,monty::rc_ptr< ::mosek::fusion::PSDDomain > _726){ return variable_(std::string (""),::mosek::fusion::p_Set::make(_724,_724,_725),_726); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable  ( int _727,    monty::rc_ptr< ::mosek::fusion::PSDDomain > _728) { return mosek::fusion::p_Model::_get_impl(this)->variable(_727,_728); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::variable( int _727,monty::rc_ptr< ::mosek::fusion::PSDDomain > _728){ return variable_(std::string (""),::mosek::fusion::p_Set::make(_727,_727),_728); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable  ( const std::string & _729,    monty::rc_ptr< ::mosek::fusion::PSDDomain > _730) { return mosek::fusion::p_Model::_get_impl(this)->variable(_729,_730); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::variable( const std::string & _729,monty::rc_ptr< ::mosek::fusion::PSDDomain > _730){ return variable_(_729,nullptr,_730); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable  ( const std::string & _731,    int _732,    int _733,    monty::rc_ptr< ::mosek::fusion::PSDDomain > _734) { return mosek::fusion::p_Model::_get_impl(this)->variable(_731,_732,_733,_734); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::variable( const std::string & _731,int _732,int _733,monty::rc_ptr< ::mosek::fusion::PSDDomain > _734){ return variable_(_731,::mosek::fusion::p_Set::make(_732,_732,_733),_734); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable  ( const std::string & _735,    int _736,    monty::rc_ptr< ::mosek::fusion::PSDDomain > _737) { return mosek::fusion::p_Model::_get_impl(this)->variable(_735,_736,_737); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::variable( const std::string & _735,int _736,monty::rc_ptr< ::mosek::fusion::PSDDomain > _737){ return variable_(_735,::mosek::fusion::p_Set::make(_736,_736),_737); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable  ( const std::string & _738,    monty::rc_ptr< ::mosek::fusion::Set > _739,    monty::rc_ptr< ::mosek::fusion::PSDDomain > _740) { return mosek::fusion::p_Model::_get_impl(this)->variable(_738,_739,_740); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::variable( const std::string & _738,monty::rc_ptr< ::mosek::fusion::Set > _739,monty::rc_ptr< ::mosek::fusion::PSDDomain > _740){ return variable_(_738,_739,_740); }monty::rc_ptr< ::mosek::fusion::SymmetricVariable > mosek::fusion::Model::variable  ( int _741,    monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > _742) { return mosek::fusion::p_Model::_get_impl(this)->variable(_741,_742); }monty::rc_ptr< ::mosek::fusion::SymmetricVariable > mosek::fusion::p_Model::variable( int _741,monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > _742){ return variable_(std::string (""),_741,_742); }monty::rc_ptr< ::mosek::fusion::SymmetricVariable > mosek::fusion::Model::variable  ( const std::string & _743,    int _744,    monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > _745) { return mosek::fusion::p_Model::_get_impl(this)->variable(_743,_744,_745); }monty::rc_ptr< ::mosek::fusion::SymmetricVariable > mosek::fusion::p_Model::variable( const std::string & _743,int _744,monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > _745){ return variable_(_743,_744,_745); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable  ( monty::rc_ptr< ::mosek::fusion::QConeDomain > _746) { return mosek::fusion::p_Model::_get_impl(this)->variable(_746); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::variable( monty::rc_ptr< ::mosek::fusion::QConeDomain > _746){ return variable_(std::string (""),nullptr,_746); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable  ( monty::rc_ptr< ::mosek::fusion::RangeDomain > _747) { return mosek::fusion::p_Model::_get_impl(this)->variable(_747); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::variable( monty::rc_ptr< ::mosek::fusion::RangeDomain > _747){ return ranged_variable(std::string (""),nullptr,_747); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable  ( monty::rc_ptr< ::mosek::fusion::LinearDomain > _748) { return mosek::fusion::p_Model::_get_impl(this)->variable(_748); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::variable( monty::rc_ptr< ::mosek::fusion::LinearDomain > _748){ return variable_(std::string (""),nullptr,_748); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable  ( std::shared_ptr< monty::ndarray< int,1 > > _749,    monty::rc_ptr< ::mosek::fusion::RangeDomain > _750) { return mosek::fusion::p_Model::_get_impl(this)->variable(_749,_750); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::variable( std::shared_ptr< monty::ndarray< int,1 > > _749,monty::rc_ptr< ::mosek::fusion::RangeDomain > _750){ return ranged_variable(std::string (""),::mosek::fusion::p_Set::make(_749),_750); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable  ( std::shared_ptr< monty::ndarray< int,1 > > _751,    monty::rc_ptr< ::mosek::fusion::LinearDomain > _752) { return mosek::fusion::p_Model::_get_impl(this)->variable(_751,_752); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::variable( std::shared_ptr< monty::ndarray< int,1 > > _751,monty::rc_ptr< ::mosek::fusion::LinearDomain > _752){ return variable_(std::string (""),::mosek::fusion::p_Set::make(_751),_752); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable  ( monty::rc_ptr< ::mosek::fusion::Set > _753,    monty::rc_ptr< ::mosek::fusion::QConeDomain > _754) { return mosek::fusion::p_Model::_get_impl(this)->variable(_753,_754); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::variable( monty::rc_ptr< ::mosek::fusion::Set > _753,monty::rc_ptr< ::mosek::fusion::QConeDomain > _754){ return variable_(std::string (""),_753,_754); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable  ( monty::rc_ptr< ::mosek::fusion::Set > _755,    monty::rc_ptr< ::mosek::fusion::RangeDomain > _756) { return mosek::fusion::p_Model::_get_impl(this)->variable(_755,_756); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::variable( monty::rc_ptr< ::mosek::fusion::Set > _755,monty::rc_ptr< ::mosek::fusion::RangeDomain > _756){ return ranged_variable(std::string (""),_755,_756); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable  ( monty::rc_ptr< ::mosek::fusion::Set > _757,    monty::rc_ptr< ::mosek::fusion::LinearDomain > _758) { return mosek::fusion::p_Model::_get_impl(this)->variable(_757,_758); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::variable( monty::rc_ptr< ::mosek::fusion::Set > _757,monty::rc_ptr< ::mosek::fusion::LinearDomain > _758){ return variable_(std::string (""),_757,_758); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable  ( int _759,    monty::rc_ptr< ::mosek::fusion::QConeDomain > _760) { return mosek::fusion::p_Model::_get_impl(this)->variable(_759,_760); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::variable( int _759,monty::rc_ptr< ::mosek::fusion::QConeDomain > _760){ return variable_(std::string (""),::mosek::fusion::p_Set::make(_759),_760); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable  ( int _761,    monty::rc_ptr< ::mosek::fusion::RangeDomain > _762) { return mosek::fusion::p_Model::_get_impl(this)->variable(_761,_762); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::variable( int _761,monty::rc_ptr< ::mosek::fusion::RangeDomain > _762){ return ranged_variable(std::string (""),::mosek::fusion::p_Set::make(_761),_762); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable  ( int _763,    monty::rc_ptr< ::mosek::fusion::LinearDomain > _764) { return mosek::fusion::p_Model::_get_impl(this)->variable(_763,_764); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::variable( int _763,monty::rc_ptr< ::mosek::fusion::LinearDomain > _764){ return variable_(std::string (""),::mosek::fusion::p_Set::make(_763),_764); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable  ( std::shared_ptr< monty::ndarray< int,1 > > _765) { return mosek::fusion::p_Model::_get_impl(this)->variable(_765); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::variable( std::shared_ptr< monty::ndarray< int,1 > > _765){ return variable_(std::string (""),::mosek::fusion::p_Set::make(_765),::mosek::fusion::p_Domain::unbounded()); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable  ( int _766) { return mosek::fusion::p_Model::_get_impl(this)->variable(_766); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::variable( int _766){ return variable_(std::string (""),::mosek::fusion::p_Set::make(_766),::mosek::fusion::p_Domain::unbounded()); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable  ( ) { return mosek::fusion::p_Model::_get_impl(this)->variable(); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::variable( ){ return variable_(std::string (""),::mosek::fusion::p_Set::make((int)1),::mosek::fusion::p_Domain::unbounded()); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable  ( const std::string & _767,    monty::rc_ptr< ::mosek::fusion::QConeDomain > _768) { return mosek::fusion::p_Model::_get_impl(this)->variable(_767,_768); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::variable( const std::string & _767,monty::rc_ptr< ::mosek::fusion::QConeDomain > _768){ return variable_(_767,nullptr,_768); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable  ( const std::string & _769,    monty::rc_ptr< ::mosek::fusion::RangeDomain > _770) { return mosek::fusion::p_Model::_get_impl(this)->variable(_769,_770); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::variable( const std::string & _769,monty::rc_ptr< ::mosek::fusion::RangeDomain > _770){ return ranged_variable(_769,nullptr,_770); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable  ( const std::string & _771,    monty::rc_ptr< ::mosek::fusion::LinearDomain > _772) { return mosek::fusion::p_Model::_get_impl(this)->variable(_771,_772); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::variable( const std::string & _771,monty::rc_ptr< ::mosek::fusion::LinearDomain > _772){ return variable_(_771,nullptr,_772); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable  ( const std::string & _773,    std::shared_ptr< monty::ndarray< int,1 > > _774,    monty::rc_ptr< ::mosek::fusion::RangeDomain > _775) { return mosek::fusion::p_Model::_get_impl(this)->variable(_773,_774,_775); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::variable( const std::string & _773,std::shared_ptr< monty::ndarray< int,1 > > _774,monty::rc_ptr< ::mosek::fusion::RangeDomain > _775){ return ranged_variable(_773,::mosek::fusion::p_Set::make(_774),_775); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable  ( const std::string & _776,    std::shared_ptr< monty::ndarray< int,1 > > _777,    monty::rc_ptr< ::mosek::fusion::LinearDomain > _778) { return mosek::fusion::p_Model::_get_impl(this)->variable(_776,_777,_778); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::variable( const std::string & _776,std::shared_ptr< monty::ndarray< int,1 > > _777,monty::rc_ptr< ::mosek::fusion::LinearDomain > _778){ return _pubthis->variable(_776,::mosek::fusion::p_Set::make(_777),_778); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable  ( const std::string & _779,    monty::rc_ptr< ::mosek::fusion::Set > _780,    monty::rc_ptr< ::mosek::fusion::QConeDomain > _781) { return mosek::fusion::p_Model::_get_impl(this)->variable(_779,_780,_781); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::variable( const std::string & _779,monty::rc_ptr< ::mosek::fusion::Set > _780,monty::rc_ptr< ::mosek::fusion::QConeDomain > _781){ return variable_(_779,_780,_781); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable  ( const std::string & _782,    monty::rc_ptr< ::mosek::fusion::Set > _783,    monty::rc_ptr< ::mosek::fusion::RangeDomain > _784) { return mosek::fusion::p_Model::_get_impl(this)->variable(_782,_783,_784); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::variable( const std::string & _782,monty::rc_ptr< ::mosek::fusion::Set > _783,monty::rc_ptr< ::mosek::fusion::RangeDomain > _784){ return ranged_variable(_782,_783,_784); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable  ( const std::string & _785,    monty::rc_ptr< ::mosek::fusion::Set > _786,    monty::rc_ptr< ::mosek::fusion::LinearDomain > _787) { return mosek::fusion::p_Model::_get_impl(this)->variable(_785,_786,_787); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::variable( const std::string & _785,monty::rc_ptr< ::mosek::fusion::Set > _786,monty::rc_ptr< ::mosek::fusion::LinearDomain > _787){ return variable_(_785,_786,_787); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable  ( const std::string & _788,    int _789,    monty::rc_ptr< ::mosek::fusion::QConeDomain > _790) { return mosek::fusion::p_Model::_get_impl(this)->variable(_788,_789,_790); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::variable( const std::string & _788,int _789,monty::rc_ptr< ::mosek::fusion::QConeDomain > _790){ return variable_(_788,::mosek::fusion::p_Set::make(_789),_790); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable  ( const std::string & _791,    int _792,    monty::rc_ptr< ::mosek::fusion::RangeDomain > _793) { return mosek::fusion::p_Model::_get_impl(this)->variable(_791,_792,_793); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::variable( const std::string & _791,int _792,monty::rc_ptr< ::mosek::fusion::RangeDomain > _793){ return ranged_variable(_791,::mosek::fusion::p_Set::make(_792),_793); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable  ( const std::string & _794,    int _795,    monty::rc_ptr< ::mosek::fusion::LinearDomain > _796) { return mosek::fusion::p_Model::_get_impl(this)->variable(_794,_795,_796); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::variable( const std::string & _794,int _795,monty::rc_ptr< ::mosek::fusion::LinearDomain > _796){ return variable_(_794,::mosek::fusion::p_Set::make(_795),_796); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable  ( const std::string & _797,    std::shared_ptr< monty::ndarray< int,1 > > _798) { return mosek::fusion::p_Model::_get_impl(this)->variable(_797,_798); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::variable( const std::string & _797,std::shared_ptr< monty::ndarray< int,1 > > _798){ return variable_(_797,::mosek::fusion::p_Set::make(_798),::mosek::fusion::p_Domain::unbounded()); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable  ( const std::string & _799,    int _800) { return mosek::fusion::p_Model::_get_impl(this)->variable(_799,_800); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::variable( const std::string & _799,int _800){ return variable_(_799,::mosek::fusion::p_Set::make(_800),::mosek::fusion::p_Domain::unbounded()); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable  ( const std::string & _801) { return mosek::fusion::p_Model::_get_impl(this)->variable(_801); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::variable( const std::string & _801){ return variable_(_801,::mosek::fusion::p_Set::make((int)1),::mosek::fusion::p_Domain::unbounded()); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::ranged_variable( const std::string & _802,int _803,monty::rc_ptr< ::mosek::fusion::SymmetricRangeDomain > _804){ monty::rc_ptr< ::mosek::fusion::SymRangedVariable > _805 = nullptr; if ((((int)((_802).size()) > (int)0) && hasVariable(_802))){ throw ::mosek::fusion::NameError(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer().get())->a(std::string ("Duplicate variable name '")).get())->a(_802).get())->a(std::string ("'")).get())->toString());}else {}int _806 = _803; if ((_806 > (int)0)){ if (((mosek::fusion::p_SymmetricRangeDomain::_get_impl(_804)->dim > (int)0) && (mosek::fusion::p_SymmetricRangeDomain::_get_impl(_804)->dim != _806))){ throw ::mosek::fusion::DimensionError(std::string ("Mismatching shape and domain"));}else {}}else { (_806 = ([&]() -> int { if ( (mosek::fusion::p_SymmetricRangeDomain::_get_impl(_804)->dim > (int)0)) return (mosek::fusion::p_SymmetricRangeDomain::_get_impl(_804)->dim); else return ((int)1); })()); }int _807 = task_vars_used; int _808 = task_numcon(); int _809 = task_numcone(); int _810 = task_numbarvar(); {monty::finally _7616([&]{ if (! _805){ task_cleanup(_807,_808,_809,_810); }else {}});{ std::shared_ptr< monty::ndarray< int,1 > > _811 = nullptr; int _812 = ((_806 * (_806 + (int)1)) / (int)2); int _813 = (int)0; if (mosek::fusion::p_RangeDomain::_get_impl(_804)->sparse_flag){ (_813 = task_alloc_vars(_812)); natvarmap_ensure(_812); (natvarmap_num = (natvarmap_num + _812)); std::shared_ptr< monty::ndarray< double,1 > > _814 = ([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _7617; for (int _815=(int)0, _7618=_806; _815 < _7618;++_815) for (int _816=(int)0, _7619=_815; _816 < _7619;++_816)_7617.push_back(mosek::fusion::p_SymmetricRangeDomain::_get_impl(_804.get())->get_lb_item((long long)((((_815 * (_815 + (int)1)) / (int)2) + _816)))); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7617.size()),_7617.begin(),_7617.end())); })(); std::shared_ptr< monty::ndarray< double,1 > > _817 = ([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _7620; for (int _818=(int)0, _7621=_806; _818 < _7621;++_818) for (int _819=(int)0, _7622=_818; _819 < _7622;++_819)_7620.push_back(mosek::fusion::p_SymmetricRangeDomain::_get_impl(_804.get())->get_ub_item((long long)((((_818 * (_818 + (int)1)) / (int)2) + _819)))); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7620.size()),_7620.begin(),_7620.end())); })(); task_var_putboundslice_ra(_813,(_813 + _812),_814,_817); (_811 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_812)))); int _7623 = (int)0; int _7624 = _812; for (int _820 = _7623;_820<_7624;++_820){ (((*_811)(_820)) = (_813 + _820)); }int _7625 = (int)0; int _7626 = _812; for (int _821 = _7625;_821<_7626;++_821){ (((*natvarmap_idx)((_821 + _813))) = (long long)_821); }int _7627 = (int)0; int _7628 = _812; for (int _822 = _7627;_822<_7628;++_822){ (((*natvarmap_Var)((_822 + _813))) = vars_used); }}else {}(_805 = ::mosek::fusion::p_SymRangedVariable::_new_SymRangedVariable(_pubthis,_802,::mosek::fusion::RangeDomain::t(_804),_806,_811,numVariables())); if (mosek::fusion::p_RangeDomain::_get_impl(_804)->cardinal_flag){ _805->makeInteger(); }else {}}}addVariable(_802,::mosek::fusion::ModelVariable::t(_805)); return _805; }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::ranged_variable( const std::string & _823,monty::rc_ptr< ::mosek::fusion::Set > _824,monty::rc_ptr< ::mosek::fusion::RangeDomain > _825){ monty::rc_ptr< ::mosek::fusion::ModelVariable > _826 = nullptr; monty::rc_ptr< ::mosek::fusion::Set > _827; if ((((int)((_823).size()) > (int)0) && hasVariable(_823))){ throw ::mosek::fusion::NameError(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer().get())->a(std::string ("Duplicate variable name '")).get())->a(_823).get())->a(std::string ("'")).get())->toString());}else {}if (_824){ if ((! mosek::fusion::p_RangeDomain::_get_impl(_825.get())->match_shape(_824))){ throw ::mosek::fusion::DimensionError(std::string ("Mismatching shape and domain"));}else {}(_827 = _824); }else { (_827 = mosek::fusion::p_RangeDomain::_get_impl(_825)->shape); if (! _827){ (_827 = ::mosek::fusion::p_IntSet::_new_IntSet((int)1)); }else {}}int _828 = task_vars_used; int _829 = task_numcon(); int _830 = task_numcone(); int _831 = task_numbarvar(); {monty::finally _7629([&]{ if (! _826){ task_cleanup(_828,_829,_830,_831); }else {}});{ std::shared_ptr< monty::ndarray< int,1 > > _832 = nullptr; int _833 = (int)mosek::fusion::p_Set::_get_impl(_827)->size; int _834 = (int)0; if ((! mosek::fusion::p_RangeDomain::_get_impl(_825)->sparse_flag)){ (_834 = task_alloc_vars(_833)); natvarmap_ensure(_833); (natvarmap_num = (natvarmap_num + _833)); std::shared_ptr< monty::ndarray< double,1 > > _835 = ([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _7630; for (long long _836=(long long)0, _7631=_833; _836 < _7631;++_836)_7630.push_back(mosek::fusion::p_RangeDomain::_get_impl(_825.get())->get_lb_item(_836)); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7630.size()),_7630.begin(),_7630.end())); })(); std::shared_ptr< monty::ndarray< double,1 > > _837 = ([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _7632; for (long long _838=(long long)0, _7633=_833; _838 < _7633;++_838)_7632.push_back(mosek::fusion::p_RangeDomain::_get_impl(_825.get())->get_ub_item(_838)); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7632.size()),_7632.begin(),_7632.end())); })(); task_var_putboundslice_ra(_834,(_834 + _833),_835,_837); (_832 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_833)))); int _7634 = (int)0; int _7635 = _833; for (int _839 = _7634;_839<_7635;++_839){ (((*_832)(_839)) = (_834 + _839)); }int _7636 = (int)0; int _7637 = _833; for (int _840 = _7636;_840<_7637;++_840){ (((*natvarmap_idx)((_840 + _834))) = (long long)_840); }int _7638 = (int)0; int _7639 = _833; for (int _841 = _7638;_841<_7639;++_841){ (((*natvarmap_Var)((_841 + _834))) = vars_used); }}else {}(_826 = ::mosek::fusion::p_RangedVariable::_new_RangedVariable(_pubthis,_823,_827,_825,_832,numVariables())); if (mosek::fusion::p_RangeDomain::_get_impl(_825)->cardinal_flag){ _826->makeInteger(); }else {}}}addVariable(_823,_826); return _826; }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::variable_( const std::string & _842,monty::rc_ptr< ::mosek::fusion::Set > _843,monty::rc_ptr< ::mosek::fusion::QConeDomain > _844){ monty::rc_ptr< ::mosek::fusion::ModelVariable > _845 = nullptr; monty::rc_ptr< ::mosek::fusion::ModelVariable > _846 = nullptr; if ((((int)((_842).size()) > (int)0) && hasVariable(_842))){ throw ::mosek::fusion::NameError(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer().get())->a(std::string ("Duplicate variable name '")).get())->a(_842).get())->a(std::string ("'")).get())->toString());}else {}monty::rc_ptr< ::mosek::fusion::Set > _847 = ([&]() -> monty::rc_ptr< ::mosek::fusion::Set > { if ( _843) return (_843); else return (([&]() -> monty::rc_ptr< ::mosek::fusion::Set > { if ( mosek::fusion::p_QConeDomain::_get_impl(_844)->shape) return (mosek::fusion::p_QConeDomain::_get_impl(_844)->shape); else return (::mosek::fusion::p_IntSet::_new_IntSet((int)1)); })()); })(); if (((! mosek::fusion::p_QConeDomain::_get_impl(_844.get())->match_shape(_847)) || (_844->getAxis() >= mosek::fusion::p_Set::_get_impl(_847)->nd))){ throw ::mosek::fusion::DimensionError(std::string ("Mismatching shape and domain"));}else {}int _848 = ([&]() -> int { if ( mosek::fusion::p_QConeDomain::_get_impl(_844)->shape) return (_844->getAxis()); else return ((mosek::fusion::p_Set::_get_impl(_847)->nd - (int)1)); })(); int _849 = _847->dim(_848); int _850 = (int)1; int _7640 = (int)0; int _7641 = mosek::fusion::p_Set::_get_impl(_847)->nd; for (int _851 = _7640;_851<_7641;++_851){ if ((_848 != _851)){ (_850 *= _847->dim(_851)); }else {}}int _852 = (int)1; int _7642 = (int)0; int _7643 = _848; for (int _853 = _7642;_853<_7643;++_853){ (_852 *= _847->dim(_853)); }int _854 = (int)1; int _7644 = (_848 + (int)1); int _7645 = mosek::fusion::p_Set::_get_impl(_847)->nd; for (int _855 = _7644;_855<_7645;++_855){ (_854 *= _847->dim(_855)); }if ((((mosek::fusion::p_QConeDomain::_get_impl(_844)->key == ::mosek::fusion::QConeKey::InQCone) && (_849 < (int)2)) || ((mosek::fusion::p_QConeDomain::_get_impl(_844)->key == ::mosek::fusion::QConeKey::InRotatedQCone) && (_849 < (int)3)))){ throw ::mosek::fusion::DimensionError(std::string ("Invalid size for cone"));}else {}int _856 = task_vars_used; int _857 = task_numcon(); int _858 = task_numcone(); int _859 = task_numbarvar(); {monty::finally _7646([&]{ if (! _845){ (natvarmap_num = _856); (natbarvarmap_num = _859); task_cleanup(_856,_857,_858,_859); }else {}});{ int _860 = (int)mosek::fusion::p_Set::_get_impl(_847)->size; int _861 = task_alloc_vars(_860); natvarmap_ensure(_860); (natvarmap_num = (natvarmap_num + _860)); int _862 = (_861 + _860); int _7647 = (int)0; int _7648 = (_862 - _861); for (int _863 = _7647;_863<_7648;++_863){ (((*natvarmap_idx)((_863 + _861))) = (long long)_863); }task_var_putboundslice_fr(_861,_862); if (mosek::fusion::p_QConeDomain::_get_impl(_844)->int_flag){ task_var_putintlist(::mosek::fusion::Utils::Tools::range(_861,_862)); }else {}int _864; std::shared_ptr< monty::ndarray< int,1 > > _865 = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _7649; for (int _866=(int)0, _7650=(_850 * _849); _866 < _7650;++_866)_7649.push_back((_866 + _861)); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7649.size()),_7649.begin(),_7649.end())); })(); if ((mosek::fusion::p_QConeDomain::_get_impl(_844)->key == ::mosek::fusion::QConeKey::InQCone)){ (_864 = task_append_quadcone(_849,_861,_850,_852,_854)); }else { (_864 = task_append_rquadcone(_849,_861,_850,_852,_854)); }(_846 = ::mosek::fusion::p_ConicVariable::_new_ConicVariable(_pubthis,_842,_844,_847,_865,_849,_864,_850,numVariables())); if (mosek::fusion::p_QConeDomain::_get_impl(_844)->int_flag){ }else {}int _7651 = (int)0; int _7652 = _860; for (int _867 = _7651;_867<_7652;++_867){ (((*natvarmap_Var)((_867 + _861))) = vars_used); }(_845 = _846); }}addVariable(_842,_845); return _845; }monty::rc_ptr< ::mosek::fusion::SymmetricVariable > mosek::fusion::p_Model::variable_( const std::string & _868,int _869,monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > _870){ monty::rc_ptr< ::mosek::fusion::SymLinearVariable > _871 = nullptr; if ((((int)((_868).size()) > (int)0) && hasVariable(_868))){ throw ::mosek::fusion::NameError(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer().get())->a(std::string ("Duplicate variable name '")).get())->a(_868).get())->a(std::string ("'")).get())->toString());}else {}int _872 = _869; if ((_872 > (int)0)){ if (((mosek::fusion::p_SymmetricLinearDomain::_get_impl(_870)->dim > (int)0) && (mosek::fusion::p_SymmetricLinearDomain::_get_impl(_870)->dim != _872))){ throw ::mosek::fusion::DimensionError(std::string ("Mismatching shape and domain"));}else {}}else { (_872 = ([&]() -> int { if ( (mosek::fusion::p_SymmetricLinearDomain::_get_impl(_870)->dim > (int)0)) return (mosek::fusion::p_SymmetricLinearDomain::_get_impl(_870)->dim); else return ((int)1); })()); }int _873 = task_vars_used; int _874 = task_numcon(); int _875 = task_numcone(); int _876 = task_numbarvar(); {monty::finally _7653([&]{ if (! _871){ task_cleanup(_873,_874,_875,_876); }else {}});{ std::shared_ptr< monty::ndarray< int,1 > > _877 = nullptr; mosek::fusion::RelationKey _878 = mosek::fusion::p_SymmetricLinearDomain::_get_impl(_870)->key; int _879 = ((_872 * (_872 + (int)1)) / (int)2); int _880 = (int)0; if ((! mosek::fusion::p_SymmetricLinearDomain::_get_impl(_870)->sparse_flag)){ (_880 = task_alloc_vars(_879)); natvarmap_ensure(_879); (natvarmap_num = (natvarmap_num + _879)); if ((_878 == ::mosek::fusion::RelationKey::IsFree)){ task_var_putboundslice_fr(_880,(_880 + _879)); }else { std::shared_ptr< monty::ndarray< double,1 > > _881 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_879))); { int _882 = (int)0; int _7654 = (int)0; int _7655 = _872; for (int _883 = _7654;_883<_7655;++_883){ int _7656 = (int)0; int _7657 = _883; for (int _884 = _7656;_884<_7657;++_884){ (((*_881)(_882)) = mosek::fusion::p_SymmetricLinearDomain::_get_impl(_870.get())->get_rhs_item((long long)(((_883 * _872) + _884)))); ( ++ _882 ); }}}if ((_878 == ::mosek::fusion::RelationKey::LessThan)){ task_var_putboundslice_up(_880,(_880 + _879),_881); }else if ((_878 == ::mosek::fusion::RelationKey::GreaterThan)){ task_var_putboundslice_lo(_880,(_880 + _879),_881); }else if ((_878 == ::mosek::fusion::RelationKey::EqualsTo)){ task_var_putboundslice_fx(_880,(_880 + _879),_881); }else {}}(_877 = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _7658; for (int _885=(int)0, _7659=_879; _885 < _7659;++_885)_7658.push_back((_880 + _885)); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7658.size()),_7658.begin(),_7658.end())); })()); int _7660 = (int)0; int _7661 = _879; for (int _886 = _7660;_886<_7661;++_886){ (((*natvarmap_idx)((_886 + _880))) = (long long)_886); }}else {}(_871 = ::mosek::fusion::p_SymLinearVariable::_new_SymLinearVariable(_pubthis,_868,_870,_872,_877,numVariables())); if (mosek::fusion::p_SymmetricLinearDomain::_get_impl(_870)->cardinal_flag){ _871->makeInteger(); }else {}if ((! mosek::fusion::p_SymmetricLinearDomain::_get_impl(_870)->sparse_flag)){ int _7662 = (int)0; int _7663 = _879; for (int _887 = _7662;_887<_7663;++_887){ (((*natvarmap_Var)((_887 + _880))) = vars_used); }}else {}}}addVariable(_868,::mosek::fusion::ModelVariable::t(_871)); return _871; }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::variable_( const std::string & _888,monty::rc_ptr< ::mosek::fusion::Set > _889,monty::rc_ptr< ::mosek::fusion::LinearDomain > _890){ monty::rc_ptr< ::mosek::fusion::ModelVariable > _891 = nullptr; monty::rc_ptr< ::mosek::fusion::ModelVariable > _892 = nullptr; monty::rc_ptr< ::mosek::fusion::Set > _893; if ((((int)((_888).size()) > (int)0) && hasVariable(_888))){ throw ::mosek::fusion::NameError(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer().get())->a(std::string ("Duplicate variable name '")).get())->a(_888).get())->a(std::string ("'")).get())->toString());}else {}if (_889){ if ((! mosek::fusion::p_LinearDomain::_get_impl(_890.get())->match_shape(_889))){ throw ::mosek::fusion::DimensionError(std::string ("Mismatching shape and domain"));}else {}(_893 = _889); }else { (_893 = mosek::fusion::p_LinearDomain::_get_impl(_890)->shape); if (! _893){ (_893 = ::mosek::fusion::p_IntSet::_new_IntSet((int)1)); }else {}}int _894 = task_vars_used; int _895 = task_numcon(); int _896 = task_numcone(); int _897 = task_numbarvar(); {monty::finally _7664([&]{ if (! _891){ task_cleanup(_894,_895,_896,_897); }else {}});{ std::shared_ptr< monty::ndarray< int,1 > > _898 = nullptr; mosek::fusion::RelationKey _899 = mosek::fusion::p_LinearDomain::_get_impl(_890)->key; int _900 = (int)mosek::fusion::p_Set::_get_impl(_893)->size; int _901 = (int)0; if ((! mosek::fusion::p_LinearDomain::_get_impl(_890)->sparse_flag)){ (_901 = task_alloc_vars(_900)); natvarmap_ensure(_900); (natvarmap_num = (natvarmap_num + _900)); if ((_899 == ::mosek::fusion::RelationKey::IsFree)){ task_var_putboundslice_fr(_901,(_901 + _900)); }else { std::shared_ptr< monty::ndarray< double,1 > > _902 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_900))); int _7665 = (int)0; int _7666 = _900; for (int _903 = _7665;_903<_7666;++_903){ (((*_902)(_903)) = mosek::fusion::p_LinearDomain::_get_impl(_890.get())->get_rhs_item((long long)_903)); }if ((_899 == ::mosek::fusion::RelationKey::LessThan)){ task_var_putboundslice_up(_901,(_901 + _900),_902); }else if ((_899 == ::mosek::fusion::RelationKey::GreaterThan)){ task_var_putboundslice_lo(_901,(_901 + _900),_902); }else if ((_899 == ::mosek::fusion::RelationKey::EqualsTo)){ task_var_putboundslice_fx(_901,(_901 + _900),_902); }else {}}(_898 = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _7667; for (int _904=(int)0, _7668=_900; _904 < _7668;++_904)_7667.push_back((_901 + _904)); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7667.size()),_7667.begin(),_7667.end())); })()); int _7669 = (int)0; int _7670 = _900; for (int _905 = _7669;_905<_7670;++_905){ (((*natvarmap_idx)((_905 + _901))) = (long long)_905); }}else {}(_892 = ::mosek::fusion::p_LinearVariable::_new_LinearVariable(_pubthis,_888,_890,_893,_898,numVariables())); if (mosek::fusion::p_LinearDomain::_get_impl(_890)->cardinal_flag){ }else {}(_891 = _892); if (mosek::fusion::p_LinearDomain::_get_impl(_890)->cardinal_flag){ _892->makeInteger(); }else {}if ((! mosek::fusion::p_LinearDomain::_get_impl(_890)->sparse_flag)){ int _7671 = (int)0; int _7672 = _900; for (int _906 = _7671;_906<_7672;++_906){ (((*natvarmap_Var)((_906 + _901))) = vars_used); }}else {}}}addVariable(_888,_891); return _891; }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::variable_( const std::string & _907,monty::rc_ptr< ::mosek::fusion::Set > _908,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _909){ monty::rc_ptr< ::mosek::fusion::Set > _910 = nullptr; if (! _908){ if (! mosek::fusion::p_LinPSDDomain::_get_impl(_909)->shape){ throw ::mosek::fusion::DimensionError(std::string ("Missing shape for variable"));}else { (_910 = mosek::fusion::p_LinPSDDomain::_get_impl(_909)->shape); }}else if (! mosek::fusion::p_LinPSDDomain::_get_impl(_909)->shape){ (_910 = _908); }else { if (((mosek::fusion::p_Set::_get_impl(_908)->nd != mosek::fusion::p_Set::_get_impl(mosek::fusion::p_LinPSDDomain::_get_impl(_909)->shape)->nd) || ((_908->dim((int)0) != mosek::fusion::p_LinPSDDomain::_get_impl(_909)->shape->dim((int)0)) || (_908->dim((int)1) != mosek::fusion::p_LinPSDDomain::_get_impl(_909)->shape->dim((int)1))))){ throw ::mosek::fusion::DimensionError(std::string ("Ambiguous dimensions for variable"));}else { (_910 = _908); }}int _911 = _910->dim((int)0); int _912 = (int)((::mosek::fusion::Utils::Tools::sqrt((double)(((int)1 + ((int)8 * _911)))) - (int)1) / (int)2); if ((((_912 * (_912 + (int)1)) / (int)2) != _911)){ throw ::mosek::fusion::DimensionError(std::string ("Invalid size for semidefinite variable"));}else {}int _913 = (int)1; int _7673 = (int)1; int _7674 = mosek::fusion::p_Set::_get_impl(_910)->nd; for (int _914 = _7673;_914<_7674;++_914){ (_913 *= _910->dim(_914)); }int _915 = task_append_barvar(_912,_913); monty::rc_ptr< ::mosek::fusion::LinearPSDVariable > _916 = ::mosek::fusion::p_LinearPSDVariable::_new_LinearPSDVariable(_pubthis,_907,_912,_910,_915,numVariables()); natbarvarmap_ensure((int)1); (((*natbarvarmap_Var)(natbarvarmap_num)) = vars_used); ( ++ natbarvarmap_num ); addVariable(_907,::mosek::fusion::ModelVariable::t(_916)); return _916; }monty::rc_ptr< ::mosek::fusion::SymmetricVariable > mosek::fusion::p_Model::variable_( const std::string & _917,monty::rc_ptr< ::mosek::fusion::Set > _918,monty::rc_ptr< ::mosek::fusion::PSDDomain > _919){ int _920; int _921; if (_918){ if (((mosek::fusion::p_Set::_get_impl(_918)->nd != (int)2) && (mosek::fusion::p_Set::_get_impl(_918)->nd != (int)3))){ throw ::mosek::fusion::DimensionError(std::string ("Invalid shape for semidefinite variables"));}else if ((_918->dim((int)0) != _918->dim((int)1))){ throw ::mosek::fusion::DimensionError(std::string ("Invalid shape for semidefinite variables"));}else {}(_920 = _918->dim((int)0)); if ((mosek::fusion::p_Set::_get_impl(_918)->nd > (int)2)){ (_921 = _918->dim((int)2)); }else { (_921 = (int)1); }if ((mosek::fusion::p_PSDDomain::_get_impl(_919)->shape && ((mosek::fusion::p_PSDDomain::_get_impl(_919)->shape->dim((int)0) != _920) || ((mosek::fusion::p_Set::_get_impl(mosek::fusion::p_PSDDomain::_get_impl(_919)->shape)->nd == (int)3) && (mosek::fusion::p_PSDDomain::_get_impl(_919)->shape->dim((int)2) != _921))))){ throw ::mosek::fusion::DomainError(std::string ("Domain and shape do not match"));}else {}}else { if (! mosek::fusion::p_PSDDomain::_get_impl(_919)->shape){ throw ::mosek::fusion::DomainError(std::string ("Either domain size of shape must be defined"));}else { (_920 = mosek::fusion::p_PSDDomain::_get_impl(_919)->shape->dim((int)0)); (_921 = mosek::fusion::p_PSDDomain::_get_impl(_919)->shape->dim((int)2)); }}int _922 = task_append_barvar(_920,_921); monty::rc_ptr< ::mosek::fusion::PSDVariable > _923 = ::mosek::fusion::p_PSDVariable::_new_PSDVariable(_pubthis,_917,_920,_922,_921,numVariables()); natbarvarmap_ensure((int)1); (((*natbarvarmap_Var)(natbarvarmap_num)) = vars_used); ( ++ natbarvarmap_num ); addVariable(_917,::mosek::fusion::ModelVariable::t(_923)); return _923; }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::constraint_( const std::string & _924,monty::rc_ptr< ::mosek::fusion::Set > _925,monty::rc_ptr< ::mosek::fusion::Expression > _926,monty::rc_ptr< ::mosek::fusion::RangeDomain > _927){ monty::rc_ptr< ::mosek::fusion::ModelConstraint > _928 = nullptr; monty::rc_ptr< ::mosek::fusion::Set > _929; if ((((int)((_924).size()) > (int)0) && hasConstraint(_924))){ throw ::mosek::fusion::NameError(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer().get())->a(std::string ("Duplicate constraint name '")).get())->a(_924).get())->a(std::string ("'")).get())->toString());}else {}(_929 = ([&]() -> monty::rc_ptr< ::mosek::fusion::Set > { if ( _925) return (_925); else return (_926->getShape()); })()); if ((! mosek::fusion::p_RangeDomain::_get_impl(_927.get())->match_shape(_929))){ throw ::mosek::fusion::DimensionError(std::string ("Mismatching shape and domain"));}else {}monty::rc_ptr< ::mosek::fusion::FlatExpr > _930 = _926->eval(); { int _7675 = (int)0; int _7676 = (int)((mosek::fusion::p_FlatExpr::_get_impl(_930)->x)->size(0)); for (int _931 = _7675;_931<_7676;++_931){ if ((((*mosek::fusion::p_FlatExpr::_get_impl(_930)->x)(_931))->getModel() && (((*mosek::fusion::p_FlatExpr::_get_impl(_930)->x)(_931))->getModel() != _pubthis))){ throw ::mosek::fusion::ModelError(std::string ("Expression belong to different models"));}else {}}}monty::rc_ptr< ::mosek::fusion::ConNZStruct > _932 = build_conA(mosek::fusion::p_FlatExpr::_get_impl(_930)->ptrb,mosek::fusion::p_Set::_get_impl(_929)->size,mosek::fusion::p_FlatExpr::_get_impl(_930)->inst,mosek::fusion::p_FlatExpr::_get_impl(_930)->subj,mosek::fusion::p_FlatExpr::_get_impl(_930)->cof,mosek::fusion::p_FlatExpr::_get_impl(_930)->bfix,mosek::fusion::p_FlatExpr::_get_impl(_930)->x); int _933 = ((int)((mosek::fusion::p_ConNZStruct::_get_impl(_932)->ptrb)->size(0)) - (int)1); int _934 = task_vars_used; int _935 = task_numcone(); int _936 = task_numcon(); int _937 = task_numbarvar(); {monty::finally _7677([&]{ if (! _928){ (natvarmap_num = _934); (natbarvarmap_num = _937); task_cleanup(_934,_936,_935,_937); }else {}});{ int _938 = _933; int _939 = task_append_con(_938); int _940 = (_939 + _938); if (((int)((_924).size()) > (int)0)){ monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _941 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer(); { int _942 = (int)0; for (;(_942 < _938);( ++ _942 )){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_941.get())->clear().get())->a(_924).get())->a(std::string ("[")).get())->a(_942).get())->a(std::string ("]")); task_con_name((_942 + _939),mosek::fusion::Utils::p_StringBuffer::_get_impl(_941.get())->toString()); }}}else {}if ((mosek::fusion::p_ConNZStruct::_get_impl(_932)->subj && ((int)((mosek::fusion::p_ConNZStruct::_get_impl(_932)->subj)->size(0)) > (int)0))){ task_putarowslice(_939,_940,mosek::fusion::p_ConNZStruct::_get_impl(_932)->ptrb,mosek::fusion::p_ConNZStruct::_get_impl(_932)->subj,mosek::fusion::p_ConNZStruct::_get_impl(_932)->cof); }else {}if (mosek::fusion::p_ConNZStruct::_get_impl(_932)->barsubi){ int _7678 = (int)0; int _7679 = (int)((mosek::fusion::p_ConNZStruct::_get_impl(_932)->barsubi)->size(0)); for (int _943 = _7678;_943<_7679;++_943){ task_putbaraij((((*mosek::fusion::p_ConNZStruct::_get_impl(_932)->barsubi)(_943)) + _939),((*mosek::fusion::p_ConNZStruct::_get_impl(_932)->barsubj)(_943)),((*mosek::fusion::p_ConNZStruct::_get_impl(_932)->barmidx)(_943))); }}else {}std::shared_ptr< monty::ndarray< double,1 > > _944 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_933))); std::shared_ptr< monty::ndarray< double,1 > > _945 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_933))); if (mosek::fusion::p_ConNZStruct::_get_impl(_932)->bfix){ int _7680 = (int)0; int _7681 = _933; for (int _946 = _7680;_946<_7681;++_946){ (((*_944)(_946)) = (mosek::fusion::p_RangeDomain::_get_impl(_927.get())->get_lb_item((long long)_946) - ((*mosek::fusion::p_ConNZStruct::_get_impl(_932)->bfix)(_946)))); (((*_945)(_946)) = (mosek::fusion::p_RangeDomain::_get_impl(_927.get())->get_ub_item((long long)_946) - ((*mosek::fusion::p_ConNZStruct::_get_impl(_932)->bfix)(_946)))); }}else { int _947 = ((int)((mosek::fusion::p_ConNZStruct::_get_impl(_932)->ptrb)->size(0)) - (int)1); int _7682 = (int)0; int _7683 = _933; for (int _948 = _7682;_948<_7683;++_948){ (((*_944)(_948)) = mosek::fusion::p_RangeDomain::_get_impl(_927.get())->get_lb_item((long long)_948)); (((*_945)(_948)) = mosek::fusion::p_RangeDomain::_get_impl(_927.get())->get_ub_item((long long)_948)); }}std::shared_ptr< monty::ndarray< int,1 > > _949 = ::mosek::fusion::Utils::Tools::range(_939,_940); task_con_putboundslice_ra(_939,_940,_944,_945); (_928 = ::mosek::fusion::p_RangedConstraint::_new_RangedConstraint(_pubthis,_924,_929,_927,_949,mosek::fusion::p_ConNZStruct::_get_impl(_932)->ptrb,mosek::fusion::p_ConNZStruct::_get_impl(_932)->subj,mosek::fusion::p_ConNZStruct::_get_impl(_932)->cof,mosek::fusion::p_ConNZStruct::_get_impl(_932)->bfix,mosek::fusion::p_ConNZStruct::_get_impl(_932)->barsubi,mosek::fusion::p_ConNZStruct::_get_impl(_932)->barsubj,mosek::fusion::p_ConNZStruct::_get_impl(_932)->barmidx)); addConstraint(_924,_928); }}return _928; }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::constraint_( const std::string & _950,monty::rc_ptr< ::mosek::fusion::Set > _951,monty::rc_ptr< ::mosek::fusion::Expression > _952,monty::rc_ptr< ::mosek::fusion::QConeDomain > _953){ monty::rc_ptr< ::mosek::fusion::ModelConstraint > _954 = nullptr; int _955 = (int)mosek::fusion::p_Set::_get_impl(_952->getShape())->size; if ((((int)((_950).size()) > (int)0) && hasConstraint(_950))){ throw ::mosek::fusion::NameError(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer().get())->a(std::string ("Duplicate constraint name '")).get())->a(_950).get())->a(std::string ("'")).get())->toString());}else {}monty::rc_ptr< ::mosek::fusion::Set > _956 = ([&]() -> monty::rc_ptr< ::mosek::fusion::Set > { if ( _951) return (_951); else return (([&]() -> monty::rc_ptr< ::mosek::fusion::Set > { if ( mosek::fusion::p_QConeDomain::_get_impl(_953)->shape) return (mosek::fusion::p_QConeDomain::_get_impl(_953)->shape); else return (_952->getShape()); })()); })(); if (((mosek::fusion::p_QConeDomain::_get_impl(_953)->shape && (! mosek::fusion::p_QConeDomain::_get_impl(_953.get())->match_shape(_956))) || (_952->getShape() && (! _956->compare(_952->getShape()))))){ throw ::mosek::fusion::DimensionError(std::string ("Mismatching shape and domain"));}else {}int _957 = ([&]() -> int { if ( mosek::fusion::p_QConeDomain::_get_impl(_953)->shape) return (_953->getAxis()); else return ((mosek::fusion::p_Set::_get_impl(_956)->nd - (int)1)); })(); int _958 = _956->dim(_957); int _959 = (int)1; int _7684 = (int)0; int _7685 = mosek::fusion::p_Set::_get_impl(_956)->nd; for (int _960 = _7684;_960<_7685;++_960){ if ((_957 != _960)){ (_959 *= _956->dim(_960)); }else {}}int _961 = (int)1; int _7686 = (int)0; int _7687 = _957; for (int _962 = _7686;_962<_7687;++_962){ (_961 *= _956->dim(_962)); }int _963 = (int)1; int _7688 = (_957 + (int)1); int _7689 = mosek::fusion::p_Set::_get_impl(_956)->nd; for (int _964 = _7688;_964<_7689;++_964){ (_963 *= _956->dim(_964)); }monty::rc_ptr< ::mosek::fusion::FlatExpr > _965 = _952->eval(); { int _7690 = (int)0; int _7691 = (int)((mosek::fusion::p_FlatExpr::_get_impl(_965)->x)->size(0)); for (int _966 = _7690;_966<_7691;++_966){ if ((((*mosek::fusion::p_FlatExpr::_get_impl(_965)->x)(_966))->getModel() && (((*mosek::fusion::p_FlatExpr::_get_impl(_965)->x)(_966))->getModel() != _pubthis))){ throw ::mosek::fusion::ModelError(std::string ("Expression belong to different models"));}else {}}}monty::rc_ptr< ::mosek::fusion::ConNZStruct > _967 = build_conA(mosek::fusion::p_FlatExpr::_get_impl(_965)->ptrb,mosek::fusion::p_Set::_get_impl(_956)->size,mosek::fusion::p_FlatExpr::_get_impl(_965)->inst,mosek::fusion::p_FlatExpr::_get_impl(_965)->subj,mosek::fusion::p_FlatExpr::_get_impl(_965)->cof,mosek::fusion::p_FlatExpr::_get_impl(_965)->bfix,mosek::fusion::p_FlatExpr::_get_impl(_965)->x); int _968 = ((int)((mosek::fusion::p_ConNZStruct::_get_impl(_967)->ptrb)->size(0)) - (int)1); int _969 = task_vars_used; int _970 = task_numcon(); int _971 = task_numcone(); int _972 = task_numbarvar(); {monty::finally _7692([&]{ if (! _954){ (natvarmap_num = _969); (natbarvarmap_num = _972); task_cleanup(_969,_970,_971,_972); }else {}});{ int _973 = task_append_con(_968); int _974 = (_973 + _968); if ((mosek::fusion::p_ConNZStruct::_get_impl(_967)->subj && ((int)((mosek::fusion::p_ConNZStruct::_get_impl(_967)->subj)->size(0)) > (int)0))){ task_putarowslice(_973,_974,mosek::fusion::p_ConNZStruct::_get_impl(_967)->ptrb,mosek::fusion::p_ConNZStruct::_get_impl(_967)->subj,mosek::fusion::p_ConNZStruct::_get_impl(_967)->cof); }else {}if (mosek::fusion::p_ConNZStruct::_get_impl(_967)->barsubi){ int _7693 = (int)0; int _7694 = (int)((mosek::fusion::p_ConNZStruct::_get_impl(_967)->barsubi)->size(0)); for (int _975 = _7693;_975<_7694;++_975){ task_putbaraij((((*mosek::fusion::p_ConNZStruct::_get_impl(_967)->barsubi)(_975)) + _973),((*mosek::fusion::p_ConNZStruct::_get_impl(_967)->barsubj)(_975)),((*mosek::fusion::p_ConNZStruct::_get_impl(_967)->barmidx)(_975))); }}else {}std::shared_ptr< monty::ndarray< int,1 > > _976 = ::mosek::fusion::Utils::Tools::range(_973,_974); std::shared_ptr< monty::ndarray< double,1 > > _977 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((_974 - _973)))); int _978 = (_958 * _959); std::shared_ptr< monty::ndarray< double,1 > > _979 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_978))); { std::shared_ptr< monty::ndarray< double,1 > > _980 = mosek::fusion::p_ConNZStruct::_get_impl(_967)->bfix; std::shared_ptr< monty::ndarray< double,1 > > _981 = mosek::fusion::p_FlatExpr::_get_impl(_965)->bfix; { if (! mosek::fusion::p_ConNZStruct::_get_impl(_967)->bfix){ int _7695 = (int)0; int _7696 = (_974 - _973); for (int _982 = _7695;_982<_7696;++_982){ (((*_977)(_982)) = (- ((*mosek::fusion::p_ConNZStruct::_get_impl(_967)->bfix)(_982)))); }}else {}if (mosek::fusion::p_FlatExpr::_get_impl(_965)->bfix){ int _7697 = (int)0; int _7698 = _978; for (int _983 = _7697;_983<_7698;++_983){ (((*_979)(_983)) = (- ((*mosek::fusion::p_ConNZStruct::_get_impl(_967)->bfix)(_983)))); }}else {}}}task_con_putboundslice_fx(_973,_974,_979); int _984 = task_alloc_vars(_978); natvarmap_ensure(_978); (natvarmap_num = (natvarmap_num + _978)); int _985 = (_984 + _978); task_putaijlist(::mosek::fusion::Utils::Tools::range(_973,_974),::mosek::fusion::Utils::Tools::range(_984,_985),([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _7699; for (int _986=(int)0, _7700=_978; _986 < _7700;++_986)_7699.push_back((- 1.0)); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7699.size()),_7699.begin(),_7699.end())); })(),(long long)(_978)); task_var_putboundslice_fr(_984,_985); int _987; if ((mosek::fusion::p_QConeDomain::_get_impl(_953)->key == ::mosek::fusion::QConeKey::InQCone)){ (_987 = task_append_quadcone(_958,_984,_959,_961,_963)); }else { (_987 = task_append_rquadcone(_958,_984,_959,_961,_963)); }(_954 = ::mosek::fusion::p_ConicConstraint::_new_ConicConstraint(_pubthis,_950,_953,_956,::mosek::fusion::Utils::Tools::range(_973,_974),_984,_985,_958,_987,_959,mosek::fusion::p_ConNZStruct::_get_impl(_967)->ptrb,mosek::fusion::p_ConNZStruct::_get_impl(_967)->subj,mosek::fusion::p_ConNZStruct::_get_impl(_967)->cof,mosek::fusion::p_ConNZStruct::_get_impl(_967)->bfix,mosek::fusion::p_ConNZStruct::_get_impl(_967)->barsubi,mosek::fusion::p_ConNZStruct::_get_impl(_967)->barsubj,mosek::fusion::p_ConNZStruct::_get_impl(_967)->barmidx)); addConstraint(_950,_954); return _954; }}}monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::constraint_( const std::string & _988,monty::rc_ptr< ::mosek::fusion::Set > _989,monty::rc_ptr< ::mosek::fusion::Expression > _990,monty::rc_ptr< ::mosek::fusion::LinearDomain > _991){ monty::rc_ptr< ::mosek::fusion::ModelConstraint > _992 = nullptr; int _993 = (int)mosek::fusion::p_Set::_get_impl(_990->getShape())->size; monty::rc_ptr< ::mosek::fusion::Set > _994; if ((((int)((_988).size()) > (int)0) && hasConstraint(_988))){ throw ::mosek::fusion::NameError(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer().get())->a(std::string ("Duplicate constraint name '")).get())->a(_988).get())->a(std::string ("'")).get())->toString());}else {}(_994 = ([&]() -> monty::rc_ptr< ::mosek::fusion::Set > { if ( _989) return (_989); else return (([&]() -> monty::rc_ptr< ::mosek::fusion::Set > { if ( mosek::fusion::p_LinearDomain::_get_impl(_991)->shape) return (mosek::fusion::p_LinearDomain::_get_impl(_991)->shape); else return (_990->getShape()); })()); })()); if (((mosek::fusion::p_LinearDomain::_get_impl(_991)->shape && (! mosek::fusion::p_LinearDomain::_get_impl(_991.get())->match_shape(_994))) || (_990->getShape() && (! _994->compare(_990->getShape()))))){ throw ::mosek::fusion::DimensionError(std::string ("Mismatching shape and domain"));}else {}monty::rc_ptr< ::mosek::fusion::FlatExpr > _995 = _990->eval(); { int _7701 = (int)0; int _7702 = (int)((mosek::fusion::p_FlatExpr::_get_impl(_995)->x)->size(0)); for (int _996 = _7701;_996<_7702;++_996){ if ((((*mosek::fusion::p_FlatExpr::_get_impl(_995)->x)(_996))->getModel() && (((*mosek::fusion::p_FlatExpr::_get_impl(_995)->x)(_996))->getModel() != _pubthis))){ throw ::mosek::fusion::ModelError(std::string ("Expression belong to different models"));}else {}}}monty::rc_ptr< ::mosek::fusion::ConNZStruct > _997 = build_conA(mosek::fusion::p_FlatExpr::_get_impl(_995)->ptrb,mosek::fusion::p_Set::_get_impl(_994)->size,mosek::fusion::p_FlatExpr::_get_impl(_995)->inst,mosek::fusion::p_FlatExpr::_get_impl(_995)->subj,mosek::fusion::p_FlatExpr::_get_impl(_995)->cof,mosek::fusion::p_FlatExpr::_get_impl(_995)->bfix,mosek::fusion::p_FlatExpr::_get_impl(_995)->x); int _998 = ((int)((mosek::fusion::p_ConNZStruct::_get_impl(_997)->ptrb)->size(0)) - (int)1); int _999 = task_vars_used; int _1000 = task_numcon(); int _1001 = task_numcone(); int _1002 = task_numbarvar(); {monty::finally _7703([&]{ if (! _992){ (natvarmap_num = _999); (natbarvarmap_num = _1002); task_cleanup(_999,_1000,_1001,_1002); }else {}});{ int _1003 = _998; int _1004 = task_append_con(_1003); int _1005 = (_1004 + _1003); if ((mosek::fusion::p_ConNZStruct::_get_impl(_997)->subj && ((int)((mosek::fusion::p_ConNZStruct::_get_impl(_997)->subj)->size(0)) > (int)0))){ task_putarowslice(_1004,_1005,mosek::fusion::p_ConNZStruct::_get_impl(_997)->ptrb,mosek::fusion::p_ConNZStruct::_get_impl(_997)->subj,mosek::fusion::p_ConNZStruct::_get_impl(_997)->cof); }else {}if (mosek::fusion::p_ConNZStruct::_get_impl(_997)->barsubi){ int _7704 = (int)0; int _7705 = (int)((mosek::fusion::p_ConNZStruct::_get_impl(_997)->barsubi)->size(0)); for (int _1006 = _7704;_1006<_7705;++_1006){ task_putbaraij((((*mosek::fusion::p_ConNZStruct::_get_impl(_997)->barsubi)(_1006)) + _1004),((*mosek::fusion::p_ConNZStruct::_get_impl(_997)->barsubj)(_1006)),((*mosek::fusion::p_ConNZStruct::_get_impl(_997)->barmidx)(_1006))); }}else {}std::shared_ptr< monty::ndarray< int,1 > > _1007 = ::mosek::fusion::Utils::Tools::range(_1004,_1005); std::shared_ptr< monty::ndarray< double,1 > > _1008 = ([&]() -> std::shared_ptr< monty::ndarray< double,1 > > { if ( ! mosek::fusion::p_ConNZStruct::_get_impl(_997)->bfix) return (([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _7706; for (int _1009=(int)0, _7707=(_1005 - _1004); _1009 < _7707;++_1009)_7706.push_back(mosek::fusion::p_LinearDomain::_get_impl(_991.get())->get_rhs_item((long long)(_1009))); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7706.size()),_7706.begin(),_7706.end())); })()); else return (([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _7708; for (int _1010=(int)0, _7709=(_1005 - _1004); _1010 < _7709;++_1010)_7708.push_back((mosek::fusion::p_LinearDomain::_get_impl(_991.get())->get_rhs_item((long long)(_1010)) - ((*mosek::fusion::p_ConNZStruct::_get_impl(_997)->bfix)(_1010)))); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7708.size()),_7708.begin(),_7708.end())); })()); })(); mosek::fusion::RelationKey _1011 = mosek::fusion::p_LinearDomain::_get_impl(_991)->key; if ((_1011 == ::mosek::fusion::RelationKey::IsFree)){ task_con_putboundslice_fr(_1004,_1005); }else if ((_1011 == ::mosek::fusion::RelationKey::LessThan)){ task_con_putboundslice_up(_1004,_1005,_1008); }else if ((_1011 == ::mosek::fusion::RelationKey::GreaterThan)){ task_con_putboundslice_lo(_1004,_1005,_1008); }else { task_con_putboundslice_fx(_1004,_1005,_1008); }(_992 = ::mosek::fusion::p_LinearConstraint::_new_LinearConstraint(_pubthis,_988,_991,_994,_1007,mosek::fusion::p_ConNZStruct::_get_impl(_997)->ptrb,mosek::fusion::p_ConNZStruct::_get_impl(_997)->subj,mosek::fusion::p_ConNZStruct::_get_impl(_997)->cof,mosek::fusion::p_ConNZStruct::_get_impl(_997)->bfix,mosek::fusion::p_ConNZStruct::_get_impl(_997)->barsubi,mosek::fusion::p_ConNZStruct::_get_impl(_997)->barsubj,mosek::fusion::p_ConNZStruct::_get_impl(_997)->barmidx)); addConstraint(_988,_992); return _992; }}}monty::rc_ptr< ::mosek::fusion::ConNZStruct > mosek::fusion::p_Model::build_conA( std::shared_ptr< monty::ndarray< long long,1 > > _1012,long long _1013,std::shared_ptr< monty::ndarray< long long,1 > > _1014,std::shared_ptr< monty::ndarray< long long,1 > > _1015,std::shared_ptr< monty::ndarray< double,1 > > _1016,std::shared_ptr< monty::ndarray< double,1 > > _1017,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _1018){ std::shared_ptr< monty::ndarray< int,1 > > _1019 = nullptr; std::shared_ptr< monty::ndarray< long long,1 > > _1020 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((_1013 + (int)1)))); std::shared_ptr< monty::ndarray< double,1 > > _1021 = nullptr; std::shared_ptr< monty::ndarray< long long,1 > > _1022 = ([&]() -> std::shared_ptr< monty::ndarray< long long,1 > > { if ( _1014) return (_1014); else return (([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _7710; for (long long _1023=(long long)0, _7711=((int)((_1012)->size(0)) - (int)1); _1023 < _7711;++_1023)_7710.push_back(_1023); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7710.size()),_7710.begin(),_7710.end())); })()); })(); std::shared_ptr< monty::ndarray< double,1 > > _1024 = _1017; int _1025 = (int)0; int _1026 = (int)0; std::shared_ptr< monty::ndarray< int,1 > > _1027; std::shared_ptr< monty::ndarray< int,1 > > _1028; std::shared_ptr< monty::ndarray< int,1 > > _1029; std::shared_ptr< monty::ndarray< long long,1 > > _1030; { int _1031 = (int)((_1015)->size(0)); (_1027 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1031)))); (_1028 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1031)))); (_1029 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1031)))); std::shared_ptr< monty::ndarray< int,1 > > _1032 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1031))); ::mosek::fusion::p_Model::inst(_1018,_1015,_1027,_1028,_1029); (_1030 = ::mosek::fusion::Utils::Tools::range((long long)((_1015)->size(0)))); if ((_1031 > ((int)3 * (int)((_1012)->size(0))))){ int _7712 = (int)0; int _7713 = ((int)((_1012)->size(0)) - (int)1); for (int _1033 = _7712;_1033<_7713;++_1033){ ::mosek::fusion::p_Sort::argsort(_1030,_1027,((*_1012)(_1033)),((*_1012)((_1033 + (int)1))),true); long long _7714 = ((*_1012)(_1033)); long long _7715 = ((*_1012)((_1033 + (int)1))); for (long long _1034 = _7714;_1034<_7715;++_1034){ (((*_1032)(_1034)) = _1033); }}}else { int _7716 = (int)0; int _7717 = ((int)((_1012)->size(0)) - (int)1); for (int _1035 = _7716;_1035<_7717;++_1035){ long long _7718 = ((*_1012)(_1035)); long long _7719 = ((*_1012)((_1035 + (int)1))); for (long long _1036 = _7718;_1036<_7719;++_1036){ (((*_1032)(_1036)) = _1035); }}::mosek::fusion::p_Sort::argsort(_1030,_1032,_1027,(long long)((int)0),(long long)((int)((_1030)->size(0))),true); }(_1026 = (int)0); (_1025 = (int)0); if (((int)((_1030)->size(0)) > (int)0)){ if ((((*_1027)(((*_1030)((int)0)))) >= (int)0)){ ( ++ _1026 ); }else { ( ++ _1025 ); }int _7720 = (int)1; int _7721 = _1031; for (int _1037 = _7720;_1037<_7721;++_1037){ if ((((*_1027)(((*_1030)(_1037)))) < (int)0)){ ( ++ _1025 ); }else if (((((*_1032)(((*_1030)(_1037)))) != ((*_1032)(((*_1030)((_1037 - (int)1)))))) || (((*_1027)(((*_1030)(_1037)))) != ((*_1027)(((*_1030)((_1037 - (int)1)))))))){ ( ++ _1026 ); }else {}}}else {}if ((_1026 == _1031)){ (_1019 = _1027); (_1021 = _1016); if (((int)((_1022)->size(0)) == _1013)){ (_1020 = _1012); }else { int _1038 = (int)0; int _7722 = (int)0; int _7723 = ((int)((_1020)->size(0)) - (int)1); for (int _1039 = _7722;_1039<_7723;++_1039){ if (((_1038 < (int)((_1022)->size(0))) && (_1039 == ((*_1022)(_1038))))){ ( ++ _1038 ); (((*_1020)((_1039 + (int)1))) = ((*_1012)(_1038))); }else { (((*_1020)((_1039 + (int)1))) = ((*_1020)(_1039))); }}}}else { int _1040 = (int)0; long long _1041 = (long long)0; (_1019 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1026)))); (_1021 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_1026)))); int _1042 = (int)0; int _7724 = (int)0; int _7725 = ((int)((_1020)->size(0)) - (int)1); for (int _1043 = _7724;_1043<_7725;++_1043){ if (((_1042 >= (int)((_1022)->size(0))) || (_1043 != ((*_1022)(_1042))))){ (((*_1020)((_1043 + (int)1))) = ((*_1020)(_1043))); }else { long long _1044 = ((*_1012)(_1042)); while (((_1044 < ((*_1012)((_1042 + (int)1)))) && (((*_1027)(((*_1030)(_1044)))) < (int)0))) { ( ++ _1044 ); }long long _1045 = _1044; while ((_1045 < ((*_1012)((_1042 + (int)1))))) { ( ++ _1045 ); }if ((_1045 > _1044)){ int _1046 = (int)0; (((*_1019)(((*_1020)(_1043)))) = ((*_1027)(((*_1030)(_1044))))); (((*_1021)(((*_1020)(_1043)))) = ((*_1016)(((*_1030)(_1044))))); long long _7726 = (_1044 + (int)1); long long _7727 = _1045; for (long long _1047 = _7726;_1047<_7727;++_1047){ if ((((*_1027)(((*_1030)((_1047 - (int)1))))) != ((*_1027)(((*_1030)(_1047)))))){ ( ++ _1046 ); (((*_1019)((_1046 + ((*_1020)(_1043))))) = ((*_1027)(((*_1030)(_1047))))); (((*_1021)((_1046 + ((*_1020)(_1043))))) = ((*_1016)(((*_1030)(_1047))))); }else { (((*_1021)((_1046 + ((*_1020)(_1043))))) += ((*_1016)(((*_1030)(_1047))))); }}(((*_1020)((_1043 + (int)1))) = ((((*_1020)(_1043)) + _1046) + (int)1)); }else { (((*_1020)((_1043 + (int)1))) = ((*_1020)(_1043))); }( ++ _1042 ); }}}}std::shared_ptr< monty::ndarray< long long,1 > > _1048 = _1020; std::shared_ptr< monty::ndarray< int,1 > > _1049 = nullptr; std::shared_ptr< monty::ndarray< int,1 > > _1050 = nullptr; std::shared_ptr< monty::ndarray< int,1 > > _1051 = nullptr; int _1052 = (int)0; if ((_1025 > (int)0)){ int _7728 = (int)0; int _7729 = ((int)((_1012)->size(0)) - (int)1); for (int _1053 = _7728;_1053<_7729;++_1053){ long long _1054 = ((*_1012)(_1053)); while (((_1054 < ((*_1012)((_1053 + (int)1)))) && (((*_1027)(((*_1030)(_1054)))) < (int)0))) { ( ++ _1054 ); }if ((_1054 > ((*_1012)(_1053)))){ ( ++ _1052 ); long long _7730 = (((*_1012)(_1053)) + (int)1); long long _7731 = _1054; for (long long _1055 = _7730;_1055<_7731;++_1055){ if ((((*_1027)(((*_1030)((_1055 - (int)1))))) != ((*_1027)(((*_1030)(_1055)))))){ ( ++ _1052 ); }else {}}}else {}}if ((_1052 > (int)0)){ int _1056 = (int)0; (_1049 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1052)))); (_1050 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1052)))); (_1051 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1052)))); int _7732 = (int)0; int _7733 = ((int)((_1012)->size(0)) - (int)1); for (int _1057 = _7732;_1057<_7733;++_1057){ long long _1058 = ((*_1012)(_1057)); while (((_1058 < ((*_1012)((_1057 + (int)1)))) && (((*_1027)(((*_1030)(_1058)))) < (int)0))) { long long _1059 = _1058; int _1060 = ((*_1027)(((*_1030)(_1058)))); ( ++ _1058 ); while (((_1058 < ((*_1012)((_1057 + (int)1)))) && (((*_1027)(((*_1030)(_1058)))) == _1060))) { ( ++ _1058 ); }int _1061 = (- (_1060 + (int)1)); int _1062 = task_barvardim(_1061); long long _7734 = _1059; long long _7735 = _1058; for (long long _1063 = _7734;_1063<_7735;++_1063){ long long _1064 = ((*_1030)(_1063)); if ((((*_1028)(_1064)) < ((*_1029)(_1064)))){ int _1065 = ((*_1028)(_1064)); (((*_1028)(_1064)) = ((*_1029)(_1064))); (((*_1029)(_1064)) = _1065); (((*_1016)(_1064)) *= 0.5); }else if ((((*_1028)(_1064)) > ((*_1029)(_1064)))){ (((*_1016)(_1064)) *= 0.5); }else {}}if (((_1058 - _1059) > (int)1)){ if (((_1058 - _1059) < ((int)2 * _1062))){ ::mosek::fusion::p_Sort::argsort(_1030,_1028,_1029,_1059,_1058,true); }else { ::mosek::fusion::p_Sort::argbucketsort(_1030,_1029,_1059,_1058,(int)0,_1062); ::mosek::fusion::p_Sort::argbucketsort(_1030,_1028,_1059,_1058,(int)0,_1062); }}else {}int _1066 = (int)1; long long _7736 = (_1059 + (int)1); long long _7737 = _1058; for (long long _1067 = _7736;_1067<_7737;++_1067){ if (((((*_1029)(((*_1030)(_1067)))) != ((*_1029)(((*_1030)((_1067 - (int)1)))))) || (((*_1028)(((*_1030)(_1067)))) != ((*_1028)(((*_1030)((_1067 - (int)1)))))))){ ( ++ _1066 ); }else {}}std::shared_ptr< monty::ndarray< int,1 > > _1068 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1066))); std::shared_ptr< monty::ndarray< int,1 > > _1069 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1066))); std::shared_ptr< monty::ndarray< double,1 > > _1070 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_1066))); { int _1071 = (int)0; (((*_1068)((int)0)) = ((*_1028)(((*_1030)(_1059))))); (((*_1069)((int)0)) = ((*_1029)(((*_1030)(_1059))))); (((*_1070)((int)0)) = ((*_1016)(((*_1030)(_1059))))); long long _7738 = (_1059 + (int)1); long long _7739 = _1058; for (long long _1072 = _7738;_1072<_7739;++_1072){ if (((((*_1029)(((*_1030)(_1072)))) != ((*_1029)(((*_1030)((_1072 - (int)1)))))) || (((*_1028)(((*_1030)(_1072)))) != ((*_1028)(((*_1030)((_1072 - (int)1)))))))){ ( ++ _1071 ); (((*_1068)(_1071)) = ((*_1028)(((*_1030)(_1072))))); (((*_1069)(_1071)) = ((*_1029)(((*_1030)(_1072))))); (((*_1070)(_1071)) = ((*_1016)(((*_1030)(_1072))))); }else { (((*_1070)(_1071)) += ((*_1016)(((*_1030)(_1072))))); }}}(((*_1049)(_1056)) = (int)((*_1022)(_1057))); (((*_1050)(_1056)) = _1061); (((*_1051)(_1056)) = task_append_barmatrix(_1062,_1068,_1069,_1070)); ( ++ _1056 ); }}}else {}}else {}std::shared_ptr< monty::ndarray< double,1 > > _1073 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_1013))); if (_1017){ int _7740 = (int)0; int _7741 = (int)((_1022)->size(0)); for (int _1074 = _7740;_1074<_7741;++_1074){ (((*_1073)(((*_1022)(_1074)))) = ((*_1017)(_1074))); }}else {}return ::mosek::fusion::p_ConNZStruct::_new_ConNZStruct(_1020,_1019,_1021,_1073,_1049,_1050,_1051); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::constraint_( const std::string & _1075,monty::rc_ptr< ::mosek::fusion::Expression > _1076,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _1077){ monty::rc_ptr< ::mosek::fusion::ModelConstraint > _1078 = nullptr; int _1079 = (int)mosek::fusion::p_Set::_get_impl(_1076->getShape())->size; if ((((int)((_1075).size()) > (int)0) && hasConstraint(_1075))){ throw ::mosek::fusion::NameError(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer().get())->a(std::string ("Duplicate constraint name '")).get())->a(_1075).get())->a(std::string ("'")).get())->toString());}else {}monty::rc_ptr< ::mosek::fusion::Set > _1080 = ([&]() -> monty::rc_ptr< ::mosek::fusion::Set > { if ( mosek::fusion::p_LinPSDDomain::_get_impl(_1077)->shape) return (mosek::fusion::p_LinPSDDomain::_get_impl(_1077)->shape); else return (_1076->getShape()); })(); if (((mosek::fusion::p_LinPSDDomain::_get_impl(_1077)->shape && (! mosek::fusion::p_LinPSDDomain::_get_impl(_1077)->shape->compare(_1080))) || (_1076->getShape() && (! _1080->compare(_1076->getShape()))))){ throw ::mosek::fusion::DimensionError(std::string ("Mismatching shape and domain"));}else {}int _1081 = (int)((::mosek::fusion::Utils::Tools::sqrt((double)(((int)1 + ((int)8 * _1080->dim((int)0))))) - (int)1) / (int)2); if ((((_1081 * (_1081 + (int)1)) / (int)2) != _1080->dim((int)0))){ throw ::mosek::fusion::DimensionError(std::string ("Invalid size for semidefinite variable"));}else {}int _1082 = (int)0; int _1083 = _1080->dim((int)0); int _1084 = (int)1; int _7742 = (int)1; int _7743 = mosek::fusion::p_Set::_get_impl(_1080)->nd; for (int _1085 = _7742;_1085<_7743;++_1085){ (_1084 *= _1080->dim(_1085)); }monty::rc_ptr< ::mosek::fusion::FlatExpr > _1086 = _1076->eval(); { int _7744 = (int)0; int _7745 = (int)((mosek::fusion::p_FlatExpr::_get_impl(_1086)->x)->size(0)); for (int _1087 = _7744;_1087<_7745;++_1087){ if ((((*mosek::fusion::p_FlatExpr::_get_impl(_1086)->x)(_1087))->getModel() && (((*mosek::fusion::p_FlatExpr::_get_impl(_1086)->x)(_1087))->getModel() != _pubthis))){ throw ::mosek::fusion::ModelError(std::string ("Expression belong to different models"));}else {}}}monty::rc_ptr< ::mosek::fusion::ConNZStruct > _1088 = build_conA(mosek::fusion::p_FlatExpr::_get_impl(_1086)->ptrb,mosek::fusion::p_Set::_get_impl(_1080)->size,mosek::fusion::p_FlatExpr::_get_impl(_1086)->inst,mosek::fusion::p_FlatExpr::_get_impl(_1086)->subj,mosek::fusion::p_FlatExpr::_get_impl(_1086)->cof,mosek::fusion::p_FlatExpr::_get_impl(_1086)->bfix,mosek::fusion::p_FlatExpr::_get_impl(_1086)->x); int _1089 = ((int)((mosek::fusion::p_ConNZStruct::_get_impl(_1088)->ptrb)->size(0)) - (int)1); int _1090 = task_vars_used; int _1091 = task_numcon(); int _1092 = task_numcone(); int _1093 = task_numbarvar(); {monty::finally _7746([&]{ if (! _1078){ (natvarmap_num = _1090); (natbarvarmap_num = _1093); task_cleanup(_1090,_1091,_1092,_1093); }else {}});{ int _1094 = task_append_con(_1089); int _1095 = (_1094 + _1089); if ((mosek::fusion::p_ConNZStruct::_get_impl(_1088)->subj && ((int)((mosek::fusion::p_ConNZStruct::_get_impl(_1088)->subj)->size(0)) > (int)0))){ task_putarowslice(_1094,_1095,mosek::fusion::p_ConNZStruct::_get_impl(_1088)->ptrb,mosek::fusion::p_ConNZStruct::_get_impl(_1088)->subj,mosek::fusion::p_ConNZStruct::_get_impl(_1088)->cof); }else {}if (mosek::fusion::p_ConNZStruct::_get_impl(_1088)->barsubi){ int _7747 = (int)0; int _7748 = (int)((mosek::fusion::p_ConNZStruct::_get_impl(_1088)->barsubi)->size(0)); for (int _1096 = _7747;_1096<_7748;++_1096){ task_putbaraij((((*mosek::fusion::p_ConNZStruct::_get_impl(_1088)->barsubi)(_1096)) + _1094),((*mosek::fusion::p_ConNZStruct::_get_impl(_1088)->barsubj)(_1096)),((*mosek::fusion::p_ConNZStruct::_get_impl(_1088)->barmidx)(_1096))); }}else {}std::shared_ptr< monty::ndarray< int,1 > > _1097 = ::mosek::fusion::Utils::Tools::range(_1094,_1095); std::shared_ptr< monty::ndarray< double,1 > > _1098 = ([&]() -> std::shared_ptr< monty::ndarray< double,1 > > { if ( ! mosek::fusion::p_ConNZStruct::_get_impl(_1088)->bfix) return (std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((_1095 - _1094))))); else return (([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _7749; for (int _1099=(int)0, _7750=(_1095 - _1094); _1099 < _7750;++_1099)_7749.push_back((- ((*mosek::fusion::p_ConNZStruct::_get_impl(_1088)->bfix)(_1099)))); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7749.size()),_7749.begin(),_7749.end())); })()); })(); int _1100 = (_1083 * _1084); std::shared_ptr< monty::ndarray< double,1 > > _1101 = ([&]() -> std::shared_ptr< monty::ndarray< double,1 > > { if ( mosek::fusion::p_FlatExpr::_get_impl(_1086)->bfix) return (([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _7751; for (int _1102=(int)0, _7752=_1100; _1102 < _7752;++_1102)_7751.push_back((- ((*mosek::fusion::p_ConNZStruct::_get_impl(_1088)->bfix)(_1102)))); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7751.size()),_7751.begin(),_7751.end())); })()); else return (std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_1100)))); })(); task_con_putboundslice_fx(_1094,_1095,_1101); int _1103 = task_append_barvar(_1081,_1084); { std::shared_ptr< monty::ndarray< int,1 > > _1104 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)1))); std::shared_ptr< monty::ndarray< int,1 > > _1105 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)1))); std::shared_ptr< monty::ndarray< double,1 > > _1106 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)1))); int _1107 = (int)0; int _7753 = (int)0; int _7754 = _1081; for (int _1108 = _7753;_1108<_7754;++_1108){ (((*_1105)((int)0)) = _1108); int _7755 = _1108; int _7756 = _1081; for (int _1109 = _7755;_1109<_7756;++_1109){ (((*_1104)((int)0)) = _1109); (((*_1106)((int)0)) = (- ([&]() -> double { if ( (_1109 == _1108)) return (1.0); else return (0.5); })())); int _1110 = task_append_barmatrix(_1081,_1104,_1105,_1106); int _7757 = (int)0; int _7758 = _1084; for (int _1111 = _7757;_1111<_7758;++_1111){ task_putbaraij(((_1094 + _1107) + (_1111 * _1083)),(_1103 + _1111),_1110); }( ++ _1107 ); }}}(_1078 = ::mosek::fusion::p_LinearPSDConstraint::_new_LinearPSDConstraint(_pubthis,_1075,_1080,::mosek::fusion::Utils::Tools::range(_1094,_1095),_1083,_1103,_1084,mosek::fusion::p_ConNZStruct::_get_impl(_1088)->ptrb,mosek::fusion::p_ConNZStruct::_get_impl(_1088)->subj,mosek::fusion::p_ConNZStruct::_get_impl(_1088)->cof,mosek::fusion::p_ConNZStruct::_get_impl(_1088)->bfix,mosek::fusion::p_ConNZStruct::_get_impl(_1088)->barsubi,mosek::fusion::p_ConNZStruct::_get_impl(_1088)->barsubj,mosek::fusion::p_ConNZStruct::_get_impl(_1088)->barmidx)); addConstraint(_1075,_1078); }}return _1078; }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::constraint_( const std::string & _1112,monty::rc_ptr< ::mosek::fusion::Expression > _1113,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1114){ monty::rc_ptr< ::mosek::fusion::Constraint > _1115; if ((mosek::fusion::p_PSDDomain::_get_impl(_1114)->key == ::mosek::fusion::PSDKey::IsSymPSD)){ return nonsym_psdconstraint(_1112,_1113,_1114); }else if ((mosek::fusion::p_PSDDomain::_get_impl(_1114)->key == ::mosek::fusion::PSDKey::IsTrilPSD)){ monty::rc_ptr< ::mosek::fusion::FlatExpr > _1116 = _1113->eval(); { int _7759 = (int)0; int _7760 = (int)((mosek::fusion::p_FlatExpr::_get_impl(_1116)->x)->size(0)); for (int _1117 = _7759;_1117<_7760;++_1117){ if ((((*mosek::fusion::p_FlatExpr::_get_impl(_1116)->x)(_1117))->getModel() && (((*mosek::fusion::p_FlatExpr::_get_impl(_1116)->x)(_1117))->getModel() != _pubthis))){ throw ::mosek::fusion::ModelError(std::string ("Expression belong to different models"));}else {}}}if (((! ((mosek::fusion::p_Set::_get_impl(mosek::fusion::p_FlatExpr::_get_impl(_1116)->shape)->nd == (int)2) || (mosek::fusion::p_Set::_get_impl(mosek::fusion::p_FlatExpr::_get_impl(_1116)->shape)->nd == (int)3))) || (mosek::fusion::p_FlatExpr::_get_impl(_1116)->shape->dim((int)0) != mosek::fusion::p_FlatExpr::_get_impl(_1116)->shape->dim((int)1)))){ throw ::mosek::fusion::DomainError(std::string ("Invalid expression shape for semidefinite constraint"));}else {}int _1118 = mosek::fusion::p_FlatExpr::_get_impl(_1116)->shape->dim((int)0); int _1119 = (int)1; if ((mosek::fusion::p_Set::_get_impl(mosek::fusion::p_FlatExpr::_get_impl(_1116)->shape)->nd > (int)2)){ (_1119 = mosek::fusion::p_FlatExpr::_get_impl(_1116)->shape->dim((int)2)); }else {}int _1120 = (((_1119 * _1118) * (_1118 + (int)1)) / (int)2); if ((mosek::fusion::p_PSDDomain::_get_impl(_1114)->shape && ((mosek::fusion::p_PSDDomain::_get_impl(_1114)->shape->dim((int)0) != _1118) || (mosek::fusion::p_PSDDomain::_get_impl(_1114)->shape->dim((int)2) != _1119)))){ throw ::mosek::fusion::DomainError(std::string ("Expression shape does not match domain"));}else {}std::shared_ptr< monty::ndarray< long long,1 > > _1121 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1120))); { int _1122 = (int)0; int _7761 = (int)0; int _7762 = _1119; for (int _1123 = _7761;_1123<_7762;++_1123){ int _7763 = (int)0; int _7764 = _1118; for (int _1124 = _7763;_1124<_7764;++_1124){ int _7765 = (int)0; int _7766 = (_1124 + (int)1); for (int _1125 = _7765;_1125<_7766;++_1125){ (((*_1121)(_1122)) = (long long)((((_1123 * _1118) * _1118) + (_1124 * _1118)) + _1125)); ( ++ _1122 ); }}}}std::shared_ptr< monty::ndarray< double,1 > > _1126 = mosek::fusion::p_FlatExpr::_get_impl(_1116)->bfix; if (! _1126){ (_1126 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(((int)((mosek::fusion::p_FlatExpr::_get_impl(_1116)->ptrb)->size(0)) - (int)1))))); }else {}return sdptrilcon(_1112,_1118,_1119,mosek::fusion::p_FlatExpr::_get_impl(_1116)->ptrb,mosek::fusion::p_FlatExpr::_get_impl(_1116)->inst,_1121,mosek::fusion::p_FlatExpr::_get_impl(_1116)->subj,mosek::fusion::p_FlatExpr::_get_impl(_1116)->cof,_1126,mosek::fusion::p_FlatExpr::_get_impl(_1116)->x); }else { throw ::mosek::fusion::UnexpectedError(std::string ("Invalid domain"));}}monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::nonsym_psdconstraint( const std::string & _1127,monty::rc_ptr< ::mosek::fusion::Expression > _1128,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1129){ monty::rc_ptr< ::mosek::fusion::FlatExpr > _1130 = _1128->eval(); if (((! ((mosek::fusion::p_Set::_get_impl(mosek::fusion::p_FlatExpr::_get_impl(_1130)->shape)->nd == (int)2) || (mosek::fusion::p_Set::_get_impl(mosek::fusion::p_FlatExpr::_get_impl(_1130)->shape)->nd == (int)3))) || (mosek::fusion::p_FlatExpr::_get_impl(_1130)->shape->dim((int)0) != mosek::fusion::p_FlatExpr::_get_impl(_1130)->shape->dim((int)1)))){ throw ::mosek::fusion::DomainError(std::string ("Invalid expression shape for semidefinite constraint"));}else {}int _1131 = mosek::fusion::p_FlatExpr::_get_impl(_1130)->shape->dim((int)0); int _1132 = (int)1; if ((mosek::fusion::p_Set::_get_impl(mosek::fusion::p_FlatExpr::_get_impl(_1130)->shape)->nd > (int)2)){ (_1132 = mosek::fusion::p_FlatExpr::_get_impl(_1130)->shape->dim((int)2)); }else {}int _1133 = (((_1132 * _1131) * (_1131 + (int)1)) / (int)2); if ((mosek::fusion::p_PSDDomain::_get_impl(_1129)->shape && ((mosek::fusion::p_PSDDomain::_get_impl(_1129)->shape->dim((int)0) != _1131) || ((mosek::fusion::p_PSDDomain::_get_impl(_1129)->shape->dim((int)1) != _1131) || (mosek::fusion::p_PSDDomain::_get_impl(_1129)->shape->dim((int)2) != _1132))))){ throw ::mosek::fusion::DomainError(std::string ("Expression shape does not match domain"));}else {}if ((! mosek::fusion::p_FlatExpr::_get_impl(_1130)->inst || ((int)((mosek::fusion::p_FlatExpr::_get_impl(_1130)->inst)->size(0)) == _1133))){ long long _1134 = _1133; std::shared_ptr< monty::ndarray< long long,1 > > _1135 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1134))); std::shared_ptr< monty::ndarray< long long,1 > > _1136 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((_1134 + (int)1)))); std::shared_ptr< monty::ndarray< double,1 > > _1137 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)((mosek::fusion::p_FlatExpr::_get_impl(_1130)->subj)->size(0))))); std::shared_ptr< monty::ndarray< long long,1 > > _1138 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((mosek::fusion::p_FlatExpr::_get_impl(_1130)->subj)->size(0))))); std::shared_ptr< monty::ndarray< long long,1 > > _1139 = ([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _7767; for (long long _1140=(int)0, _7768=_1134; _1140 < _7768;++_1140)_7767.push_back(_1140); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7767.size()),_7767.begin(),_7767.end())); })(); std::shared_ptr< monty::ndarray< double,1 > > _1141 = nullptr; { int _1142 = (int)0; int _7769 = (int)0; int _7770 = _1132; for (int _1143 = _7769;_1143<_7770;++_1143){ int _7771 = (int)0; int _7772 = _1131; for (int _1144 = _7771;_1144<_7772;++_1144){ int _7773 = (int)0; int _7774 = (_1144 + (int)1); for (int _1145 = _7773;_1145<_7774;++_1145){ long long _1146 = (long long)((((_1143 * _1131) * _1131) + (_1144 * _1131)) + _1145); long long _1147 = (long long)((((_1143 * _1131) * _1131) + (_1145 * _1131)) + _1144); if ((_1144 == _1145)){ (((*_1136)((_1142 + (int)1))) = (((*mosek::fusion::p_FlatExpr::_get_impl(_1130)->ptrb)((_1146 + (int)1))) - ((*mosek::fusion::p_FlatExpr::_get_impl(_1130)->ptrb)(_1146)))); }else { (((*_1136)((_1142 + (int)1))) = (((((*mosek::fusion::p_FlatExpr::_get_impl(_1130)->ptrb)((_1146 + (int)1))) - ((*mosek::fusion::p_FlatExpr::_get_impl(_1130)->ptrb)(_1146))) + ((*mosek::fusion::p_FlatExpr::_get_impl(_1130)->ptrb)((_1147 + (int)1)))) - ((*mosek::fusion::p_FlatExpr::_get_impl(_1130)->ptrb)(_1147)))); }(((*_1135)(_1142)) = _1146); ( ++ _1142 ); }}}int _7775 = (int)0; int _7776 = _1133; for (int _1148 = _7775;_1148<_7776;++_1148){ (((*_1136)((_1148 + (int)1))) = (((*_1136)((_1148 + (int)1))) + ((*_1136)(_1148)))); }}if (mosek::fusion::p_FlatExpr::_get_impl(_1130)->bfix){ (_1141 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)((_1135)->size(0)))))); int _1149 = (int)0; int _7777 = (int)0; int _7778 = _1132; for (int _1150 = _7777;_1150<_7778;++_1150){ int _7779 = (int)0; int _7780 = _1131; for (int _1151 = _7779;_1151<_7780;++_1151){ int _7781 = (int)0; int _7782 = (_1151 + (int)1); for (int _1152 = _7781;_1152<_7782;++_1152){ long long _1153 = (long long)((((_1150 * _1131) * _1131) + (_1151 * _1131)) + _1152); long long _1154 = (long long)((((_1150 * _1131) * _1131) + (_1152 * _1131)) + _1151); if ((_1151 == _1152)){ (((*_1141)(_1149)) = ((*mosek::fusion::p_FlatExpr::_get_impl(_1130)->bfix)(_1153))); }else { (((*_1141)(_1149)) = (0.5 * (((*mosek::fusion::p_FlatExpr::_get_impl(_1130)->bfix)(_1153)) + ((*mosek::fusion::p_FlatExpr::_get_impl(_1130)->bfix)(_1154))))); }( ++ _1149 ); }}}}else {}{ int _1155 = (int)0; int _7783 = (int)0; int _7784 = _1132; for (int _1156 = _7783;_1156<_7784;++_1156){ int _7785 = (int)0; int _7786 = _1131; for (int _1157 = _7785;_1157<_7786;++_1157){ int _7787 = (int)0; int _7788 = (_1157 + (int)1); for (int _1158 = _7787;_1158<_7788;++_1158){ int _1159 = ((((_1156 * _1131) * _1131) + (_1157 * _1131)) + _1158); int _1160 = ((((_1156 * _1131) * _1131) + (_1158 * _1131)) + _1157); if ((_1157 == _1158)){ ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_FlatExpr::_get_impl(_1130)->subj,((*mosek::fusion::p_FlatExpr::_get_impl(_1130)->ptrb)(_1159)),_1138,((*_1136)(_1155)),(((*mosek::fusion::p_FlatExpr::_get_impl(_1130)->ptrb)((_1159 + (int)1))) - ((*mosek::fusion::p_FlatExpr::_get_impl(_1130)->ptrb)(_1159)))); ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_FlatExpr::_get_impl(_1130)->cof,((*mosek::fusion::p_FlatExpr::_get_impl(_1130)->ptrb)(_1159)),_1137,((*_1136)(_1155)),(((*mosek::fusion::p_FlatExpr::_get_impl(_1130)->ptrb)((_1159 + (int)1))) - ((*mosek::fusion::p_FlatExpr::_get_impl(_1130)->ptrb)(_1159)))); }else { long long _1161 = (((*mosek::fusion::p_FlatExpr::_get_impl(_1130)->ptrb)((_1159 + (int)1))) - ((*mosek::fusion::p_FlatExpr::_get_impl(_1130)->ptrb)(_1159))); long long _1162 = (((*mosek::fusion::p_FlatExpr::_get_impl(_1130)->ptrb)((_1160 + (int)1))) - ((*mosek::fusion::p_FlatExpr::_get_impl(_1130)->ptrb)(_1160))); ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_FlatExpr::_get_impl(_1130)->subj,((*mosek::fusion::p_FlatExpr::_get_impl(_1130)->ptrb)(_1159)),_1138,((*_1136)(_1155)),_1161); ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_FlatExpr::_get_impl(_1130)->subj,((*mosek::fusion::p_FlatExpr::_get_impl(_1130)->ptrb)(_1160)),_1138,(((*_1136)(_1155)) + _1161),_1162); long long _7789 = (long long)0; long long _7790 = _1161; for (long long _1163 = _7789;_1163<_7790;++_1163){ (((*_1137)((((*_1136)(_1155)) + _1163))) = (0.5 * ((*mosek::fusion::p_FlatExpr::_get_impl(_1130)->cof)((((*mosek::fusion::p_FlatExpr::_get_impl(_1130)->ptrb)(_1159)) + _1163))))); }long long _7791 = (long long)0; long long _7792 = _1162; for (long long _1164 = _7791;_1164<_7792;++_1164){ (((*_1137)(((((*_1136)(_1155)) + _1161) + _1164))) = (0.5 * ((*mosek::fusion::p_FlatExpr::_get_impl(_1130)->cof)((((*mosek::fusion::p_FlatExpr::_get_impl(_1130)->ptrb)(_1160)) + _1164))))); }}( ++ _1155 ); }}}}return sdptrilcon(_1127,_1131,_1132,_1136,_1135,_1139,_1138,_1137,_1141,mosek::fusion::p_FlatExpr::_get_impl(_1130)->x); }else { int _1165 = (_1131 * _1131); std::shared_ptr< monty::ndarray< long long,1 > > _1166 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_FlatExpr::_get_impl(_1130)->inst); int _7793 = (int)0; int _7794 = (int)((_1166)->size(0)); for (int _1167 = _7793;_1167<_7794;++_1167){ long long _1168 = (((*mosek::fusion::p_FlatExpr::_get_impl(_1130)->inst)(_1167)) / _1165); long long _1169 = ((((*mosek::fusion::p_FlatExpr::_get_impl(_1130)->inst)(_1167)) / _1131) % _1131); long long _1170 = (((*mosek::fusion::p_FlatExpr::_get_impl(_1130)->inst)(_1167)) % _1131); if ((_1170 > _1169)){ (((*_1166)(_1167)) = (((_1168 * _1165) + (_1170 * _1131)) + _1169)); }else { (((*_1166)(_1167)) = ((*mosek::fusion::p_FlatExpr::_get_impl(_1130)->inst)(_1167))); }if ((_1169 != _1170)){ long long _7795 = ((*mosek::fusion::p_FlatExpr::_get_impl(_1130)->ptrb)(_1167)); long long _7796 = ((*mosek::fusion::p_FlatExpr::_get_impl(_1130)->ptrb)((_1167 + (int)1))); for (long long _1171 = _7795;_1171<_7796;++_1171){ (((*mosek::fusion::p_FlatExpr::_get_impl(_1130)->cof)(_1171)) /= (int)2); }if (mosek::fusion::p_FlatExpr::_get_impl(_1130)->bfix){ (((*mosek::fusion::p_FlatExpr::_get_impl(_1130)->bfix)(_1167)) /= (int)2); }else {}}else {}}std::shared_ptr< monty::ndarray< long long,1 > > _1172 = ([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _7797; for (int _1173=(int)0, _7798=(int)((_1166)->size(0)); _1173 < _7798;++_1173)_7797.push_back(_1173); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7797.size()),_7797.begin(),_7797.end())); })(); { std::shared_ptr< monty::ndarray< long long,1 > > _1174 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(((_1132 * _1131) + (int)1)))); ::mosek::fusion::p_Sort::argTransposeSort(_1172,_1174,_1132,_1131,_1131,_1166); ::mosek::fusion::p_Sort::argTransposeSort(_1172,_1174,(_1132 * _1131),_1131,(int)1,_1166); }int _1175 = (int)0; if (((int)((_1172)->size(0)) > (int)0)){ ( ++ _1175 ); int _7799 = (int)1; int _7800 = (int)((_1172)->size(0)); for (int _1176 = _7799;_1176<_7800;++_1176){ if ((((*_1166)(((*_1172)(_1176)))) > ((*_1166)(((*_1172)((_1176 - (int)1))))))){ ( ++ _1175 ); }else {}}}else {}if (((int)((_1166)->size(0)) == _1175)){ return sdptrilcon(_1127,_1131,_1132,mosek::fusion::p_FlatExpr::_get_impl(_1130)->ptrb,_1166,_1172,mosek::fusion::p_FlatExpr::_get_impl(_1130)->subj,mosek::fusion::p_FlatExpr::_get_impl(_1130)->cof,mosek::fusion::p_FlatExpr::_get_impl(_1130)->bfix,mosek::fusion::p_FlatExpr::_get_impl(_1130)->x); }else { std::shared_ptr< monty::ndarray< long long,1 > > _1177 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((_1175 + (int)1)))); std::shared_ptr< monty::ndarray< long long,1 > > _1178 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1175))); std::shared_ptr< monty::ndarray< long long,1 > > _1179 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((mosek::fusion::p_FlatExpr::_get_impl(_1130)->subj)->size(0))))); std::shared_ptr< monty::ndarray< double,1 > > _1180 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)((mosek::fusion::p_FlatExpr::_get_impl(_1130)->subj)->size(0))))); std::shared_ptr< monty::ndarray< double,1 > > _1181 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_1175))); { int _1182 = (int)0; long long _1183 = (long long)0; int _7801 = (int)0; int _7802 = (int)((_1172)->size(0)); for (int _1184 = _7801;_1184<_7802;++_1184){ if (((_1184 > (int)0) && (((*_1166)(((*_1172)(_1184)))) != ((*_1166)(((*_1172)((_1184 - (int)1)))))))){ ( ++ _1182 ); }else {}long long _1185 = (((*mosek::fusion::p_FlatExpr::_get_impl(_1130)->ptrb)((((*_1172)(_1184)) + (int)1))) - ((*mosek::fusion::p_FlatExpr::_get_impl(_1130)->ptrb)(((*_1172)(_1184))))); ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_FlatExpr::_get_impl(_1130)->subj,((*mosek::fusion::p_FlatExpr::_get_impl(_1130)->ptrb)(((*_1172)(_1184)))),_1179,_1183,_1185); ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_FlatExpr::_get_impl(_1130)->cof,((*mosek::fusion::p_FlatExpr::_get_impl(_1130)->ptrb)(((*_1172)(_1184)))),_1180,_1183,_1185); (_1183 += _1185); (((*_1177)((_1182 + (int)1))) = _1183); (((*_1178)(_1182)) = ((*_1166)(((*_1172)(_1184))))); }}if (mosek::fusion::p_FlatExpr::_get_impl(_1130)->bfix){ int _1186 = (int)0; int _7803 = (int)0; int _7804 = (int)((_1172)->size(0)); for (int _1187 = _7803;_1187<_7804;++_1187){ if (((_1187 > (int)0) && (((*_1166)(((*_1172)(_1187)))) != ((*_1166)(((*_1172)((_1187 - (int)1)))))))){ ( ++ _1186 ); }else {}long long _1188 = ((((*mosek::fusion::p_FlatExpr::_get_impl(_1130)->inst)(((*_1172)(_1187)))) / _1131) % _1131); long long _1189 = (((*mosek::fusion::p_FlatExpr::_get_impl(_1130)->inst)(((*_1172)(_1187)))) % _1131); (((*_1181)(_1186)) += ((*mosek::fusion::p_FlatExpr::_get_impl(_1130)->bfix)(((*_1172)(_1187))))); }}else {}return sdptrilcon(_1127,_1131,_1132,_1177,_1178,::mosek::fusion::Utils::Tools::range((long long)((_1178)->size(0))),_1179,_1180,_1181,mosek::fusion::p_FlatExpr::_get_impl(_1130)->x); }}}monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::sdptrilcon( const std::string & _1190,int _1191,int _1192,std::shared_ptr< monty::ndarray< long long,1 > > _1193,std::shared_ptr< monty::ndarray< long long,1 > > _1194,std::shared_ptr< monty::ndarray< long long,1 > > _1195,std::shared_ptr< monty::ndarray< long long,1 > > _1196,std::shared_ptr< monty::ndarray< double,1 > > _1197,std::shared_ptr< monty::ndarray< double,1 > > _1198,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _1199){ monty::rc_ptr< ::mosek::fusion::ModelConstraint > _1200 = nullptr; long long _1201 = (int)0; int _7805 = (int)0; int _7806 = (int)((_1195)->size(0)); for (int _1202 = _7805;_1202<_7806;++_1202){ (_1201 = (_1201 + (((*_1193)((((*_1195)(_1202)) + (int)1))) - ((*_1193)(((*_1195)(_1202))))))); }std::shared_ptr< monty::ndarray< int,1 > > _1203 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1201))); std::shared_ptr< monty::ndarray< int,1 > > _1204 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1201))); std::shared_ptr< monty::ndarray< int,1 > > _1205 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1201))); std::shared_ptr< monty::ndarray< long long,1 > > _1206 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(((int)((_1195)->size(0)) + (int)1)))); { int _1207 = (int)0; int _7807 = (int)0; int _7808 = (int)((_1195)->size(0)); for (int _1208 = _7807;_1208<_7808;++_1208){ ::mosek::fusion::p_Model::inst(_1199,(int)((*_1193)(((*_1195)(_1208)))),(int)((*_1193)((((*_1195)(_1208)) + (int)1))),_1196,_1207,_1203,_1204,_1205); (_1207 = (_1207 + (int)(((*_1193)((((*_1195)(_1208)) + (int)1))) - ((*_1193)(((*_1195)(_1208))))))); (((*_1206)((_1208 + (int)1))) = _1207); }}int _1209 = (_1192 * ((_1191 * (_1191 + (int)1)) / (int)2)); long long _1210 = (long long)0; long long _7809 = (long long)0; long long _7810 = _1201; for (long long _1211 = _7809;_1211<_7810;++_1211){ if ((((*_1203)(_1211)) < (int)0)){ ( ++ _1210 ); }else {}}long long _1212 = (_1201 - _1210); std::shared_ptr< monty::ndarray< long long,1 > > _1213 = ::mosek::fusion::Utils::Tools::range(_1201); int _7811 = (int)0; int _7812 = (int)((_1195)->size(0)); for (int _1214 = _7811;_1214<_7812;++_1214){ ::mosek::fusion::p_CommonTools::argQsort(_1213,_1203,std::shared_ptr< monty::ndarray< int,1 > >(nullptr),((*_1206)(_1214)),((*_1206)((_1214 + (int)1)))); }long long _1215 = (long long)0; int _7813 = (int)0; int _7814 = (int)((_1195)->size(0)); for (int _1216 = _7813;_1216<_7814;++_1216){ long long _1217 = ((*_1206)(_1216)); long long _1218 = ((*_1206)((_1216 + (int)1))); while (((_1217 < _1218) && (((*_1203)(((*_1213)(_1217)))) < (int)0))) { ( ++ _1217 ); }if ((_1217 < _1218)){ ( ++ _1215 ); ( ++ _1217 ); }else {}while ((_1217 < _1218)) { if ((((*_1203)(((*_1213)((_1217 - (int)1))))) < ((*_1203)(((*_1213)(_1217)))))){ ( ++ _1215 ); }else {}( ++ _1217 ); }}std::shared_ptr< monty::ndarray< long long,1 > > _1219 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((_1195)->size(0))))); int _7815 = (int)0; int _7816 = (int)((_1195)->size(0)); for (int _1220 = _7815;_1220<_7816;++_1220){ long long _1221 = (((*_1194)(((*_1195)(_1220)))) / (_1191 * _1191)); long long _1222 = ((((*_1194)(((*_1195)(_1220)))) % (_1191 * _1191)) / _1191); long long _1223 = (((*_1194)(((*_1195)(_1220)))) % _1191); (((*_1219)(_1220)) = (((_1221 * ((_1191 * (_1191 + (int)1)) / (int)2)) + ((_1222 * (_1222 + (int)1)) / (int)2)) + _1223)); }int _1224 = task_vars_used; int _1225 = task_numcon(); int _1226 = task_numcone(); int _1227 = task_numbarvar(); {monty::finally _7817([&]{ if (! _1200){ (natbarvarmap_num = _1227); (natvarmap_num = _1224); task_cleanup(_1224,_1225,_1226,_1227); }else {}});{ int _1228 = task_append_con(_1209); int _1229 = (_1228 + _1209); int _1230 = task_alloc_vars(_1209); int _1231 = (_1230 + _1209); std::shared_ptr< monty::ndarray< long long,1 > > _1232 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((_1209 + (int)1)))); std::shared_ptr< monty::ndarray< int,1 > > _1233 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1215))); std::shared_ptr< monty::ndarray< double,1 > > _1234 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_1215))); if ((_1212 > (int)0)){ long long _1235 = (long long)0; int _7818 = (int)0; int _7819 = _1209; for (int _1236 = _7818;_1236<_7819;++_1236){ long long _1237 = ((*_1232)(_1236)); if (((_1235 < (int)((_1195)->size(0))) && (_1236 == ((*_1219)(_1235))))){ long long _1238 = ((*_1206)((_1235 + (int)1))); long long _1239 = ((*_1206)(_1235)); while (((_1239 < _1238) && (((*_1203)(((*_1213)(_1239)))) < (int)0))) { ( ++ _1239 ); }if ((_1239 < _1238)){ (((*_1233)(_1237)) = ((*_1203)(((*_1213)(_1239))))); (((*_1234)(_1237)) = ((*_1197)(((*_1213)(_1239))))); ( ++ _1239 ); while ((_1239 < _1238)) { if ((((*_1203)(((*_1213)(_1239)))) == ((*_1233)(_1237)))){ (((*_1234)(_1237)) = (((*_1234)(_1237)) + ((*_1197)(((*_1213)(_1239)))))); }else { ( ++ _1237 ); (((*_1233)(_1237)) = ((*_1203)(((*_1213)(_1239))))); (((*_1234)(_1237)) = ((*_1197)(((*_1213)(_1239))))); }( ++ _1239 ); }( ++ _1237 ); }else {}( ++ _1235 ); }else {}(((*_1232)((_1236 + (int)1))) = _1237); }task_putarowslice(_1228,_1229,_1232,_1233,_1234); }else {}std::shared_ptr< monty::ndarray< double,1 > > _1240 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_1209))); if (_1198){ int _7820 = (int)0; int _7821 = (int)((_1195)->size(0)); for (int _1241 = _7820;_1241<_7821;++_1241){ (((*_1240)(((*_1219)(_1241)))) = (- ((*_1198)(((*_1195)(_1241)))))); }}else {}task_con_putboundslice_fx(_1228,_1229,_1240); if ((_1210 > (int)0)){ int _7822 = (int)0; int _7823 = (int)((_1195)->size(0)); for (int _1242 = _7822;_1242<_7823;++_1242){ long long _1243 = ((*_1193)(((*_1195)(_1242)))); long long _1244 = ((*_1193)((((*_1195)(_1242)) + (int)1))); long long _1245 = _1243; while (((_1245 < _1244) && (((*_1203)(((*_1213)(_1245)))) < (int)0))) { ( ++ _1245 ); }if ((_1243 < _1245)){ int _1246 = ((*_1203)(((*_1213)(_1243)))); while ((_1243 < _1245)) { long long _1247 = _1243; while (((_1243 < _1245) && (((*_1203)(((*_1213)(_1243)))) == _1246))) { ( ++ _1243 ); }int _1248 = (- (_1246 + (int)1)); ::mosek::fusion::p_CommonTools::argQsort(_1213,_1204,_1205,_1247,_1243); int _1249 = (int)1; long long _7824 = (_1247 + (int)1); long long _7825 = _1243; for (long long _1250 = _7824;_1250<_7825;++_1250){ if (((((*_1204)(((*_1213)(_1250)))) != ((*_1204)(((*_1213)((_1250 - (int)1)))))) || (((*_1205)(((*_1213)(_1250)))) != ((*_1205)(((*_1213)((_1250 - (int)1)))))))){ ( ++ _1249 ); }else {}}std::shared_ptr< monty::ndarray< int,1 > > _1251 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1249))); std::shared_ptr< monty::ndarray< int,1 > > _1252 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1249))); std::shared_ptr< monty::ndarray< double,1 > > _1253 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_1249))); { int _1254 = (- (int)1); int _1255 = (- (int)1); int _1256 = (int)0; long long _7826 = _1247; long long _7827 = _1243; for (long long _1257 = _7826;_1257<_7827;++_1257){ if (((((*_1204)(((*_1213)(_1257)))) == _1255) && (((*_1205)(((*_1213)(_1257)))) == _1256))){ (((*_1253)(_1254)) = (((*_1253)(_1254)) + ((*_1197)(((*_1213)(_1257)))))); }else { ( ++ _1254 ); (((*_1251)(_1254)) = ((*_1204)(((*_1213)(_1257))))); (((*_1252)(_1254)) = ((*_1205)(((*_1213)(_1257))))); (((*_1253)(_1254)) = ((*_1197)(((*_1213)(_1257))))); (_1255 = ((*_1251)(_1254))); (_1256 = ((*_1252)(_1254))); }}}int _1258 = task_barvardim(_1248); int _1259 = task_append_barmatrix(_1258,_1251,_1252,_1253); task_putbaraij((int)(((*_1219)(_1242)) + _1228),_1248,_1259); }}else {}}}else {}int _1260 = task_append_barvar(_1191,_1192); { std::shared_ptr< monty::ndarray< int,1 > > _1261 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)1))); std::shared_ptr< monty::ndarray< int,1 > > _1262 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)1))); std::shared_ptr< monty::ndarray< double,1 > > _1263 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)1))); int _7828 = (int)0; int _7829 = _1191; for (int _1264 = _7828;_1264<_7829;++_1264){ int _7830 = (int)0; int _7831 = (_1264 + (int)1); for (int _1265 = _7830;_1265<_7831;++_1265){ (((*_1261)((int)0)) = _1264); (((*_1262)((int)0)) = _1265); (((*_1263)((int)0)) = (- ([&]() -> double { if ( (_1264 == _1265)) return (1.0); else return (0.5); })())); int _1266 = task_append_barmatrix(_1191,_1261,_1262,_1263); int _7832 = (int)0; int _7833 = _1192; for (int _1267 = _7832;_1267<_7833;++_1267){ int _1268 = (((((_1267 * _1191) * (_1191 + (int)1)) / (int)2) + ((_1264 * (_1264 + (int)1)) / (int)2)) + _1265); task_putbaraij((_1228 + _1268),(_1260 + _1267),_1266); }}}}monty::rc_ptr< ::mosek::fusion::Set > _1269 = nullptr; if ((_1192 == (int)1)){ (_1269 = ::mosek::fusion::p_NDSet::_new_NDSet(_1191,_1191)); }else { (_1269 = ::mosek::fusion::p_NDSet::_new_NDSet(_1191,_1191,_1192)); }(_1200 = ::mosek::fusion::p_PSDConstraint::_new_PSDConstraint(_pubthis,_1190,_1269,::mosek::fusion::Utils::Tools::range(_1228,_1229),_1191,_1260,_1192,_1232,_1233,_1234,_1240,nullptr,nullptr,nullptr)); natbarvarmap_ensure(_1192); (natbarvarmap_num += _1192); addConstraint(_1190,_1200); return _1200; }}}void mosek::fusion::p_Model::addConstraint( const std::string & _1270,monty::rc_ptr< ::mosek::fusion::ModelConstraint > _1271){ if ((cons_used >= (int)((cons)->size(0)))){ int _1272 = ([&]() -> int { if ( ((int)((cons)->size(0)) > (int)100)) return (((int)((cons)->size(0)) * (int)2)); else return ((int)100); })(); std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelConstraint >,1 > > _1273 = cons; (cons = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelConstraint >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelConstraint >,1 >(monty::shape(_1272)))); int _7834 = (int)0; int _7835 = cons_used; for (int _1274 = _7834;_1274<_7835;++_1274){ (((*cons)(_1274)) = ((*_1273)(_1274))); }}else {}(((*cons)(cons_used)) = _1271); if (((int)((_1270).size()) > (int)0)){ mosek::fusion::Utils::p_StringIntMap::_get_impl(con_map.get())->setItem(_1270,cons_used); }else {}( ++ cons_used ); }void mosek::fusion::p_Model::addVariable( const std::string & _1275,monty::rc_ptr< ::mosek::fusion::ModelVariable > _1276){ if ((vars_used >= (int)((vars)->size(0)))){ int _1277 = ([&]() -> int { if ( ((int)((vars)->size(0)) > (int)100)) return (((int)((vars)->size(0)) * (int)2)); else return ((int)100); })(); std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 > > _1278 = vars; (vars = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 >(monty::shape(_1277)))); int _7836 = (int)0; int _7837 = vars_used; for (int _1279 = _7836;_1279<_7837;++_1279){ (((*vars)(_1279)) = ((*_1278)(_1279))); }}else {}(((*vars)(vars_used)) = _1276); if (((int)((_1275).size()) > (int)0)){ mosek::fusion::Utils::p_StringIntMap::_get_impl(var_map.get())->setItem(_1275,vars_used); }else {}( ++ vars_used ); }long long mosek::fusion::Model::numConstraints  ( ) { return mosek::fusion::p_Model::_get_impl(this)->numConstraints(); }long long mosek::fusion::p_Model::numConstraints( ){ return cons_used; }long long mosek::fusion::Model::numVariables  ( ) { return mosek::fusion::p_Model::_get_impl(this)->numVariables(); }long long mosek::fusion::p_Model::numVariables( ){ return vars_used; }bool mosek::fusion::Model::hasConstraint  ( const std::string & _1280) { return mosek::fusion::p_Model::_get_impl(this)->hasConstraint(_1280); }bool mosek::fusion::p_Model::hasConstraint( const std::string & _1280){ return mosek::fusion::Utils::p_StringIntMap::_get_impl(con_map.get())->hasItem(_1280); }bool mosek::fusion::Model::hasVariable  ( const std::string & _1281) { return mosek::fusion::p_Model::_get_impl(this)->hasVariable(_1281); }bool mosek::fusion::p_Model::hasVariable( const std::string & _1281){ return mosek::fusion::Utils::p_StringIntMap::_get_impl(var_map.get())->hasItem(_1281); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::getConstraint  ( int _1282) { return mosek::fusion::p_Model::_get_impl(this)->getConstraint(_1282); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::getConstraint( int _1282){ return ([&]() -> monty::rc_ptr< ::mosek::fusion::ModelConstraint > { if ( ((_1282 >= (int)0) && (_1282 < cons_used))) return (((*cons)(_1282))); else return (nullptr); })(); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::getConstraint  ( const std::string & _1283) { return mosek::fusion::p_Model::_get_impl(this)->getConstraint(_1283); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::getConstraint( const std::string & _1283){ return ([&]() -> monty::rc_ptr< ::mosek::fusion::ModelConstraint > { if ( mosek::fusion::Utils::p_StringIntMap::_get_impl(con_map.get())->hasItem(_1283)) return (((*cons)(mosek::fusion::Utils::p_StringIntMap::_get_impl(con_map.get())->getItem(_1283)))); else return (nullptr); })(); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::getVariable  ( int _1284) { return mosek::fusion::p_Model::_get_impl(this)->getVariable(_1284); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::getVariable( int _1284){ return ([&]() -> monty::rc_ptr< ::mosek::fusion::ModelVariable > { if ( ((_1284 >= (int)0) && (_1284 < vars_used))) return (((*vars)(_1284))); else return (nullptr); })(); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::getVariable  ( const std::string & _1285) { return mosek::fusion::p_Model::_get_impl(this)->getVariable(_1285); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::getVariable( const std::string & _1285){ return ([&]() -> monty::rc_ptr< ::mosek::fusion::ModelVariable > { if ( mosek::fusion::Utils::p_StringIntMap::_get_impl(var_map.get())->hasItem(_1285)) return (((*vars)(mosek::fusion::Utils::p_StringIntMap::_get_impl(var_map.get())->getItem(_1285)))); else return (nullptr); })(); }std::string mosek::fusion::Model::getName  ( ) { return mosek::fusion::p_Model::_get_impl(this)->getName(); }std::string mosek::fusion::p_Model::getName( ){ return model_name; }monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::Model::clone  ( ) { return mosek::fusion::p_Model::_get_impl(this)->clone(); }monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::p_Model::clone( ){ return ::mosek::fusion::p_Model::_new_Model(_pubthis); }void mosek::fusion::p_Model::natbarvarmap_ensure( int _1286){ if (((natbarvarmap_num + _1286) > (int)((natbarvarmap_Var)->size(0)))){ int _1287 = ((int)2 * (int)((natbarvarmap_Var)->size(0))); if ((_1287 < (natbarvarmap_num + _1286))){ (_1287 = (natbarvarmap_num + _1286)); }else {}std::shared_ptr< monty::ndarray< int,1 > > _1288 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1287))); std::shared_ptr< monty::ndarray< int,1 > > _1289 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1287))); int _7838 = (int)0; int _7839 = natbarvarmap_num; for (int _1290 = _7838;_1290<_7839;++_1290){ (((*_1288)(_1290)) = ((*natbarvarmap_Var)(_1290))); }(natbarvarmap_Var = _1288); }else {}}void mosek::fusion::p_Model::natvarmap_ensure( int _1291){ if (((natvarmap_num + _1291) > (int)((natvarmap_idx)->size(0)))){ int _1292 = ((int)2 * (int)((natvarmap_idx)->size(0))); if ((_1292 < (natvarmap_num + _1291))){ (_1292 = (natvarmap_num + _1291)); }else {}std::shared_ptr< monty::ndarray< long long,1 > > _1293 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1292))); ::mosek::fusion::Utils::Tools::arraycopy(natvarmap_idx,(int)0,_1293,(int)0,natvarmap_num); std::shared_ptr< monty::ndarray< int,1 > > _1294 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1292))); int _7840 = (int)0; int _7841 = natvarmap_num; for (int _1295 = _7840;_1295<_7841;++_1295){ (((*_1294)(_1295)) = ((*natvarmap_Var)(_1295))); }(natvarmap_idx = _1293); (natvarmap_Var = _1294); }else {}}int mosek::fusion::p_Model::task_alloc_vars( int _1296){ if (((task_vars_allocated - task_vars_used) < _1296)){ int _1297 = ([&]() -> int { if ( (((_1296 + task_vars_used) - task_vars_allocated) < (int)1000)) return ((int)1000); else return (_1296); })(); task_append_var(_1297); (task_vars_allocated += _1297); }else {}int _1298 = task_vars_used; (task_vars_used += _1296); return _1298; }void mosek::fusion::p_Model::destroy(){con_map.reset();cons.reset();vars.reset();initsol_xx_flag.reset();initsol_xx.reset();natbarvarmap_Var.reset();var_map.reset();natvarmap_idx.reset();natvarmap_Var.reset();}void mosek::fusion::Model::destroy() { mosek::fusion::p_Model::_get_impl(this)->destroy(); }mosek::fusion::CompoundVariable::CompoundVariable(mosek::fusion::p_CompoundVariable *_impl) : mosek::fusion::BaseVariable(_impl) { /*std::cout << "CompoundVariable()" << this << std::endl; */ }mosek::fusion::CompoundVariable::~CompoundVariable() {  /* std::cout << "~CompoundVariable()" << this << std::endl << std::flush; */ }mosek::fusion::p_CompoundVariable::p_CompoundVariable  (::mosek::fusion::CompoundVariable * _pubthis) :     mosek::fusion::p_BaseVariable(_pubthis),    _pubthis(_pubthis){}mosek::fusion::CompoundVariable::t mosek::fusion::p_CompoundVariable::_new_CompoundVariable  (std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _1299,    int _1300){ return new mosek::fusion::CompoundVariable(_1299,_1300); }mosek::fusion::CompoundVariable::CompoundVariable  (std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _1299,    int _1300) :    CompoundVariable(new mosek::fusion::p_CompoundVariable(this)){ mosek::fusion::p_CompoundVariable::_get_impl(this)->_initialize(_1299,_1300); }void mosek::fusion::p_CompoundVariable::_initialize  (std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _1299,    int _1300){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_BaseVariable::_initialize(::mosek::fusion::p_CompoundVariable::model_from_var(_1299),::mosek::fusion::p_CompoundVariable::compute_shape(_1299,_1300));int _1301 = (int)0; int _1302 = (int)0; int _7842 = (int)0; int _7843 = (int)((_1299)->size(0)); for (int _1303 = _7842;_1303<_7843;++_1303){ if ((mosek::fusion::p_Set::_get_impl(((*_1299)(_1303))->getShape())->size == (int)1)){ ( ++ _1301 ); ( ++ _1302 ); }else if ((mosek::fusion::p_Set::_get_impl(((*_1299)(_1303))->getShape())->size > (int)1)){ ( ++ _1301 ); (_1302 += ((*_1299)(_1303))->getShape()->dim(_1300)); }else {}}(vars = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >(monty::shape(_1301)))); (varsb = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((_1301 + (int)1))))); (((*varsb)((int)0)) = (int)0); (stackdim = _1300); { int _1304 = (int)0; int _7844 = (int)0; int _7845 = (int)((_1299)->size(0)); for (int _1305 = _7844;_1305<_7845;++_1305){ if ((mosek::fusion::p_Set::_get_impl(((*_1299)(_1305))->getShape())->size > (int)0)){ (((*vars)(_1304)) = ((*_1299)(_1305))); if ((mosek::fusion::p_Set::_get_impl(((*_1299)(_1305))->getShape())->size == (int)1)){ (((*varsb)((_1304 + (int)1))) = (((*varsb)(_1304)) + (int)1)); }else { (((*varsb)((_1304 + (int)1))) = (((*varsb)(_1304)) + ((*_1299)(_1305))->getShape()->dim(_1300))); }( ++ _1304 ); }else {}}}}}monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::CompoundVariable::elementDesc  ( long long _1306,    monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1307) { return mosek::fusion::p_CompoundVariable::_get_impl(this)->elementDesc(_1306,_1307); }monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::p_CompoundVariable::elementDesc( long long _1306,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1307){ if (((_1306 < (long long)0) || (_1306 >= mosek::fusion::p_Set::_get_impl(shape_p)->size))){ throw ::mosek::fusion::IndexError(std::string ("Index out of bounds"));}else {}std::shared_ptr< monty::ndarray< int,1 > > _1308 = mosek::fusion::p_Set::_get_impl(shape_p.get())->idxtokey(_1306); int _1309 = (int)0; while ((((*_1308)(stackdim)) >= ((*varsb)((_1309 + (int)1))))) { ( ++ _1309 ); }(((*_1308)(stackdim)) = (((*_1308)(stackdim)) - ((*varsb)(_1309)))); ((*vars)(_1309))->elementDesc(mosek::fusion::p_Set::_get_impl(((*vars)(_1309))->getShape().get())->linearidx(_1308),_1307); return _1307; }void mosek::fusion::CompoundVariable::elementName  ( long long _1310,    monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1311) { mosek::fusion::p_CompoundVariable::_get_impl(this)->elementName(_1310,_1311); }void mosek::fusion::p_CompoundVariable::elementName( long long _1310,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1311){ if (((_1310 < (long long)0) || (_1310 >= mosek::fusion::p_Set::_get_impl(shape_p)->size))){ throw ::mosek::fusion::IndexError(std::string ("Index out of bounds"));}else {}std::shared_ptr< monty::ndarray< int,1 > > _1312 = mosek::fusion::p_Set::_get_impl(shape_p.get())->idxtokey(_1310); int _1313 = (int)0; while ((((*_1312)(stackdim)) >= ((*varsb)((_1313 + (int)1))))) { ( ++ _1313 ); }(((*_1312)(stackdim)) = (((*_1312)(stackdim)) - ((*varsb)(_1313)))); ((*vars)(_1313))->elementName(mosek::fusion::p_Set::_get_impl(((*vars)(_1313))->getShape().get())->linearidx(_1312),_1311); }void mosek::fusion::CompoundVariable::inst  ( long long _1314,    long long _1315,    std::shared_ptr< monty::ndarray< int,1 > > _1316,    std::shared_ptr< monty::ndarray< int,1 > > _1317,    std::shared_ptr< monty::ndarray< int,1 > > _1318) { mosek::fusion::p_CompoundVariable::_get_impl(this)->inst(_1314,_1315,_1316,_1317,_1318); }void mosek::fusion::p_CompoundVariable::inst( long long _1314,long long _1315,std::shared_ptr< monty::ndarray< int,1 > > _1316,std::shared_ptr< monty::ndarray< int,1 > > _1317,std::shared_ptr< monty::ndarray< int,1 > > _1318){ if (((_1314 < (long long)0) || (_1314 >= mosek::fusion::p_Set::_get_impl(shape_p)->size))){ throw ::mosek::fusion::IndexError(std::string ("Index out of bounds"));}else {}std::shared_ptr< monty::ndarray< int,1 > > _1319 = mosek::fusion::p_Set::_get_impl(shape_p.get())->idxtokey(_1314); int _1320 = (int)0; while ((((*_1319)(stackdim)) >= ((*varsb)((_1320 + (int)1))))) { ( ++ _1320 ); }(((*_1319)(stackdim)) = (((*_1319)(stackdim)) - ((*varsb)(_1320)))); ((*vars)(_1320))->inst(mosek::fusion::p_Set::_get_impl(((*vars)(_1320))->getShape().get())->linearidx(_1319),_1315,_1316,_1317,_1318); }void mosek::fusion::CompoundVariable::set_values  ( long long _1321,    std::shared_ptr< monty::ndarray< int,1 > > _1322,    std::shared_ptr< monty::ndarray< long long,1 > > _1323,    int _1324,    std::shared_ptr< monty::ndarray< double,1 > > _1325,    bool _1326) { mosek::fusion::p_CompoundVariable::_get_impl(this)->set_values(_1321,_1322,_1323,_1324,_1325,_1326); }void mosek::fusion::p_CompoundVariable::set_values( long long _1321,std::shared_ptr< monty::ndarray< int,1 > > _1322,std::shared_ptr< monty::ndarray< long long,1 > > _1323,int _1324,std::shared_ptr< monty::ndarray< double,1 > > _1325,bool _1326){ int _1327 = (int)((_1323)->size(0)); int _1328 = ((*_1322)((int)0)); int _7846 = (int)1; int _7847 = (int)((_1322)->size(0)); for (int _1329 = _7846;_1329<_7847;++_1329){ (_1328 = (_1328 * ((*_1322)(_1329)))); }std::shared_ptr< monty::ndarray< long long,1 > > _1330 = ([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _7848; for (int _1331=(int)0, _7849=(int)((_1322)->size(0)); _1331 < _7849;++_1331)_7848.push_back(_1321); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7848.size()),_7848.begin(),_7848.end())); })(); std::shared_ptr< monty::ndarray< int,1 > > _1332 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)((_1322)->size(0))))); std::shared_ptr< monty::ndarray< int,1 > > _1333 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(mosek::fusion::p_Set::_get_impl(shape_p)->nd))); std::shared_ptr< monty::ndarray< long long,1 > > _1334 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(mosek::fusion::p_Set::_get_impl(shape_p)->nd))); (((*_1334)((mosek::fusion::p_Set::_get_impl(shape_p)->nd - (int)1))) = (long long)1); int _7850 = (int)1; int _7851 = mosek::fusion::p_Set::_get_impl(shape_p)->nd; for (int _1335 = _7850;_1335<_7851;++_1335){ (((*_1334)(((mosek::fusion::p_Set::_get_impl(shape_p)->nd - _1335) - (int)1))) = (((*_1334)((mosek::fusion::p_Set::_get_impl(shape_p)->nd - _1335))) * shape_p->dim((mosek::fusion::p_Set::_get_impl(shape_p)->nd - _1335)))); }std::shared_ptr< monty::ndarray< long long,1 > > _1336 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)1))); std::shared_ptr< monty::ndarray< double,1 > > _1337 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)1))); int _7852 = (int)0; int _7853 = _1328; for (int _1338 = _7852;_1338<_7853;++_1338){ { long long _1339 = ((*_1330)((int)0)); int _7854 = (int)0; int _7855 = mosek::fusion::p_Set::_get_impl(shape_p)->nd; for (int _1340 = _7854;_1340<_7855;++_1340){ (((*_1333)(_1340)) = (int)(_1339 / ((*_1334)(_1340)))); (_1339 = (_1339 - ((long long)((*_1333)(_1340)) * ((*_1334)(_1340))))); }}{ int _1341 = (int)0; while ((((*_1333)(stackdim)) >= ((*varsb)((_1341 + (int)1))))) { ( ++ _1341 ); }(((*_1333)(stackdim)) = (((*_1333)(stackdim)) - ((*varsb)(_1341)))); (((*_1336)((int)0)) = mosek::fusion::p_Set::_get_impl(((*vars)(_1341))->getShape().get())->linearidx(_1333)); (((*_1337)((int)0)) = ((*_1325)((_1324 + _1338)))); ((*vars)(_1341))->set_values(_1336,_1337,_1326); }{ ( ++ ((*_1332)((int)0)) ); (((*_1330)((int)0)) = (((*_1330)((int)0)) + ((*_1323)((_1327 - (int)1))))); int _1342 = (int)0; { (_1342 = (int)0); for (;((_1342 < (_1327 - (int)1)) && (((*_1332)(_1342)) == ((*_1322)(_1342))));( ++ _1342 )){ (((*_1332)(_1342)) = (int)0); ( ++ ((*_1332)((_1342 + (int)1))) ); }}int _7856 = (int)0; int _7857 = _1342; for (int _1343 = _7856;_1343<_7857;++_1343){ (((*_1330)(_1343)) = ((*_1330)(_1342))); }}}}void mosek::fusion::CompoundVariable::set_values  ( std::shared_ptr< monty::ndarray< long long,1 > > _1344,    std::shared_ptr< monty::ndarray< double,1 > > _1345,    bool _1346) { mosek::fusion::p_CompoundVariable::_get_impl(this)->set_values(_1344,_1345,_1346); }void mosek::fusion::p_CompoundVariable::set_values( std::shared_ptr< monty::ndarray< long long,1 > > _1344,std::shared_ptr< monty::ndarray< double,1 > > _1345,bool _1346){ std::shared_ptr< monty::ndarray< long long,1 > > _1347 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)1))); std::shared_ptr< monty::ndarray< double,1 > > _1348 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)1))); std::shared_ptr< monty::ndarray< int,1 > > _1349 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(mosek::fusion::p_Set::_get_impl(shape_p)->nd))); int _7858 = (int)0; int _7859 = (int)((_1344)->size(0)); for (int _1350 = _7858;_1350<_7859;++_1350){ { long long _1351 = (long long)((*_1344)(_1350)); int _7860 = (int)0; int _7861 = mosek::fusion::p_Set::_get_impl(shape_p)->nd; for (int _1352 = _7860;_1352<_7861;++_1352){ (((*_1349)(_1352)) = (int)(_1351 / shape_p->stride(_1352))); (_1351 = (_1351 - ((long long)((*_1349)(_1352)) * shape_p->stride(_1352)))); }}{ int _1353 = (int)0; while ((((*_1349)(stackdim)) >= ((*varsb)((_1353 + (int)1))))) { ( ++ _1353 ); }(((*_1349)(stackdim)) = (((*_1349)(stackdim)) - ((*varsb)(_1353)))); (((*_1347)((int)0)) = mosek::fusion::p_Set::_get_impl(((*vars)(_1353))->getShape().get())->linearidx(_1349)); (((*_1348)((int)0)) = ((*_1345)(_1350))); ((*vars)(_1353))->set_values(_1347,_1348,_1346); }}}void mosek::fusion::CompoundVariable::values  ( long long _1354,    std::shared_ptr< monty::ndarray< int,1 > > _1355,    std::shared_ptr< monty::ndarray< long long,1 > > _1356,    int _1357,    std::shared_ptr< monty::ndarray< double,1 > > _1358,    bool _1359) { mosek::fusion::p_CompoundVariable::_get_impl(this)->values(_1354,_1355,_1356,_1357,_1358,_1359); }void mosek::fusion::p_CompoundVariable::values( long long _1354,std::shared_ptr< monty::ndarray< int,1 > > _1355,std::shared_ptr< monty::ndarray< long long,1 > > _1356,int _1357,std::shared_ptr< monty::ndarray< double,1 > > _1358,bool _1359){ int _1360 = (int)((_1356)->size(0)); int _1361 = ((*_1355)((int)0)); int _7862 = (int)1; int _7863 = (int)((_1355)->size(0)); for (int _1362 = _7862;_1362<_7863;++_1362){ (_1361 *= ((*_1355)(_1362))); }std::shared_ptr< monty::ndarray< long long,1 > > _1363 = ([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _7864; for (int _1364=(int)0, _7865=(int)((_1355)->size(0)); _1364 < _7865;++_1364)_7864.push_back(_1354); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7864.size()),_7864.begin(),_7864.end())); })(); std::shared_ptr< monty::ndarray< int,1 > > _1365 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)((_1355)->size(0))))); std::shared_ptr< monty::ndarray< int,1 > > _1366 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(mosek::fusion::p_Set::_get_impl(shape_p)->nd))); std::shared_ptr< monty::ndarray< long long,1 > > _1367 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)1))); int _7866 = (int)0; int _7867 = _1361; for (int _1368 = _7866;_1368<_7867;++_1368){ { long long _1369 = ((*_1363)((int)0)); int _7868 = (int)0; int _7869 = mosek::fusion::p_Set::_get_impl(shape_p)->nd; for (int _1370 = _7868;_1370<_7869;++_1370){ (((*_1366)(((mosek::fusion::p_Set::_get_impl(shape_p)->nd - _1370) - (int)1))) = (int)(_1369 % shape_p->dim(((mosek::fusion::p_Set::_get_impl(shape_p)->nd - _1370) - (int)1)))); (_1369 /= shape_p->dim(((mosek::fusion::p_Set::_get_impl(shape_p)->nd - _1370) - (int)1))); }}{ int _1371 = (int)0; while ((((*_1366)(stackdim)) >= ((*varsb)((_1371 + (int)1))))) { ( ++ _1371 ); }(((*_1366)(stackdim)) = (((*_1366)(stackdim)) - ((*varsb)(_1371)))); (((*_1367)((int)0)) = mosek::fusion::p_Set::_get_impl(((*vars)(_1371))->getShape().get())->linearidx(_1366)); ((*vars)(_1371))->values(_1367,(_1357 + _1368),_1358,_1359); }{ ( ++ ((*_1365)((int)0)) ); int _1372 = (int)0; { (_1372 = (int)0); for (;((_1372 < (_1360 - (int)1)) && (((*_1365)(_1372)) == ((*_1355)(((_1360 - (int)1) - _1372)))));( ++ _1372 )){ (((*_1365)(_1372)) = (int)0); ( ++ ((*_1365)((_1372 + (int)1))) ); }}(((*_1363)(_1372)) += ((*_1356)(((_1360 - _1372) - (int)1)))); int _7870 = (int)0; int _7871 = _1372; for (int _1373 = _7870;_1373<_7871;++_1373){ (((*_1363)(_1373)) = ((*_1363)(_1372))); }}}}void mosek::fusion::CompoundVariable::values  ( std::shared_ptr< monty::ndarray< long long,1 > > _1374,    int _1375,    std::shared_ptr< monty::ndarray< double,1 > > _1376,    bool _1377) { mosek::fusion::p_CompoundVariable::_get_impl(this)->values(_1374,_1375,_1376,_1377); }void mosek::fusion::p_CompoundVariable::values( std::shared_ptr< monty::ndarray< long long,1 > > _1374,int _1375,std::shared_ptr< monty::ndarray< double,1 > > _1376,bool _1377){ std::shared_ptr< monty::ndarray< long long,1 > > _1378 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)1))); std::shared_ptr< monty::ndarray< int,1 > > _1379 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(mosek::fusion::p_Set::_get_impl(shape_p)->nd))); int _7872 = (int)0; int _7873 = (int)((_1374)->size(0)); for (int _1380 = _7872;_1380<_7873;++_1380){ { long long _1381 = (long long)((*_1374)(_1380)); int _7874 = (int)0; int _7875 = mosek::fusion::p_Set::_get_impl(shape_p)->nd; for (int _1382 = _7874;_1382<_7875;++_1382){ (((*_1379)(_1382)) = (int)(_1381 / shape_p->stride(_1382))); (_1381 = (_1381 - ((long long)((*_1379)(_1382)) * shape_p->stride(_1382)))); }}{ int _1383 = (int)0; while ((((*_1379)(stackdim)) >= ((*varsb)((_1383 + (int)1))))) { ( ++ _1383 ); }(((*_1379)(stackdim)) = (((*_1379)(stackdim)) - ((*varsb)(_1383)))); (((*_1378)((int)0)) = mosek::fusion::p_Set::_get_impl(((*vars)(_1383))->getShape().get())->linearidx(_1379)); ((*vars)(_1383))->values(_1378,(_1375 + _1380),_1376,_1377); }}}void mosek::fusion::CompoundVariable::make_continuous  ( std::shared_ptr< monty::ndarray< long long,1 > > _1384) { mosek::fusion::p_CompoundVariable::_get_impl(this)->make_continuous(_1384); }void mosek::fusion::p_CompoundVariable::make_continuous( std::shared_ptr< monty::ndarray< long long,1 > > _1384){ std::shared_ptr< monty::ndarray< long long,1 > > _1385 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)1))); std::shared_ptr< monty::ndarray< int,1 > > _1386 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(mosek::fusion::p_Set::_get_impl(shape_p)->nd))); int _7876 = (int)0; int _7877 = (int)((_1384)->size(0)); for (int _1387 = _7876;_1387<_7877;++_1387){ { long long _1388 = (long long)((*_1384)(_1387)); int _7878 = (int)0; int _7879 = mosek::fusion::p_Set::_get_impl(shape_p)->nd; for (int _1389 = _7878;_1389<_7879;++_1389){ (((*_1386)(_1389)) = (int)(_1388 / shape_p->stride(_1389))); (_1388 = (_1388 - ((long long)((*_1386)(_1389)) * shape_p->stride(_1389)))); }}{ int _1390 = (int)0; while ((((*_1386)(stackdim)) >= ((*varsb)((_1390 + (int)1))))) { ( ++ _1390 ); }(((*_1386)(stackdim)) = (((*_1386)(stackdim)) - ((*varsb)(_1390)))); (((*_1385)((int)0)) = mosek::fusion::p_Set::_get_impl(((*vars)(_1390))->getShape().get())->linearidx(_1386)); ((*vars)(_1390))->make_continuous(_1385); }}}void mosek::fusion::CompoundVariable::make_integer  ( std::shared_ptr< monty::ndarray< long long,1 > > _1391) { mosek::fusion::p_CompoundVariable::_get_impl(this)->make_integer(_1391); }void mosek::fusion::p_CompoundVariable::make_integer( std::shared_ptr< monty::ndarray< long long,1 > > _1391){ std::shared_ptr< monty::ndarray< long long,1 > > _1392 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)1))); std::shared_ptr< monty::ndarray< int,1 > > _1393 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(mosek::fusion::p_Set::_get_impl(shape_p)->nd))); int _7880 = (int)0; int _7881 = (int)((_1391)->size(0)); for (int _1394 = _7880;_1394<_7881;++_1394){ { long long _1395 = (long long)((*_1391)(_1394)); int _7882 = (int)0; int _7883 = mosek::fusion::p_Set::_get_impl(shape_p)->nd; for (int _1396 = _7882;_1396<_7883;++_1396){ (((*_1393)(_1396)) = (int)(_1395 / shape_p->stride(_1396))); (_1395 = (_1395 - ((long long)((*_1393)(_1396)) * shape_p->stride(_1396)))); }}{ int _1397 = (int)0; while ((((*_1393)(stackdim)) >= ((*varsb)((_1397 + (int)1))))) { ( ++ _1397 ); }(((*_1393)(stackdim)) = (((*_1393)(stackdim)) - ((*varsb)(_1397)))); (((*_1392)((int)0)) = mosek::fusion::p_Set::_get_impl(((*vars)(_1397))->getShape().get())->linearidx(_1393)); ((*vars)(_1397))->make_integer(_1392); }}}monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::CompoundVariable::asExpr  ( ) { return mosek::fusion::p_CompoundVariable::_get_impl(this)->asExpr(); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_CompoundVariable::asExpr( ){ std::shared_ptr< monty::ndarray< long long,1 > > _1398 = ::mosek::fusion::Utils::Tools::range((long long)0,(mosek::fusion::p_Set::_get_impl(shape_p)->size + (int)1)); std::shared_ptr< monty::ndarray< double,1 > > _1399 = ::mosek::fusion::Utils::Tools::ones((int)mosek::fusion::p_Set::_get_impl(shape_p)->size); std::shared_ptr< monty::ndarray< long long,1 > > _1400 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(mosek::fusion::p_Set::_get_impl(shape_p)->size))); if ((stackdim < (int)1)){ int _7884 = (int)0; int _7885 = (int)mosek::fusion::p_Set::_get_impl(shape_p)->size; for (int _1401 = _7884;_1401<_7885;++_1401){ (((*_1400)(_1401)) = _1401); }}else if ((stackdim >= mosek::fusion::p_Set::_get_impl(shape_p)->nd)){ int _1402 = (int)0; long long _1403 = mosek::fusion::p_Set::_get_impl(((*vars)((int)0))->getShape())->size; int _7886 = (int)0; long long _7887 = _1403; for (long long _1404 = _7886;_1404<_7887;++_1404){ int _7888 = (int)0; int _7889 = (int)((vars)->size(0)); for (int _1405 = _7888;_1405<_7889;++_1405){ (((*_1400)(_1402)) = ((_1405 * _1403) + _1404)); ( ++ _1402 ); }}}else { int _1406 = (int)1; int _7890 = (int)0; int _7891 = stackdim; for (int _1407 = _7890;_1407<_7891;++_1407){ (_1406 *= shape_p->dim(_1407)); }std::shared_ptr< monty::ndarray< long long,1 > > _1408 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((vars)->size(0))))); std::shared_ptr< monty::ndarray< long long,1 > > _1409 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(((int)((vars)->size(0)) + (int)1)))); int _7892 = (int)1; int _7893 = ((int)((vars)->size(0)) + (int)1); for (int _1410 = _7892;_1410<_7893;++_1410){ (((*_1409)(_1410)) = (((*_1409)((_1410 - (int)1))) + mosek::fusion::p_Set::_get_impl(((*vars)((_1410 - (int)1)))->getShape())->size)); }int _1411 = (int)0; int _7894 = (int)0; int _7895 = _1406; for (int _1412 = _7894;_1412<_7895;++_1412){ int _1413 = (int)0; int _7896 = (int)0; int _7897 = (int)((vars)->size(0)); for (int _1414 = _7896;_1414<_7897;++_1414){ int _7898 = (int)0; long long _7899 = ((*vars)(_1414))->getShape()->stride((stackdim - (int)1)); for (long long _1415 = _7898;_1415<_7899;++_1415){ (((*_1400)(_1411)) = ((((*_1409)(_1414)) + ((*_1408)(_1414))) + _1415)); ( ++ _1411 ); }(((*_1408)(_1414)) += ((*vars)(_1414))->getShape()->stride((stackdim - (int)1))); }}}std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _1416 = ([=]()->std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > { std::vector< monty::rc_ptr< ::mosek::fusion::Variable > > _7900; for (int _1417=(int)0, _7901=(int)((vars)->size(0)); _1417 < _7901;++_1417)_7900.push_back(((*vars)(_1417))); return std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >(monty::shape(_7900.size()),_7900.begin(),_7900.end())); })(); return ::mosek::fusion::p_Expr::_new_Expr(_1398,_1416,_1400,_1399,nullptr,shape_p,nullptr,(int)1); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::CompoundVariable::slice  ( std::shared_ptr< monty::ndarray< int,1 > > _1418,    std::shared_ptr< monty::ndarray< int,1 > > _1419) { return mosek::fusion::p_CompoundVariable::_get_impl(this)->slice(_1418,_1419); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_CompoundVariable::slice( std::shared_ptr< monty::ndarray< int,1 > > _1418,std::shared_ptr< monty::ndarray< int,1 > > _1419){ if (((int)((_1418)->size(0)) != (int)((_1419)->size(0)))){ throw ::mosek::fusion::LengthError(std::string ("Mismatching array lengths"));}else if (((int)((_1418)->size(0)) != mosek::fusion::p_Set::_get_impl(shape_p)->nd)){ throw ::mosek::fusion::SliceError(std::string ("Slice has wrong number of dimensions"));}else { int _7902 = (int)0; int _7903 = (int)((_1418)->size(0)); for (int _1420 = _7902;_1420<_7903;++_1420){ if (((((*_1418)(_1420)) < (int)0) || ((((*_1418)(_1420)) > ((*_1419)(_1420))) || (((*_1419)(_1420)) > shape_p->dim(_1420))))){ throw ::mosek::fusion::SliceError(std::string ("Slice index is out of bounds"));}else {}}}bool _1421 = false; { { int _1422 = (int)0; for (;(_1422 < (int)((_1418)->size(0)));( ++ _1422 )){ if ((((*_1418)(_1422)) >= ((*_1419)(_1422)))){ (_1421 = true); }else {}}}}if (_1421){ int _1423 = (int)((_1418)->size(0)); std::shared_ptr< monty::ndarray< int,1 > > _1424 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1423))); { int _1425 = (int)0; for (;(_1425 < _1423);( ++ _1425 )){ if ((((*_1418)(_1425)) < ((*_1419)(_1425)))){ (((*_1424)(_1425)) = (((*_1419)(_1425)) - ((*_1418)(_1425)))); }else { (((*_1424)(_1425)) = (int)0); }}}return ::mosek::fusion::p_SliceVariable::_new_SliceVariable(::mosek::fusion::Variable::t(_pubthis),::mosek::fusion::Set::t(::mosek::fusion::p_NDSet::_new_NDSet(_1424)),(long long)0,std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1423)))); }else if (((int)((_1418)->size(0)) == (int)1)){ return _pubthis->slice(((*_1418)((int)0)),((*_1419)((int)0))); }else { int _1426 = mosek::fusion::p_Set::_get_impl(shape_p)->nd; std::shared_ptr< monty::ndarray< int,1 > > _1427 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1426))); std::shared_ptr< monty::ndarray< int,1 > > _1428 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1426))); int _1429; int _1430; int _1431; int _1432; { int _1433 = (int)0; while ((((*_1418)(stackdim)) >= ((*varsb)((_1433 + (int)1))))) { ( ++ _1433 ); }(_1429 = _1433); (_1430 = (((*_1418)(stackdim)) - (int)((*varsb)(_1433)))); while ((((*_1419)(stackdim)) > (int)((*varsb)((_1433 + (int)1))))) { ( ++ _1433 ); }(_1431 = _1433); (_1432 = (((*_1419)(stackdim)) - (int)((*varsb)(_1433)))); }{ int _1434 = (int)0; for (;(_1434 < _1426);( ++ _1434 )){ (((*_1427)(_1434)) = ((*_1418)(_1434))); (((*_1428)(_1434)) = ((*_1419)(_1434))); }}if ((_1429 == _1431)){ (((*_1427)(stackdim)) = _1430); (((*_1428)(stackdim)) = _1432); return ((*vars)(_1429))->slice(_1427,_1428); }else { std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _1435 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >(monty::shape(((_1431 - _1429) + (int)1)))); (((*_1427)(stackdim)) = _1430); (((*_1428)(stackdim)) = ((*vars)(_1429))->getShape()->dim(stackdim)); (((*_1435)((int)0)) = ((*vars)(_1429))->slice(_1427,_1428)); (((*_1427)(stackdim)) = (int)0); (((*_1428)(stackdim)) = _1432); (((*_1435)(((int)((_1435)->size(0)) - (int)1))) = ((*vars)(_1431))->slice(_1427,_1428)); int _7904 = (int)1; int _7905 = ((int)((_1435)->size(0)) - (int)1); for (int _1436 = _7904;_1436<_7905;++_1436){ (((*_1427)(stackdim)) = (int)0); (((*_1428)(stackdim)) = ((*vars)((_1436 + _1429)))->getShape()->dim(stackdim)); (((*_1435)(_1436)) = ((*vars)((_1436 + _1429)))->slice(_1427,_1428)); }return ::mosek::fusion::p_CompoundVariable::_new_CompoundVariable(_1435,stackdim); }}}monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::CompoundVariable::slice  ( int _1437,    int _1438) { return mosek::fusion::p_CompoundVariable::_get_impl(this)->slice(_1437,_1438); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_CompoundVariable::slice( int _1437,int _1438){ if ((mosek::fusion::p_Set::_get_impl(shape_p)->nd != (int)1)){ throw ::mosek::fusion::SliceError(std::string ("Slice has wrong number of dimensions"));}else if ((_1437 > _1438)){ throw ::mosek::fusion::SliceError(std::string ("Invalid slice range"));}else if (((_1437 < (int)0) || (_1438 > shape_p->dim((int)0)))){ throw ::mosek::fusion::SliceError(std::string ("Slice index is out of bounds"));}else {}if ((_1437 == _1438)){ return ::mosek::fusion::p_SliceVariable::_new_SliceVariable(::mosek::fusion::Variable::t(_pubthis),::mosek::fusion::Set::t(::mosek::fusion::p_IntSet::_new_IntSet((int)0)),(long long)0,std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >{(long long)0})); }else {}int _1439; int _1440; int _1441; int _1442; { int _1443 = (int)0; while ((_1437 >= ((*varsb)((_1443 + (int)1))))) { ( ++ _1443 ); }(_1439 = _1443); (_1440 = (_1437 - ((*varsb)(_1443)))); while ((_1438 > ((*varsb)((_1443 + (int)1))))) { ( ++ _1443 ); }(_1441 = _1443); (_1442 = (_1438 - ((*varsb)(_1443)))); }if ((_1439 == _1441)){ return ((*vars)(_1439))->slice(_1440,_1442); }else { std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _1444 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >(monty::shape(((_1441 - _1439) + (int)1)))); if ((_1440 > (int)0)){ (((*_1444)((int)0)) = ((*vars)(_1439))->slice(_1440,((*vars)(_1439))->getShape()->dim((int)0))); }else { (((*_1444)((int)0)) = ((*vars)(_1439))); }if ((_1442 < ((*vars)(_1441))->getShape()->dim((int)0))){ (((*_1444)(((int)((_1444)->size(0)) - (int)1))) = ((*vars)(_1441))->slice((int)0,_1442)); }else { (((*_1444)(((int)((_1444)->size(0)) - (int)1))) = ((*vars)(_1441))); }{ int _1445 = (int)1; for (;(_1445 < ((int)((_1444)->size(0)) - (int)1));( ++ _1445 )){ (((*_1444)(_1445)) = ((*vars)((_1439 + _1445)))); }}return ::mosek::fusion::p_CompoundVariable::_new_CompoundVariable(_1444,(int)0); }}monty::rc_ptr< ::mosek::fusion::Set > mosek::fusion::p_CompoundVariable::compute_shape( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _1446,int _1447){ monty::rc_ptr< ::mosek::fusion::Set > _1448 = ((*_1446)((int)0))->getShape(); int _1449 = (int)0; int _7906 = (int)0; int _7907 = (int)((_1446)->size(0)); for (int _1450 = _7906;_1450<_7907;++_1450){ monty::rc_ptr< ::mosek::fusion::Variable > _1451 = ((*_1446)(_1450)); if ((mosek::fusion::p_Set::_get_impl(_1451->getShape())->size > (int)0)){ if ((mosek::fusion::p_Set::_get_impl(_1451->getShape())->nd != mosek::fusion::p_Set::_get_impl(_1448)->nd)){ throw ::mosek::fusion::DimensionError(std::string ("Mismatching variable shape"));}else {}int _7908 = (int)0; int _7909 = mosek::fusion::p_Set::_get_impl(_1448)->nd; for (int _1452 = _7908;_1452<_7909;++_1452){ if (((_1452 != _1447) && (_1448->dim(_1452) != _1451->getShape()->dim(_1452)))){ throw ::mosek::fusion::DimensionError(std::string ("Mismatching variable shape"));}else {}}(_1449 = (_1449 + _1451->getShape()->dim(_1447))); }else {}}if ((mosek::fusion::p_Set::_get_impl(_1448)->nd == (int)1)){ return ::mosek::fusion::p_IntSet::_new_IntSet(_1449); }else { std::shared_ptr< monty::ndarray< int,1 > > _1453 = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _7910; for (int _1454=(int)0, _7911=mosek::fusion::p_Set::_get_impl(_1448)->nd; _1454 < _7911;++_1454)_7910.push_back(_1448->dim(_1454)); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7910.size()),_7910.begin(),_7910.end())); })(); (((*_1453)(_1447)) = _1449); return ::mosek::fusion::p_NDSet::_new_NDSet(_1453); }}monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::p_CompoundVariable::model_from_var( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _1455){ return ([&]() -> monty::rc_ptr< ::mosek::fusion::Model > { if ( (! _1455 || ((int)((_1455)->size(0)) == (int)0))) return (nullptr); else return (((*_1455)((int)0))->getModel()); })(); }void mosek::fusion::p_CompoundVariable::destroy(){varsb.reset();vars.reset();}void mosek::fusion::CompoundVariable::destroy() { mosek::fusion::p_CompoundVariable::_get_impl(this)->destroy(); }mosek::fusion::RepeatVariable::RepeatVariable(mosek::fusion::p_RepeatVariable *_impl) : mosek::fusion::BaseVariable(_impl) { /*std::cout << "RepeatVariable()" << this << std::endl; */ }mosek::fusion::RepeatVariable::~RepeatVariable() {  /* std::cout << "~RepeatVariable()" << this << std::endl << std::flush; */ }mosek::fusion::p_RepeatVariable::p_RepeatVariable  (::mosek::fusion::RepeatVariable * _pubthis) :     mosek::fusion::p_BaseVariable(_pubthis),    _pubthis(_pubthis){}mosek::fusion::RepeatVariable::t mosek::fusion::p_RepeatVariable::_new_RepeatVariable  (monty::rc_ptr< ::mosek::fusion::Variable > _1456,    int _1457,    int _1458){ return new mosek::fusion::RepeatVariable(_1456,_1457,_1458); }mosek::fusion::RepeatVariable::RepeatVariable  (monty::rc_ptr< ::mosek::fusion::Variable > _1456,    int _1457,    int _1458) :    RepeatVariable(new mosek::fusion::p_RepeatVariable(this)){ mosek::fusion::p_RepeatVariable::_get_impl(this)->_initialize(_1456,_1457,_1458); }void mosek::fusion::p_RepeatVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::Variable > _1456,    int _1457,    int _1458){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_BaseVariable::_initialize(_1456->getModel(),::mosek::fusion::p_RepeatVariable::compute_shape(_1456,_1457,_1458));monty::rc_ptr< ::mosek::fusion::Set > _1459 = _1456->getShape(); (mosek::fusion::p_RepeatVariable::_get_impl(_pubthis)->x = _1456); (mosek::fusion::p_RepeatVariable::_get_impl(_pubthis)->count = _1458); (xsize = _1459->getSize()); if ((_1457 >= (int)0)){ int _1460 = mosek::fusion::p_Set::_get_impl(_1459)->nd; if ((_1460 <= _1457)){ (_1460 = (_1457 + (int)1)); }else {}(mosek::fusion::p_RepeatVariable::_get_impl(_pubthis)->dim = _1457); (mosek::fusion::p_RepeatVariable::_get_impl(_pubthis)->xdims = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _7912; for (int _1461=(int)0, _7913=_1460; _1461 < _7913;++_1461)_7912.push_back(_1459->dim(_1461)); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7912.size()),_7912.begin(),_7912.end())); })()); }else { (mosek::fusion::p_RepeatVariable::_get_impl(_pubthis)->dim = (int)0); (xdims = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((mosek::fusion::p_Set::_get_impl(_1459)->nd + (int)1))))); (((*xdims)((int)0)) = (int)1); int _7914 = (int)0; int _7915 = mosek::fusion::p_Set::_get_impl(_1459)->nd; for (int _1462 = _7914;_1462<_7915;++_1462){ (((*xdims)((_1462 + (int)1))) = _1459->dim(_1462)); }}(mosek::fusion::p_RepeatVariable::_get_impl(_pubthis)->d0 = (int)1); (mosek::fusion::p_RepeatVariable::_get_impl(_pubthis)->d1 = (int)1); (mosek::fusion::p_RepeatVariable::_get_impl(_pubthis)->d2 = (int)1); { int _7916 = (int)0; int _7917 = _1457; for (int _1463 = _7916;_1463<_7917;++_1463){ (d0 *= ((*xdims)(_1463))); }(d1 = (((*xdims)(mosek::fusion::p_RepeatVariable::_get_impl(_pubthis)->dim)) * _1458)); int _7918 = (_1457 + (int)1); int _7919 = (int)((xdims)->size(0)); for (int _1464 = _7918;_1464<_7919;++_1464){ (d2 *= ((*xdims)(_1464))); }}}}monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::RepeatVariable::elementDesc  ( long long _1465,    monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1466) { return mosek::fusion::p_RepeatVariable::_get_impl(this)->elementDesc(_1465,_1466); }monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::p_RepeatVariable::elementDesc( long long _1465,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1466){ if ((dim == (int)0)){ return x->elementDesc((_1465 % xsize),_1466); }else if ((dim >= mosek::fusion::p_Set::_get_impl(x->getShape())->nd)){ return x->elementDesc((_1465 / xsize),_1466); }else { long long _1467 = d0; long long _1468 = (((*xdims)(dim)) * d2); long long _1469 = (_1465 % _1468); long long _1470 = (_1465 / (_1468 * count)); return x->elementDesc(((_1470 * _1468) + _1469),_1466); }}void mosek::fusion::RepeatVariable::elementName  ( long long _1471,    monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1472) { mosek::fusion::p_RepeatVariable::_get_impl(this)->elementName(_1471,_1472); }void mosek::fusion::p_RepeatVariable::elementName( long long _1471,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1472){ if ((dim == (int)0)){ x->elementName((_1471 % xsize),_1472); }else if ((dim >= mosek::fusion::p_Set::_get_impl(x->getShape())->nd)){ x->elementName((_1471 / xsize),_1472); }else { long long _1473 = d0; long long _1474 = (x->getShape()->dim(dim) * d2); long long _1475 = (_1471 % _1474); long long _1476 = (_1471 / (_1474 * count)); x->elementName(((_1476 * _1474) + _1475),_1472); }}void mosek::fusion::RepeatVariable::inst  ( long long _1477,    long long _1478,    std::shared_ptr< monty::ndarray< int,1 > > _1479,    std::shared_ptr< monty::ndarray< int,1 > > _1480,    std::shared_ptr< monty::ndarray< int,1 > > _1481) { mosek::fusion::p_RepeatVariable::_get_impl(this)->inst(_1477,_1478,_1479,_1480,_1481); }void mosek::fusion::p_RepeatVariable::inst( long long _1477,long long _1478,std::shared_ptr< monty::ndarray< int,1 > > _1479,std::shared_ptr< monty::ndarray< int,1 > > _1480,std::shared_ptr< monty::ndarray< int,1 > > _1481){ if ((dim == (int)0)){ x->inst((_1477 % xsize),_1478,_1479,_1481,_1480); }else if (((d1 * d2) == (int)1)){ x->inst((_1477 / count),_1478,_1479,_1481,_1480); }else { long long _1482 = d0; long long _1483 = (x->getShape()->dim(dim) * d2); long long _1484 = (_1477 % _1483); long long _1485 = (_1477 / (_1483 * count)); x->inst(((_1485 * _1483) + _1484),_1478,_1479,_1481,_1480); }}void mosek::fusion::RepeatVariable::set_values  ( long long _1486,    std::shared_ptr< monty::ndarray< int,1 > > _1487,    std::shared_ptr< monty::ndarray< long long,1 > > _1488,    int _1489,    std::shared_ptr< monty::ndarray< double,1 > > _1490,    bool _1491) { mosek::fusion::p_RepeatVariable::_get_impl(this)->set_values(_1486,_1487,_1488,_1489,_1490,_1491); }void mosek::fusion::p_RepeatVariable::set_values( long long _1486,std::shared_ptr< monty::ndarray< int,1 > > _1487,std::shared_ptr< monty::ndarray< long long,1 > > _1488,int _1489,std::shared_ptr< monty::ndarray< double,1 > > _1490,bool _1491){ if ((((int)((_1487)->size(0)) != mosek::fusion::p_Set::_get_impl(shape_p)->nd) || ((int)((_1488)->size(0)) != mosek::fusion::p_Set::_get_impl(shape_p)->nd))){ throw ::mosek::fusion::IndexError(std::string ("Lengths of nsize and strides are not correct"));}else {}int _1492 = (int)((_1488)->size(0)); int _1493 = ((*_1487)((int)0)); int _7920 = (int)1; int _7921 = (int)((_1487)->size(0)); for (int _1494 = _7920;_1494<_7921;++_1494){ (_1493 = (_1493 * ((*_1487)(_1494)))); }std::shared_ptr< monty::ndarray< long long,1 > > _1495 = ([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _7922; for (int _1496=(int)0, _7923=(int)((_1487)->size(0)); _1496 < _7923;++_1496)_7922.push_back(_1486); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7922.size()),_7922.begin(),_7922.end())); })(); std::shared_ptr< monty::ndarray< int,1 > > _1497 = mosek::fusion::p_Set::_get_impl(shape_p.get())->idxtokey(_1486); std::shared_ptr< monty::ndarray< double,1 > > _1498 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_1493))); std::shared_ptr< monty::ndarray< long long,1 > > _1499 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1493))); int _7924 = (int)0; int _7925 = _1493; for (int _1500 = _7924;_1500<_7925;++_1500){ (((*_1498)(_1500)) = ((*_1490)((_1500 + _1489)))); long long _1501 = (((*_1495)((int)0)) % d2); long long _1502 = ((((*_1495)((int)0)) / d2) % ((*xdims)(dim))); long long _1503 = (((*_1495)((int)0)) / (d1 * d2)); (((*_1499)(_1500)) = ((((_1501 * d2) + _1502) * ((*xdims)(dim))) + _1503)); { ( ++ ((*_1497)((int)0)) ); (((*_1495)((int)0)) = (((*_1495)((int)0)) + ((*_1488)((_1492 - (int)1))))); int _1504 = (int)0; while (((_1504 < (_1492 - (int)1)) && (((*_1497)(_1504)) == ((*_1487)(_1504))))) { (((*_1497)(_1504)) = (int)0); ( ++ ((*_1497)((_1504 + (int)1))) ); ( ++ _1504 ); }int _7926 = (int)0; int _7927 = _1504; for (int _1505 = _7926;_1505<_7927;++_1505){ (((*_1495)(_1505)) = ((*_1495)(_1504))); }}}_pubthis->set_values(_1499,_1498,_1491); }void mosek::fusion::RepeatVariable::set_values  ( std::shared_ptr< monty::ndarray< long long,1 > > _1506,    std::shared_ptr< monty::ndarray< double,1 > > _1507,    bool _1508) { mosek::fusion::p_RepeatVariable::_get_impl(this)->set_values(_1506,_1507,_1508); }void mosek::fusion::p_RepeatVariable::set_values( std::shared_ptr< monty::ndarray< long long,1 > > _1506,std::shared_ptr< monty::ndarray< double,1 > > _1507,bool _1508){ if ((dim == (int)0)){ x->set_values(([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _7928; for (int _1509=(int)0, _7929=(int)((_1506)->size(0)); _1509 < _7929;++_1509)_7928.push_back((((*_1506)(_1509)) % xsize)); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7928.size()),_7928.begin(),_7928.end())); })(),_1507,_1508); }else if (((d1 * d2) == (int)1)){ x->set_values(([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _7930; for (int _1510=(int)0, _7931=(int)((_1506)->size(0)); _1510 < _7931;++_1510)_7930.push_back((((*_1506)(_1510)) / count)); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7930.size()),_7930.begin(),_7930.end())); })(),_1507,_1508); }else { long long _1511 = d0; long long _1512 = (x->getShape()->dim(dim) * d2); std::shared_ptr< monty::ndarray< long long,1 > > _1513 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((_1506)->size(0))))); int _7932 = (int)0; int _7933 = (int)((_1506)->size(0)); for (int _1514 = _7932;_1514<_7933;++_1514){ long long _1515 = (((*_1506)(_1514)) % _1512); long long _1516 = (((*_1506)(_1514)) / (_1512 * count)); (((*_1513)(_1514)) = ((_1516 * _1512) + _1515)); }x->set_values(_1513,_1507,_1508); }}void mosek::fusion::RepeatVariable::values  ( long long _1517,    std::shared_ptr< monty::ndarray< int,1 > > _1518,    std::shared_ptr< monty::ndarray< long long,1 > > _1519,    int _1520,    std::shared_ptr< monty::ndarray< double,1 > > _1521,    bool _1522) { mosek::fusion::p_RepeatVariable::_get_impl(this)->values(_1517,_1518,_1519,_1520,_1521,_1522); }void mosek::fusion::p_RepeatVariable::values( long long _1517,std::shared_ptr< monty::ndarray< int,1 > > _1518,std::shared_ptr< monty::ndarray< long long,1 > > _1519,int _1520,std::shared_ptr< monty::ndarray< double,1 > > _1521,bool _1522){ if ((((int)((_1518)->size(0)) != mosek::fusion::p_Set::_get_impl(shape_p)->nd) || ((int)((_1519)->size(0)) != mosek::fusion::p_Set::_get_impl(shape_p)->nd))){ throw ::mosek::fusion::IndexError(std::string ("Lengths of nsize and strides are not correct"));}else {}int _1523 = (int)((_1519)->size(0)); int _1524 = ((*_1518)((int)0)); int _7934 = (int)1; int _7935 = (int)((_1518)->size(0)); for (int _1525 = _7934;_1525<_7935;++_1525){ (_1524 = (_1524 * ((*_1518)(_1525)))); }std::shared_ptr< monty::ndarray< long long,1 > > _1526 = ([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _7936; for (int _1527=(int)0, _7937=(int)((_1518)->size(0)); _1527 < _7937;++_1527)_7936.push_back(_1517); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7936.size()),_7936.begin(),_7936.end())); })(); std::shared_ptr< monty::ndarray< int,1 > > _1528 = mosek::fusion::p_Set::_get_impl(shape_p.get())->idxtokey(_1517); std::shared_ptr< monty::ndarray< long long,1 > > _1529 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1524))); int _7938 = (int)0; int _7939 = _1524; for (int _1530 = _7938;_1530<_7939;++_1530){ long long _1531 = (((*_1526)((int)0)) % d2); long long _1532 = ((((*_1526)((int)0)) / d2) % ((*xdims)(dim))); long long _1533 = (((*_1526)((int)0)) / (d1 * d2)); (((*_1529)(_1530)) = ((((_1531 * d2) + _1532) * ((*xdims)(dim))) + _1533)); { ( ++ ((*_1528)((int)0)) ); (((*_1526)((int)0)) = (((*_1526)((int)0)) + ((*_1519)((_1523 - (int)1))))); int _1534 = (int)0; while (((_1534 < (_1523 - (int)1)) && (((*_1528)(_1534)) == ((*_1518)(_1534))))) { (((*_1528)(_1534)) = (int)0); ( ++ ((*_1528)((_1534 + (int)1))) ); ( ++ _1534 ); }int _7940 = (int)0; int _7941 = _1534; for (int _1535 = _7940;_1535<_7941;++_1535){ (((*_1526)(_1535)) = ((*_1526)(_1534))); }}}_pubthis->values(_1529,_1520,_1521,_1522); }void mosek::fusion::RepeatVariable::values  ( std::shared_ptr< monty::ndarray< long long,1 > > _1536,    int _1537,    std::shared_ptr< monty::ndarray< double,1 > > _1538,    bool _1539) { mosek::fusion::p_RepeatVariable::_get_impl(this)->values(_1536,_1537,_1538,_1539); }void mosek::fusion::p_RepeatVariable::values( std::shared_ptr< monty::ndarray< long long,1 > > _1536,int _1537,std::shared_ptr< monty::ndarray< double,1 > > _1538,bool _1539){ if ((d0 == (int)1)){ x->values(([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _7942; for (int _1540=(int)0, _7943=(int)((_1536)->size(0)); _1540 < _7943;++_1540)_7942.push_back((((*_1536)(_1540)) % xsize)); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7942.size()),_7942.begin(),_7942.end())); })(),_1537,_1538,_1539); }else if (((d1 * d2) == (int)1)){ x->values(([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _7944; for (int _1541=(int)0, _7945=(int)((_1536)->size(0)); _1541 < _7945;++_1541)_7944.push_back((((*_1536)(_1541)) / count)); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7944.size()),_7944.begin(),_7944.end())); })(),_1537,_1538,_1539); }else { long long _1542 = d0; long long _1543 = (x->getShape()->dim(dim) * d2); std::shared_ptr< monty::ndarray< long long,1 > > _1544 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((_1536)->size(0))))); int _7946 = (int)0; int _7947 = (int)((_1536)->size(0)); for (int _1545 = _7946;_1545<_7947;++_1545){ long long _1546 = (((*_1536)(_1545)) % _1543); long long _1547 = (((*_1536)(_1545)) / (_1543 * count)); (((*_1544)(_1545)) = ((_1547 * _1543) + _1546)); }x->values(_1544,_1537,_1538,_1539); }}void mosek::fusion::RepeatVariable::make_continuous  ( std::shared_ptr< monty::ndarray< long long,1 > > _1548) { mosek::fusion::p_RepeatVariable::_get_impl(this)->make_continuous(_1548); }void mosek::fusion::p_RepeatVariable::make_continuous( std::shared_ptr< monty::ndarray< long long,1 > > _1548){ if ((d0 == (int)1)){ x->make_continuous(([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _7948; for (int _1549=(int)0, _7949=(int)((_1548)->size(0)); _1549 < _7949;++_1549)_7948.push_back((((*_1548)(_1549)) % xsize)); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7948.size()),_7948.begin(),_7948.end())); })()); }else if (((d1 * d2) == (int)1)){ x->make_continuous(([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _7950; for (int _1550=(int)0, _7951=(int)((_1548)->size(0)); _1550 < _7951;++_1550)_7950.push_back((((*_1548)(_1550)) / count)); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7950.size()),_7950.begin(),_7950.end())); })()); }else { long long _1551 = d0; long long _1552 = (x->getShape()->dim(dim) * d2); std::shared_ptr< monty::ndarray< long long,1 > > _1553 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((_1548)->size(0))))); int _7952 = (int)0; int _7953 = (int)((_1548)->size(0)); for (int _1554 = _7952;_1554<_7953;++_1554){ long long _1555 = (((*_1548)(_1554)) % _1552); long long _1556 = (((*_1548)(_1554)) / (_1552 * count)); (((*_1553)(_1554)) = ((_1556 * _1552) + _1555)); }x->make_continuous(_1553); }}void mosek::fusion::RepeatVariable::make_integer  ( std::shared_ptr< monty::ndarray< long long,1 > > _1557) { mosek::fusion::p_RepeatVariable::_get_impl(this)->make_integer(_1557); }void mosek::fusion::p_RepeatVariable::make_integer( std::shared_ptr< monty::ndarray< long long,1 > > _1557){ if ((dim == (int)0)){ x->make_integer(([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _7954; for (int _1558=(int)0, _7955=(int)((_1557)->size(0)); _1558 < _7955;++_1558)_7954.push_back((((*_1557)(_1558)) % xsize)); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7954.size()),_7954.begin(),_7954.end())); })()); }else if (((d1 * d2) == (int)1)){ x->make_integer(([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _7956; for (int _1559=(int)0, _7957=(int)((_1557)->size(0)); _1559 < _7957;++_1559)_7956.push_back((((*_1557)(_1559)) / count)); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7956.size()),_7956.begin(),_7956.end())); })()); }else { long long _1560 = d0; long long _1561 = (x->getShape()->dim(dim) * d2); std::shared_ptr< monty::ndarray< long long,1 > > _1562 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((_1557)->size(0))))); int _7958 = (int)0; int _7959 = (int)((_1557)->size(0)); for (int _1563 = _7958;_1563<_7959;++_1563){ long long _1564 = (((*_1557)(_1563)) % _1561); long long _1565 = (((*_1557)(_1563)) / (_1561 * count)); (((*_1562)(_1563)) = ((_1565 * _1561) + _1564)); }x->make_integer(_1562); }}monty::rc_ptr< ::mosek::fusion::Set > mosek::fusion::p_RepeatVariable::compute_shape( monty::rc_ptr< ::mosek::fusion::Variable > _1566,int _1567,int _1568){ monty::rc_ptr< ::mosek::fusion::Set > _1569 = _1566->getShape(); if ((_1567 >= (int)0)){ if (((mosek::fusion::p_Set::_get_impl(_1569)->nd == (int)1) && (_1567 == (int)0))){ return ::mosek::fusion::p_Set::make((_1569->dim((int)0) * _1568)); }else if ((_1567 < mosek::fusion::p_Set::_get_impl(_1569)->nd)){ std::shared_ptr< monty::ndarray< int,1 > > _1570 = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _7960; for (int _1571=(int)0, _7961=mosek::fusion::p_Set::_get_impl(_1569)->nd; _1571 < _7961;++_1571)_7960.push_back(_1569->dim(_1571)); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7960.size()),_7960.begin(),_7960.end())); })(); (((*_1570)(_1567)) *= _1568); return ::mosek::fusion::p_Set::make(_1570); }else { std::shared_ptr< monty::ndarray< int,1 > > _1572 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((_1567 + (int)1)))); int _7962 = (int)0; int _7963 = mosek::fusion::p_Set::_get_impl(_1569)->nd; for (int _1573 = _7962;_1573<_7963;++_1573){ (((*_1572)(_1573)) = _1569->dim(_1573)); }int _7964 = mosek::fusion::p_Set::_get_impl(_1569)->nd; int _7965 = _1567; for (int _1574 = _7964;_1574<_7965;++_1574){ (((*_1572)(_1574)) = (int)1); }(((*_1572)(_1567)) = _1568); return ::mosek::fusion::p_Set::make(_1572); }}else { std::shared_ptr< monty::ndarray< int,1 > > _1575 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((mosek::fusion::p_Set::_get_impl(_1569)->nd + (int)1)))); (((*_1575)((int)0)) = _1568); int _7966 = (int)0; int _7967 = mosek::fusion::p_Set::_get_impl(_1569)->nd; for (int _1576 = _7966;_1576<_7967;++_1576){ (((*_1575)((_1576 + (int)1))) = _1569->dim(_1576)); }return ::mosek::fusion::p_Set::make(_1575); }}void mosek::fusion::p_RepeatVariable::destroy(){xdims.reset();x.reset();}void mosek::fusion::RepeatVariable::destroy() { mosek::fusion::p_RepeatVariable::_get_impl(this)->destroy(); }mosek::fusion::PickVariable::PickVariable(mosek::fusion::p_PickVariable *_impl) : mosek::fusion::BaseVariable(_impl) { /*std::cout << "PickVariable()" << this << std::endl; */ }mosek::fusion::PickVariable::~PickVariable() {  /* std::cout << "~PickVariable()" << this << std::endl << std::flush; */ }mosek::fusion::p_PickVariable::p_PickVariable  (::mosek::fusion::PickVariable * _pubthis) :     mosek::fusion::p_BaseVariable(_pubthis),    _pubthis(_pubthis){}mosek::fusion::PickVariable::t mosek::fusion::p_PickVariable::_new_PickVariable  (monty::rc_ptr< ::mosek::fusion::Variable > _1577,    std::shared_ptr< monty::ndarray< long long,1 > > _1578){ return new mosek::fusion::PickVariable(_1577,_1578); }mosek::fusion::PickVariable::PickVariable  (monty::rc_ptr< ::mosek::fusion::Variable > _1577,    std::shared_ptr< monty::ndarray< long long,1 > > _1578) :    PickVariable(new mosek::fusion::p_PickVariable(this)){ mosek::fusion::p_PickVariable::_get_impl(this)->_initialize(_1577,_1578); }void mosek::fusion::p_PickVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::Variable > _1577,    std::shared_ptr< monty::ndarray< long long,1 > > _1578){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_BaseVariable::_initialize(_1577->getModel(),::mosek::fusion::p_Set::make((int)((_1578)->size(0))));(mosek::fusion::p_PickVariable::_get_impl(_pubthis)->origin = _1577); long long _1579 = _1577->getShape()->getSize(); int _7968 = (int)0; int _7969 = (int)((_1578)->size(0)); for (int _1580 = _7968;_1580<_7969;++_1580){ if (((((*_1578)(_1580)) < (int)0) || (((*_1578)(_1580)) >= _1579))){ throw ::mosek::fusion::IndexError(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer().get())->a(std::string ("Index (")).get())->a(((*_1578)(_1580))).get())->a(std::string (") is out of bounds")).get())->toString());}else {}}(mosek::fusion::p_PickVariable::_get_impl(_pubthis)->indexes = _1578); }}void mosek::fusion::PickVariable::inst  ( long long _1581,    long long _1582,    std::shared_ptr< monty::ndarray< int,1 > > _1583,    std::shared_ptr< monty::ndarray< int,1 > > _1584,    std::shared_ptr< monty::ndarray< int,1 > > _1585) { mosek::fusion::p_PickVariable::_get_impl(this)->inst(_1581,_1582,_1583,_1584,_1585); }void mosek::fusion::p_PickVariable::inst( long long _1581,long long _1582,std::shared_ptr< monty::ndarray< int,1 > > _1583,std::shared_ptr< monty::ndarray< int,1 > > _1584,std::shared_ptr< monty::ndarray< int,1 > > _1585){ origin->inst(((*indexes)(_1581)),_1582,_1583,_1584,_1585); }void mosek::fusion::PickVariable::set_values  ( long long _1586,    std::shared_ptr< monty::ndarray< int,1 > > _1587,    std::shared_ptr< monty::ndarray< long long,1 > > _1588,    int _1589,    std::shared_ptr< monty::ndarray< double,1 > > _1590,    bool _1591) { mosek::fusion::p_PickVariable::_get_impl(this)->set_values(_1586,_1587,_1588,_1589,_1590,_1591); }void mosek::fusion::p_PickVariable::set_values( long long _1586,std::shared_ptr< monty::ndarray< int,1 > > _1587,std::shared_ptr< monty::ndarray< long long,1 > > _1588,int _1589,std::shared_ptr< monty::ndarray< double,1 > > _1590,bool _1591){ _pubthis->set_values(([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _7970; for (int _1592=(int)0, _7971=((*_1587)((int)0)); _1592 < _7971;++_1592)_7970.push_back((_1586 + (((*_1588)((int)0)) * _1592))); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7970.size()),_7970.begin(),_7970.end())); })(),([&]() -> std::shared_ptr< monty::ndarray< double,1 > > { if ( (_1589 == (int)0)) return (_1590); else return (([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _7972; for (int _1593=(int)0, _7973=((*_1587)((int)0)); _1593 < _7973;++_1593)_7972.push_back(((*_1590)((_1593 + _1589)))); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7972.size()),_7972.begin(),_7972.end())); })()); })(),_1591); }void mosek::fusion::PickVariable::set_values  ( std::shared_ptr< monty::ndarray< long long,1 > > _1594,    std::shared_ptr< monty::ndarray< double,1 > > _1595,    bool _1596) { mosek::fusion::p_PickVariable::_get_impl(this)->set_values(_1594,_1595,_1596); }void mosek::fusion::p_PickVariable::set_values( std::shared_ptr< monty::ndarray< long long,1 > > _1594,std::shared_ptr< monty::ndarray< double,1 > > _1595,bool _1596){ origin->set_values(([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _7974; for (int _1597=(int)0, _7975=(int)((_1594)->size(0)); _1597 < _7975;++_1597)_7974.push_back(((*indexes)(((*_1594)(_1597))))); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7974.size()),_7974.begin(),_7974.end())); })(),_1595,_1596); }monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::PickVariable::elementDesc  ( long long _1598,    monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1599) { return mosek::fusion::p_PickVariable::_get_impl(this)->elementDesc(_1598,_1599); }monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::p_PickVariable::elementDesc( long long _1598,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1599){ return origin->elementDesc(((*indexes)(_1598)),_1599); }void mosek::fusion::PickVariable::elementName  ( long long _1600,    monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1601) { mosek::fusion::p_PickVariable::_get_impl(this)->elementName(_1600,_1601); }void mosek::fusion::p_PickVariable::elementName( long long _1600,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1601){ origin->elementName(((*indexes)(_1600)),_1601); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::PickVariable::slice  ( int _1602,    int _1603) { return mosek::fusion::p_PickVariable::_get_impl(this)->slice(_1602,_1603); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_PickVariable::slice( int _1602,int _1603){ return ::mosek::fusion::p_PickVariable::_new_PickVariable(origin,([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _7976; for (int _1604=_1602, _7977=_1603; _1604 < _7977;++_1604)_7976.push_back(((*indexes)(_1604))); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7976.size()),_7976.begin(),_7976.end())); })()); }void mosek::fusion::PickVariable::values  ( long long _1605,    std::shared_ptr< monty::ndarray< int,1 > > _1606,    std::shared_ptr< monty::ndarray< long long,1 > > _1607,    int _1608,    std::shared_ptr< monty::ndarray< double,1 > > _1609,    bool _1610) { mosek::fusion::p_PickVariable::_get_impl(this)->values(_1605,_1606,_1607,_1608,_1609,_1610); }void mosek::fusion::p_PickVariable::values( long long _1605,std::shared_ptr< monty::ndarray< int,1 > > _1606,std::shared_ptr< monty::ndarray< long long,1 > > _1607,int _1608,std::shared_ptr< monty::ndarray< double,1 > > _1609,bool _1610){ std::shared_ptr< monty::ndarray< long long,1 > > _1611 = ([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _7978; for (int _1612=(int)0, _7979=((*_1606)((int)0)); _1612 < _7979;++_1612)_7978.push_back((_1605 + (_1612 * ((*_1607)((int)0))))); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7978.size()),_7978.begin(),_7978.end())); })(); _pubthis->values(_1611,_1608,_1609,_1610); }void mosek::fusion::PickVariable::values  ( std::shared_ptr< monty::ndarray< long long,1 > > _1613,    int _1614,    std::shared_ptr< monty::ndarray< double,1 > > _1615,    bool _1616) { mosek::fusion::p_PickVariable::_get_impl(this)->values(_1613,_1614,_1615,_1616); }void mosek::fusion::p_PickVariable::values( std::shared_ptr< monty::ndarray< long long,1 > > _1613,int _1614,std::shared_ptr< monty::ndarray< double,1 > > _1615,bool _1616){ std::shared_ptr< monty::ndarray< long long,1 > > _1617 = ([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _7980; for (int _1618=(int)0, _7981=(int)((_1613)->size(0)); _1618 < _7981;++_1618)_7980.push_back(((*indexes)(((*_1613)(_1618))))); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7980.size()),_7980.begin(),_7980.end())); })(); origin->values(_1617,_1614,_1615,_1616); }void mosek::fusion::PickVariable::make_continuous  ( std::shared_ptr< monty::ndarray< long long,1 > > _1619) { mosek::fusion::p_PickVariable::_get_impl(this)->make_continuous(_1619); }void mosek::fusion::p_PickVariable::make_continuous( std::shared_ptr< monty::ndarray< long long,1 > > _1619){ origin->make_continuous(([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _7982; for (int _1620=(int)0, _7983=(int)((_1619)->size(0)); _1620 < _7983;++_1620)_7982.push_back(((*indexes)(((*_1619)(_1620))))); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7982.size()),_7982.begin(),_7982.end())); })()); }void mosek::fusion::PickVariable::make_integer  ( std::shared_ptr< monty::ndarray< long long,1 > > _1621) { mosek::fusion::p_PickVariable::_get_impl(this)->make_integer(_1621); }void mosek::fusion::p_PickVariable::make_integer( std::shared_ptr< monty::ndarray< long long,1 > > _1621){ origin->make_integer(([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _7984; for (int _1622=(int)0, _7985=(int)((_1621)->size(0)); _1622 < _7985;++_1622)_7984.push_back(((*indexes)(((*_1621)(_1622))))); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7984.size()),_7984.begin(),_7984.end())); })()); }void mosek::fusion::p_PickVariable::destroy(){indexes.reset();origin.reset();}void mosek::fusion::PickVariable::destroy() { mosek::fusion::p_PickVariable::_get_impl(this)->destroy(); }mosek::fusion::SliceVariable::SliceVariable(mosek::fusion::p_SliceVariable *_impl) : mosek::fusion::BaseVariable(_impl) { /*std::cout << "SliceVariable()" << this << std::endl; */ }mosek::fusion::SliceVariable::~SliceVariable() {  /* std::cout << "~SliceVariable()" << this << std::endl << std::flush; */ }mosek::fusion::p_SliceVariable::p_SliceVariable  (::mosek::fusion::SliceVariable * _pubthis) :     mosek::fusion::p_BaseVariable(_pubthis),    _pubthis(_pubthis){}mosek::fusion::SliceVariable::t mosek::fusion::p_SliceVariable::_new_SliceVariable  (monty::rc_ptr< ::mosek::fusion::Variable > _1623,    monty::rc_ptr< ::mosek::fusion::Set > _1624,    long long _1625,    std::shared_ptr< monty::ndarray< long long,1 > > _1626){ return new mosek::fusion::SliceVariable(_1623,_1624,_1625,_1626); }mosek::fusion::SliceVariable::SliceVariable  (monty::rc_ptr< ::mosek::fusion::Variable > _1623,    monty::rc_ptr< ::mosek::fusion::Set > _1624,    long long _1625,    std::shared_ptr< monty::ndarray< long long,1 > > _1626) :    SliceVariable(new mosek::fusion::p_SliceVariable(this)){ mosek::fusion::p_SliceVariable::_get_impl(this)->_initialize(_1623,_1624,_1625,_1626); }void mosek::fusion::p_SliceVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::Variable > _1623,    monty::rc_ptr< ::mosek::fusion::Set > _1624,    long long _1625,    std::shared_ptr< monty::ndarray< long long,1 > > _1626){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_BaseVariable::_initialize(_1623->getModel(),_1624);(mosek::fusion::p_SliceVariable::_get_impl(_pubthis)->origin = _1623); (mosek::fusion::p_SliceVariable::_get_impl(_pubthis)->first = _1625); (mosek::fusion::p_SliceVariable::_get_impl(_pubthis)->strides = _1626); }}void mosek::fusion::SliceVariable::inst  ( long long _1627,    long long _1628,    std::shared_ptr< monty::ndarray< int,1 > > _1629,    std::shared_ptr< monty::ndarray< int,1 > > _1630,    std::shared_ptr< monty::ndarray< int,1 > > _1631) { mosek::fusion::p_SliceVariable::_get_impl(this)->inst(_1627,_1628,_1629,_1630,_1631); }void mosek::fusion::p_SliceVariable::inst( long long _1627,long long _1628,std::shared_ptr< monty::ndarray< int,1 > > _1629,std::shared_ptr< monty::ndarray< int,1 > > _1630,std::shared_ptr< monty::ndarray< int,1 > > _1631){ if (((_1627 < (long long)0) || (_1627 >= mosek::fusion::p_Set::_get_impl(shape_p)->size))){ throw ::mosek::fusion::IndexError(std::string ("Index out of bounds"));}else {}long long _1632 = first; long long _1633 = _1627; int _7986 = (int)0; int _7987 = mosek::fusion::p_Set::_get_impl(shape_p)->nd; for (int _1634 = _7986;_1634<_7987;++_1634){ long long _1635 = (_1633 / shape_p->stride(_1634)); (_1633 = (_1633 - (_1635 * shape_p->stride(_1634)))); (_1632 = (_1632 + (((*strides)(_1634)) * _1635))); }origin->inst(_1632,_1628,_1629,_1630,_1631); }void mosek::fusion::SliceVariable::set_values  ( long long _1636,    std::shared_ptr< monty::ndarray< int,1 > > _1637,    std::shared_ptr< monty::ndarray< long long,1 > > _1638,    int _1639,    std::shared_ptr< monty::ndarray< double,1 > > _1640,    bool _1641) { mosek::fusion::p_SliceVariable::_get_impl(this)->set_values(_1636,_1637,_1638,_1639,_1640,_1641); }void mosek::fusion::p_SliceVariable::set_values( long long _1636,std::shared_ptr< monty::ndarray< int,1 > > _1637,std::shared_ptr< monty::ndarray< long long,1 > > _1638,int _1639,std::shared_ptr< monty::ndarray< double,1 > > _1640,bool _1641){ if (((_1636 == (long long)0) && (((int)((_1637)->size(0)) == (int)1) && ((((*_1637)((int)0)) == mosek::fusion::p_Set::_get_impl(shape_p)->size) && (((*_1638)((int)0)) == (int)1))))){ std::shared_ptr< monty::ndarray< int,1 > > _1642 = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _7988; for (int _1643=(int)0, _7989=mosek::fusion::p_Set::_get_impl(shape_p)->nd; _1643 < _7989;++_1643)_7988.push_back(shape_p->dim(_1643)); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7988.size()),_7988.begin(),_7988.end())); })(); origin->set_values(first,_1642,strides,_1639,_1640,_1641); }else { int _1644 = (int)((_1637)->size(0)); bool _1645 = (_1644 == mosek::fusion::p_Set::_get_impl(shape_p)->nd); { int _1646 = (int)0; for (;((_1646 < _1644) && _1645);( ++ _1646 )){ (_1645 = (((*_1638)(_1646)) == shape_p->stride(_1646))); }}if (_1645){ long long _1647 = first; { long long _1648 = _1636; int _7990 = (int)0; int _7991 = (mosek::fusion::p_Set::_get_impl(shape_p)->nd - (int)1); for (int _1649 = _7990;_1649<_7991;++_1649){ long long _1650 = (_1648 / ((*_1638)(_1649))); (_1648 = (_1648 - (((*_1638)(_1649)) * _1650))); (_1647 = (_1647 + (shape_p->stride(_1649) * _1650))); }}origin->set_values(_1647,_1637,strides,_1639,_1640,_1641); }else { long long _1651 = (long long)1; int _7992 = (int)0; int _7993 = (int)((_1637)->size(0)); for (int _1652 = _7992;_1652<_7993;++_1652){ (_1651 = (_1651 * ((*_1637)(_1652)))); }std::shared_ptr< monty::ndarray< long long,1 > > _1653 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1651))); { std::shared_ptr< monty::ndarray< int,1 > > _1654 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)((_1637)->size(0))))); std::shared_ptr< monty::ndarray< long long,1 > > _1655 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((_1637)->size(0))))); long long _7994 = (long long)0; long long _7995 = _1651; for (long long _1656 = _7994;_1656<_7995;++_1656){ (((*_1653)(_1656)) = (mosek::fusion::p_Set::_get_impl(origin->getShape().get())->linearidx(mosek::fusion::p_Set::_get_impl(shape_p.get())->idxtokey((_1636 + ((*_1655)((int)0))))) + first)); { int _1657 = (int)0; ( ++ ((*_1654)((int)0)) ); (((*_1655)((int)0)) = (((*_1655)((int)0)) + ((*_1638)((_1644 - (int)1))))); while (((_1657 < (_1644 - (int)1)) && (((*_1654)(_1657)) >= ((*_1637)(((_1644 - _1657) - (int)1)))))) { (((*_1655)((_1657 + (int)1))) = (((*_1655)((_1657 + (int)1))) + ((*_1638)(((_1644 - _1657) - (int)2))))); (((*_1654)(_1657)) = (int)0); ( ++ ((*_1654)((_1657 + (int)1))) ); ( ++ _1657 ); }int _7996 = (int)0; int _7997 = _1657; for (int _1658 = _7996;_1658<_7997;++_1658){ (((*_1655)(_1658)) = ((*_1655)(_1657))); }}}}origin->set_values(_1653,([&]() -> std::shared_ptr< monty::ndarray< double,1 > > { if ( (_1639 == (int)0)) return (_1640); else return (([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _7998; for (long long _1659=(int)0, _7999=_1651; _1659 < _7999;++_1659)_7998.push_back(((*_1640)((_1659 + _1639)))); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7998.size()),_7998.begin(),_7998.end())); })()); })(),_1641); }}}void mosek::fusion::SliceVariable::set_values  ( std::shared_ptr< monty::ndarray< long long,1 > > _1660,    std::shared_ptr< monty::ndarray< double,1 > > _1661,    bool _1662) { mosek::fusion::p_SliceVariable::_get_impl(this)->set_values(_1660,_1661,_1662); }void mosek::fusion::p_SliceVariable::set_values( std::shared_ptr< monty::ndarray< long long,1 > > _1660,std::shared_ptr< monty::ndarray< double,1 > > _1661,bool _1662){ std::shared_ptr< monty::ndarray< long long,1 > > _1663 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((_1660)->size(0))))); int _8000 = (int)0; int _8001 = (int)((_1660)->size(0)); for (int _1664 = _8000;_1664<_8001;++_1664){ std::shared_ptr< monty::ndarray< int,1 > > _1665 = mosek::fusion::p_Set::_get_impl(shape_p.get())->idxtokey(((*_1660)(_1664))); long long _1666 = first; int _8002 = (int)0; int _8003 = mosek::fusion::p_Set::_get_impl(shape_p)->nd; for (int _1667 = _8002;_1667<_8003;++_1667){ (_1666 = (_1666 + ((long long)((*_1665)(_1667)) * ((*strides)(_1667))))); }(((*_1663)(_1664)) = _1666); }origin->set_values(_1663,_1661,_1662); }monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::SliceVariable::elementDesc  ( long long _1668,    monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1669) { return mosek::fusion::p_SliceVariable::_get_impl(this)->elementDesc(_1668,_1669); }monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::p_SliceVariable::elementDesc( long long _1668,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1669){ if (((_1668 < (long long)0) || (_1668 >= mosek::fusion::p_Set::_get_impl(shape_p)->size))){ throw ::mosek::fusion::IndexError(std::string ("Index out of bounds"));}else {}long long _1670 = first; long long _1671 = _1668; int _8004 = (int)0; int _8005 = mosek::fusion::p_Set::_get_impl(shape_p)->nd; for (int _1672 = _8004;_1672<_8005;++_1672){ long long _1673 = (_1671 / shape_p->stride(_1672)); (_1671 = (_1671 - (_1673 * shape_p->stride(_1672)))); (_1670 = (_1670 + (((*strides)(_1672)) * _1673))); }origin->elementDesc(_1670,_1669); return _1669; }void mosek::fusion::SliceVariable::elementName  ( long long _1674,    monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1675) { mosek::fusion::p_SliceVariable::_get_impl(this)->elementName(_1674,_1675); }void mosek::fusion::p_SliceVariable::elementName( long long _1674,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1675){ if (((_1674 < (long long)0) || (_1674 >= mosek::fusion::p_Set::_get_impl(shape_p)->size))){ throw ::mosek::fusion::IndexError(std::string ("Index out of bounds"));}else {}long long _1676 = first; long long _1677 = _1674; int _8006 = (int)0; int _8007 = mosek::fusion::p_Set::_get_impl(shape_p)->nd; for (int _1678 = _8006;_1678<_8007;++_1678){ long long _1679 = (_1677 / shape_p->stride(_1678)); (_1677 = (_1677 - (_1679 * shape_p->stride(_1678)))); (_1676 = (_1676 + (((*strides)(_1678)) * _1679))); }origin->elementName(_1676,_1675); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::SliceVariable::slice  ( std::shared_ptr< monty::ndarray< int,1 > > _1680,    std::shared_ptr< monty::ndarray< int,1 > > _1681) { return mosek::fusion::p_SliceVariable::_get_impl(this)->slice(_1680,_1681); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_SliceVariable::slice( std::shared_ptr< monty::ndarray< int,1 > > _1680,std::shared_ptr< monty::ndarray< int,1 > > _1681){ monty::rc_ptr< ::mosek::fusion::Set > _1682 = shape_p->slice(_1680,_1681); long long _1683 = first; { int _1684 = (int)0; for (;(_1684 < (int)((_1680)->size(0)));( ++ _1684 )){ (_1683 = (_1683 + (((*strides)(_1684)) * ((*_1680)(_1684))))); }}return ::mosek::fusion::p_SliceVariable::_new_SliceVariable(origin,_1682,_1683,strides); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::SliceVariable::slice  ( int _1685,    int _1686) { return mosek::fusion::p_SliceVariable::_get_impl(this)->slice(_1685,_1686); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_SliceVariable::slice( int _1685,int _1686){ return ::mosek::fusion::p_SliceVariable::_new_SliceVariable(origin,shape_p->slice(_1685,_1686),(first + (long long)_1685),strides); }void mosek::fusion::SliceVariable::values  ( long long _1687,    std::shared_ptr< monty::ndarray< int,1 > > _1688,    std::shared_ptr< monty::ndarray< long long,1 > > _1689,    int _1690,    std::shared_ptr< monty::ndarray< double,1 > > _1691,    bool _1692) { mosek::fusion::p_SliceVariable::_get_impl(this)->values(_1687,_1688,_1689,_1690,_1691,_1692); }void mosek::fusion::p_SliceVariable::values( long long _1687,std::shared_ptr< monty::ndarray< int,1 > > _1688,std::shared_ptr< monty::ndarray< long long,1 > > _1689,int _1690,std::shared_ptr< monty::ndarray< double,1 > > _1691,bool _1692){ if (((_1687 == (long long)0) && (((int)((_1688)->size(0)) == (int)1) && ((((*_1688)((int)0)) == mosek::fusion::p_Set::_get_impl(shape_p)->size) && (((*_1689)((int)0)) == (int)1))))){ std::shared_ptr< monty::ndarray< int,1 > > _1693 = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _8008; for (int _1694=(int)0, _8009=mosek::fusion::p_Set::_get_impl(shape_p)->nd; _1694 < _8009;++_1694)_8008.push_back(shape_p->dim(_1694)); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8008.size()),_8008.begin(),_8008.end())); })(); origin->values(first,_1693,strides,_1690,_1691,_1692); }else { int _1695 = (int)((_1688)->size(0)); bool _1696 = (_1695 == mosek::fusion::p_Set::_get_impl(shape_p)->nd); { int _1697 = (int)0; for (;((_1697 < _1695) && _1696);( ++ _1697 )){ (_1696 = (((*_1689)(_1697)) == shape_p->stride(_1697))); }}if (_1696){ long long _1698 = first; { long long _1699 = _1687; int _8010 = (int)0; int _8011 = (mosek::fusion::p_Set::_get_impl(shape_p)->nd - (int)1); for (int _1700 = _8010;_1700<_8011;++_1700){ long long _1701 = (_1699 / ((*_1689)(_1700))); (_1699 = (_1699 - (((*_1689)(_1700)) * _1701))); (_1698 = (_1698 + (shape_p->stride(_1700) * _1701))); }}origin->values(_1698,_1688,strides,_1690,_1691,_1692); }else { long long _1702 = (long long)1; int _8012 = (int)0; int _8013 = (int)((_1688)->size(0)); for (int _1703 = _8012;_1703<_8013;++_1703){ (_1702 = (_1702 * ((*_1688)(_1703)))); }std::shared_ptr< monty::ndarray< long long,1 > > _1704 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1702))); { std::shared_ptr< monty::ndarray< int,1 > > _1705 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)((_1688)->size(0))))); std::shared_ptr< monty::ndarray< long long,1 > > _1706 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((_1688)->size(0))))); long long _8014 = (long long)0; long long _8015 = _1702; for (long long _1707 = _8014;_1707<_8015;++_1707){ (((*_1704)(_1707)) = (mosek::fusion::p_Set::_get_impl(origin->getShape().get())->linearidx(mosek::fusion::p_Set::_get_impl(shape_p.get())->idxtokey((_1687 + ((*_1706)((int)0))))) + first)); { int _1708 = (int)0; ( ++ ((*_1705)((int)0)) ); (((*_1706)((int)0)) = (((*_1706)((int)0)) + ((*_1689)((_1695 - (int)1))))); while (((_1708 < (_1695 - (int)1)) && (((*_1705)(_1708)) >= ((*_1688)(((_1695 - _1708) - (int)1)))))) { (((*_1706)((_1708 + (int)1))) = (((*_1706)((_1708 + (int)1))) + ((*_1689)(((_1695 - _1708) - (int)2))))); (((*_1705)(_1708)) = (int)0); ( ++ ((*_1705)((_1708 + (int)1))) ); ( ++ _1708 ); }int _8016 = (int)0; int _8017 = _1708; for (int _1709 = _8016;_1709<_8017;++_1709){ (((*_1706)(_1709)) = ((*_1706)(_1708))); }}}}origin->values(_1704,_1690,_1691,_1692); }}}void mosek::fusion::SliceVariable::values  ( std::shared_ptr< monty::ndarray< long long,1 > > _1710,    int _1711,    std::shared_ptr< monty::ndarray< double,1 > > _1712,    bool _1713) { mosek::fusion::p_SliceVariable::_get_impl(this)->values(_1710,_1711,_1712,_1713); }void mosek::fusion::p_SliceVariable::values( std::shared_ptr< monty::ndarray< long long,1 > > _1710,int _1711,std::shared_ptr< monty::ndarray< double,1 > > _1712,bool _1713){ std::shared_ptr< monty::ndarray< long long,1 > > _1714 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((_1710)->size(0))))); int _8018 = (int)0; int _8019 = (int)((_1710)->size(0)); for (int _1715 = _8018;_1715<_8019;++_1715){ std::shared_ptr< monty::ndarray< int,1 > > _1716 = mosek::fusion::p_Set::_get_impl(shape_p.get())->idxtokey(((*_1710)(_1715))); long long _1717 = first; int _8020 = (int)0; int _8021 = mosek::fusion::p_Set::_get_impl(shape_p)->nd; for (int _1718 = _8020;_1718<_8021;++_1718){ (_1717 = (_1717 + ((long long)((*_1716)(_1718)) * ((*strides)(_1718))))); }(((*_1714)(_1715)) = _1717); }origin->values(_1714,_1711,_1712,_1713); }void mosek::fusion::SliceVariable::make_continuous  ( std::shared_ptr< monty::ndarray< long long,1 > > _1719) { mosek::fusion::p_SliceVariable::_get_impl(this)->make_continuous(_1719); }void mosek::fusion::p_SliceVariable::make_continuous( std::shared_ptr< monty::ndarray< long long,1 > > _1719){ std::shared_ptr< monty::ndarray< long long,1 > > _1720 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((_1719)->size(0))))); int _8022 = (int)0; int _8023 = (int)((_1719)->size(0)); for (int _1721 = _8022;_1721<_8023;++_1721){ std::shared_ptr< monty::ndarray< int,1 > > _1722 = mosek::fusion::p_Set::_get_impl(shape_p.get())->idxtokey(((*_1719)(_1721))); long long _1723 = first; int _8024 = (int)0; int _8025 = mosek::fusion::p_Set::_get_impl(shape_p)->nd; for (int _1724 = _8024;_1724<_8025;++_1724){ (_1723 = (_1723 + ((long long)((*_1722)(_1724)) * ((*strides)(_1724))))); }(((*_1720)(_1721)) = _1723); }origin->make_continuous(_1720); }void mosek::fusion::SliceVariable::make_integer  ( std::shared_ptr< monty::ndarray< long long,1 > > _1725) { mosek::fusion::p_SliceVariable::_get_impl(this)->make_integer(_1725); }void mosek::fusion::p_SliceVariable::make_integer( std::shared_ptr< monty::ndarray< long long,1 > > _1725){ std::shared_ptr< monty::ndarray< long long,1 > > _1726 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((_1725)->size(0))))); int _8026 = (int)0; int _8027 = (int)((_1725)->size(0)); for (int _1727 = _8026;_1727<_8027;++_1727){ std::shared_ptr< monty::ndarray< int,1 > > _1728 = mosek::fusion::p_Set::_get_impl(shape_p.get())->idxtokey(((*_1725)(_1727))); long long _1729 = first; int _8028 = (int)0; int _8029 = mosek::fusion::p_Set::_get_impl(shape_p)->nd; for (int _1730 = _8028;_1730<_8029;++_1730){ (_1729 = (_1729 + ((long long)((*_1728)(_1730)) * ((*strides)(_1730))))); }(((*_1726)(_1727)) = _1729); }origin->make_integer(_1726); }void mosek::fusion::p_SliceVariable::destroy(){strides.reset();origin.reset();}void mosek::fusion::SliceVariable::destroy() { mosek::fusion::p_SliceVariable::_get_impl(this)->destroy(); }mosek::fusion::SymRangedVariable::SymRangedVariable(mosek::fusion::p_SymRangedVariable *_impl) : mosek::fusion::ModelVariable(_impl) { /*std::cout << "SymRangedVariable()" << this << std::endl; */ }mosek::fusion::SymRangedVariable::~SymRangedVariable() {  /* std::cout << "~SymRangedVariable()" << this << std::endl << std::flush; */ }mosek::fusion::p_SymRangedVariable::p_SymRangedVariable  (::mosek::fusion::SymRangedVariable * _pubthis) :     mosek::fusion::p_ModelVariable(_pubthis),    _pubthis(_pubthis){}mosek::fusion::SymRangedVariable::t mosek::fusion::p_SymRangedVariable::_new_SymRangedVariable  (monty::rc_ptr< ::mosek::fusion::SymRangedVariable > _1731,    monty::rc_ptr< ::mosek::fusion::Model > _1732){ return new mosek::fusion::SymRangedVariable(_1731,_1732); }mosek::fusion::SymRangedVariable::SymRangedVariable  (monty::rc_ptr< ::mosek::fusion::SymRangedVariable > _1731,    monty::rc_ptr< ::mosek::fusion::Model > _1732) :    SymRangedVariable(new mosek::fusion::p_SymRangedVariable(this)){ mosek::fusion::p_SymRangedVariable::_get_impl(this)->_initialize(_1731,_1732); }void mosek::fusion::p_SymRangedVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::SymRangedVariable > _1731,    monty::rc_ptr< ::mosek::fusion::Model > _1732){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_ModelVariable::_initialize(_1731,_1732);(nativeidxs = ([&]() -> std::shared_ptr< monty::ndarray< int,1 > > { if ( mosek::fusion::p_SymRangedVariable::_get_impl(_1731)->nativeidxs) return (([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _8030; for (int _1733=(int)0, _8031=(int)((mosek::fusion::p_SymRangedVariable::_get_impl(_1731)->nativeidxs)->size(0)); _1733 < _8031;++_1733)_8030.push_back(((*mosek::fusion::p_SymRangedVariable::_get_impl(_1731)->nativeidxs)(_1733))); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8030.size()),_8030.begin(),_8030.end())); })()); else return (nullptr); })()); (idxmap = ([&]() -> monty::rc_ptr< ::mosek::fusion::Utils::IntMap > { if ( mosek::fusion::p_SymRangedVariable::_get_impl(_1731)->idxmap) return (mosek::fusion::Utils::p_IntMap::_get_impl(mosek::fusion::p_SymRangedVariable::_get_impl(_1731)->idxmap.get())->clone()); else return (nullptr); })()); (dom = mosek::fusion::p_SymRangedVariable::_get_impl(_1731)->dom); (mosek::fusion::p_SymRangedVariable::_get_impl(_pubthis)->dim = mosek::fusion::p_SymRangedVariable::_get_impl(_1731)->dim); (names_flushed = mosek::fusion::p_SymRangedVariable::_get_impl(_1731)->names_flushed); }}mosek::fusion::SymRangedVariable::t mosek::fusion::p_SymRangedVariable::_new_SymRangedVariable  (monty::rc_ptr< ::mosek::fusion::Model > _1734,    const std::string &  _1735,    monty::rc_ptr< ::mosek::fusion::RangeDomain > _1736,    int _1737,    std::shared_ptr< monty::ndarray< int,1 > > _1738,    long long _1739){ return new mosek::fusion::SymRangedVariable(_1734,_1735,_1736,_1737,_1738,_1739); }mosek::fusion::SymRangedVariable::SymRangedVariable  (monty::rc_ptr< ::mosek::fusion::Model > _1734,    const std::string &  _1735,    monty::rc_ptr< ::mosek::fusion::RangeDomain > _1736,    int _1737,    std::shared_ptr< monty::ndarray< int,1 > > _1738,    long long _1739) :    SymRangedVariable(new mosek::fusion::p_SymRangedVariable(this)){ mosek::fusion::p_SymRangedVariable::_get_impl(this)->_initialize(_1734,_1735,_1736,_1737,_1738,_1739); }void mosek::fusion::p_SymRangedVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _1734,    const std::string &  _1735,    monty::rc_ptr< ::mosek::fusion::RangeDomain > _1736,    int _1737,    std::shared_ptr< monty::ndarray< int,1 > > _1738,    long long _1739){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_ModelVariable::_initialize(_1734,_1735,::mosek::fusion::p_Set::make(_1737,_1737),_1739);(mosek::fusion::p_SymRangedVariable::_get_impl(_pubthis)->dim = _1737); (nativeidxs = _1738); if (! _1738){ (idxmap = ::mosek::fusion::Utils::p_IntMap::_new_IntMap()); }else { (idxmap = nullptr); }(dom = _1736); (names_flushed = false); }}std::string mosek::fusion::SymRangedVariable::toString  ( ) { return mosek::fusion::p_SymRangedVariable::_get_impl(this)->toString(); }std::string mosek::fusion::p_SymRangedVariable::toString( ){ monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1740 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer(); mosek::fusion::Utils::p_StringBuffer::_get_impl(_1740.get())->a(std::string ("RangedVariable(")); if (((int)((name).size()) > (int)0)){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_1740.get())->a(std::string ("'")).get())->a(name).get())->a(std::string ("',")); }else {}mosek::fusion::Utils::p_StringBuffer::_get_impl(_1740.get())->a(shape_p->dim((int)0)); int _8032 = (int)1; int _8033 = mosek::fusion::p_Set::_get_impl(shape_p)->nd; for (int _1741 = _8032;_1741<_8033;++_1741){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_1740.get())->a(std::string (",")).get())->a(shape_p->dim(_1741)); }mosek::fusion::Utils::p_StringBuffer::_get_impl(_1740.get())->a(std::string (") )")); return mosek::fusion::Utils::p_StringBuffer::_get_impl(_1740.get())->toString(); }void mosek::fusion::p_SymRangedVariable::flushNames( ){ if (((! names_flushed) && ((int)((name).size()) > (int)0))){ if (nativeidxs){ int _8034 = (int)0; int _8035 = (int)((nativeidxs)->size(0)); for (int _1742 = _8034;_1742<_8035;++_1742){ mosek::fusion::p_Model::_get_impl(model.get())->varname(((*nativeidxs)(_1742)),mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer().get())->a(name).get())->a(std::string ("[")).get())->a(shape_p->getname((long long)(_1742))).get())->a(std::string ("]")).get())->toString()); }}else { std::shared_ptr< monty::ndarray< long long,1 > > _1743 = mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->keys(); std::shared_ptr< monty::ndarray< int,1 > > _1744 = mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->values(); int _8036 = (int)0; int _8037 = (int)((_1743)->size(0)); for (int _1745 = _8036;_1745<_8037;++_1745){ mosek::fusion::p_Model::_get_impl(model.get())->varname(((*_1744)(_1745)),mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer().get())->a(name).get())->a(std::string ("[")).get())->a(shape_p->getname((long long)(_1745))).get())->a(std::string ("]")).get())->toString()); }}(names_flushed = true); }else {}}void mosek::fusion::SymRangedVariable::inst  ( std::shared_ptr< monty::ndarray< long long,1 > > _1746,    int _1747,    int _1748,    long long _1749,    long long _1750,    std::shared_ptr< monty::ndarray< int,1 > > _1751,    std::shared_ptr< monty::ndarray< int,1 > > _1752,    std::shared_ptr< monty::ndarray< int,1 > > _1753) { mosek::fusion::p_SymRangedVariable::_get_impl(this)->inst(_1746,_1747,_1748,_1749,_1750,_1751,_1752,_1753); }void mosek::fusion::p_SymRangedVariable::inst( std::shared_ptr< monty::ndarray< long long,1 > > _1746,int _1747,int _1748,long long _1749,long long _1750,std::shared_ptr< monty::ndarray< int,1 > > _1751,std::shared_ptr< monty::ndarray< int,1 > > _1752,std::shared_ptr< monty::ndarray< int,1 > > _1753){ if (nativeidxs){ int _8038 = _1747; int _8039 = _1748; for (int _1754 = _8038;_1754<_8039;++_1754){ (((*_1751)(((_1750 + _1754) - _1747))) = ((*nativeidxs)(tril_lin_idx((((*_1746)(_1754)) - _1749))))); }}else { int _8040 = _1747; int _8041 = _1748; for (int _1755 = _8040;_1755<_8041;++_1755){ long long _1756 = tril_lin_idx((((*_1746)(_1755)) - _1749)); long long _1757 = tril_idx((((*_1746)(_1755)) - _1749)); if ((! mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->hasItem(_1756))){ int _1758 = mosek::fusion::p_Model::_get_impl(model.get())->append_rangedvar(::mosek::fusion::ModelVariable::t(_pubthis),_1757,mosek::fusion::p_RangeDomain::_get_impl(dom.get())->get_lb_item(_1757),mosek::fusion::p_RangeDomain::_get_impl(dom.get())->get_ub_item(_1757)); mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->setItem(_1757,_1758); (((*_1751)(((_1750 + _1755) - _1747))) = _1758); (names_flushed = false); }else { (((*_1751)(((_1750 + _1755) - _1747))) = mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->getItem(_1757)); }}}}void mosek::fusion::SymRangedVariable::inst  ( long long _1759,    long long _1760,    std::shared_ptr< monty::ndarray< int,1 > > _1761,    std::shared_ptr< monty::ndarray< int,1 > > _1762,    std::shared_ptr< monty::ndarray< int,1 > > _1763) { mosek::fusion::p_SymRangedVariable::_get_impl(this)->inst(_1759,_1760,_1761,_1762,_1763); }void mosek::fusion::p_SymRangedVariable::inst( long long _1759,long long _1760,std::shared_ptr< monty::ndarray< int,1 > > _1761,std::shared_ptr< monty::ndarray< int,1 > > _1762,std::shared_ptr< monty::ndarray< int,1 > > _1763){ if (((_1759 < (long long)0) || (_1759 >= mosek::fusion::p_Set::_get_impl(shape_p)->size))){ throw ::mosek::fusion::IndexError(std::string ("Index out of bounds"));}else {}long long _1764 = tril_lin_idx(_1759); long long _1765 = tril_idx(_1759); if (nativeidxs){ (((*_1761)(_1760)) = ((*nativeidxs)(_1764))); }else { if ((! mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->hasItem(_1765))){ monty::rc_ptr< ::mosek::fusion::ModelVariable > _1766 = _pubthis; int _1767 = mosek::fusion::p_Model::_get_impl(model.get())->append_rangedvar(_1766,_1764,mosek::fusion::p_RangeDomain::_get_impl(dom.get())->get_lb_item(_1765),mosek::fusion::p_RangeDomain::_get_impl(dom.get())->get_ub_item(_1765)); mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->setItem(_1765,_1767); (((*_1761)(_1760)) = _1767); (names_flushed = false); }else { (((*_1761)(_1760)) = mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->getItem(_1765)); }}}void mosek::fusion::p_SymRangedVariable::dual_u( long long _1768,std::shared_ptr< monty::ndarray< int,1 > > _1769,std::shared_ptr< monty::ndarray< long long,1 > > _1770,int _1771,std::shared_ptr< monty::ndarray< double,1 > > _1772){ long long _1773 = (long long)1; int _1774 = (int)((_1770)->size(0)); monty::rc_ptr< ::mosek::fusion::IndexCounter > _1775 = ::mosek::fusion::p_IndexCounter::_new_IndexCounter(_1768,_1769,_1770); std::shared_ptr< monty::ndarray< double,1 > > _1776 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_sux(::mosek::fusion::SolutionType::Default); int _8042 = (int)0; int _8043 = _1774; for (int _1777 = _8042;_1777<_8043;++_1777){ (_1773 = (_1773 * ((*_1769)(_1777)))); }if (nativeidxs){ long long _8044 = (long long)0; long long _8045 = _1773; for (long long _1778 = _8044;_1778<_8045;++_1778){ int _1779 = ((*nativeidxs)(tril_lin_idx(_1775->get()))); (((*_1772)((_1778 + _1771))) = ((*_1776)(_1779))); _1775->inc(); }}else { mosek::fusion::SolutionStatus _1780 = model->getPrimalSolutionStatus(); int _8046 = (int)0; int _8047 = (int)_1773; for (int _1781 = _8046;_1781<_8047;++_1781){ long long _1782 = tril_idx(_1775->get()); if (mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->hasItem(_1782)){ int _1783 = mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->getItem(_1782); (((*_1772)(_1781)) = ((*_1776)(_1783))); }else { if (((_1780 == ::mosek::fusion::SolutionStatus::Optimal) || ((_1780 == ::mosek::fusion::SolutionStatus::NearOptimal) || ((_1780 == ::mosek::fusion::SolutionStatus::Feasible) || (_1780 == ::mosek::fusion::SolutionStatus::NearFeasible))))){ (((*_1772)((_1771 + _1781))) = mosek::fusion::p_RangeDomain::_get_impl(dom.get())->get_ub_item(_1782)); }else { (((*_1772)((_1771 + _1781))) = 0.0); }}_1775->inc(); }}}void mosek::fusion::p_SymRangedVariable::dual_u( std::shared_ptr< monty::ndarray< long long,1 > > _1784,int _1785,std::shared_ptr< monty::ndarray< double,1 > > _1786){ std::shared_ptr< monty::ndarray< double,1 > > _1787 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_sux(::mosek::fusion::SolutionType::Default); if (nativeidxs){ int _8048 = (int)0; int _8049 = (int)((_1784)->size(0)); for (int _1788 = _8048;_1788<_8049;++_1788){ int _1789 = ((*nativeidxs)(tril_lin_idx(((*_1784)(_1788))))); (((*_1786)((_1785 + _1788))) = ((*_1787)(_1789))); }}else { mosek::fusion::SolutionStatus _1790 = model->getPrimalSolutionStatus(); int _8050 = (int)0; int _8051 = (int)((_1784)->size(0)); for (int _1791 = _8050;_1791<_8051;++_1791){ long long _1792 = tril_idx(((*_1784)(_1791))); if (mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->hasItem(_1792)){ int _1793 = mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->getItem(_1792); (((*_1786)((_1785 + _1791))) = ((*_1787)(_1793))); }else { if (((_1790 == ::mosek::fusion::SolutionStatus::Optimal) || ((_1790 == ::mosek::fusion::SolutionStatus::NearOptimal) || ((_1790 == ::mosek::fusion::SolutionStatus::Feasible) || (_1790 == ::mosek::fusion::SolutionStatus::NearFeasible))))){ (((*_1786)((_1785 + _1791))) = mosek::fusion::p_RangeDomain::_get_impl(dom.get())->get_ub_item(_1792)); }else { (((*_1786)((_1785 + _1791))) = 0.0); }}}}}void mosek::fusion::p_SymRangedVariable::dual_l( long long _1794,std::shared_ptr< monty::ndarray< int,1 > > _1795,std::shared_ptr< monty::ndarray< long long,1 > > _1796,int _1797,std::shared_ptr< monty::ndarray< double,1 > > _1798){ long long _1799 = (long long)1; int _1800 = (int)((_1796)->size(0)); monty::rc_ptr< ::mosek::fusion::IndexCounter > _1801 = ::mosek::fusion::p_IndexCounter::_new_IndexCounter(_1794,_1795,_1796); std::shared_ptr< monty::ndarray< double,1 > > _1802 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_slx(::mosek::fusion::SolutionType::Default); int _8052 = (int)0; int _8053 = _1800; for (int _1803 = _8052;_1803<_8053;++_1803){ (_1799 = (_1799 * ((*_1795)(_1803)))); }if (nativeidxs){ long long _8054 = (long long)0; long long _8055 = _1799; for (long long _1804 = _8054;_1804<_8055;++_1804){ int _1805 = ((*nativeidxs)(tril_lin_idx(_1801->get()))); (((*_1798)((_1804 + _1797))) = ((*_1802)(_1805))); _1801->inc(); }}else { mosek::fusion::SolutionStatus _1806 = model->getPrimalSolutionStatus(); int _8056 = (int)0; int _8057 = (int)_1799; for (int _1807 = _8056;_1807<_8057;++_1807){ long long _1808 = tril_idx(_1801->get()); if (mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->hasItem(_1808)){ int _1809 = mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->getItem(_1808); (((*_1798)(_1807)) = ((*_1802)(_1809))); }else { if (((_1806 == ::mosek::fusion::SolutionStatus::Optimal) || ((_1806 == ::mosek::fusion::SolutionStatus::NearOptimal) || ((_1806 == ::mosek::fusion::SolutionStatus::Feasible) || (_1806 == ::mosek::fusion::SolutionStatus::NearFeasible))))){ (((*_1798)((_1797 + _1807))) = mosek::fusion::p_RangeDomain::_get_impl(dom.get())->get_ub_item(_1808)); }else { (((*_1798)((_1797 + _1807))) = 0.0); }}_1801->inc(); }}}void mosek::fusion::p_SymRangedVariable::dual_l( std::shared_ptr< monty::ndarray< long long,1 > > _1810,int _1811,std::shared_ptr< monty::ndarray< double,1 > > _1812){ std::shared_ptr< monty::ndarray< double,1 > > _1813 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_slx(::mosek::fusion::SolutionType::Default); if (nativeidxs){ int _8058 = (int)0; int _8059 = (int)((_1810)->size(0)); for (int _1814 = _8058;_1814<_8059;++_1814){ int _1815 = ((*nativeidxs)(tril_lin_idx(((*_1810)(_1814))))); (((*_1812)((_1811 + _1814))) = ((*_1813)(_1815))); }}else { mosek::fusion::SolutionStatus _1816 = model->getPrimalSolutionStatus(); int _8060 = (int)0; int _8061 = (int)((_1810)->size(0)); for (int _1817 = _8060;_1817<_8061;++_1817){ if (mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->hasItem(((*_1810)(_1817)))){ int _1818 = ((*nativeidxs)(tril_lin_idx(((*_1810)(_1817))))); (((*_1812)((_1811 + _1817))) = ((*_1813)(_1818))); }else { if (((_1816 == ::mosek::fusion::SolutionStatus::Optimal) || ((_1816 == ::mosek::fusion::SolutionStatus::NearOptimal) || ((_1816 == ::mosek::fusion::SolutionStatus::Feasible) || (_1816 == ::mosek::fusion::SolutionStatus::NearFeasible))))){ (((*_1812)((_1811 + _1817))) = mosek::fusion::p_RangeDomain::_get_impl(dom.get())->get_ub_item(tril_idx(((*_1810)(_1817))))); }else { (((*_1812)((_1811 + _1817))) = 0.0); }}}}}void mosek::fusion::p_SymRangedVariable::dual_values( long long _1819,std::shared_ptr< monty::ndarray< int,1 > > _1820,std::shared_ptr< monty::ndarray< long long,1 > > _1821,int _1822,std::shared_ptr< monty::ndarray< double,1 > > _1823){ long long _1824 = (long long)1; int _1825 = (int)((_1821)->size(0)); monty::rc_ptr< ::mosek::fusion::IndexCounter > _1826 = ::mosek::fusion::p_IndexCounter::_new_IndexCounter(_1819,_1820,_1821); std::shared_ptr< monty::ndarray< double,1 > > _1827 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_slx(::mosek::fusion::SolutionType::Default); std::shared_ptr< monty::ndarray< double,1 > > _1828 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_sux(::mosek::fusion::SolutionType::Default); int _8062 = (int)0; int _8063 = _1825; for (int _1829 = _8062;_1829<_8063;++_1829){ (_1824 = (_1824 * ((*_1820)(_1829)))); }if (nativeidxs){ long long _8064 = (long long)0; long long _8065 = _1824; for (long long _1830 = _8064;_1830<_8065;++_1830){ int _1831 = ((*nativeidxs)(tril_lin_idx(_1826->get()))); (((*_1823)((_1830 + _1822))) = (((*_1827)(_1831)) - ((*_1828)(_1831)))); _1826->inc(); }}else { mosek::fusion::SolutionStatus _1832 = model->getPrimalSolutionStatus(); int _8066 = (int)0; int _8067 = (int)_1824; for (int _1833 = _8066;_1833<_8067;++_1833){ if (mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->hasItem(_1826->get())){ int _1834 = mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->getItem(tril_idx(_1826->get())); (((*_1823)(_1833)) = (((*_1827)(_1834)) - ((*_1828)(_1834)))); }else { if (((_1832 == ::mosek::fusion::SolutionStatus::Optimal) || ((_1832 == ::mosek::fusion::SolutionStatus::NearOptimal) || ((_1832 == ::mosek::fusion::SolutionStatus::Feasible) || (_1832 == ::mosek::fusion::SolutionStatus::NearFeasible))))){ (((*_1823)((_1822 + _1833))) = mosek::fusion::p_RangeDomain::_get_impl(dom.get())->get_ub_item(tril_idx(_1826->get()))); }else { (((*_1823)((_1822 + _1833))) = 0.0); }}_1826->inc(); }}}void mosek::fusion::p_SymRangedVariable::dual_values( std::shared_ptr< monty::ndarray< long long,1 > > _1835,int _1836,std::shared_ptr< monty::ndarray< double,1 > > _1837){ std::shared_ptr< monty::ndarray< double,1 > > _1838 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_slx(::mosek::fusion::SolutionType::Default); std::shared_ptr< monty::ndarray< double,1 > > _1839 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_sux(::mosek::fusion::SolutionType::Default); if (nativeidxs){ int _8068 = (int)0; int _8069 = (int)((_1835)->size(0)); for (int _1840 = _8068;_1840<_8069;++_1840){ int _1841 = ((*nativeidxs)(tril_lin_idx(((*_1835)(_1840))))); (((*_1837)((_1836 + _1840))) = (((*_1838)(_1841)) - ((*_1839)(_1841)))); }}else { mosek::fusion::SolutionStatus _1842 = model->getPrimalSolutionStatus(); int _8070 = (int)0; int _8071 = (int)((_1835)->size(0)); for (int _1843 = _8070;_1843<_8071;++_1843){ if (mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->hasItem(tril_idx(((*_1835)(_1843))))){ int _1844 = mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->getItem(tril_idx(((*_1835)(_1843)))); (((*_1837)((_1836 + _1843))) = (((*_1838)(_1844)) - ((*_1839)(_1844)))); }else { if (((_1842 == ::mosek::fusion::SolutionStatus::Optimal) || ((_1842 == ::mosek::fusion::SolutionStatus::NearOptimal) || ((_1842 == ::mosek::fusion::SolutionStatus::Feasible) || (_1842 == ::mosek::fusion::SolutionStatus::NearFeasible))))){ (((*_1837)((_1836 + _1843))) = mosek::fusion::p_RangeDomain::_get_impl(dom.get())->get_ub_item(tril_idx(((*_1835)(_1843))))); }else { (((*_1837)((_1836 + _1843))) = 0.0); }}}}}void mosek::fusion::SymRangedVariable::set_values  ( long long _1845,    std::shared_ptr< monty::ndarray< int,1 > > _1846,    std::shared_ptr< monty::ndarray< long long,1 > > _1847,    int _1848,    std::shared_ptr< monty::ndarray< double,1 > > _1849,    bool _1850) { mosek::fusion::p_SymRangedVariable::_get_impl(this)->set_values(_1845,_1846,_1847,_1848,_1849,_1850); }void mosek::fusion::p_SymRangedVariable::set_values( long long _1845,std::shared_ptr< monty::ndarray< int,1 > > _1846,std::shared_ptr< monty::ndarray< long long,1 > > _1847,int _1848,std::shared_ptr< monty::ndarray< double,1 > > _1849,bool _1850){ if (_1850){ long long _1851 = (long long)1; int _1852 = (int)((_1847)->size(0)); monty::rc_ptr< ::mosek::fusion::IndexCounter > _1853 = ::mosek::fusion::p_IndexCounter::_new_IndexCounter(_1845,_1846,_1847); int _8072 = (int)0; int _8073 = _1852; for (int _1854 = _8072;_1854<_8073;++_1854){ (_1851 = (_1851 * ((*_1846)(_1854)))); }if (nativeidxs){ int _1855 = (int)((nativeidxs)->size(0)); std::shared_ptr< monty::ndarray< int,1 > > _1856 = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _8074; for (long long _1857=(int)0, _8075=_1851; _1857 < _8075;++_1857)_8074.push_back(((*nativeidxs)(tril_lin_idx(_1853->next())))); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8074.size()),_8074.begin(),_8074.end())); })(); std::shared_ptr< monty::ndarray< double,1 > > _1858 = ([&]() -> std::shared_ptr< monty::ndarray< double,1 > > { if ( (_1848 > (int)0)) return (([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _8076; for (int _1859=(int)0, _8077=_1855; _1859 < _8077;++_1859)_8076.push_back(((*_1849)((_1848 + _1859)))); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8076.size()),_8076.begin(),_8076.end())); })()); else return (_1849); })(); mosek::fusion::p_Model::_get_impl(model.get())->setSolution_xx(_1856,_1858); }else { std::shared_ptr< monty::ndarray< int,1 > > _1860 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1851))); int _8078 = (int)0; long long _8079 = _1851; for (long long _1861 = _8078;_1861<_8079;++_1861){ _pubthis->inst(_1853->next(),_1861,_1860,std::shared_ptr< monty::ndarray< int,1 > >(nullptr),std::shared_ptr< monty::ndarray< int,1 > >(nullptr)); }std::shared_ptr< monty::ndarray< double,1 > > _1862 = ([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _8080; for (long long _1863=(int)0, _8081=_1851; _1863 < _8081;++_1863)_8080.push_back(((*_1849)((_1848 + _1863)))); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8080.size()),_8080.begin(),_8080.end())); })(); mosek::fusion::p_Model::_get_impl(model.get())->setSolution_xx(_1860,_1862); }}else { }}void mosek::fusion::SymRangedVariable::set_values  ( std::shared_ptr< monty::ndarray< long long,1 > > _1864,    std::shared_ptr< monty::ndarray< double,1 > > _1865,    bool _1866) { mosek::fusion::p_SymRangedVariable::_get_impl(this)->set_values(_1864,_1865,_1866); }void mosek::fusion::p_SymRangedVariable::set_values( std::shared_ptr< monty::ndarray< long long,1 > > _1864,std::shared_ptr< monty::ndarray< double,1 > > _1865,bool _1866){ if (_1866){ if (nativeidxs){ int _1867 = (int)((nativeidxs)->size(0)); std::shared_ptr< monty::ndarray< int,1 > > _1868 = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _8082; for (int _1869=(int)0, _8083=_1867; _1869 < _8083;++_1869)_8082.push_back(((*nativeidxs)(tril_lin_idx(((*_1864)(_1869)))))); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8082.size()),_8082.begin(),_8082.end())); })(); std::shared_ptr< monty::ndarray< double,1 > > _1870 = ([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _8084; for (int _1871=(int)0, _8085=_1867; _1871 < _8085;++_1871)_8084.push_back(((*_1865)(_1871))); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8084.size()),_8084.begin(),_8084.end())); })(); mosek::fusion::p_Model::_get_impl(model.get())->setSolution_xx(_1868,_1870); }else { std::shared_ptr< monty::ndarray< int,1 > > _1872 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)((_1864)->size(0))))); int _8086 = (int)0; int _8087 = (int)((_1864)->size(0)); for (int _1873 = _8086;_1873<_8087;++_1873){ _pubthis->inst(((*_1864)(_1873)),(long long)(_1873),_1872,std::shared_ptr< monty::ndarray< int,1 > >(nullptr),std::shared_ptr< monty::ndarray< int,1 > >(nullptr)); }std::shared_ptr< monty::ndarray< double,1 > > _1874 = ([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _8088; for (int _1875=(int)0, _8089=(int)((_1864)->size(0)); _1875 < _8089;++_1875)_8088.push_back(((*_1865)(_1875))); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8088.size()),_8088.begin(),_8088.end())); })(); mosek::fusion::p_Model::_get_impl(model.get())->setSolution_xx(_1872,_1874); }}else { }}void mosek::fusion::SymRangedVariable::values  ( long long _1876,    std::shared_ptr< monty::ndarray< int,1 > > _1877,    std::shared_ptr< monty::ndarray< long long,1 > > _1878,    int _1879,    std::shared_ptr< monty::ndarray< double,1 > > _1880,    bool _1881) { mosek::fusion::p_SymRangedVariable::_get_impl(this)->values(_1876,_1877,_1878,_1879,_1880,_1881); }void mosek::fusion::p_SymRangedVariable::values( long long _1876,std::shared_ptr< monty::ndarray< int,1 > > _1877,std::shared_ptr< monty::ndarray< long long,1 > > _1878,int _1879,std::shared_ptr< monty::ndarray< double,1 > > _1880,bool _1881){ if (_1881){ long long _1882 = (long long)1; int _1883 = (int)((_1878)->size(0)); monty::rc_ptr< ::mosek::fusion::IndexCounter > _1884 = ::mosek::fusion::p_IndexCounter::_new_IndexCounter(_1876,_1877,_1878); std::shared_ptr< monty::ndarray< double,1 > > _1885 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_xx(::mosek::fusion::SolutionType::Default); int _8090 = (int)0; int _8091 = _1883; for (int _1886 = _8090;_1886<_8091;++_1886){ (_1882 = (_1882 * ((*_1877)(_1886)))); }if (nativeidxs){ long long _8092 = (long long)0; long long _8093 = _1882; for (long long _1887 = _8092;_1887<_8093;++_1887){ (((*_1880)((_1887 + _1879))) = ((*_1885)(((*nativeidxs)(tril_lin_idx(_1884->get())))))); _1884->inc(); }}else { mosek::fusion::SolutionStatus _1888 = model->getPrimalSolutionStatus(); int _8094 = (int)0; int _8095 = (int)_1882; for (int _1889 = _8094;_1889<_8095;++_1889){ if (mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->hasItem(_1884->get())){ (((*_1880)(_1889)) = ((*_1885)(mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->getItem(tril_idx(_1884->get()))))); }else { if (((_1888 == ::mosek::fusion::SolutionStatus::Optimal) || ((_1888 == ::mosek::fusion::SolutionStatus::NearOptimal) || ((_1888 == ::mosek::fusion::SolutionStatus::Feasible) || (_1888 == ::mosek::fusion::SolutionStatus::NearFeasible))))){ (((*_1880)((_1879 + _1889))) = mosek::fusion::p_RangeDomain::_get_impl(dom.get())->get_lb_item(tril_idx(_1884->get()))); }else { (((*_1880)((_1879 + _1889))) = 0.0); }}_1884->inc(); }}}else { dual_values(_1876,_1877,_1878,_1879,_1880); }}void mosek::fusion::SymRangedVariable::values  ( std::shared_ptr< monty::ndarray< long long,1 > > _1890,    int _1891,    std::shared_ptr< monty::ndarray< double,1 > > _1892,    bool _1893) { mosek::fusion::p_SymRangedVariable::_get_impl(this)->values(_1890,_1891,_1892,_1893); }void mosek::fusion::p_SymRangedVariable::values( std::shared_ptr< monty::ndarray< long long,1 > > _1890,int _1891,std::shared_ptr< monty::ndarray< double,1 > > _1892,bool _1893){ if (_1893){ std::shared_ptr< monty::ndarray< double,1 > > _1894 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_xx(::mosek::fusion::SolutionType::Default); if (nativeidxs){ int _8096 = (int)0; int _8097 = (int)((_1890)->size(0)); for (int _1895 = _8096;_1895<_8097;++_1895){ (((*_1892)((_1891 + _1895))) = ((*_1894)(((*nativeidxs)(tril_lin_idx(((*_1890)(_1895)))))))); }}else { mosek::fusion::SolutionStatus _1896 = model->getPrimalSolutionStatus(); if (((_1896 == ::mosek::fusion::SolutionStatus::Optimal) || ((_1896 == ::mosek::fusion::SolutionStatus::NearOptimal) || ((_1896 == ::mosek::fusion::SolutionStatus::Feasible) || (_1896 == ::mosek::fusion::SolutionStatus::NearFeasible))))){ int _8098 = (int)0; int _8099 = (int)((_1890)->size(0)); for (int _1897 = _8098;_1897<_8099;++_1897){ long long _1898 = ((*_1890)(_1897)); if (mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->hasItem(_1898)){ (((*_1892)((_1891 + _1897))) = ((*_1894)(mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->getItem(_1898)))); }else { (((*_1892)((_1891 + _1897))) = mosek::fusion::p_RangeDomain::_get_impl(dom.get())->get_lb_item(_1898)); }}}else { int _8100 = (int)0; int _8101 = (int)((_1890)->size(0)); for (int _1899 = _8100;_1899<_8101;++_1899){ if (mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->hasItem(((*_1890)(_1899)))){ (((*_1892)((_1891 + _1899))) = ((*_1894)(mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->getItem(((*_1890)(_1899)))))); }else { (((*_1892)((_1891 + _1899))) = 0.0); }}}}}else { dual_values(_1890,_1891,_1892); }}long long mosek::fusion::p_SymRangedVariable::tril_idx( long long _1900){ long long _1901 = (_1900 / dim); long long _1902 = (_1900 % dim); if ((_1902 > _1901)){ return ((_1902 * dim) + _1901); }else { return _1900; }}long long mosek::fusion::p_SymRangedVariable::tril_lin_idx( long long _1903){ long long _1904 = (_1903 / dim); long long _1905 = (_1903 % dim); if ((_1905 > _1904)){ return (((_1905 * (_1905 + (int)1)) / (int)2) + _1904); }else { return (((_1904 * (_1904 + (int)1)) / (int)2) + _1905); }}void mosek::fusion::SymRangedVariable::make_continuous  ( std::shared_ptr< monty::ndarray< long long,1 > > _1906) { mosek::fusion::p_SymRangedVariable::_get_impl(this)->make_continuous(_1906); }void mosek::fusion::p_SymRangedVariable::make_continuous( std::shared_ptr< monty::ndarray< long long,1 > > _1906){ if (nativeidxs){ mosek::fusion::p_Model::_get_impl(_pubthis->getModel().get())->task_var_putcontlist(([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _8102; for (int _1907=(int)0, _8103=(int)((_1906)->size(0)); _1907 < _8103;++_1907)_8102.push_back(((*nativeidxs)(((*_1906)(_1907))))); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8102.size()),_8102.begin(),_8102.end())); })()); }else { std::shared_ptr< monty::ndarray< int,1 > > _1908 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)((_1906)->size(0))))); _pubthis->inst(_1906,(int)0,(int)((_1906)->size(0)),(long long)((int)0),(long long)((int)0),_1908,std::shared_ptr< monty::ndarray< int,1 > >(nullptr),std::shared_ptr< monty::ndarray< int,1 > >(nullptr)); mosek::fusion::p_Model::_get_impl(_pubthis->getModel().get())->task_var_putcontlist(_1908); }}void mosek::fusion::SymRangedVariable::make_integer  ( std::shared_ptr< monty::ndarray< long long,1 > > _1909) { mosek::fusion::p_SymRangedVariable::_get_impl(this)->make_integer(_1909); }void mosek::fusion::p_SymRangedVariable::make_integer( std::shared_ptr< monty::ndarray< long long,1 > > _1909){ if (nativeidxs){ mosek::fusion::p_Model::_get_impl(_pubthis->getModel().get())->task_var_putintlist(([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _8104; for (int _1910=(int)0, _8105=(int)((_1909)->size(0)); _1910 < _8105;++_1910)_8104.push_back(((*nativeidxs)(((*_1909)(_1910))))); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8104.size()),_8104.begin(),_8104.end())); })()); }else { std::shared_ptr< monty::ndarray< int,1 > > _1911 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)((_1909)->size(0))))); _pubthis->inst(_1909,(int)0,(int)((_1909)->size(0)),(long long)((int)0),(long long)((int)0),_1911,std::shared_ptr< monty::ndarray< int,1 > >(nullptr),std::shared_ptr< monty::ndarray< int,1 > >(nullptr)); mosek::fusion::p_Model::_get_impl(_pubthis->getModel().get())->task_var_putintlist(_1911); }}monty::rc_ptr< ::mosek::fusion::ModelVariable > mosek::fusion::p_SymRangedVariable::clone( monty::rc_ptr< ::mosek::fusion::Model > _1912){ return ::mosek::fusion::p_SymRangedVariable::_new_SymRangedVariable(_pubthis,_1912); }void mosek::fusion::p_SymRangedVariable::destroy(){nativeidxs.reset();dom.reset();idxmap.reset();}void mosek::fusion::SymRangedVariable::destroy() { mosek::fusion::p_SymRangedVariable::_get_impl(this)->destroy(); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::SymRangedVariable::asExpr()
{ return mosek::fusion::BaseVariable::asExpr(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::SymRangedVariable::slice(int _2610,int _2611)
{ return mosek::fusion::ModelVariable::slice(_2610,_2611); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::SymRangedVariable::pick(std::shared_ptr< monty::ndarray< int,2 > > _2737)
{ return mosek::fusion::BaseVariable::pick(_2737); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::SymRangedVariable::pick(std::shared_ptr< monty::ndarray< int,1 > > _2740)
{ return mosek::fusion::BaseVariable::pick(_2740); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::SymRangedVariable::antidiag()
{ return mosek::fusion::BaseVariable::antidiag(); }
void mosek::fusion::SymRangedVariable::makeContinuous()
{ mosek::fusion::BaseVariable::makeContinuous(); }
monty::rc_ptr< ::mosek::fusion::Set > mosek::fusion::SymRangedVariable::shape()
{ return mosek::fusion::BaseVariable::shape(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::SymRangedVariable::pick(std::shared_ptr< monty::ndarray< int,1 > > _2730,std::shared_ptr< monty::ndarray< int,1 > > _2731,std::shared_ptr< monty::ndarray< int,1 > > _2732)
{ return mosek::fusion::BaseVariable::pick(_2730,_2731,_2732); }
void mosek::fusion::SymRangedVariable::elementName(long long _2601,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2602)
{ mosek::fusion::ModelVariable::elementName(_2601,_2602); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::SymRangedVariable::index(int _2729)
{ return mosek::fusion::BaseVariable::index(_2729); }
void mosek::fusion::SymRangedVariable::makeInteger()
{ mosek::fusion::BaseVariable::makeInteger(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::SymRangedVariable::index(int _2723,int _2724,int _2725)
{ return mosek::fusion::BaseVariable::index(_2723,_2724,_2725); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::SymRangedVariable::diag()
{ return mosek::fusion::BaseVariable::diag(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::SymRangedVariable::index(int _2726,int _2727)
{ return mosek::fusion::BaseVariable::index(_2726,_2727); }
monty::rc_ptr< ::mosek::fusion::Set > mosek::fusion::SymRangedVariable::getShape()
{ return mosek::fusion::BaseVariable::getShape(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::SymRangedVariable::transpose()
{ return mosek::fusion::BaseVariable::transpose(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::SymRangedVariable::index(std::shared_ptr< monty::ndarray< int,1 > > _2728)
{ return mosek::fusion::BaseVariable::index(_2728); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::SymRangedVariable::pick(std::shared_ptr< monty::ndarray< int,1 > > _2734,std::shared_ptr< monty::ndarray< int,1 > > _2735)
{ return mosek::fusion::BaseVariable::pick(_2734,_2735); }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::SymRangedVariable::level()
{ return mosek::fusion::BaseVariable::level(); }
monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::SymRangedVariable::getModel()
{ return mosek::fusion::BaseVariable::getModel(); }
void mosek::fusion::SymRangedVariable::setLevel(std::shared_ptr< monty::ndarray< double,1 > > _2714)
{ mosek::fusion::BaseVariable::setLevel(_2714); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::SymRangedVariable::diag(int _2743)
{ return mosek::fusion::BaseVariable::diag(_2743); }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::SymRangedVariable::dual()
{ return mosek::fusion::BaseVariable::dual(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::SymRangedVariable::slice(std::shared_ptr< monty::ndarray< int,1 > > _2603,std::shared_ptr< monty::ndarray< int,1 > > _2604)
{ return mosek::fusion::ModelVariable::slice(_2603,_2604); }
monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::SymRangedVariable::elementDesc(long long _2665,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2666)
{ return mosek::fusion::BaseVariable::elementDesc(_2665,_2666); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::SymRangedVariable::antidiag(int _2742)
{ return mosek::fusion::BaseVariable::antidiag(_2742); }
long long mosek::fusion::SymRangedVariable::size()
{ return mosek::fusion::BaseVariable::size(); }
void mosek::fusion::SymRangedVariable::values(int _2697,std::shared_ptr< monty::ndarray< double,1 > > _2698,bool _2699)
{ mosek::fusion::BaseVariable::values(_2697,_2698,_2699); }
mosek::fusion::RangedVariable::RangedVariable(mosek::fusion::p_RangedVariable *_impl) : mosek::fusion::ModelVariable(_impl) { /*std::cout << "RangedVariable()" << this << std::endl; */ }mosek::fusion::RangedVariable::~RangedVariable() {  /* std::cout << "~RangedVariable()" << this << std::endl << std::flush; */ }mosek::fusion::p_RangedVariable::p_RangedVariable  (::mosek::fusion::RangedVariable * _pubthis) :     mosek::fusion::p_ModelVariable(_pubthis),    _pubthis(_pubthis){}mosek::fusion::RangedVariable::t mosek::fusion::p_RangedVariable::_new_RangedVariable  (monty::rc_ptr< ::mosek::fusion::RangedVariable > _1913,    monty::rc_ptr< ::mosek::fusion::Model > _1914){ return new mosek::fusion::RangedVariable(_1913,_1914); }mosek::fusion::RangedVariable::RangedVariable  (monty::rc_ptr< ::mosek::fusion::RangedVariable > _1913,    monty::rc_ptr< ::mosek::fusion::Model > _1914) :    RangedVariable(new mosek::fusion::p_RangedVariable(this)){ mosek::fusion::p_RangedVariable::_get_impl(this)->_initialize(_1913,_1914); }void mosek::fusion::p_RangedVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::RangedVariable > _1913,    monty::rc_ptr< ::mosek::fusion::Model > _1914){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_ModelVariable::_initialize(_1913,_1914);(dom = mosek::fusion::p_RangedVariable::_get_impl(_1913)->dom); (idxmap = ([&]() -> monty::rc_ptr< ::mosek::fusion::Utils::IntMap > { if ( mosek::fusion::p_RangedVariable::_get_impl(_1913)->idxmap) return (mosek::fusion::Utils::p_IntMap::_get_impl(mosek::fusion::p_RangedVariable::_get_impl(_1913)->idxmap.get())->clone()); else return (nullptr); })()); (nativeidxs = ([&]() -> std::shared_ptr< monty::ndarray< int,1 > > { if ( mosek::fusion::p_RangedVariable::_get_impl(_1913)->nativeidxs) return (([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _8106; for (int _1915=(int)0, _8107=(int)((mosek::fusion::p_RangedVariable::_get_impl(_1913)->nativeidxs)->size(0)); _1915 < _8107;++_1915)_8106.push_back(((*mosek::fusion::p_RangedVariable::_get_impl(_1913)->nativeidxs)(_1915))); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8106.size()),_8106.begin(),_8106.end())); })()); else return (nullptr); })()); (names_flushed = mosek::fusion::p_RangedVariable::_get_impl(_1913)->names_flushed); }}mosek::fusion::RangedVariable::t mosek::fusion::p_RangedVariable::_new_RangedVariable  (monty::rc_ptr< ::mosek::fusion::Model > _1916,    const std::string &  _1917,    monty::rc_ptr< ::mosek::fusion::Set > _1918,    monty::rc_ptr< ::mosek::fusion::RangeDomain > _1919,    std::shared_ptr< monty::ndarray< int,1 > > _1920,    long long _1921){ return new mosek::fusion::RangedVariable(_1916,_1917,_1918,_1919,_1920,_1921); }mosek::fusion::RangedVariable::RangedVariable  (monty::rc_ptr< ::mosek::fusion::Model > _1916,    const std::string &  _1917,    monty::rc_ptr< ::mosek::fusion::Set > _1918,    monty::rc_ptr< ::mosek::fusion::RangeDomain > _1919,    std::shared_ptr< monty::ndarray< int,1 > > _1920,    long long _1921) :    RangedVariable(new mosek::fusion::p_RangedVariable(this)){ mosek::fusion::p_RangedVariable::_get_impl(this)->_initialize(_1916,_1917,_1918,_1919,_1920,_1921); }void mosek::fusion::p_RangedVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _1916,    const std::string &  _1917,    monty::rc_ptr< ::mosek::fusion::Set > _1918,    monty::rc_ptr< ::mosek::fusion::RangeDomain > _1919,    std::shared_ptr< monty::ndarray< int,1 > > _1920,    long long _1921){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_ModelVariable::_initialize(_1916,_1917,_1918,_1921);(nativeidxs = _1920); if (! _1920){ (idxmap = ::mosek::fusion::Utils::p_IntMap::_new_IntMap()); }else { (idxmap = nullptr); }(dom = _1919); (names_flushed = false); }}monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::RangedVariable::elementDesc  ( long long _1922,    monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1923) { return mosek::fusion::p_RangedVariable::_get_impl(this)->elementDesc(_1922,_1923); }monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::p_RangedVariable::elementDesc( long long _1922,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1923){ _pubthis->elementName(_1922,_1923); mosek::fusion::p_RangeDomain::_get_impl(dom.get())->domainToString(_1922,_1923); return _1923; }void mosek::fusion::p_RangedVariable::flushNames( ){ if (((! names_flushed) && ((int)((name).size()) > (int)0))){ if (nativeidxs){ int _8108 = (int)0; int _8109 = (int)((nativeidxs)->size(0)); for (int _1924 = _8108;_1924<_8109;++_1924){ mosek::fusion::p_Model::_get_impl(model.get())->varname(((*nativeidxs)(_1924)),mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer().get())->a(name).get())->a(std::string ("[")).get())->a(shape_p->getname((long long)(_1924))).get())->a(std::string ("]")).get())->toString()); }}else { std::shared_ptr< monty::ndarray< long long,1 > > _1925 = mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->keys(); std::shared_ptr< monty::ndarray< int,1 > > _1926 = mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->values(); int _8110 = (int)0; int _8111 = (int)((_1925)->size(0)); for (int _1927 = _8110;_1927<_8111;++_1927){ mosek::fusion::p_Model::_get_impl(model.get())->varname(((*_1926)(_1927)),mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer().get())->a(name).get())->a(std::string ("[")).get())->a(shape_p->getname((long long)(_1927))).get())->a(std::string ("]")).get())->toString()); }}(names_flushed = true); }else {}}void mosek::fusion::RangedVariable::inst  ( std::shared_ptr< monty::ndarray< long long,1 > > _1928,    int _1929,    int _1930,    long long _1931,    long long _1932,    std::shared_ptr< monty::ndarray< int,1 > > _1933,    std::shared_ptr< monty::ndarray< int,1 > > _1934,    std::shared_ptr< monty::ndarray< int,1 > > _1935) { mosek::fusion::p_RangedVariable::_get_impl(this)->inst(_1928,_1929,_1930,_1931,_1932,_1933,_1934,_1935); }void mosek::fusion::p_RangedVariable::inst( std::shared_ptr< monty::ndarray< long long,1 > > _1928,int _1929,int _1930,long long _1931,long long _1932,std::shared_ptr< monty::ndarray< int,1 > > _1933,std::shared_ptr< monty::ndarray< int,1 > > _1934,std::shared_ptr< monty::ndarray< int,1 > > _1935){ if (nativeidxs){ int _8112 = _1929; int _8113 = _1930; for (int _1936 = _8112;_1936<_8113;++_1936){ (((*_1933)(((_1932 + _1936) - _1929))) = ((*nativeidxs)(((*_1928)((_1936 - _1931)))))); }}else { int _8114 = _1929; int _8115 = _1930; for (int _1937 = _8114;_1937<_8115;++_1937){ if ((! mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->hasItem(((*_1928)(((long long)_1937 - _1931)))))){ int _1938 = mosek::fusion::p_Model::_get_impl(model.get())->append_rangedvar(::mosek::fusion::ModelVariable::t(_pubthis),((*_1928)((_1937 - _1931))),mosek::fusion::p_RangeDomain::_get_impl(dom.get())->get_lb_item(((*_1928)((_1937 - _1931)))),mosek::fusion::p_RangeDomain::_get_impl(dom.get())->get_ub_item(((*_1928)((_1937 - _1931))))); mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->setItem(((*_1928)((_1937 - _1931))),_1938); (((*_1933)(((_1932 + _1937) - _1929))) = _1938); (names_flushed = false); }else { (((*_1933)(((_1932 + _1937) - _1929))) = mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->getItem(((*_1928)(((long long)_1937 - _1931))))); }}}}void mosek::fusion::RangedVariable::inst  ( long long _1939,    long long _1940,    std::shared_ptr< monty::ndarray< int,1 > > _1941,    std::shared_ptr< monty::ndarray< int,1 > > _1942,    std::shared_ptr< monty::ndarray< int,1 > > _1943) { mosek::fusion::p_RangedVariable::_get_impl(this)->inst(_1939,_1940,_1941,_1942,_1943); }void mosek::fusion::p_RangedVariable::inst( long long _1939,long long _1940,std::shared_ptr< monty::ndarray< int,1 > > _1941,std::shared_ptr< monty::ndarray< int,1 > > _1942,std::shared_ptr< monty::ndarray< int,1 > > _1943){ if (((_1939 < (long long)0) || (_1939 >= mosek::fusion::p_Set::_get_impl(shape_p)->size))){ throw ::mosek::fusion::IndexError(std::string ("Index out of bounds"));}else {}if (nativeidxs){ (((*_1941)(_1940)) = ((*nativeidxs)(_1939))); }else { if ((! mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->hasItem(_1939))){ monty::rc_ptr< ::mosek::fusion::ModelVariable > _1944 = _pubthis; int _1945 = mosek::fusion::p_Model::_get_impl(model.get())->append_rangedvar(_1944,_1939,mosek::fusion::p_RangeDomain::_get_impl(dom.get())->get_lb_item(_1939),mosek::fusion::p_RangeDomain::_get_impl(dom.get())->get_ub_item(_1939)); mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->setItem(_1939,_1945); (((*_1941)(_1940)) = _1945); (names_flushed = false); }else { (((*_1941)(_1940)) = mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->getItem(_1939)); }}}monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::RangedVariable::upperBoundVar  ( ) { return mosek::fusion::p_RangedVariable::_get_impl(this)->upperBoundVar(); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_RangedVariable::upperBoundVar( ){ std::shared_ptr< monty::ndarray< long long,1 > > _1946 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(mosek::fusion::p_Set::_get_impl(shape_p)->nd))); (((*_1946)((mosek::fusion::p_Set::_get_impl(shape_p)->nd - (int)1))) = (long long)1); { int _1947 = (mosek::fusion::p_Set::_get_impl(shape_p)->nd - (int)1); for (;(_1947 > (int)0);( -- _1947 )){ (((*_1946)((_1947 - (int)1))) = (((*_1946)(_1947)) * (long long)shape_p->dim(_1947))); }}return ::mosek::fusion::p_BoundInterfaceVariable::_new_BoundInterfaceVariable(_pubthis,shape_p,(long long)0,_1946,false); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::RangedVariable::lowerBoundVar  ( ) { return mosek::fusion::p_RangedVariable::_get_impl(this)->lowerBoundVar(); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_RangedVariable::lowerBoundVar( ){ std::shared_ptr< monty::ndarray< long long,1 > > _1948 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(mosek::fusion::p_Set::_get_impl(shape_p)->nd))); (((*_1948)((mosek::fusion::p_Set::_get_impl(shape_p)->nd - (int)1))) = (long long)1); { int _1949 = (mosek::fusion::p_Set::_get_impl(shape_p)->nd - (int)1); for (;(_1949 > (int)0);( -- _1949 )){ (((*_1948)((_1949 - (int)1))) = (((*_1948)(_1949)) * shape_p->dim(_1949))); }}return ::mosek::fusion::p_BoundInterfaceVariable::_new_BoundInterfaceVariable(_pubthis,shape_p,(long long)0,_1948,true); }void mosek::fusion::p_RangedVariable::dual_u( long long _1950,std::shared_ptr< monty::ndarray< int,1 > > _1951,std::shared_ptr< monty::ndarray< long long,1 > > _1952,int _1953,std::shared_ptr< monty::ndarray< double,1 > > _1954){ long long _1955 = (long long)1; int _1956 = (int)((_1952)->size(0)); monty::rc_ptr< ::mosek::fusion::IndexCounter > _1957 = ::mosek::fusion::p_IndexCounter::_new_IndexCounter(_1950,_1951,_1952); std::shared_ptr< monty::ndarray< double,1 > > _1958 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_sux(::mosek::fusion::SolutionType::Default); int _8116 = (int)0; int _8117 = _1956; for (int _1959 = _8116;_1959<_8117;++_1959){ (_1955 = (_1955 * ((*_1951)(_1959)))); }if (nativeidxs){ long long _8118 = (long long)0; long long _8119 = _1955; for (long long _1960 = _8118;_1960<_8119;++_1960){ int _1961 = ((*nativeidxs)(_1957->get())); (((*_1954)((_1960 + _1953))) = ((*_1958)(_1961))); _1957->inc(); }}else { mosek::fusion::SolutionStatus _1962 = model->getPrimalSolutionStatus(); int _8120 = (int)0; int _8121 = (int)_1955; for (int _1963 = _8120;_1963<_8121;++_1963){ if (mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->hasItem(_1957->get())){ int _1964 = mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->getItem(_1957->get()); (((*_1954)(_1963)) = ((*_1958)(_1964))); }else { if (((_1962 == ::mosek::fusion::SolutionStatus::Optimal) || ((_1962 == ::mosek::fusion::SolutionStatus::NearOptimal) || ((_1962 == ::mosek::fusion::SolutionStatus::Feasible) || (_1962 == ::mosek::fusion::SolutionStatus::NearFeasible))))){ (((*_1954)((_1953 + _1963))) = mosek::fusion::p_RangeDomain::_get_impl(dom.get())->get_ub_item(_1957->get())); }else { (((*_1954)((_1953 + _1963))) = 0.0); }}_1957->inc(); }}}void mosek::fusion::p_RangedVariable::dual_u( std::shared_ptr< monty::ndarray< long long,1 > > _1965,int _1966,std::shared_ptr< monty::ndarray< double,1 > > _1967){ std::shared_ptr< monty::ndarray< double,1 > > _1968 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_sux(::mosek::fusion::SolutionType::Default); if (nativeidxs){ int _8122 = (int)0; int _8123 = (int)((_1965)->size(0)); for (int _1969 = _8122;_1969<_8123;++_1969){ int _1970 = ((*nativeidxs)(((*_1965)(_1969)))); (((*_1967)((_1966 + _1969))) = ((*_1968)(_1970))); }}else { mosek::fusion::SolutionStatus _1971 = model->getPrimalSolutionStatus(); int _8124 = (int)0; int _8125 = (int)((_1965)->size(0)); for (int _1972 = _8124;_1972<_8125;++_1972){ if (mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->hasItem(((*_1965)(_1972)))){ int _1973 = mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->getItem(((*_1965)(_1972))); (((*_1967)((_1966 + _1972))) = ((*_1968)(_1973))); }else { if (((_1971 == ::mosek::fusion::SolutionStatus::Optimal) || ((_1971 == ::mosek::fusion::SolutionStatus::NearOptimal) || ((_1971 == ::mosek::fusion::SolutionStatus::Feasible) || (_1971 == ::mosek::fusion::SolutionStatus::NearFeasible))))){ (((*_1967)((_1966 + _1972))) = mosek::fusion::p_RangeDomain::_get_impl(dom.get())->get_ub_item(((*_1965)(_1972)))); }else { (((*_1967)((_1966 + _1972))) = 0.0); }}}}}void mosek::fusion::p_RangedVariable::dual_l( long long _1974,std::shared_ptr< monty::ndarray< int,1 > > _1975,std::shared_ptr< monty::ndarray< long long,1 > > _1976,int _1977,std::shared_ptr< monty::ndarray< double,1 > > _1978){ long long _1979 = (long long)1; int _1980 = (int)((_1976)->size(0)); monty::rc_ptr< ::mosek::fusion::IndexCounter > _1981 = ::mosek::fusion::p_IndexCounter::_new_IndexCounter(_1974,_1975,_1976); std::shared_ptr< monty::ndarray< double,1 > > _1982 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_slx(::mosek::fusion::SolutionType::Default); int _8126 = (int)0; int _8127 = _1980; for (int _1983 = _8126;_1983<_8127;++_1983){ (_1979 = (_1979 * ((*_1975)(_1983)))); }if (nativeidxs){ long long _8128 = (long long)0; long long _8129 = _1979; for (long long _1984 = _8128;_1984<_8129;++_1984){ int _1985 = ((*nativeidxs)(_1981->get())); (((*_1978)((_1984 + _1977))) = ((*_1982)(_1985))); _1981->inc(); }}else { mosek::fusion::SolutionStatus _1986 = model->getPrimalSolutionStatus(); int _8130 = (int)0; int _8131 = (int)_1979; for (int _1987 = _8130;_1987<_8131;++_1987){ if (mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->hasItem(_1981->get())){ int _1988 = mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->getItem(_1981->get()); (((*_1978)(_1987)) = ((*_1982)(_1988))); }else { if (((_1986 == ::mosek::fusion::SolutionStatus::Optimal) || ((_1986 == ::mosek::fusion::SolutionStatus::NearOptimal) || ((_1986 == ::mosek::fusion::SolutionStatus::Feasible) || (_1986 == ::mosek::fusion::SolutionStatus::NearFeasible))))){ (((*_1978)((_1977 + _1987))) = mosek::fusion::p_RangeDomain::_get_impl(dom.get())->get_ub_item(_1981->get())); }else { (((*_1978)((_1977 + _1987))) = 0.0); }}_1981->inc(); }}}void mosek::fusion::p_RangedVariable::dual_l( std::shared_ptr< monty::ndarray< long long,1 > > _1989,int _1990,std::shared_ptr< monty::ndarray< double,1 > > _1991){ std::shared_ptr< monty::ndarray< double,1 > > _1992 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_slx(::mosek::fusion::SolutionType::Default); if (nativeidxs){ int _8132 = (int)0; int _8133 = (int)((_1989)->size(0)); for (int _1993 = _8132;_1993<_8133;++_1993){ int _1994 = ((*nativeidxs)(((*_1989)(_1993)))); (((*_1991)((_1990 + _1993))) = ((*_1992)(_1994))); }}else { mosek::fusion::SolutionStatus _1995 = model->getPrimalSolutionStatus(); int _8134 = (int)0; int _8135 = (int)((_1989)->size(0)); for (int _1996 = _8134;_1996<_8135;++_1996){ if (mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->hasItem(((*_1989)(_1996)))){ int _1997 = mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->getItem(((*_1989)(_1996))); (((*_1991)((_1990 + _1996))) = ((*_1992)(_1997))); }else { if (((_1995 == ::mosek::fusion::SolutionStatus::Optimal) || ((_1995 == ::mosek::fusion::SolutionStatus::NearOptimal) || ((_1995 == ::mosek::fusion::SolutionStatus::Feasible) || (_1995 == ::mosek::fusion::SolutionStatus::NearFeasible))))){ (((*_1991)((_1990 + _1996))) = mosek::fusion::p_RangeDomain::_get_impl(dom.get())->get_ub_item(((*_1989)(_1996)))); }else { (((*_1991)((_1990 + _1996))) = 0.0); }}}}}void mosek::fusion::p_RangedVariable::dual_values( long long _1998,std::shared_ptr< monty::ndarray< int,1 > > _1999,std::shared_ptr< monty::ndarray< long long,1 > > _2000,int _2001,std::shared_ptr< monty::ndarray< double,1 > > _2002){ long long _2003 = (long long)1; int _2004 = (int)((_2000)->size(0)); monty::rc_ptr< ::mosek::fusion::IndexCounter > _2005 = ::mosek::fusion::p_IndexCounter::_new_IndexCounter(_1998,_1999,_2000); std::shared_ptr< monty::ndarray< double,1 > > _2006 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_slx(::mosek::fusion::SolutionType::Default); std::shared_ptr< monty::ndarray< double,1 > > _2007 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_sux(::mosek::fusion::SolutionType::Default); int _8136 = (int)0; int _8137 = _2004; for (int _2008 = _8136;_2008<_8137;++_2008){ (_2003 = (_2003 * ((*_1999)(_2008)))); }if (nativeidxs){ long long _8138 = (long long)0; long long _8139 = _2003; for (long long _2009 = _8138;_2009<_8139;++_2009){ int _2010 = ((*nativeidxs)(_2005->get())); (((*_2002)((_2009 + _2001))) = (((*_2006)(_2010)) - ((*_2007)(_2010)))); _2005->inc(); }}else { mosek::fusion::SolutionStatus _2011 = model->getPrimalSolutionStatus(); int _8140 = (int)0; int _8141 = (int)_2003; for (int _2012 = _8140;_2012<_8141;++_2012){ if (mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->hasItem(_2005->get())){ int _2013 = mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->getItem(_2005->get()); (((*_2002)(_2012)) = (((*_2006)(_2013)) - ((*_2007)(_2013)))); }else { if (((_2011 == ::mosek::fusion::SolutionStatus::Optimal) || ((_2011 == ::mosek::fusion::SolutionStatus::NearOptimal) || ((_2011 == ::mosek::fusion::SolutionStatus::Feasible) || (_2011 == ::mosek::fusion::SolutionStatus::NearFeasible))))){ (((*_2002)((_2001 + _2012))) = mosek::fusion::p_RangeDomain::_get_impl(dom.get())->get_ub_item(_2005->get())); }else { (((*_2002)((_2001 + _2012))) = 0.0); }}_2005->inc(); }}}void mosek::fusion::p_RangedVariable::dual_values( std::shared_ptr< monty::ndarray< long long,1 > > _2014,int _2015,std::shared_ptr< monty::ndarray< double,1 > > _2016){ std::shared_ptr< monty::ndarray< double,1 > > _2017 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_slx(::mosek::fusion::SolutionType::Default); std::shared_ptr< monty::ndarray< double,1 > > _2018 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_sux(::mosek::fusion::SolutionType::Default); if (nativeidxs){ int _8142 = (int)0; int _8143 = (int)((_2014)->size(0)); for (int _2019 = _8142;_2019<_8143;++_2019){ int _2020 = ((*nativeidxs)(((*_2014)(_2019)))); (((*_2016)((_2015 + _2019))) = (((*_2017)(_2020)) - ((*_2018)(_2020)))); }}else { mosek::fusion::SolutionStatus _2021 = model->getPrimalSolutionStatus(); int _8144 = (int)0; int _8145 = (int)((_2014)->size(0)); for (int _2022 = _8144;_2022<_8145;++_2022){ if (mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->hasItem(((*_2014)(_2022)))){ int _2023 = mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->getItem(((*_2014)(_2022))); (((*_2016)((_2015 + _2022))) = (((*_2017)(_2023)) - ((*_2018)(_2023)))); }else { if (((_2021 == ::mosek::fusion::SolutionStatus::Optimal) || ((_2021 == ::mosek::fusion::SolutionStatus::NearOptimal) || ((_2021 == ::mosek::fusion::SolutionStatus::Feasible) || (_2021 == ::mosek::fusion::SolutionStatus::NearFeasible))))){ (((*_2016)((_2015 + _2022))) = mosek::fusion::p_RangeDomain::_get_impl(dom.get())->get_ub_item(((*_2014)(_2022)))); }else { (((*_2016)((_2015 + _2022))) = 0.0); }}}}}void mosek::fusion::RangedVariable::set_values  ( long long _2024,    std::shared_ptr< monty::ndarray< int,1 > > _2025,    std::shared_ptr< monty::ndarray< long long,1 > > _2026,    int _2027,    std::shared_ptr< monty::ndarray< double,1 > > _2028,    bool _2029) { mosek::fusion::p_RangedVariable::_get_impl(this)->set_values(_2024,_2025,_2026,_2027,_2028,_2029); }void mosek::fusion::p_RangedVariable::set_values( long long _2024,std::shared_ptr< monty::ndarray< int,1 > > _2025,std::shared_ptr< monty::ndarray< long long,1 > > _2026,int _2027,std::shared_ptr< monty::ndarray< double,1 > > _2028,bool _2029){ if (_2029){ long long _2030 = (long long)1; int _2031 = (int)((_2026)->size(0)); monty::rc_ptr< ::mosek::fusion::IndexCounter > _2032 = ::mosek::fusion::p_IndexCounter::_new_IndexCounter(_2024,_2025,_2026); int _8146 = (int)0; int _8147 = _2031; for (int _2033 = _8146;_2033<_8147;++_2033){ (_2030 = (_2030 * ((*_2025)(_2033)))); }if (nativeidxs){ int _2034 = (int)((nativeidxs)->size(0)); std::shared_ptr< monty::ndarray< int,1 > > _2035 = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _8148; for (long long _2036=(int)0, _8149=_2030; _2036 < _8149;++_2036)_8148.push_back(((*nativeidxs)(_2032->next()))); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8148.size()),_8148.begin(),_8148.end())); })(); std::shared_ptr< monty::ndarray< double,1 > > _2037 = ([&]() -> std::shared_ptr< monty::ndarray< double,1 > > { if ( (_2027 > (int)0)) return (([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _8150; for (int _2038=(int)0, _8151=_2034; _2038 < _8151;++_2038)_8150.push_back(((*_2028)((_2027 + _2038)))); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8150.size()),_8150.begin(),_8150.end())); })()); else return (_2028); })(); mosek::fusion::p_Model::_get_impl(model.get())->setSolution_xx(_2035,_2037); }else { std::shared_ptr< monty::ndarray< int,1 > > _2039 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2030))); int _8152 = (int)0; long long _8153 = _2030; for (long long _2040 = _8152;_2040<_8153;++_2040){ _pubthis->inst(_2032->next(),_2040,_2039,std::shared_ptr< monty::ndarray< int,1 > >(nullptr),std::shared_ptr< monty::ndarray< int,1 > >(nullptr)); }std::shared_ptr< monty::ndarray< double,1 > > _2041 = ([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _8154; for (long long _2042=(int)0, _8155=_2030; _2042 < _8155;++_2042)_8154.push_back(((*_2028)((_2027 + _2042)))); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8154.size()),_8154.begin(),_8154.end())); })(); mosek::fusion::p_Model::_get_impl(model.get())->setSolution_xx(_2039,_2041); }}else { }}void mosek::fusion::RangedVariable::set_values  ( std::shared_ptr< monty::ndarray< long long,1 > > _2043,    std::shared_ptr< monty::ndarray< double,1 > > _2044,    bool _2045) { mosek::fusion::p_RangedVariable::_get_impl(this)->set_values(_2043,_2044,_2045); }void mosek::fusion::p_RangedVariable::set_values( std::shared_ptr< monty::ndarray< long long,1 > > _2043,std::shared_ptr< monty::ndarray< double,1 > > _2044,bool _2045){ if (_2045){ if (nativeidxs){ int _2046 = (int)((nativeidxs)->size(0)); std::shared_ptr< monty::ndarray< int,1 > > _2047 = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _8156; for (int _2048=(int)0, _8157=_2046; _2048 < _8157;++_2048)_8156.push_back(((*nativeidxs)(((*_2043)(_2048))))); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8156.size()),_8156.begin(),_8156.end())); })(); std::shared_ptr< monty::ndarray< double,1 > > _2049 = ([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _8158; for (int _2050=(int)0, _8159=_2046; _2050 < _8159;++_2050)_8158.push_back(((*_2044)(_2050))); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8158.size()),_8158.begin(),_8158.end())); })(); mosek::fusion::p_Model::_get_impl(model.get())->setSolution_xx(_2047,_2049); }else { std::shared_ptr< monty::ndarray< int,1 > > _2051 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)((_2043)->size(0))))); int _8160 = (int)0; int _8161 = (int)((_2043)->size(0)); for (int _2052 = _8160;_2052<_8161;++_2052){ _pubthis->inst(((*_2043)(_2052)),(long long)(_2052),_2051,std::shared_ptr< monty::ndarray< int,1 > >(nullptr),std::shared_ptr< monty::ndarray< int,1 > >(nullptr)); }std::shared_ptr< monty::ndarray< double,1 > > _2053 = ([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _8162; for (int _2054=(int)0, _8163=(int)((_2043)->size(0)); _2054 < _8163;++_2054)_8162.push_back(((*_2044)(_2054))); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8162.size()),_8162.begin(),_8162.end())); })(); mosek::fusion::p_Model::_get_impl(model.get())->setSolution_xx(_2051,_2053); }}else { }}void mosek::fusion::RangedVariable::values  ( long long _2055,    std::shared_ptr< monty::ndarray< int,1 > > _2056,    std::shared_ptr< monty::ndarray< long long,1 > > _2057,    int _2058,    std::shared_ptr< monty::ndarray< double,1 > > _2059,    bool _2060) { mosek::fusion::p_RangedVariable::_get_impl(this)->values(_2055,_2056,_2057,_2058,_2059,_2060); }void mosek::fusion::p_RangedVariable::values( long long _2055,std::shared_ptr< monty::ndarray< int,1 > > _2056,std::shared_ptr< monty::ndarray< long long,1 > > _2057,int _2058,std::shared_ptr< monty::ndarray< double,1 > > _2059,bool _2060){ if (_2060){ long long _2061 = (long long)1; int _2062 = (int)((_2057)->size(0)); monty::rc_ptr< ::mosek::fusion::IndexCounter > _2063 = ::mosek::fusion::p_IndexCounter::_new_IndexCounter(_2055,_2056,_2057); std::shared_ptr< monty::ndarray< double,1 > > _2064 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_xx(::mosek::fusion::SolutionType::Default); int _8164 = (int)0; int _8165 = _2062; for (int _2065 = _8164;_2065<_8165;++_2065){ (_2061 = (_2061 * ((*_2056)(_2065)))); }if (nativeidxs){ long long _8166 = (long long)0; long long _8167 = _2061; for (long long _2066 = _8166;_2066<_8167;++_2066){ (((*_2059)((_2066 + _2058))) = ((*_2064)(((*nativeidxs)(_2063->get()))))); _2063->inc(); }}else { mosek::fusion::SolutionStatus _2067 = model->getPrimalSolutionStatus(); int _8168 = (int)0; int _8169 = (int)_2061; for (int _2068 = _8168;_2068<_8169;++_2068){ if (mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->hasItem(_2063->get())){ (((*_2059)(_2068)) = ((*_2064)(mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->getItem(_2063->get())))); }else { if (((_2067 == ::mosek::fusion::SolutionStatus::Optimal) || ((_2067 == ::mosek::fusion::SolutionStatus::NearOptimal) || ((_2067 == ::mosek::fusion::SolutionStatus::Feasible) || (_2067 == ::mosek::fusion::SolutionStatus::NearFeasible))))){ (((*_2059)((_2058 + _2068))) = mosek::fusion::p_RangeDomain::_get_impl(dom.get())->get_ub_item(_2063->get())); }else { (((*_2059)((_2058 + _2068))) = 0.0); }}_2063->inc(); }}}else { dual_values(_2055,_2056,_2057,_2058,_2059); }}void mosek::fusion::RangedVariable::values  ( std::shared_ptr< monty::ndarray< long long,1 > > _2069,    int _2070,    std::shared_ptr< monty::ndarray< double,1 > > _2071,    bool _2072) { mosek::fusion::p_RangedVariable::_get_impl(this)->values(_2069,_2070,_2071,_2072); }void mosek::fusion::p_RangedVariable::values( std::shared_ptr< monty::ndarray< long long,1 > > _2069,int _2070,std::shared_ptr< monty::ndarray< double,1 > > _2071,bool _2072){ if (_2072){ std::shared_ptr< monty::ndarray< double,1 > > _2073 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_xx(::mosek::fusion::SolutionType::Default); if (nativeidxs){ int _8170 = (int)0; int _8171 = (int)((_2069)->size(0)); for (int _2074 = _8170;_2074<_8171;++_2074){ (((*_2071)((_2070 + _2074))) = ((*_2073)(((*nativeidxs)(((*_2069)(_2074))))))); }}else { mosek::fusion::SolutionStatus _2075 = model->getPrimalSolutionStatus(); int _8172 = (int)0; int _8173 = (int)((_2069)->size(0)); for (int _2076 = _8172;_2076<_8173;++_2076){ if (mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->hasItem(((*_2069)(_2076)))){ (((*_2071)((_2070 + _2076))) = ((*_2073)(mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->getItem(((*_2069)(_2076)))))); }else { if (((_2075 == ::mosek::fusion::SolutionStatus::Optimal) || ((_2075 == ::mosek::fusion::SolutionStatus::NearOptimal) || ((_2075 == ::mosek::fusion::SolutionStatus::Feasible) || (_2075 == ::mosek::fusion::SolutionStatus::NearFeasible))))){ (((*_2071)((_2070 + _2076))) = mosek::fusion::p_RangeDomain::_get_impl(dom.get())->get_ub_item(((*_2069)(_2076)))); }else { (((*_2071)((_2070 + _2076))) = 0.0); }}}}}else { dual_values(_2069,_2070,_2071); }}void mosek::fusion::RangedVariable::make_continuous  ( std::shared_ptr< monty::ndarray< long long,1 > > _2077) { mosek::fusion::p_RangedVariable::_get_impl(this)->make_continuous(_2077); }void mosek::fusion::p_RangedVariable::make_continuous( std::shared_ptr< monty::ndarray< long long,1 > > _2077){ if (nativeidxs){ mosek::fusion::p_Model::_get_impl(_pubthis->getModel().get())->task_var_putcontlist(([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _8174; for (int _2078=(int)0, _8175=(int)((_2077)->size(0)); _2078 < _8175;++_2078)_8174.push_back(((*nativeidxs)(((*_2077)(_2078))))); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8174.size()),_8174.begin(),_8174.end())); })()); }else { std::shared_ptr< monty::ndarray< int,1 > > _2079 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)((_2077)->size(0))))); _pubthis->inst(_2077,(int)0,(int)((_2077)->size(0)),(long long)((int)0),(long long)((int)0),_2079,std::shared_ptr< monty::ndarray< int,1 > >(nullptr),std::shared_ptr< monty::ndarray< int,1 > >(nullptr)); mosek::fusion::p_Model::_get_impl(_pubthis->getModel().get())->task_var_putcontlist(_2079); }}void mosek::fusion::RangedVariable::make_integer  ( std::shared_ptr< monty::ndarray< long long,1 > > _2080) { mosek::fusion::p_RangedVariable::_get_impl(this)->make_integer(_2080); }void mosek::fusion::p_RangedVariable::make_integer( std::shared_ptr< monty::ndarray< long long,1 > > _2080){ if (nativeidxs){ mosek::fusion::p_Model::_get_impl(_pubthis->getModel().get())->task_var_putintlist(([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _8176; for (int _2081=(int)0, _8177=(int)((_2080)->size(0)); _2081 < _8177;++_2081)_8176.push_back(((*nativeidxs)(((*_2080)(_2081))))); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8176.size()),_8176.begin(),_8176.end())); })()); }else { std::shared_ptr< monty::ndarray< int,1 > > _2082 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)((_2080)->size(0))))); _pubthis->inst(_2080,(int)0,(int)((_2080)->size(0)),(long long)((int)0),(long long)((int)0),_2082,std::shared_ptr< monty::ndarray< int,1 > >(nullptr),std::shared_ptr< monty::ndarray< int,1 > >(nullptr)); mosek::fusion::p_Model::_get_impl(_pubthis->getModel().get())->task_var_putintlist(_2082); }}monty::rc_ptr< ::mosek::fusion::ModelVariable > mosek::fusion::p_RangedVariable::clone( monty::rc_ptr< ::mosek::fusion::Model > _2083){ return ::mosek::fusion::p_RangedVariable::_new_RangedVariable(_pubthis,_2083); }void mosek::fusion::p_RangedVariable::destroy(){nativeidxs.reset();dom.reset();idxmap.reset();}void mosek::fusion::RangedVariable::destroy() { mosek::fusion::p_RangedVariable::_get_impl(this)->destroy(); }mosek::fusion::LinearPSDVariable::LinearPSDVariable(mosek::fusion::p_LinearPSDVariable *_impl) : mosek::fusion::ModelVariable(_impl) { /*std::cout << "LinearPSDVariable()" << this << std::endl; */ }mosek::fusion::LinearPSDVariable::~LinearPSDVariable() {  /* std::cout << "~LinearPSDVariable()" << this << std::endl << std::flush; */ }mosek::fusion::p_LinearPSDVariable::p_LinearPSDVariable  (::mosek::fusion::LinearPSDVariable * _pubthis) :     mosek::fusion::p_ModelVariable(_pubthis),    _pubthis(_pubthis){}mosek::fusion::LinearPSDVariable::t mosek::fusion::p_LinearPSDVariable::_new_LinearPSDVariable  (monty::rc_ptr< ::mosek::fusion::LinearPSDVariable > _2084,    monty::rc_ptr< ::mosek::fusion::Model > _2085){ return new mosek::fusion::LinearPSDVariable(_2084,_2085); }mosek::fusion::LinearPSDVariable::LinearPSDVariable  (monty::rc_ptr< ::mosek::fusion::LinearPSDVariable > _2084,    monty::rc_ptr< ::mosek::fusion::Model > _2085) :    LinearPSDVariable(new mosek::fusion::p_LinearPSDVariable(this)){ mosek::fusion::p_LinearPSDVariable::_get_impl(this)->_initialize(_2084,_2085); }void mosek::fusion::p_LinearPSDVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::LinearPSDVariable > _2084,    monty::rc_ptr< ::mosek::fusion::Model > _2085){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_ModelVariable::_initialize(_2084,_2085);(blocksize = mosek::fusion::p_LinearPSDVariable::_get_impl(_2084)->blocksize); (conesize = mosek::fusion::p_LinearPSDVariable::_get_impl(_2084)->conesize); (coneidx = mosek::fusion::p_LinearPSDVariable::_get_impl(_2084)->coneidx); (sdpvardim = mosek::fusion::p_LinearPSDVariable::_get_impl(_2084)->sdpvardim); (numcones = mosek::fusion::p_LinearPSDVariable::_get_impl(_2084)->numcones); }}mosek::fusion::LinearPSDVariable::t mosek::fusion::p_LinearPSDVariable::_new_LinearPSDVariable  (monty::rc_ptr< ::mosek::fusion::Model > _2086,    const std::string &  _2087,    int _2088,    monty::rc_ptr< ::mosek::fusion::Set > _2089,    int _2090,    long long _2091){ return new mosek::fusion::LinearPSDVariable(_2086,_2087,_2088,_2089,_2090,_2091); }mosek::fusion::LinearPSDVariable::LinearPSDVariable  (monty::rc_ptr< ::mosek::fusion::Model > _2086,    const std::string &  _2087,    int _2088,    monty::rc_ptr< ::mosek::fusion::Set > _2089,    int _2090,    long long _2091) :    LinearPSDVariable(new mosek::fusion::p_LinearPSDVariable(this)){ mosek::fusion::p_LinearPSDVariable::_get_impl(this)->_initialize(_2086,_2087,_2088,_2089,_2090,_2091); }void mosek::fusion::p_LinearPSDVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _2086,    const std::string &  _2087,    int _2088,    monty::rc_ptr< ::mosek::fusion::Set > _2089,    int _2090,    long long _2091){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_ModelVariable::_initialize(_2086,_2087,_2089,_2091);(blocksize = _2089->dim((int)0)); (conesize = _2089->dim((int)0)); (coneidx = _2090); (sdpvardim = _2088); (numcones = (int)1); int _8178 = (int)1; int _8179 = mosek::fusion::p_Set::_get_impl(_2089)->nd; for (int _2092 = _8178;_2092<_8179;++_2092){ (numcones *= _2089->dim(_2092)); }}}void mosek::fusion::p_LinearPSDVariable::flushNames( ){ }std::string mosek::fusion::LinearPSDVariable::toString  ( ) { return mosek::fusion::p_LinearPSDVariable::_get_impl(this)->toString(); }std::string mosek::fusion::p_LinearPSDVariable::toString( ){ monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2093 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer(); mosek::fusion::Utils::p_StringBuffer::_get_impl(_2093.get())->a(std::string ("PSDVariable(")); if (((int)((name).size()) > (int)0)){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_2093.get())->a(std::string ("'")).get())->a(name).get())->a(std::string ("',")); }else {}mosek::fusion::Utils::p_StringBuffer::_get_impl(_2093.get())->a(shape_p->dim((int)0)); int _8180 = (int)1; int _8181 = mosek::fusion::p_Set::_get_impl(shape_p)->nd; for (int _2094 = _8180;_2094<_8181;++_2094){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_2093.get())->a(std::string (",")).get())->a(shape_p->dim(_2094)); }mosek::fusion::Utils::p_StringBuffer::_get_impl(_2093.get())->a(std::string (")")); return mosek::fusion::Utils::p_StringBuffer::_get_impl(_2093.get())->toString(); }void mosek::fusion::LinearPSDVariable::inst  ( std::shared_ptr< monty::ndarray< long long,1 > > _2095,    int _2096,    int _2097,    long long _2098,    long long _2099,    std::shared_ptr< monty::ndarray< int,1 > > _2100,    std::shared_ptr< monty::ndarray< int,1 > > _2101,    std::shared_ptr< monty::ndarray< int,1 > > _2102) { mosek::fusion::p_LinearPSDVariable::_get_impl(this)->inst(_2095,_2096,_2097,_2098,_2099,_2100,_2101,_2102); }void mosek::fusion::p_LinearPSDVariable::inst( std::shared_ptr< monty::ndarray< long long,1 > > _2095,int _2096,int _2097,long long _2098,long long _2099,std::shared_ptr< monty::ndarray< int,1 > > _2100,std::shared_ptr< monty::ndarray< int,1 > > _2101,std::shared_ptr< monty::ndarray< int,1 > > _2102){ int _8182 = _2096; int _8183 = _2097; for (int _2103 = _8182;_2103<_8183;++_2103){ if (((((*_2095)(_2103)) < _2098) || (((*_2095)(_2103)) >= (mosek::fusion::p_Set::_get_impl(shape_p)->size + _2098)))){ throw ::mosek::fusion::IndexError(std::string ("Index out of bounds"));}else {}}long long _2104 = _2099; int _2105 = sdpvardim; int _8184 = _2096; int _8185 = _2097; for (int _2106 = _8184;_2106<_8185;++_2106){ long long _2107 = (((*_2095)(_2106)) - _2098); int _2108 = (int)(_2107 / blocksize); long long _2109 = (_2107 % blocksize); (((*_2100)(_2104)) = (- (((int)1 + coneidx) + _2108))); int _2110 = (int)((_2105 + 0.5) - ::mosek::fusion::Utils::Tools::sqrt((((_2105 + 0.5) * (_2105 + 0.5)) - (_2109 * (int)2)))); int _2111 = (int)(_2109 - ((_2110 * ((((int)2 * _2105) - _2110) - (int)1)) / (int)2)); if ((_2111 >= _2110)){ (((*_2101)(_2104)) = _2111); (((*_2102)(_2104)) = _2110); }else { (((*_2101)(_2104)) = _2110); (((*_2102)(_2104)) = _2111); }( ++ _2104 ); }}void mosek::fusion::LinearPSDVariable::inst  ( long long _2112,    long long _2113,    std::shared_ptr< monty::ndarray< int,1 > > _2114,    std::shared_ptr< monty::ndarray< int,1 > > _2115,    std::shared_ptr< monty::ndarray< int,1 > > _2116) { mosek::fusion::p_LinearPSDVariable::_get_impl(this)->inst(_2112,_2113,_2114,_2115,_2116); }void mosek::fusion::p_LinearPSDVariable::inst( long long _2112,long long _2113,std::shared_ptr< monty::ndarray< int,1 > > _2114,std::shared_ptr< monty::ndarray< int,1 > > _2115,std::shared_ptr< monty::ndarray< int,1 > > _2116){ if (((_2112 < (int)0) || (_2112 >= mosek::fusion::p_Set::_get_impl(shape_p)->size))){ throw ::mosek::fusion::IndexError(std::string ("Index out of bounds"));}else {}int _2117 = sdpvardim; int _2118 = (int)(_2112 / blocksize); long long _2119 = (_2112 % blocksize); (((*_2114)(_2113)) = (- (((int)1 + coneidx) + _2118))); int _2120 = (int)((_2117 + 0.5) - ::mosek::fusion::Utils::Tools::sqrt((((_2117 + 0.5) * (_2117 + 0.5)) - (_2119 * (int)2)))); int _2121 = (int)(_2119 - ((_2120 * ((((int)2 * _2117) + (int)1) + _2120)) / (int)2)); if ((_2121 >= _2120)){ (((*_2115)(_2113)) = _2121); (((*_2116)(_2113)) = _2120); }else { (((*_2115)(_2113)) = _2120); (((*_2116)(_2113)) = _2121); }}void mosek::fusion::LinearPSDVariable::set_values  ( long long _2122,    std::shared_ptr< monty::ndarray< int,1 > > _2123,    std::shared_ptr< monty::ndarray< long long,1 > > _2124,    int _2125,    std::shared_ptr< monty::ndarray< double,1 > > _2126,    bool _2127) { mosek::fusion::p_LinearPSDVariable::_get_impl(this)->set_values(_2122,_2123,_2124,_2125,_2126,_2127); }void mosek::fusion::p_LinearPSDVariable::set_values( long long _2122,std::shared_ptr< monty::ndarray< int,1 > > _2123,std::shared_ptr< monty::ndarray< long long,1 > > _2124,int _2125,std::shared_ptr< monty::ndarray< double,1 > > _2126,bool _2127){ throw ::mosek::fusion::UnimplementedError(std::string ("Cannot make PSDVariable elements integer"));}void mosek::fusion::LinearPSDVariable::set_values  ( std::shared_ptr< monty::ndarray< long long,1 > > _2128,    std::shared_ptr< monty::ndarray< double,1 > > _2129,    bool _2130) { mosek::fusion::p_LinearPSDVariable::_get_impl(this)->set_values(_2128,_2129,_2130); }void mosek::fusion::p_LinearPSDVariable::set_values( std::shared_ptr< monty::ndarray< long long,1 > > _2128,std::shared_ptr< monty::ndarray< double,1 > > _2129,bool _2130){ throw ::mosek::fusion::UnimplementedError(std::string ("Cannot make PSDVariable elements integer"));}void mosek::fusion::LinearPSDVariable::values  ( long long _2131,    std::shared_ptr< monty::ndarray< int,1 > > _2132,    std::shared_ptr< monty::ndarray< long long,1 > > _2133,    int _2134,    std::shared_ptr< monty::ndarray< double,1 > > _2135,    bool _2136) { mosek::fusion::p_LinearPSDVariable::_get_impl(this)->values(_2131,_2132,_2133,_2134,_2135,_2136); }void mosek::fusion::p_LinearPSDVariable::values( long long _2131,std::shared_ptr< monty::ndarray< int,1 > > _2132,std::shared_ptr< monty::ndarray< long long,1 > > _2133,int _2134,std::shared_ptr< monty::ndarray< double,1 > > _2135,bool _2136){ long long _2137 = (long long)1; int _2138 = (int)((_2133)->size(0)); monty::rc_ptr< ::mosek::fusion::IndexCounter > _2139 = ::mosek::fusion::p_IndexCounter::_new_IndexCounter(_2131,_2132,_2133); std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > _2140 = ([&]() -> std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > { if ( _2136) return (mosek::fusion::p_Model::_get_impl(model.get())->getSolution_barx(::mosek::fusion::SolutionType::Default)); else return (mosek::fusion::p_Model::_get_impl(model.get())->getSolution_bars(::mosek::fusion::SolutionType::Default)); })(); int _8186 = (int)0; int _8187 = _2138; for (int _2141 = _8186;_2141<_8187;++_2141){ (_2137 = (_2137 * ((*_2132)(_2141)))); }long long _8188 = (long long)0; long long _8189 = _2137; for (long long _2142 = _8188;_2142<_8189;++_2142){ { long long _2143 = (_2139->get() / blocksize); long long _2144 = (_2139->get() % blocksize); (((*_2135)(_2142)) = ((*((*_2140)(((long long)coneidx + _2143))))(_2144))); }_2139->inc(); }}void mosek::fusion::LinearPSDVariable::values  ( std::shared_ptr< monty::ndarray< long long,1 > > _2145,    int _2146,    std::shared_ptr< monty::ndarray< double,1 > > _2147,    bool _2148) { mosek::fusion::p_LinearPSDVariable::_get_impl(this)->values(_2145,_2146,_2147,_2148); }void mosek::fusion::p_LinearPSDVariable::values( std::shared_ptr< monty::ndarray< long long,1 > > _2145,int _2146,std::shared_ptr< monty::ndarray< double,1 > > _2147,bool _2148){ std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > _2149 = ([&]() -> std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > { if ( _2148) return (mosek::fusion::p_Model::_get_impl(model.get())->getSolution_barx(::mosek::fusion::SolutionType::Default)); else return (mosek::fusion::p_Model::_get_impl(model.get())->getSolution_bars(::mosek::fusion::SolutionType::Default)); })(); int _8190 = (int)0; int _8191 = (int)((_2145)->size(0)); for (int _2150 = _8190;_2150<_8191;++_2150){ if (((((*_2145)(_2150)) < (int)0) || (((*_2145)(_2150)) >= mosek::fusion::p_Set::_get_impl(shape_p)->size))){ throw ::mosek::fusion::IndexError(std::string ("Index out of bounds"));}else {}}int _8192 = (int)0; int _8193 = (int)((_2145)->size(0)); for (int _2151 = _8192;_2151<_8193;++_2151){ long long _2152 = (((*_2145)(_2151)) / blocksize); long long _2153 = (((*_2145)(_2151)) % blocksize); (((*_2147)(_2151)) = ((*((*_2149)(((long long)coneidx + _2152))))(_2153))); }}void mosek::fusion::LinearPSDVariable::make_continuous  ( std::shared_ptr< monty::ndarray< long long,1 > > _2154) { mosek::fusion::p_LinearPSDVariable::_get_impl(this)->make_continuous(_2154); }void mosek::fusion::p_LinearPSDVariable::make_continuous( std::shared_ptr< monty::ndarray< long long,1 > > _2154){ }void mosek::fusion::LinearPSDVariable::make_integer  ( std::shared_ptr< monty::ndarray< long long,1 > > _2155) { mosek::fusion::p_LinearPSDVariable::_get_impl(this)->make_integer(_2155); }void mosek::fusion::p_LinearPSDVariable::make_integer( std::shared_ptr< monty::ndarray< long long,1 > > _2155){ throw ::mosek::fusion::UnimplementedError(std::string ("Cannot make PSDVariable elements integer"));}monty::rc_ptr< ::mosek::fusion::ModelVariable > mosek::fusion::p_LinearPSDVariable::clone( monty::rc_ptr< ::mosek::fusion::Model > _2156){ return ::mosek::fusion::p_LinearPSDVariable::_new_LinearPSDVariable(_pubthis,_2156); }void mosek::fusion::p_LinearPSDVariable::destroy(){}void mosek::fusion::LinearPSDVariable::destroy() { mosek::fusion::p_LinearPSDVariable::_get_impl(this)->destroy(); }mosek::fusion::PSDVariable::PSDVariable(mosek::fusion::p_PSDVariable *_impl) : mosek::fusion::ModelVariable(_impl) { /*std::cout << "PSDVariable()" << this << std::endl; */ }mosek::fusion::PSDVariable::~PSDVariable() {  /* std::cout << "~PSDVariable()" << this << std::endl << std::flush; */ }mosek::fusion::p_PSDVariable::p_PSDVariable  (::mosek::fusion::PSDVariable * _pubthis) :     mosek::fusion::p_ModelVariable(_pubthis),    _pubthis(_pubthis){}mosek::fusion::PSDVariable::t mosek::fusion::p_PSDVariable::_new_PSDVariable  (monty::rc_ptr< ::mosek::fusion::PSDVariable > _2157,    monty::rc_ptr< ::mosek::fusion::Model > _2158){ return new mosek::fusion::PSDVariable(_2157,_2158); }mosek::fusion::PSDVariable::PSDVariable  (monty::rc_ptr< ::mosek::fusion::PSDVariable > _2157,    monty::rc_ptr< ::mosek::fusion::Model > _2158) :    PSDVariable(new mosek::fusion::p_PSDVariable(this)){ mosek::fusion::p_PSDVariable::_get_impl(this)->_initialize(_2157,_2158); }void mosek::fusion::p_PSDVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::PSDVariable > _2157,    monty::rc_ptr< ::mosek::fusion::Model > _2158){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_ModelVariable::_initialize(_2157,_2158);(conesize = mosek::fusion::p_PSDVariable::_get_impl(_2157)->conesize); (coneidx = mosek::fusion::p_PSDVariable::_get_impl(_2157)->coneidx); (numcones = mosek::fusion::p_PSDVariable::_get_impl(_2157)->numcones); }}mosek::fusion::PSDVariable::t mosek::fusion::p_PSDVariable::_new_PSDVariable  (monty::rc_ptr< ::mosek::fusion::Model > _2159,    const std::string &  _2160,    int _2161,    int _2162,    int _2163,    long long _2164){ return new mosek::fusion::PSDVariable(_2159,_2160,_2161,_2162,_2163,_2164); }mosek::fusion::PSDVariable::PSDVariable  (monty::rc_ptr< ::mosek::fusion::Model > _2159,    const std::string &  _2160,    int _2161,    int _2162,    int _2163,    long long _2164) :    PSDVariable(new mosek::fusion::p_PSDVariable(this)){ mosek::fusion::p_PSDVariable::_get_impl(this)->_initialize(_2159,_2160,_2161,_2162,_2163,_2164); }void mosek::fusion::p_PSDVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _2159,    const std::string &  _2160,    int _2161,    int _2162,    int _2163,    long long _2164){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_ModelVariable::_initialize(_2159,_2160,::mosek::fusion::p_NDSet::_new_NDSet(_2161,_2161),_2164);(conesize = _2161); (coneidx = _2162); (numcones = _2163); }}void mosek::fusion::p_PSDVariable::flushNames( ){ }std::string mosek::fusion::PSDVariable::toString  ( ) { return mosek::fusion::p_PSDVariable::_get_impl(this)->toString(); }std::string mosek::fusion::p_PSDVariable::toString( ){ monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2165 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer(); mosek::fusion::Utils::p_StringBuffer::_get_impl(_2165.get())->a(std::string ("PSDVariable(")); if (((int)((name).size()) > (int)0)){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_2165.get())->a(std::string ("'")).get())->a(name).get())->a(std::string ("',")); }else {}mosek::fusion::Utils::p_StringBuffer::_get_impl(_2165.get())->a(shape_p->dim((int)0)); int _8194 = (int)1; int _8195 = mosek::fusion::p_Set::_get_impl(shape_p)->nd; for (int _2166 = _8194;_2166<_8195;++_2166){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_2165.get())->a(std::string (",")).get())->a(shape_p->dim(_2166)); }mosek::fusion::Utils::p_StringBuffer::_get_impl(_2165.get())->a(std::string (")")); return mosek::fusion::Utils::p_StringBuffer::_get_impl(_2165.get())->toString(); }monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::PSDVariable::elementDesc  ( long long _2167,    monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2168) { return mosek::fusion::p_PSDVariable::_get_impl(this)->elementDesc(_2167,_2168); }monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::p_PSDVariable::elementDesc( long long _2167,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2168){ long long _2169 = ((long long)conesize * (long long)conesize); long long _2170 = (_2167 / _2169); long long _2171 = (_2167 % _2169); long long _2172 = (_2171 / conesize); long long _2173 = (_2171 % conesize); mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_2168.get())->a(([&]() -> std::string { if ( ((int)((name).size()) == (int)0)) return (std::string ("_")); else return (name); })()).get())->a(std::string ("[")).get())->a(_2170).get())->a(std::string (",")).get())->a(_2172).get())->a(std::string (",")).get())->a(_2173).get())->a(std::string ("] ")); if ((numcones > (int)1)){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_2168.get())->a(std::string (" : element (")).get())->a(_2170).get())->a(std::string (",")).get())->a(_2172).get())->a(std::string (",")).get())->a(_2173); }else { mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_2168.get())->a(std::string (" : element (")).get())->a(_2172).get())->a(std::string (",")).get())->a(_2173); }mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_2168.get())->a(std::string (") in a semidefinite cone of size (")).get())->a(numcones).get())->a(std::string (",")).get())->a(conesize).get())->a(std::string (",")).get())->a(conesize).get())->a(std::string (")")); return _2168; }void mosek::fusion::PSDVariable::elementName  ( long long _2174,    monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2175) { mosek::fusion::p_PSDVariable::_get_impl(this)->elementName(_2174,_2175); }void mosek::fusion::p_PSDVariable::elementName( long long _2174,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2175){ long long _2176 = ((long long)conesize * (long long)conesize); long long _2177 = (_2174 / _2176); long long _2178 = (_2174 % _2176); long long _2179 = (_2178 / conesize); long long _2180 = (_2178 % conesize); mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_2175.get())->a(([&]() -> std::string { if ( ((int)((name).size()) == (int)0)) return (std::string ("_")); else return (name); })()).get())->a(std::string ("[")).get())->a(_2177).get())->a(std::string (",")).get())->a(_2179).get())->a(std::string (",")).get())->a(_2180).get())->a(std::string ("] ")); }void mosek::fusion::PSDVariable::inst  ( std::shared_ptr< monty::ndarray< long long,1 > > _2181,    int _2182,    int _2183,    long long _2184,    long long _2185,    std::shared_ptr< monty::ndarray< int,1 > > _2186,    std::shared_ptr< monty::ndarray< int,1 > > _2187,    std::shared_ptr< monty::ndarray< int,1 > > _2188) { mosek::fusion::p_PSDVariable::_get_impl(this)->inst(_2181,_2182,_2183,_2184,_2185,_2186,_2187,_2188); }void mosek::fusion::p_PSDVariable::inst( std::shared_ptr< monty::ndarray< long long,1 > > _2181,int _2182,int _2183,long long _2184,long long _2185,std::shared_ptr< monty::ndarray< int,1 > > _2186,std::shared_ptr< monty::ndarray< int,1 > > _2187,std::shared_ptr< monty::ndarray< int,1 > > _2188){ int _8196 = _2182; int _8197 = _2183; for (int _2189 = _8196;_2189<_8197;++_2189){ if (((((*_2181)(_2189)) < _2184) || (((*_2181)(_2189)) >= (mosek::fusion::p_Set::_get_impl(shape_p)->size + _2184)))){ throw ::mosek::fusion::IndexError(std::string ("Index out of bounds"));}else {}}long long _2190 = _2185; int _8198 = _2182; int _8199 = _2183; for (int _2191 = _8198;_2191<_8199;++_2191){ long long _2192 = (((*_2181)(_2191)) - _2184); int _2193 = (int)(_2192 / (conesize * conesize)); long long _2194 = (_2192 - ((conesize * conesize) * _2193)); (((*_2186)(_2190)) = (- (((int)1 + coneidx) + _2193))); int _2195 = ((int)_2194 / shape_p->dim((int)1)); int _2196 = ((int)_2194 - (int)(_2195 * shape_p->dim((int)1))); if ((_2195 >= _2196)){ (((*_2187)(_2190)) = _2195); (((*_2188)(_2190)) = _2196); }else { (((*_2187)(_2190)) = _2196); (((*_2188)(_2190)) = _2195); }( ++ _2190 ); }}void mosek::fusion::PSDVariable::inst  ( long long _2197,    long long _2198,    std::shared_ptr< monty::ndarray< int,1 > > _2199,    std::shared_ptr< monty::ndarray< int,1 > > _2200,    std::shared_ptr< monty::ndarray< int,1 > > _2201) { mosek::fusion::p_PSDVariable::_get_impl(this)->inst(_2197,_2198,_2199,_2200,_2201); }void mosek::fusion::p_PSDVariable::inst( long long _2197,long long _2198,std::shared_ptr< monty::ndarray< int,1 > > _2199,std::shared_ptr< monty::ndarray< int,1 > > _2200,std::shared_ptr< monty::ndarray< int,1 > > _2201){ if (((_2197 < (int)0) || (_2197 >= mosek::fusion::p_Set::_get_impl(shape_p)->size))){ throw ::mosek::fusion::IndexError(std::string ("Index out of bounds"));}else {}int _2202 = (int)(_2197 / (conesize * conesize)); long long _2203 = (_2197 - ((conesize * conesize) * _2202)); (((*_2199)(_2198)) = (- (((int)1 + coneidx) + _2202))); int _2204 = ((int)_2203 / shape_p->dim((int)1)); int _2205 = ((int)_2203 - (int)(_2204 * shape_p->dim((int)1))); if ((_2204 >= _2205)){ (((*_2200)(_2198)) = _2204); (((*_2201)(_2198)) = _2205); }else { (((*_2200)(_2198)) = _2205); (((*_2201)(_2198)) = _2204); }}void mosek::fusion::PSDVariable::set_values  ( long long _2206,    std::shared_ptr< monty::ndarray< int,1 > > _2207,    std::shared_ptr< monty::ndarray< long long,1 > > _2208,    int _2209,    std::shared_ptr< monty::ndarray< double,1 > > _2210,    bool _2211) { mosek::fusion::p_PSDVariable::_get_impl(this)->set_values(_2206,_2207,_2208,_2209,_2210,_2211); }void mosek::fusion::p_PSDVariable::set_values( long long _2206,std::shared_ptr< monty::ndarray< int,1 > > _2207,std::shared_ptr< monty::ndarray< long long,1 > > _2208,int _2209,std::shared_ptr< monty::ndarray< double,1 > > _2210,bool _2211){ }void mosek::fusion::PSDVariable::set_values  ( std::shared_ptr< monty::ndarray< long long,1 > > _2212,    std::shared_ptr< monty::ndarray< double,1 > > _2213,    bool _2214) { mosek::fusion::p_PSDVariable::_get_impl(this)->set_values(_2212,_2213,_2214); }void mosek::fusion::p_PSDVariable::set_values( std::shared_ptr< monty::ndarray< long long,1 > > _2212,std::shared_ptr< monty::ndarray< double,1 > > _2213,bool _2214){ }void mosek::fusion::PSDVariable::values  ( long long _2215,    std::shared_ptr< monty::ndarray< int,1 > > _2216,    std::shared_ptr< monty::ndarray< long long,1 > > _2217,    int _2218,    std::shared_ptr< monty::ndarray< double,1 > > _2219,    bool _2220) { mosek::fusion::p_PSDVariable::_get_impl(this)->values(_2215,_2216,_2217,_2218,_2219,_2220); }void mosek::fusion::p_PSDVariable::values( long long _2215,std::shared_ptr< monty::ndarray< int,1 > > _2216,std::shared_ptr< monty::ndarray< long long,1 > > _2217,int _2218,std::shared_ptr< monty::ndarray< double,1 > > _2219,bool _2220){ long long _2221 = (long long)1; int _2222 = (int)((_2217)->size(0)); monty::rc_ptr< ::mosek::fusion::IndexCounter > _2223 = ::mosek::fusion::p_IndexCounter::_new_IndexCounter(_2215,_2216,_2217); std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > _2224 = ([&]() -> std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > { if ( _2220) return (mosek::fusion::p_Model::_get_impl(model.get())->getSolution_barx(::mosek::fusion::SolutionType::Default)); else return (mosek::fusion::p_Model::_get_impl(model.get())->getSolution_bars(::mosek::fusion::SolutionType::Default)); })(); int _2225 = (conesize * conesize); int _8200 = (int)0; int _8201 = _2222; for (int _2226 = _8200;_2226<_8201;++_2226){ (_2221 = (_2221 * ((*_2216)(_2226)))); }long long _8202 = (long long)0; long long _8203 = _2221; for (long long _2227 = _8202;_2227<_8203;++_2227){ { long long _2228 = (_2223->get() / _2225); long long _2229 = (_2223->get() - (_2228 * _2225)); long long _2230 = (_2229 / conesize); long long _2231 = (_2229 - (_2230 * conesize)); if ((_2231 > _2230)){ (((*_2219)(_2227)) = ((*((*_2224)(((long long)coneidx + _2228))))((((_2230 * conesize) + _2231) - ((_2230 * (_2230 + (int)1)) / (int)2))))); }else { (((*_2219)(_2227)) = ((*((*_2224)(((long long)coneidx + _2228))))((((_2231 * conesize) + _2230) - ((_2231 * (_2231 + (int)1)) / (int)2))))); }}_2223->inc(); }}void mosek::fusion::PSDVariable::values  ( std::shared_ptr< monty::ndarray< long long,1 > > _2232,    int _2233,    std::shared_ptr< monty::ndarray< double,1 > > _2234,    bool _2235) { mosek::fusion::p_PSDVariable::_get_impl(this)->values(_2232,_2233,_2234,_2235); }void mosek::fusion::p_PSDVariable::values( std::shared_ptr< monty::ndarray< long long,1 > > _2232,int _2233,std::shared_ptr< monty::ndarray< double,1 > > _2234,bool _2235){ std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > _2236 = ([&]() -> std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > { if ( _2235) return (mosek::fusion::p_Model::_get_impl(model.get())->getSolution_barx(::mosek::fusion::SolutionType::Default)); else return (mosek::fusion::p_Model::_get_impl(model.get())->getSolution_bars(::mosek::fusion::SolutionType::Default)); })(); int _2237 = (conesize * conesize); int _8204 = (int)0; int _8205 = (int)((_2232)->size(0)); for (int _2238 = _8204;_2238<_8205;++_2238){ long long _2239 = (((*_2232)(_2238)) / _2237); long long _2240 = (((*_2232)(_2238)) - (_2239 * _2237)); long long _2241 = (_2240 / conesize); long long _2242 = (_2240 - (_2241 * conesize)); if ((_2242 > _2241)){ (((*_2234)(_2238)) = ((*((*_2236)(((long long)coneidx + _2239))))((((_2241 * conesize) + _2242) - ((_2241 * (_2241 + (int)1)) / (int)2))))); }else { (((*_2234)(_2238)) = ((*((*_2236)(((long long)coneidx + _2239))))((((_2242 * conesize) + _2241) - ((_2242 * (_2242 + (int)1)) / (int)2))))); }}}void mosek::fusion::PSDVariable::make_continuous  ( std::shared_ptr< monty::ndarray< long long,1 > > _2243) { mosek::fusion::p_PSDVariable::_get_impl(this)->make_continuous(_2243); }void mosek::fusion::p_PSDVariable::make_continuous( std::shared_ptr< monty::ndarray< long long,1 > > _2243){ }void mosek::fusion::PSDVariable::make_integer  ( std::shared_ptr< monty::ndarray< long long,1 > > _2244) { mosek::fusion::p_PSDVariable::_get_impl(this)->make_integer(_2244); }void mosek::fusion::p_PSDVariable::make_integer( std::shared_ptr< monty::ndarray< long long,1 > > _2244){ throw ::mosek::fusion::UnimplementedError(std::string ("Cannot make PSDVariable elements integer"));}monty::rc_ptr< ::mosek::fusion::ModelVariable > mosek::fusion::p_PSDVariable::clone( monty::rc_ptr< ::mosek::fusion::Model > _2245){ return ::mosek::fusion::p_PSDVariable::_new_PSDVariable(_pubthis,_2245); }void mosek::fusion::p_PSDVariable::destroy(){}void mosek::fusion::PSDVariable::destroy() { mosek::fusion::p_PSDVariable::_get_impl(this)->destroy(); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::PSDVariable::asExpr()
{ return mosek::fusion::BaseVariable::asExpr(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::PSDVariable::slice(int _2610,int _2611)
{ return mosek::fusion::ModelVariable::slice(_2610,_2611); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::PSDVariable::pick(std::shared_ptr< monty::ndarray< int,2 > > _2737)
{ return mosek::fusion::BaseVariable::pick(_2737); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::PSDVariable::pick(std::shared_ptr< monty::ndarray< int,1 > > _2740)
{ return mosek::fusion::BaseVariable::pick(_2740); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::PSDVariable::antidiag()
{ return mosek::fusion::BaseVariable::antidiag(); }
void mosek::fusion::PSDVariable::makeContinuous()
{ mosek::fusion::BaseVariable::makeContinuous(); }
monty::rc_ptr< ::mosek::fusion::Set > mosek::fusion::PSDVariable::shape()
{ return mosek::fusion::BaseVariable::shape(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::PSDVariable::pick(std::shared_ptr< monty::ndarray< int,1 > > _2730,std::shared_ptr< monty::ndarray< int,1 > > _2731,std::shared_ptr< monty::ndarray< int,1 > > _2732)
{ return mosek::fusion::BaseVariable::pick(_2730,_2731,_2732); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::PSDVariable::index(int _2729)
{ return mosek::fusion::BaseVariable::index(_2729); }
void mosek::fusion::PSDVariable::makeInteger()
{ mosek::fusion::BaseVariable::makeInteger(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::PSDVariable::index(int _2723,int _2724,int _2725)
{ return mosek::fusion::BaseVariable::index(_2723,_2724,_2725); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::PSDVariable::diag()
{ return mosek::fusion::BaseVariable::diag(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::PSDVariable::index(int _2726,int _2727)
{ return mosek::fusion::BaseVariable::index(_2726,_2727); }
monty::rc_ptr< ::mosek::fusion::Set > mosek::fusion::PSDVariable::getShape()
{ return mosek::fusion::BaseVariable::getShape(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::PSDVariable::transpose()
{ return mosek::fusion::BaseVariable::transpose(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::PSDVariable::index(std::shared_ptr< monty::ndarray< int,1 > > _2728)
{ return mosek::fusion::BaseVariable::index(_2728); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::PSDVariable::pick(std::shared_ptr< monty::ndarray< int,1 > > _2734,std::shared_ptr< monty::ndarray< int,1 > > _2735)
{ return mosek::fusion::BaseVariable::pick(_2734,_2735); }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::PSDVariable::level()
{ return mosek::fusion::BaseVariable::level(); }
monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::PSDVariable::getModel()
{ return mosek::fusion::BaseVariable::getModel(); }
void mosek::fusion::PSDVariable::setLevel(std::shared_ptr< monty::ndarray< double,1 > > _2714)
{ mosek::fusion::BaseVariable::setLevel(_2714); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::PSDVariable::diag(int _2743)
{ return mosek::fusion::BaseVariable::diag(_2743); }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::PSDVariable::dual()
{ return mosek::fusion::BaseVariable::dual(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::PSDVariable::slice(std::shared_ptr< monty::ndarray< int,1 > > _2603,std::shared_ptr< monty::ndarray< int,1 > > _2604)
{ return mosek::fusion::ModelVariable::slice(_2603,_2604); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::PSDVariable::antidiag(int _2742)
{ return mosek::fusion::BaseVariable::antidiag(_2742); }
long long mosek::fusion::PSDVariable::size()
{ return mosek::fusion::BaseVariable::size(); }
void mosek::fusion::PSDVariable::values(int _2697,std::shared_ptr< monty::ndarray< double,1 > > _2698,bool _2699)
{ mosek::fusion::BaseVariable::values(_2697,_2698,_2699); }
mosek::fusion::SymLinearVariable::SymLinearVariable(mosek::fusion::p_SymLinearVariable *_impl) : mosek::fusion::ModelVariable(_impl) { /*std::cout << "SymLinearVariable()" << this << std::endl; */ }mosek::fusion::SymLinearVariable::~SymLinearVariable() {  /* std::cout << "~SymLinearVariable()" << this << std::endl << std::flush; */ }mosek::fusion::p_SymLinearVariable::p_SymLinearVariable  (::mosek::fusion::SymLinearVariable * _pubthis) :     mosek::fusion::p_ModelVariable(_pubthis),    _pubthis(_pubthis){}mosek::fusion::SymLinearVariable::t mosek::fusion::p_SymLinearVariable::_new_SymLinearVariable  (monty::rc_ptr< ::mosek::fusion::SymLinearVariable > _2246,    monty::rc_ptr< ::mosek::fusion::Model > _2247){ return new mosek::fusion::SymLinearVariable(_2246,_2247); }mosek::fusion::SymLinearVariable::SymLinearVariable  (monty::rc_ptr< ::mosek::fusion::SymLinearVariable > _2246,    monty::rc_ptr< ::mosek::fusion::Model > _2247) :    SymLinearVariable(new mosek::fusion::p_SymLinearVariable(this)){ mosek::fusion::p_SymLinearVariable::_get_impl(this)->_initialize(_2246,_2247); }void mosek::fusion::p_SymLinearVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::SymLinearVariable > _2246,    monty::rc_ptr< ::mosek::fusion::Model > _2247){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_ModelVariable::_initialize(_2246,_2247);(nativeidxs = ([&]() -> std::shared_ptr< monty::ndarray< int,1 > > { if ( mosek::fusion::p_SymLinearVariable::_get_impl(_2246)->nativeidxs) return (([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _8206; for (int _2248=(int)0, _8207=(int)((mosek::fusion::p_SymLinearVariable::_get_impl(_2246)->nativeidxs)->size(0)); _2248 < _8207;++_2248)_8206.push_back(((*mosek::fusion::p_SymLinearVariable::_get_impl(_2246)->nativeidxs)(_2248))); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8206.size()),_8206.begin(),_8206.end())); })()); else return (nullptr); })()); (idxmap = ([&]() -> monty::rc_ptr< ::mosek::fusion::Utils::IntMap > { if ( mosek::fusion::p_SymLinearVariable::_get_impl(_2246)->idxmap) return (mosek::fusion::Utils::p_IntMap::_get_impl(mosek::fusion::p_SymLinearVariable::_get_impl(_2246)->idxmap.get())->clone()); else return (nullptr); })()); (dom = mosek::fusion::p_SymLinearVariable::_get_impl(_2246)->dom); (mosek::fusion::p_SymLinearVariable::_get_impl(_pubthis)->dim = mosek::fusion::p_SymLinearVariable::_get_impl(_2246)->dim); (names_flushed = mosek::fusion::p_SymLinearVariable::_get_impl(_2246)->names_flushed); }}mosek::fusion::SymLinearVariable::t mosek::fusion::p_SymLinearVariable::_new_SymLinearVariable  (monty::rc_ptr< ::mosek::fusion::Model > _2249,    const std::string &  _2250,    monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > _2251,    int _2252,    std::shared_ptr< monty::ndarray< int,1 > > _2253,    long long _2254){ return new mosek::fusion::SymLinearVariable(_2249,_2250,_2251,_2252,_2253,_2254); }mosek::fusion::SymLinearVariable::SymLinearVariable  (monty::rc_ptr< ::mosek::fusion::Model > _2249,    const std::string &  _2250,    monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > _2251,    int _2252,    std::shared_ptr< monty::ndarray< int,1 > > _2253,    long long _2254) :    SymLinearVariable(new mosek::fusion::p_SymLinearVariable(this)){ mosek::fusion::p_SymLinearVariable::_get_impl(this)->_initialize(_2249,_2250,_2251,_2252,_2253,_2254); }void mosek::fusion::p_SymLinearVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _2249,    const std::string &  _2250,    monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > _2251,    int _2252,    std::shared_ptr< monty::ndarray< int,1 > > _2253,    long long _2254){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_ModelVariable::_initialize(_2249,_2250,::mosek::fusion::p_Set::make(_2252,_2252),_2254);(mosek::fusion::p_SymLinearVariable::_get_impl(_pubthis)->nativeidxs = _2253); (idxmap = ([&]() -> monty::rc_ptr< ::mosek::fusion::Utils::IntMap > { if ( ! mosek::fusion::p_SymLinearVariable::_get_impl(_pubthis)->nativeidxs) return (::mosek::fusion::Utils::p_IntMap::_new_IntMap()); else return (nullptr); })()); (mosek::fusion::p_SymLinearVariable::_get_impl(_pubthis)->dom = _2251); (mosek::fusion::p_SymLinearVariable::_get_impl(_pubthis)->dim = _2252); (names_flushed = false); }}std::string mosek::fusion::SymLinearVariable::toString  ( ) { return mosek::fusion::p_SymLinearVariable::_get_impl(this)->toString(); }std::string mosek::fusion::p_SymLinearVariable::toString( ){ monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2255 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer(); mosek::fusion::Utils::p_StringBuffer::_get_impl(_2255.get())->a(std::string ("SymLinearVariable( (")); if (((int)((name).size()) > (int)0)){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_2255.get())->a(std::string ("'")).get())->a(name).get())->a(std::string ("',")); }else {}mosek::fusion::Utils::p_StringBuffer::_get_impl(_2255.get())->a(shape_p->dim((int)0)); int _8208 = (int)1; int _8209 = mosek::fusion::p_Set::_get_impl(shape_p)->nd; for (int _2256 = _8208;_2256<_8209;++_2256){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_2255.get())->a(std::string (",")).get())->a(shape_p->dim(_2256)); }mosek::fusion::Utils::p_StringBuffer::_get_impl(_2255.get())->a(std::string (") )")); return mosek::fusion::Utils::p_StringBuffer::_get_impl(_2255.get())->toString(); }void mosek::fusion::p_SymLinearVariable::flushNames( ){ if (((! names_flushed) && ((int)((name).size()) > (int)0))){ if (nativeidxs){ int _8210 = (int)0; int _8211 = dim; for (int _2257 = _8210;_2257<_8211;++_2257){ int _8212 = (int)0; int _8213 = (_2257 + (int)1); for (int _2258 = _8212;_2258<_8213;++_2258){ int _2259 = (((_2257 * dim) - ((_2257 * (_2257 + (int)1)) / (int)2)) + _2258); int _2260 = ((_2257 * dim) + _2258); mosek::fusion::p_Model::_get_impl(model.get())->varname(((*nativeidxs)(_2259)),([&]() -> std::string { if ( ((int)((name).size()) == (int)0)) return (std::string ("")); else return (mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer().get())->a(name).get())->a(std::string ("[")).get())->a(shape_p->getname((long long)(_2260))).get())->a(std::string ("]")).get())->toString()); })()); }}}else { int _8214 = (int)0; int _8215 = dim; for (int _2261 = _8214;_2261<_8215;++_2261){ int _8216 = (int)0; int _8217 = (_2261 + (int)1); for (int _2262 = _8216;_2262<_8217;++_2262){ int _2263 = ((_2261 * dim) + _2262); if (mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->hasItem((long long)(_2263))){ mosek::fusion::p_Model::_get_impl(model.get())->varname(((*nativeidxs)(mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->getItem((long long)(_2263)))),([&]() -> std::string { if ( ((int)((name).size()) == (int)0)) return (std::string ("")); else return (mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer().get())->a(name).get())->a(std::string ("[")).get())->a(shape_p->getname((long long)(_2263))).get())->a(std::string ("]")).get())->toString()); })()); }else {}}}}(names_flushed = true); }else {}}void mosek::fusion::SymLinearVariable::inst  ( std::shared_ptr< monty::ndarray< long long,1 > > _2264,    int _2265,    int _2266,    long long _2267,    long long _2268,    std::shared_ptr< monty::ndarray< int,1 > > _2269,    std::shared_ptr< monty::ndarray< int,1 > > _2270,    std::shared_ptr< monty::ndarray< int,1 > > _2271) { mosek::fusion::p_SymLinearVariable::_get_impl(this)->inst(_2264,_2265,_2266,_2267,_2268,_2269,_2270,_2271); }void mosek::fusion::p_SymLinearVariable::inst( std::shared_ptr< monty::ndarray< long long,1 > > _2264,int _2265,int _2266,long long _2267,long long _2268,std::shared_ptr< monty::ndarray< int,1 > > _2269,std::shared_ptr< monty::ndarray< int,1 > > _2270,std::shared_ptr< monty::ndarray< int,1 > > _2271){ if (nativeidxs){ int _8218 = _2265; int _8219 = _2266; for (int _2272 = _8218;_2272<_8219;++_2272){ (((*_2269)(((_2268 + _2272) - _2265))) = ((*nativeidxs)(tril_lin_idx((((*_2264)(_2272)) - _2267))))); }}else { int _8220 = _2265; int _8221 = _2266; for (int _2273 = _8220;_2273<_8221;++_2273){ long long _2274 = tril_lin_idx((((*_2264)(_2273)) - _2267)); long long _2275 = tril_idx((((*_2264)(_2273)) - _2267)); if ((! mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->hasItem(_2275))){ int _2276 = mosek::fusion::p_Model::_get_impl(model.get())->append_linearvar(::mosek::fusion::ModelVariable::t(_pubthis),_2275,mosek::fusion::p_SymmetricLinearDomain::_get_impl(dom)->key,mosek::fusion::p_SymmetricLinearDomain::_get_impl(dom.get())->get_rhs_item(_2274)); mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->setItem(_2275,_2276); (((*_2269)(((_2268 + _2273) - _2265))) = _2276); (names_flushed = false); }else { (((*_2269)(((_2268 + _2273) - _2265))) = mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->getItem(_2275)); }}}}void mosek::fusion::SymLinearVariable::inst  ( long long _2277,    long long _2278,    std::shared_ptr< monty::ndarray< int,1 > > _2279,    std::shared_ptr< monty::ndarray< int,1 > > _2280,    std::shared_ptr< monty::ndarray< int,1 > > _2281) { mosek::fusion::p_SymLinearVariable::_get_impl(this)->inst(_2277,_2278,_2279,_2280,_2281); }void mosek::fusion::p_SymLinearVariable::inst( long long _2277,long long _2278,std::shared_ptr< monty::ndarray< int,1 > > _2279,std::shared_ptr< monty::ndarray< int,1 > > _2280,std::shared_ptr< monty::ndarray< int,1 > > _2281){ long long _2282 = tril_lin_idx(_2277); long long _2283 = tril_idx(_2277); if (nativeidxs){ (((*_2279)(_2278)) = ((*nativeidxs)(_2282))); }else { if ((! mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->hasItem(_2283))){ int _2284 = mosek::fusion::p_Model::_get_impl(model.get())->append_linearvar(::mosek::fusion::ModelVariable::t(_pubthis),_2283,mosek::fusion::p_SymmetricLinearDomain::_get_impl(dom)->key,mosek::fusion::p_SymmetricLinearDomain::_get_impl(dom.get())->get_rhs_item(_2283)); mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->setItem(_2282,_2284); (((*_2279)(_2278)) = _2284); }else { (((*_2279)(_2278)) = mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->getItem(_2282)); }}}void mosek::fusion::p_SymLinearVariable::dual_values( long long _2285,std::shared_ptr< monty::ndarray< int,1 > > _2286,std::shared_ptr< monty::ndarray< long long,1 > > _2287,int _2288,std::shared_ptr< monty::ndarray< double,1 > > _2289){ long long _2290 = (long long)1; int _2291 = (int)((_2287)->size(0)); monty::rc_ptr< ::mosek::fusion::IndexCounter > _2292 = ::mosek::fusion::p_IndexCounter::_new_IndexCounter(_2285,_2286,_2287); std::shared_ptr< monty::ndarray< double,1 > > _2293 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_slx(::mosek::fusion::SolutionType::Default); std::shared_ptr< monty::ndarray< double,1 > > _2294 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_sux(::mosek::fusion::SolutionType::Default); int _8222 = (int)0; int _8223 = _2291; for (int _2295 = _8222;_2295<_8223;++_2295){ (_2290 = (_2290 * ((*_2286)(_2295)))); }if (nativeidxs){ long long _8224 = (long long)0; long long _8225 = _2290; for (long long _2296 = _8224;_2296<_8225;++_2296){ int _2297 = ((*nativeidxs)(tril_lin_idx(_2292->get()))); (((*_2289)((_2296 + _2288))) = (((*_2293)(_2297)) - ((*_2294)(_2297)))); _2292->inc(); }}else { mosek::fusion::SolutionStatus _2298 = model->getPrimalSolutionStatus(); int _8226 = (int)0; int _8227 = (int)_2290; for (int _2299 = _8226;_2299<_8227;++_2299){ if (mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->hasItem(tril_lin_idx(_2292->get()))){ int _2300 = mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->getItem(_2292->get()); (((*_2289)((_2288 + _2299))) = (((*_2293)(_2300)) - ((*_2294)(_2300)))); }else { (((*_2289)((_2288 + _2299))) = 0.0); }_2292->inc(); }}}void mosek::fusion::p_SymLinearVariable::dual_values( std::shared_ptr< monty::ndarray< long long,1 > > _2301,int _2302,std::shared_ptr< monty::ndarray< double,1 > > _2303){ std::shared_ptr< monty::ndarray< double,1 > > _2304 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_slx(::mosek::fusion::SolutionType::Default); std::shared_ptr< monty::ndarray< double,1 > > _2305 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_sux(::mosek::fusion::SolutionType::Default); if (nativeidxs){ int _8228 = (int)0; int _8229 = (int)((_2301)->size(0)); for (int _2306 = _8228;_2306<_8229;++_2306){ int _2307 = ((*nativeidxs)(tril_lin_idx(((*_2301)(_2306))))); (((*_2303)((_2302 + _2306))) = (((*_2304)(_2307)) - ((*_2305)(_2307)))); }}else { mosek::fusion::SolutionStatus _2308 = model->getPrimalSolutionStatus(); int _8230 = (int)0; int _8231 = (int)((_2301)->size(0)); for (int _2309 = _8230;_2309<_8231;++_2309){ if (mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->hasItem(((*_2301)(_2309)))){ int _2310 = mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->getItem(((*_2301)(_2309))); (((*_2303)((_2302 + _2309))) = (((*_2304)(_2310)) - ((*_2305)(_2310)))); }else { (((*_2303)((_2302 + _2309))) = 0.0); }}}}void mosek::fusion::SymLinearVariable::set_values  ( long long _2311,    std::shared_ptr< monty::ndarray< int,1 > > _2312,    std::shared_ptr< monty::ndarray< long long,1 > > _2313,    int _2314,    std::shared_ptr< monty::ndarray< double,1 > > _2315,    bool _2316) { mosek::fusion::p_SymLinearVariable::_get_impl(this)->set_values(_2311,_2312,_2313,_2314,_2315,_2316); }void mosek::fusion::p_SymLinearVariable::set_values( long long _2311,std::shared_ptr< monty::ndarray< int,1 > > _2312,std::shared_ptr< monty::ndarray< long long,1 > > _2313,int _2314,std::shared_ptr< monty::ndarray< double,1 > > _2315,bool _2316){ if (_2316){ long long _2317 = (long long)1; int _2318 = (int)((_2313)->size(0)); monty::rc_ptr< ::mosek::fusion::IndexCounter > _2319 = ::mosek::fusion::p_IndexCounter::_new_IndexCounter(_2311,_2312,_2313); int _8232 = (int)0; int _8233 = _2318; for (int _2320 = _8232;_2320<_8233;++_2320){ (_2317 = (_2317 * ((*_2312)(_2320)))); }if (nativeidxs){ int _2321 = (int)((nativeidxs)->size(0)); std::shared_ptr< monty::ndarray< int,1 > > _2322 = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _8234; for (long long _2323=(int)0, _8235=_2317; _2323 < _8235;++_2323)_8234.push_back(((*nativeidxs)(tril_lin_idx(_2319->next())))); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8234.size()),_8234.begin(),_8234.end())); })(); std::shared_ptr< monty::ndarray< double,1 > > _2324 = ([&]() -> std::shared_ptr< monty::ndarray< double,1 > > { if ( (_2314 > (int)0)) return (([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _8236; for (int _2325=(int)0, _8237=_2321; _2325 < _8237;++_2325)_8236.push_back(((*_2315)((_2314 + _2325)))); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8236.size()),_8236.begin(),_8236.end())); })()); else return (_2315); })(); mosek::fusion::p_Model::_get_impl(model.get())->setSolution_xx(_2322,_2324); }else { std::shared_ptr< monty::ndarray< int,1 > > _2326 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2317))); int _8238 = (int)0; long long _8239 = _2317; for (long long _2327 = _8238;_2327<_8239;++_2327){ _pubthis->inst(_2319->next(),_2327,_2326,std::shared_ptr< monty::ndarray< int,1 > >(nullptr),std::shared_ptr< monty::ndarray< int,1 > >(nullptr)); }std::shared_ptr< monty::ndarray< double,1 > > _2328 = ([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _8240; for (long long _2329=(int)0, _8241=_2317; _2329 < _8241;++_2329)_8240.push_back(((*_2315)((_2314 + _2329)))); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8240.size()),_8240.begin(),_8240.end())); })(); mosek::fusion::p_Model::_get_impl(model.get())->setSolution_xx(_2326,_2328); }}else { }}void mosek::fusion::SymLinearVariable::set_values  ( std::shared_ptr< monty::ndarray< long long,1 > > _2330,    std::shared_ptr< monty::ndarray< double,1 > > _2331,    bool _2332) { mosek::fusion::p_SymLinearVariable::_get_impl(this)->set_values(_2330,_2331,_2332); }void mosek::fusion::p_SymLinearVariable::set_values( std::shared_ptr< monty::ndarray< long long,1 > > _2330,std::shared_ptr< monty::ndarray< double,1 > > _2331,bool _2332){ if (_2332){ if (nativeidxs){ int _2333 = (int)((nativeidxs)->size(0)); std::shared_ptr< monty::ndarray< int,1 > > _2334 = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _8242; for (int _2335=(int)0, _8243=_2333; _2335 < _8243;++_2335)_8242.push_back(((*nativeidxs)(tril_lin_idx(((*_2330)(_2335)))))); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8242.size()),_8242.begin(),_8242.end())); })(); std::shared_ptr< monty::ndarray< double,1 > > _2336 = ([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _8244; for (int _2337=(int)0, _8245=_2333; _2337 < _8245;++_2337)_8244.push_back(((*_2331)(_2337))); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8244.size()),_8244.begin(),_8244.end())); })(); mosek::fusion::p_Model::_get_impl(model.get())->setSolution_xx(_2334,_2336); }else { std::shared_ptr< monty::ndarray< int,1 > > _2338 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)((_2330)->size(0))))); int _8246 = (int)0; int _8247 = (int)((_2330)->size(0)); for (int _2339 = _8246;_2339<_8247;++_2339){ _pubthis->inst(((*_2330)(_2339)),(long long)(_2339),_2338,std::shared_ptr< monty::ndarray< int,1 > >(nullptr),std::shared_ptr< monty::ndarray< int,1 > >(nullptr)); }mosek::fusion::p_Model::_get_impl(model.get())->setSolution_xx(_2338,_2331); }}else { }}void mosek::fusion::SymLinearVariable::values  ( long long _2340,    std::shared_ptr< monty::ndarray< int,1 > > _2341,    std::shared_ptr< monty::ndarray< long long,1 > > _2342,    int _2343,    std::shared_ptr< monty::ndarray< double,1 > > _2344,    bool _2345) { mosek::fusion::p_SymLinearVariable::_get_impl(this)->values(_2340,_2341,_2342,_2343,_2344,_2345); }void mosek::fusion::p_SymLinearVariable::values( long long _2340,std::shared_ptr< monty::ndarray< int,1 > > _2341,std::shared_ptr< monty::ndarray< long long,1 > > _2342,int _2343,std::shared_ptr< monty::ndarray< double,1 > > _2344,bool _2345){ if (_2345){ long long _2346 = (long long)1; int _2347 = (int)((_2342)->size(0)); monty::rc_ptr< ::mosek::fusion::IndexCounter > _2348 = ::mosek::fusion::p_IndexCounter::_new_IndexCounter(_2340,_2341,_2342); std::shared_ptr< monty::ndarray< double,1 > > _2349 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_xx(::mosek::fusion::SolutionType::Default); int _8248 = (int)0; int _8249 = _2347; for (int _2350 = _8248;_2350<_8249;++_2350){ (_2346 *= ((*_2341)(_2350))); }if (nativeidxs){ long long _8250 = (long long)0; long long _8251 = _2346; for (long long _2351 = _8250;_2351<_8251;++_2351){ (((*_2344)((_2351 + _2343))) = ((*_2349)(((*nativeidxs)(tril_lin_idx(_2348->get())))))); _2348->inc(); }}else { mosek::fusion::SolutionStatus _2352 = model->getPrimalSolutionStatus(); if (((_2352 == ::mosek::fusion::SolutionStatus::Optimal) || ((_2352 == ::mosek::fusion::SolutionStatus::NearOptimal) || ((_2352 == ::mosek::fusion::SolutionStatus::Feasible) || (_2352 == ::mosek::fusion::SolutionStatus::NearFeasible))))){ int _8252 = (int)0; int _8253 = (int)_2346; for (int _2353 = _8252;_2353<_8253;++_2353){ if (mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->hasItem(_2348->get())){ (((*_2344)((_2343 + _2353))) = ((*_2349)(mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->getItem(_2348->get())))); }else { (((*_2344)((_2343 + _2353))) = mosek::fusion::p_SymmetricLinearDomain::_get_impl(dom.get())->get_rhs_item(tril_idx(_2348->get()))); }_2348->inc(); }}else { int _8254 = (int)0; int _8255 = (int)_2346; for (int _2354 = _8254;_2354<_8255;++_2354){ if (mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->hasItem(_2348->get())){ (((*_2344)((_2343 + _2354))) = ((*_2349)(mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->getItem(_2348->get())))); }else { (((*_2344)((_2343 + _2354))) = 0.0); }_2348->inc(); }}}}else { dual_values(_2340,_2341,_2342,_2343,_2344); }}void mosek::fusion::SymLinearVariable::values  ( std::shared_ptr< monty::ndarray< long long,1 > > _2355,    int _2356,    std::shared_ptr< monty::ndarray< double,1 > > _2357,    bool _2358) { mosek::fusion::p_SymLinearVariable::_get_impl(this)->values(_2355,_2356,_2357,_2358); }void mosek::fusion::p_SymLinearVariable::values( std::shared_ptr< monty::ndarray< long long,1 > > _2355,int _2356,std::shared_ptr< monty::ndarray< double,1 > > _2357,bool _2358){ if (_2358){ std::shared_ptr< monty::ndarray< double,1 > > _2359 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_xx(::mosek::fusion::SolutionType::Default); if (nativeidxs){ int _8256 = (int)0; int _8257 = (int)((_2355)->size(0)); for (int _2360 = _8256;_2360<_8257;++_2360){ (((*_2357)((_2356 + _2360))) = ((*_2359)(((*nativeidxs)(tril_lin_idx(((*_2355)(_2360)))))))); }}else { mosek::fusion::SolutionStatus _2361 = model->getPrimalSolutionStatus(); if (((_2361 == ::mosek::fusion::SolutionStatus::Optimal) || ((_2361 == ::mosek::fusion::SolutionStatus::NearOptimal) || ((_2361 == ::mosek::fusion::SolutionStatus::Feasible) || (_2361 == ::mosek::fusion::SolutionStatus::NearFeasible))))){ int _8258 = (int)0; int _8259 = (int)((_2355)->size(0)); for (int _2362 = _8258;_2362<_8259;++_2362){ long long _2363 = ((*_2355)(_2362)); if (mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->hasItem(_2363)){ (((*_2357)((_2356 + _2362))) = ((*_2359)(mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->getItem(_2363)))); }else { (((*_2357)((_2356 + _2362))) = mosek::fusion::p_SymmetricLinearDomain::_get_impl(dom.get())->get_rhs_item(tril_idx(_2363))); }}}else { int _8260 = (int)0; int _8261 = (int)((_2355)->size(0)); for (int _2364 = _8260;_2364<_8261;++_2364){ long long _2365 = ((*_2355)(_2364)); if (mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->hasItem(_2365)){ (((*_2357)((_2356 + _2364))) = ((*_2359)(mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->getItem(tril_idx(_2365))))); }else { (((*_2357)((_2356 + _2364))) = 0.0); }}}}}else { dual_values(_2355,_2356,_2357); }}void mosek::fusion::SymLinearVariable::make_continuous  ( std::shared_ptr< monty::ndarray< long long,1 > > _2366) { mosek::fusion::p_SymLinearVariable::_get_impl(this)->make_continuous(_2366); }void mosek::fusion::p_SymLinearVariable::make_continuous( std::shared_ptr< monty::ndarray< long long,1 > > _2366){ if (nativeidxs){ mosek::fusion::p_Model::_get_impl(_pubthis->getModel().get())->task_var_putcontlist(([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _8262; for (int _2367=(int)0, _8263=(int)((_2366)->size(0)); _2367 < _8263;++_2367)_8262.push_back(((*nativeidxs)(((*_2366)(_2367))))); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8262.size()),_8262.begin(),_8262.end())); })()); }else { std::shared_ptr< monty::ndarray< int,1 > > _2368 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)((_2366)->size(0))))); _pubthis->inst(_2366,(int)0,(int)((_2366)->size(0)),(long long)((int)0),(long long)((int)0),_2368,std::shared_ptr< monty::ndarray< int,1 > >(nullptr),std::shared_ptr< monty::ndarray< int,1 > >(nullptr)); mosek::fusion::p_Model::_get_impl(_pubthis->getModel().get())->task_var_putcontlist(_2368); }}void mosek::fusion::SymLinearVariable::make_integer  ( std::shared_ptr< monty::ndarray< long long,1 > > _2369) { mosek::fusion::p_SymLinearVariable::_get_impl(this)->make_integer(_2369); }void mosek::fusion::p_SymLinearVariable::make_integer( std::shared_ptr< monty::ndarray< long long,1 > > _2369){ if (nativeidxs){ mosek::fusion::p_Model::_get_impl(_pubthis->getModel().get())->task_var_putintlist(([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _8264; for (int _2370=(int)0, _8265=(int)((_2369)->size(0)); _2370 < _8265;++_2370)_8264.push_back(((*nativeidxs)(((*_2369)(_2370))))); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8264.size()),_8264.begin(),_8264.end())); })()); }else { std::shared_ptr< monty::ndarray< int,1 > > _2371 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)((_2369)->size(0))))); _pubthis->inst(_2369,(int)0,(int)((_2369)->size(0)),(long long)((int)0),(long long)((int)0),_2371,std::shared_ptr< monty::ndarray< int,1 > >(nullptr),std::shared_ptr< monty::ndarray< int,1 > >(nullptr)); mosek::fusion::p_Model::_get_impl(_pubthis->getModel().get())->task_var_putintlist(_2371); }}long long mosek::fusion::p_SymLinearVariable::tril_idx( long long _2372){ long long _2373 = (_2372 / dim); long long _2374 = (_2372 % dim); if ((_2374 > _2373)){ return ((_2374 * dim) + _2373); }else { return _2372; }}long long mosek::fusion::p_SymLinearVariable::tril_lin_idx( long long _2375){ long long _2376 = (_2375 / dim); long long _2377 = (_2375 % dim); if ((_2377 > _2376)){ return (((_2377 * (_2377 + (int)1)) / (int)2) + _2376); }else { return (((_2376 * (_2376 + (int)1)) / (int)2) + _2377); }}monty::rc_ptr< ::mosek::fusion::ModelVariable > mosek::fusion::p_SymLinearVariable::clone( monty::rc_ptr< ::mosek::fusion::Model > _2378){ return ::mosek::fusion::p_SymLinearVariable::_new_SymLinearVariable(_pubthis,_2378); }void mosek::fusion::p_SymLinearVariable::destroy(){dom.reset();nativeidxs.reset();idxmap.reset();}void mosek::fusion::SymLinearVariable::destroy() { mosek::fusion::p_SymLinearVariable::_get_impl(this)->destroy(); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::SymLinearVariable::asExpr()
{ return mosek::fusion::BaseVariable::asExpr(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::SymLinearVariable::slice(int _2610,int _2611)
{ return mosek::fusion::ModelVariable::slice(_2610,_2611); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::SymLinearVariable::pick(std::shared_ptr< monty::ndarray< int,2 > > _2737)
{ return mosek::fusion::BaseVariable::pick(_2737); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::SymLinearVariable::pick(std::shared_ptr< monty::ndarray< int,1 > > _2740)
{ return mosek::fusion::BaseVariable::pick(_2740); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::SymLinearVariable::antidiag()
{ return mosek::fusion::BaseVariable::antidiag(); }
void mosek::fusion::SymLinearVariable::makeContinuous()
{ mosek::fusion::BaseVariable::makeContinuous(); }
monty::rc_ptr< ::mosek::fusion::Set > mosek::fusion::SymLinearVariable::shape()
{ return mosek::fusion::BaseVariable::shape(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::SymLinearVariable::pick(std::shared_ptr< monty::ndarray< int,1 > > _2730,std::shared_ptr< monty::ndarray< int,1 > > _2731,std::shared_ptr< monty::ndarray< int,1 > > _2732)
{ return mosek::fusion::BaseVariable::pick(_2730,_2731,_2732); }
void mosek::fusion::SymLinearVariable::elementName(long long _2601,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2602)
{ mosek::fusion::ModelVariable::elementName(_2601,_2602); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::SymLinearVariable::index(int _2729)
{ return mosek::fusion::BaseVariable::index(_2729); }
void mosek::fusion::SymLinearVariable::makeInteger()
{ mosek::fusion::BaseVariable::makeInteger(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::SymLinearVariable::index(int _2723,int _2724,int _2725)
{ return mosek::fusion::BaseVariable::index(_2723,_2724,_2725); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::SymLinearVariable::diag()
{ return mosek::fusion::BaseVariable::diag(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::SymLinearVariable::index(int _2726,int _2727)
{ return mosek::fusion::BaseVariable::index(_2726,_2727); }
monty::rc_ptr< ::mosek::fusion::Set > mosek::fusion::SymLinearVariable::getShape()
{ return mosek::fusion::BaseVariable::getShape(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::SymLinearVariable::transpose()
{ return mosek::fusion::BaseVariable::transpose(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::SymLinearVariable::index(std::shared_ptr< monty::ndarray< int,1 > > _2728)
{ return mosek::fusion::BaseVariable::index(_2728); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::SymLinearVariable::pick(std::shared_ptr< monty::ndarray< int,1 > > _2734,std::shared_ptr< monty::ndarray< int,1 > > _2735)
{ return mosek::fusion::BaseVariable::pick(_2734,_2735); }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::SymLinearVariable::level()
{ return mosek::fusion::BaseVariable::level(); }
monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::SymLinearVariable::getModel()
{ return mosek::fusion::BaseVariable::getModel(); }
void mosek::fusion::SymLinearVariable::setLevel(std::shared_ptr< monty::ndarray< double,1 > > _2714)
{ mosek::fusion::BaseVariable::setLevel(_2714); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::SymLinearVariable::diag(int _2743)
{ return mosek::fusion::BaseVariable::diag(_2743); }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::SymLinearVariable::dual()
{ return mosek::fusion::BaseVariable::dual(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::SymLinearVariable::slice(std::shared_ptr< monty::ndarray< int,1 > > _2603,std::shared_ptr< monty::ndarray< int,1 > > _2604)
{ return mosek::fusion::ModelVariable::slice(_2603,_2604); }
monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::SymLinearVariable::elementDesc(long long _2665,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2666)
{ return mosek::fusion::BaseVariable::elementDesc(_2665,_2666); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::SymLinearVariable::antidiag(int _2742)
{ return mosek::fusion::BaseVariable::antidiag(_2742); }
long long mosek::fusion::SymLinearVariable::size()
{ return mosek::fusion::BaseVariable::size(); }
void mosek::fusion::SymLinearVariable::values(int _2697,std::shared_ptr< monty::ndarray< double,1 > > _2698,bool _2699)
{ mosek::fusion::BaseVariable::values(_2697,_2698,_2699); }
mosek::fusion::LinearVariable::LinearVariable(mosek::fusion::p_LinearVariable *_impl) : mosek::fusion::ModelVariable(_impl) { /*std::cout << "LinearVariable()" << this << std::endl; */ }mosek::fusion::LinearVariable::~LinearVariable() {  /* std::cout << "~LinearVariable()" << this << std::endl << std::flush; */ }mosek::fusion::p_LinearVariable::p_LinearVariable  (::mosek::fusion::LinearVariable * _pubthis) :     mosek::fusion::p_ModelVariable(_pubthis),    _pubthis(_pubthis){}mosek::fusion::LinearVariable::t mosek::fusion::p_LinearVariable::_new_LinearVariable  (monty::rc_ptr< ::mosek::fusion::LinearVariable > _2379,    monty::rc_ptr< ::mosek::fusion::Model > _2380){ return new mosek::fusion::LinearVariable(_2379,_2380); }mosek::fusion::LinearVariable::LinearVariable  (monty::rc_ptr< ::mosek::fusion::LinearVariable > _2379,    monty::rc_ptr< ::mosek::fusion::Model > _2380) :    LinearVariable(new mosek::fusion::p_LinearVariable(this)){ mosek::fusion::p_LinearVariable::_get_impl(this)->_initialize(_2379,_2380); }void mosek::fusion::p_LinearVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::LinearVariable > _2379,    monty::rc_ptr< ::mosek::fusion::Model > _2380){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_ModelVariable::_initialize(_2379,_2380);(nativeidxs = ([&]() -> std::shared_ptr< monty::ndarray< int,1 > > { if ( mosek::fusion::p_LinearVariable::_get_impl(_2379)->nativeidxs) return (([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _8266; for (int _2381=(int)0, _8267=(int)((mosek::fusion::p_LinearVariable::_get_impl(_2379)->nativeidxs)->size(0)); _2381 < _8267;++_2381)_8266.push_back(((*mosek::fusion::p_LinearVariable::_get_impl(_2379)->nativeidxs)(_2381))); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8266.size()),_8266.begin(),_8266.end())); })()); else return (nullptr); })()); (idxmap = ([&]() -> monty::rc_ptr< ::mosek::fusion::Utils::IntMap > { if ( mosek::fusion::p_LinearVariable::_get_impl(_2379)->idxmap) return (mosek::fusion::Utils::p_IntMap::_get_impl(mosek::fusion::p_LinearVariable::_get_impl(_2379)->idxmap.get())->clone()); else return (nullptr); })()); (dom = mosek::fusion::p_LinearVariable::_get_impl(_2379)->dom); (names_flushed = mosek::fusion::p_LinearVariable::_get_impl(_2379)->names_flushed); }}mosek::fusion::LinearVariable::t mosek::fusion::p_LinearVariable::_new_LinearVariable  (monty::rc_ptr< ::mosek::fusion::Model > _2382,    const std::string &  _2383,    monty::rc_ptr< ::mosek::fusion::LinearDomain > _2384,    monty::rc_ptr< ::mosek::fusion::Set > _2385,    std::shared_ptr< monty::ndarray< int,1 > > _2386,    long long _2387){ return new mosek::fusion::LinearVariable(_2382,_2383,_2384,_2385,_2386,_2387); }mosek::fusion::LinearVariable::LinearVariable  (monty::rc_ptr< ::mosek::fusion::Model > _2382,    const std::string &  _2383,    monty::rc_ptr< ::mosek::fusion::LinearDomain > _2384,    monty::rc_ptr< ::mosek::fusion::Set > _2385,    std::shared_ptr< monty::ndarray< int,1 > > _2386,    long long _2387) :    LinearVariable(new mosek::fusion::p_LinearVariable(this)){ mosek::fusion::p_LinearVariable::_get_impl(this)->_initialize(_2382,_2383,_2384,_2385,_2386,_2387); }void mosek::fusion::p_LinearVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _2382,    const std::string &  _2383,    monty::rc_ptr< ::mosek::fusion::LinearDomain > _2384,    monty::rc_ptr< ::mosek::fusion::Set > _2385,    std::shared_ptr< monty::ndarray< int,1 > > _2386,    long long _2387){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_ModelVariable::_initialize(_2382,_2383,_2385,_2387);(nativeidxs = _2386); if (! _2386){ (idxmap = ::mosek::fusion::Utils::p_IntMap::_new_IntMap()); }else { (idxmap = nullptr); }(dom = _2384); (names_flushed = false); }}monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::LinearVariable::elementDesc  ( long long _2388,    monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2389) { return mosek::fusion::p_LinearVariable::_get_impl(this)->elementDesc(_2388,_2389); }monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::p_LinearVariable::elementDesc( long long _2388,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2389){ _pubthis->elementName(_2388,_2389); mosek::fusion::p_LinearDomain::_get_impl(dom.get())->domainToString(_2388,_2389); return _2389; }void mosek::fusion::LinearVariable::elementName  ( long long _2390,    monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2391) { mosek::fusion::p_LinearVariable::_get_impl(this)->elementName(_2390,_2391); }void mosek::fusion::p_LinearVariable::elementName( long long _2390,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2391){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_2391.get())->a(([&]() -> std::string { if ( ((int)((name).size()) == (int)0)) return (std::string ("_")); else return (name); })()).get())->a(std::string ("[")).get())->a(shape_p->indexToString(_2390)).get())->a(std::string ("] ")); }void mosek::fusion::p_LinearVariable::flushNames( ){ if (((! names_flushed) && ((int)((name).size()) > (int)0))){ if (nativeidxs){ int _8268 = (int)0; int _8269 = (int)((nativeidxs)->size(0)); for (int _2392 = _8268;_2392<_8269;++_2392){ mosek::fusion::p_Model::_get_impl(model.get())->varname(((*nativeidxs)(_2392)),([&]() -> std::string { if ( ((int)((name).size()) == (int)0)) return (std::string ("")); else return (mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer().get())->a(name).get())->a(std::string ("[")).get())->a(shape_p->getname((long long)(_2392))).get())->a(std::string ("]")).get())->toString()); })()); }}else { std::shared_ptr< monty::ndarray< long long,1 > > _2393 = mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->keys(); std::shared_ptr< monty::ndarray< int,1 > > _2394 = mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->values(); int _8270 = (int)0; int _8271 = (int)((_2393)->size(0)); for (int _2395 = _8270;_2395<_8271;++_2395){ mosek::fusion::p_Model::_get_impl(model.get())->varname(((*_2394)(_2395)),mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer().get())->a(name).get())->a(std::string ("[")).get())->a(shape_p->getname(((*_2393)(_2395)))).get())->a(std::string ("]")).get())->toString()); }}(names_flushed = true); }else {}}void mosek::fusion::LinearVariable::inst  ( std::shared_ptr< monty::ndarray< long long,1 > > _2396,    int _2397,    int _2398,    long long _2399,    long long _2400,    std::shared_ptr< monty::ndarray< int,1 > > _2401,    std::shared_ptr< monty::ndarray< int,1 > > _2402,    std::shared_ptr< monty::ndarray< int,1 > > _2403) { mosek::fusion::p_LinearVariable::_get_impl(this)->inst(_2396,_2397,_2398,_2399,_2400,_2401,_2402,_2403); }void mosek::fusion::p_LinearVariable::inst( std::shared_ptr< monty::ndarray< long long,1 > > _2396,int _2397,int _2398,long long _2399,long long _2400,std::shared_ptr< monty::ndarray< int,1 > > _2401,std::shared_ptr< monty::ndarray< int,1 > > _2402,std::shared_ptr< monty::ndarray< int,1 > > _2403){ if (nativeidxs){ int _8272 = _2397; int _8273 = _2398; for (int _2404 = _8272;_2404<_8273;++_2404){ (((*_2401)((_2400 + (long long)(_2404 - _2397)))) = ((*nativeidxs)(((*_2396)(((long long)_2404 - _2399)))))); }}else { int _8274 = _2397; int _8275 = _2398; for (int _2405 = _8274;_2405<_8275;++_2405){ if ((! mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->hasItem(((*_2396)(((long long)_2405 - _2399)))))){ int _2406 = mosek::fusion::p_Model::_get_impl(model.get())->append_linearvar(::mosek::fusion::ModelVariable::t(_pubthis),((*_2396)(((long long)_2405 - _2399))),mosek::fusion::p_LinearDomain::_get_impl(dom)->key,mosek::fusion::p_LinearDomain::_get_impl(dom.get())->get_rhs_item(((*_2396)(((long long)_2405 - _2399))))); mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->setItem(((*_2396)((_2405 - _2399))),_2406); (((*_2401)(((_2400 + _2405) - _2397))) = _2406); (names_flushed = false); }else { (((*_2401)(((_2400 + _2405) - _2397))) = mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->getItem(((*_2396)(((long long)_2405 - _2399))))); }}}}void mosek::fusion::LinearVariable::inst  ( long long _2407,    long long _2408,    std::shared_ptr< monty::ndarray< int,1 > > _2409,    std::shared_ptr< monty::ndarray< int,1 > > _2410,    std::shared_ptr< monty::ndarray< int,1 > > _2411) { mosek::fusion::p_LinearVariable::_get_impl(this)->inst(_2407,_2408,_2409,_2410,_2411); }void mosek::fusion::p_LinearVariable::inst( long long _2407,long long _2408,std::shared_ptr< monty::ndarray< int,1 > > _2409,std::shared_ptr< monty::ndarray< int,1 > > _2410,std::shared_ptr< monty::ndarray< int,1 > > _2411){ if (nativeidxs){ (((*_2409)(_2408)) = ((*nativeidxs)(_2407))); }else { if ((! mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->hasItem(_2407))){ int _2412 = mosek::fusion::p_Model::_get_impl(model.get())->append_linearvar(::mosek::fusion::ModelVariable::t(_pubthis),_2407,mosek::fusion::p_LinearDomain::_get_impl(dom)->key,mosek::fusion::p_LinearDomain::_get_impl(dom.get())->get_rhs_item(_2407)); mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->setItem(_2407,_2412); (((*_2409)(_2408)) = _2412); }else { (((*_2409)(_2408)) = mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->getItem(_2407)); }}}void mosek::fusion::p_LinearVariable::dual_values( long long _2413,std::shared_ptr< monty::ndarray< int,1 > > _2414,std::shared_ptr< monty::ndarray< long long,1 > > _2415,int _2416,std::shared_ptr< monty::ndarray< double,1 > > _2417){ long long _2418 = (long long)1; int _2419 = (int)((_2415)->size(0)); monty::rc_ptr< ::mosek::fusion::IndexCounter > _2420 = ::mosek::fusion::p_IndexCounter::_new_IndexCounter(_2413,_2414,_2415); std::shared_ptr< monty::ndarray< double,1 > > _2421 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_slx(::mosek::fusion::SolutionType::Default); std::shared_ptr< monty::ndarray< double,1 > > _2422 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_sux(::mosek::fusion::SolutionType::Default); int _8276 = (int)0; int _8277 = _2419; for (int _2423 = _8276;_2423<_8277;++_2423){ (_2418 = (_2418 * ((*_2414)(_2423)))); }if (nativeidxs){ long long _8278 = (long long)0; long long _8279 = _2418; for (long long _2424 = _8278;_2424<_8279;++_2424){ int _2425 = ((*nativeidxs)(_2420->get())); (((*_2417)((_2424 + _2416))) = (((*_2421)(_2425)) - ((*_2422)(_2425)))); _2420->inc(); }}else { mosek::fusion::SolutionStatus _2426 = model->getPrimalSolutionStatus(); int _8280 = (int)0; int _8281 = (int)_2418; for (int _2427 = _8280;_2427<_8281;++_2427){ if (mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->hasItem(_2420->get())){ int _2428 = mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->getItem(_2420->get()); (((*_2417)((_2416 + _2427))) = (((*_2421)(_2428)) - ((*_2422)(_2428)))); }else { if (((_2426 == ::mosek::fusion::SolutionStatus::Optimal) || ((_2426 == ::mosek::fusion::SolutionStatus::NearOptimal) || ((_2426 == ::mosek::fusion::SolutionStatus::Feasible) || (_2426 == ::mosek::fusion::SolutionStatus::NearFeasible))))){ (((*_2417)((_2416 + _2427))) = mosek::fusion::p_LinearDomain::_get_impl(dom.get())->get_rhs_item(_2420->get())); }else { (((*_2417)((_2416 + _2427))) = 0.0); }}_2420->inc(); }}}void mosek::fusion::p_LinearVariable::dual_values( std::shared_ptr< monty::ndarray< long long,1 > > _2429,int _2430,std::shared_ptr< monty::ndarray< double,1 > > _2431){ std::shared_ptr< monty::ndarray< double,1 > > _2432 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_slx(::mosek::fusion::SolutionType::Default); std::shared_ptr< monty::ndarray< double,1 > > _2433 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_sux(::mosek::fusion::SolutionType::Default); if (nativeidxs){ int _8282 = (int)0; int _8283 = (int)((_2429)->size(0)); for (int _2434 = _8282;_2434<_8283;++_2434){ int _2435 = ((*nativeidxs)(((*_2429)(_2434)))); (((*_2431)((_2430 + _2434))) = (((*_2432)(_2435)) - ((*_2433)(_2435)))); }}else { mosek::fusion::SolutionStatus _2436 = model->getPrimalSolutionStatus(); int _8284 = (int)0; int _8285 = (int)((_2429)->size(0)); for (int _2437 = _8284;_2437<_8285;++_2437){ if (mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->hasItem(((*_2429)(_2437)))){ int _2438 = mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->getItem(((*_2429)(_2437))); (((*_2431)((_2430 + _2437))) = (((*_2432)(_2438)) - ((*_2433)(_2438)))); }else { if (((_2436 == ::mosek::fusion::SolutionStatus::Optimal) || ((_2436 == ::mosek::fusion::SolutionStatus::NearOptimal) || ((_2436 == ::mosek::fusion::SolutionStatus::Feasible) || (_2436 == ::mosek::fusion::SolutionStatus::NearFeasible))))){ (((*_2431)((_2430 + _2437))) = mosek::fusion::p_LinearDomain::_get_impl(dom.get())->get_rhs_item(((*_2429)(_2437)))); }else { (((*_2431)((_2430 + _2437))) = 0.0); }}}}}void mosek::fusion::LinearVariable::set_values  ( long long _2439,    std::shared_ptr< monty::ndarray< int,1 > > _2440,    std::shared_ptr< monty::ndarray< long long,1 > > _2441,    int _2442,    std::shared_ptr< monty::ndarray< double,1 > > _2443,    bool _2444) { mosek::fusion::p_LinearVariable::_get_impl(this)->set_values(_2439,_2440,_2441,_2442,_2443,_2444); }void mosek::fusion::p_LinearVariable::set_values( long long _2439,std::shared_ptr< monty::ndarray< int,1 > > _2440,std::shared_ptr< monty::ndarray< long long,1 > > _2441,int _2442,std::shared_ptr< monty::ndarray< double,1 > > _2443,bool _2444){ if (_2444){ long long _2445 = (long long)1; int _2446 = (int)((_2441)->size(0)); monty::rc_ptr< ::mosek::fusion::IndexCounter > _2447 = ::mosek::fusion::p_IndexCounter::_new_IndexCounter(_2439,_2440,_2441); int _8286 = (int)0; int _8287 = _2446; for (int _2448 = _8286;_2448<_8287;++_2448){ (_2445 = (_2445 * ((*_2440)(_2448)))); }if (nativeidxs){ int _2449 = (int)((nativeidxs)->size(0)); std::shared_ptr< monty::ndarray< int,1 > > _2450 = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _8288; for (long long _2451=(int)0, _8289=_2445; _2451 < _8289;++_2451)_8288.push_back(((*nativeidxs)(_2447->next()))); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8288.size()),_8288.begin(),_8288.end())); })(); std::shared_ptr< monty::ndarray< double,1 > > _2452 = ([&]() -> std::shared_ptr< monty::ndarray< double,1 > > { if ( (_2442 > (int)0)) return (([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _8290; for (int _2453=(int)0, _8291=_2449; _2453 < _8291;++_2453)_8290.push_back(((*_2443)(_2453))); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8290.size()),_8290.begin(),_8290.end())); })()); else return (_2443); })(); mosek::fusion::p_Model::_get_impl(model.get())->setSolution_xx(_2450,_2452); }else { std::shared_ptr< monty::ndarray< int,1 > > _2454 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2445))); int _8292 = (int)0; long long _8293 = _2445; for (long long _2455 = _8292;_2455<_8293;++_2455){ _pubthis->inst(_2447->next(),_2455,_2454,std::shared_ptr< monty::ndarray< int,1 > >(nullptr),std::shared_ptr< monty::ndarray< int,1 > >(nullptr)); }std::shared_ptr< monty::ndarray< double,1 > > _2456 = ([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _8294; for (long long _2457=(int)0, _8295=_2445; _2457 < _8295;++_2457)_8294.push_back(((*_2443)((_2442 + _2457)))); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8294.size()),_8294.begin(),_8294.end())); })(); mosek::fusion::p_Model::_get_impl(model.get())->setSolution_xx(_2454,_2456); }}else { }}void mosek::fusion::LinearVariable::set_values  ( std::shared_ptr< monty::ndarray< long long,1 > > _2458,    std::shared_ptr< monty::ndarray< double,1 > > _2459,    bool _2460) { mosek::fusion::p_LinearVariable::_get_impl(this)->set_values(_2458,_2459,_2460); }void mosek::fusion::p_LinearVariable::set_values( std::shared_ptr< monty::ndarray< long long,1 > > _2458,std::shared_ptr< monty::ndarray< double,1 > > _2459,bool _2460){ if (_2460){ if (nativeidxs){ int _2461 = (int)((nativeidxs)->size(0)); std::shared_ptr< monty::ndarray< int,1 > > _2462 = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _8296; for (int _2463=(int)0, _8297=_2461; _2463 < _8297;++_2463)_8296.push_back(((*nativeidxs)(((*_2458)(_2463))))); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8296.size()),_8296.begin(),_8296.end())); })(); std::shared_ptr< monty::ndarray< double,1 > > _2464 = ([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _8298; for (int _2465=(int)0, _8299=_2461; _2465 < _8299;++_2465)_8298.push_back(((*_2459)(_2465))); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8298.size()),_8298.begin(),_8298.end())); })(); mosek::fusion::p_Model::_get_impl(model.get())->setSolution_xx(_2462,_2464); }else { std::shared_ptr< monty::ndarray< int,1 > > _2466 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)((_2458)->size(0))))); int _8300 = (int)0; int _8301 = (int)((_2458)->size(0)); for (int _2467 = _8300;_2467<_8301;++_2467){ _pubthis->inst(((*_2458)(_2467)),(long long)(_2467),_2466,std::shared_ptr< monty::ndarray< int,1 > >(nullptr),std::shared_ptr< monty::ndarray< int,1 > >(nullptr)); }std::shared_ptr< monty::ndarray< double,1 > > _2468 = ([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _8302; for (int _2469=(int)0, _8303=(int)((_2458)->size(0)); _2469 < _8303;++_2469)_8302.push_back(((*_2459)(_2469))); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8302.size()),_8302.begin(),_8302.end())); })(); mosek::fusion::p_Model::_get_impl(model.get())->setSolution_xx(_2466,_2468); }}else { }}void mosek::fusion::LinearVariable::values  ( long long _2470,    std::shared_ptr< monty::ndarray< int,1 > > _2471,    std::shared_ptr< monty::ndarray< long long,1 > > _2472,    int _2473,    std::shared_ptr< monty::ndarray< double,1 > > _2474,    bool _2475) { mosek::fusion::p_LinearVariable::_get_impl(this)->values(_2470,_2471,_2472,_2473,_2474,_2475); }void mosek::fusion::p_LinearVariable::values( long long _2470,std::shared_ptr< monty::ndarray< int,1 > > _2471,std::shared_ptr< monty::ndarray< long long,1 > > _2472,int _2473,std::shared_ptr< monty::ndarray< double,1 > > _2474,bool _2475){ if ((! _2475)){ dual_values(_2470,_2471,_2472,_2473,_2474); }else { long long _2476 = (long long)1; int _2477 = (int)((_2472)->size(0)); monty::rc_ptr< ::mosek::fusion::IndexCounter > _2478 = ::mosek::fusion::p_IndexCounter::_new_IndexCounter(_2470,_2471,_2472); std::shared_ptr< monty::ndarray< double,1 > > _2479 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_xx(::mosek::fusion::SolutionType::Default); int _8304 = (int)0; int _8305 = _2477; for (int _2480 = _8304;_2480<_8305;++_2480){ (_2476 = (_2476 * ((*_2471)(_2480)))); }if (nativeidxs){ long long _8306 = (long long)0; long long _8307 = _2476; for (long long _2481 = _8306;_2481<_8307;++_2481){ (((*_2474)((_2481 + _2473))) = ((*_2479)(((*nativeidxs)(_2478->get()))))); _2478->inc(); }}else { mosek::fusion::SolutionStatus _2482 = model->getPrimalSolutionStatus(); int _8308 = (int)0; int _8309 = (int)_2476; for (int _2483 = _8308;_2483<_8309;++_2483){ if (mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->hasItem(_2478->get())){ (((*_2474)((_2473 + _2483))) = ((*_2479)(mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->getItem(_2478->get())))); }else { if (((_2482 == ::mosek::fusion::SolutionStatus::Optimal) || ((_2482 == ::mosek::fusion::SolutionStatus::NearOptimal) || ((_2482 == ::mosek::fusion::SolutionStatus::Feasible) || (_2482 == ::mosek::fusion::SolutionStatus::NearFeasible))))){ (((*_2474)((_2473 + _2483))) = mosek::fusion::p_LinearDomain::_get_impl(dom.get())->get_rhs_item(_2478->get())); }else { (((*_2474)((_2473 + _2483))) = 0.0); }}_2478->inc(); }}}}void mosek::fusion::LinearVariable::make_continuous  ( std::shared_ptr< monty::ndarray< long long,1 > > _2484) { mosek::fusion::p_LinearVariable::_get_impl(this)->make_continuous(_2484); }void mosek::fusion::p_LinearVariable::make_continuous( std::shared_ptr< monty::ndarray< long long,1 > > _2484){ if (nativeidxs){ mosek::fusion::p_Model::_get_impl(_pubthis->getModel().get())->task_var_putcontlist(([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _8310; for (int _2485=(int)0, _8311=(int)((_2484)->size(0)); _2485 < _8311;++_2485)_8310.push_back(((*nativeidxs)(((*_2484)(_2485))))); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8310.size()),_8310.begin(),_8310.end())); })()); }else { std::shared_ptr< monty::ndarray< int,1 > > _2486 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)((_2484)->size(0))))); _pubthis->inst(_2484,(int)0,(int)((_2484)->size(0)),(long long)((int)0),(long long)((int)0),_2486,std::shared_ptr< monty::ndarray< int,1 > >(nullptr),std::shared_ptr< monty::ndarray< int,1 > >(nullptr)); mosek::fusion::p_Model::_get_impl(_pubthis->getModel().get())->task_var_putcontlist(_2486); }}void mosek::fusion::LinearVariable::make_integer  ( std::shared_ptr< monty::ndarray< long long,1 > > _2487) { mosek::fusion::p_LinearVariable::_get_impl(this)->make_integer(_2487); }void mosek::fusion::p_LinearVariable::make_integer( std::shared_ptr< monty::ndarray< long long,1 > > _2487){ if (nativeidxs){ mosek::fusion::p_Model::_get_impl(_pubthis->getModel().get())->task_var_putintlist(([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _8312; for (int _2488=(int)0, _8313=(int)((_2487)->size(0)); _2488 < _8313;++_2488)_8312.push_back(((*nativeidxs)(((*_2487)(_2488))))); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8312.size()),_8312.begin(),_8312.end())); })()); }else { std::shared_ptr< monty::ndarray< int,1 > > _2489 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)((_2487)->size(0))))); _pubthis->inst(_2487,(int)0,(int)((_2487)->size(0)),(long long)((int)0),(long long)((int)0),_2489,std::shared_ptr< monty::ndarray< int,1 > >(nullptr),std::shared_ptr< monty::ndarray< int,1 > >(nullptr)); mosek::fusion::p_Model::_get_impl(_pubthis->getModel().get())->task_var_putintlist(_2489); }}void mosek::fusion::LinearVariable::values  ( std::shared_ptr< monty::ndarray< long long,1 > > _2490,    int _2491,    std::shared_ptr< monty::ndarray< double,1 > > _2492,    bool _2493) { mosek::fusion::p_LinearVariable::_get_impl(this)->values(_2490,_2491,_2492,_2493); }void mosek::fusion::p_LinearVariable::values( std::shared_ptr< monty::ndarray< long long,1 > > _2490,int _2491,std::shared_ptr< monty::ndarray< double,1 > > _2492,bool _2493){ if ((! _2493)){ dual_values(_2490,_2491,_2492); }else { std::shared_ptr< monty::ndarray< double,1 > > _2494 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_xx(::mosek::fusion::SolutionType::Default); if (nativeidxs){ int _8314 = (int)0; int _8315 = (int)((_2490)->size(0)); for (int _2495 = _8314;_2495<_8315;++_2495){ (((*_2492)((_2491 + _2495))) = ((*_2494)(((*nativeidxs)(((*_2490)(_2495))))))); }}else { mosek::fusion::SolutionStatus _2496 = model->getPrimalSolutionStatus(); int _8316 = (int)0; int _8317 = (int)((_2490)->size(0)); for (int _2497 = _8316;_2497<_8317;++_2497){ if (mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->hasItem(((*_2490)(_2497)))){ (((*_2492)((_2491 + _2497))) = ((*_2494)(mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->getItem(((*_2490)(_2497)))))); }else { if (((_2496 == ::mosek::fusion::SolutionStatus::Optimal) || ((_2496 == ::mosek::fusion::SolutionStatus::NearOptimal) || ((_2496 == ::mosek::fusion::SolutionStatus::Feasible) || (_2496 == ::mosek::fusion::SolutionStatus::NearFeasible))))){ (((*_2492)((_2491 + _2497))) = mosek::fusion::p_LinearDomain::_get_impl(dom.get())->get_rhs_item(((*_2490)(_2497)))); }else { (((*_2492)((_2491 + _2497))) = 0.0); }}}}}}monty::rc_ptr< ::mosek::fusion::ModelVariable > mosek::fusion::p_LinearVariable::clone( monty::rc_ptr< ::mosek::fusion::Model > _2498){ return ::mosek::fusion::p_LinearVariable::_new_LinearVariable(_pubthis,_2498); }void mosek::fusion::p_LinearVariable::destroy(){dom.reset();nativeidxs.reset();idxmap.reset();}void mosek::fusion::LinearVariable::destroy() { mosek::fusion::p_LinearVariable::_get_impl(this)->destroy(); }mosek::fusion::BoundInterfaceVariable::BoundInterfaceVariable(mosek::fusion::p_BoundInterfaceVariable *_impl) : mosek::fusion::SliceVariable(_impl) { /*std::cout << "BoundInterfaceVariable()" << this << std::endl; */ }mosek::fusion::BoundInterfaceVariable::~BoundInterfaceVariable() {  /* std::cout << "~BoundInterfaceVariable()" << this << std::endl << std::flush; */ }mosek::fusion::p_BoundInterfaceVariable::p_BoundInterfaceVariable  (::mosek::fusion::BoundInterfaceVariable * _pubthis) :     mosek::fusion::p_SliceVariable(_pubthis),    _pubthis(_pubthis){}mosek::fusion::BoundInterfaceVariable::t mosek::fusion::p_BoundInterfaceVariable::_new_BoundInterfaceVariable  (monty::rc_ptr< ::mosek::fusion::RangedVariable > _2499,    monty::rc_ptr< ::mosek::fusion::Set > _2500,    long long _2501,    std::shared_ptr< monty::ndarray< long long,1 > > _2502,    bool _2503){ return new mosek::fusion::BoundInterfaceVariable(_2499,_2500,_2501,_2502,_2503); }mosek::fusion::BoundInterfaceVariable::BoundInterfaceVariable  (monty::rc_ptr< ::mosek::fusion::RangedVariable > _2499,    monty::rc_ptr< ::mosek::fusion::Set > _2500,    long long _2501,    std::shared_ptr< monty::ndarray< long long,1 > > _2502,    bool _2503) :    BoundInterfaceVariable(new mosek::fusion::p_BoundInterfaceVariable(this)){ mosek::fusion::p_BoundInterfaceVariable::_get_impl(this)->_initialize(_2499,_2500,_2501,_2502,_2503); }void mosek::fusion::p_BoundInterfaceVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::RangedVariable > _2499,    monty::rc_ptr< ::mosek::fusion::Set > _2500,    long long _2501,    std::shared_ptr< monty::ndarray< long long,1 > > _2502,    bool _2503){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_SliceVariable::_initialize(_2499,_2500,_2501,_2502);(originvar = _2499); (islower = _2503); }}monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BoundInterfaceVariable::slice_( monty::rc_ptr< ::mosek::fusion::Set > _2504,long long _2505,std::shared_ptr< monty::ndarray< long long,1 > > _2506){ return ::mosek::fusion::p_BoundInterfaceVariable::_new_BoundInterfaceVariable(originvar,_2504,_2505,_2506,islower); }void mosek::fusion::p_BoundInterfaceVariable::dual_values( long long _2507,std::shared_ptr< monty::ndarray< int,1 > > _2508,std::shared_ptr< monty::ndarray< long long,1 > > _2509,int _2510,std::shared_ptr< monty::ndarray< double,1 > > _2511){ if (islower){ mosek::fusion::p_RangedVariable::_get_impl(originvar.get())->dual_l(_2507,_2508,_2509,_2510,_2511); }else { mosek::fusion::p_RangedVariable::_get_impl(originvar.get())->dual_u(_2507,_2508,_2509,_2510,_2511); }}void mosek::fusion::p_BoundInterfaceVariable::dual_values( std::shared_ptr< monty::ndarray< long long,1 > > _2512,int _2513,std::shared_ptr< monty::ndarray< double,1 > > _2514){ if (islower){ mosek::fusion::p_RangedVariable::_get_impl(originvar.get())->dual_l(_2512,_2513,_2514); }else { mosek::fusion::p_RangedVariable::_get_impl(originvar.get())->dual_u(_2512,_2513,_2514); }}void mosek::fusion::p_BoundInterfaceVariable::destroy(){originvar.reset();}void mosek::fusion::BoundInterfaceVariable::destroy() { mosek::fusion::p_BoundInterfaceVariable::_get_impl(this)->destroy(); }mosek::fusion::ConicVariable::ConicVariable(mosek::fusion::p_ConicVariable *_impl) : mosek::fusion::ModelVariable(_impl) { /*std::cout << "ConicVariable()" << this << std::endl; */ }mosek::fusion::ConicVariable::~ConicVariable() {  /* std::cout << "~ConicVariable()" << this << std::endl << std::flush; */ }mosek::fusion::p_ConicVariable::p_ConicVariable  (::mosek::fusion::ConicVariable * _pubthis) :     mosek::fusion::p_ModelVariable(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ConicVariable::t mosek::fusion::p_ConicVariable::_new_ConicVariable  (monty::rc_ptr< ::mosek::fusion::ConicVariable > _2515,    monty::rc_ptr< ::mosek::fusion::Model > _2516){ return new mosek::fusion::ConicVariable(_2515,_2516); }mosek::fusion::ConicVariable::ConicVariable  (monty::rc_ptr< ::mosek::fusion::ConicVariable > _2515,    monty::rc_ptr< ::mosek::fusion::Model > _2516) :    ConicVariable(new mosek::fusion::p_ConicVariable(this)){ mosek::fusion::p_ConicVariable::_get_impl(this)->_initialize(_2515,_2516); }void mosek::fusion::p_ConicVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::ConicVariable > _2515,    monty::rc_ptr< ::mosek::fusion::Model > _2516){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_ModelVariable::_initialize(_2515,_2516);(dom = mosek::fusion::p_ConicVariable::_get_impl(_2515)->dom); (coneidx = mosek::fusion::p_ConicVariable::_get_impl(_2515)->coneidx); (conesize = mosek::fusion::p_ConicVariable::_get_impl(_2515)->conesize); (numcone = mosek::fusion::p_ConicVariable::_get_impl(_2515)->numcone); (nativeidxs = ([&]() -> std::shared_ptr< monty::ndarray< int,1 > > { if ( mosek::fusion::p_ConicVariable::_get_impl(_2515)->nativeidxs) return (([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _8318; for (int _2517=(int)0, _8319=(int)((mosek::fusion::p_ConicVariable::_get_impl(_2515)->nativeidxs)->size(0)); _2517 < _8319;++_2517)_8318.push_back(((*mosek::fusion::p_ConicVariable::_get_impl(_2515)->nativeidxs)(_2517))); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8318.size()),_8318.begin(),_8318.end())); })()); else return (nullptr); })()); (names_flushed = mosek::fusion::p_ConicVariable::_get_impl(_2515)->names_flushed); }}mosek::fusion::ConicVariable::t mosek::fusion::p_ConicVariable::_new_ConicVariable  (monty::rc_ptr< ::mosek::fusion::Model > _2518,    const std::string &  _2519,    monty::rc_ptr< ::mosek::fusion::QConeDomain > _2520,    monty::rc_ptr< ::mosek::fusion::Set > _2521,    std::shared_ptr< monty::ndarray< int,1 > > _2522,    int _2523,    int _2524,    int _2525,    long long _2526){ return new mosek::fusion::ConicVariable(_2518,_2519,_2520,_2521,_2522,_2523,_2524,_2525,_2526); }mosek::fusion::ConicVariable::ConicVariable  (monty::rc_ptr< ::mosek::fusion::Model > _2518,    const std::string &  _2519,    monty::rc_ptr< ::mosek::fusion::QConeDomain > _2520,    monty::rc_ptr< ::mosek::fusion::Set > _2521,    std::shared_ptr< monty::ndarray< int,1 > > _2522,    int _2523,    int _2524,    int _2525,    long long _2526) :    ConicVariable(new mosek::fusion::p_ConicVariable(this)){ mosek::fusion::p_ConicVariable::_get_impl(this)->_initialize(_2518,_2519,_2520,_2521,_2522,_2523,_2524,_2525,_2526); }void mosek::fusion::p_ConicVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _2518,    const std::string &  _2519,    monty::rc_ptr< ::mosek::fusion::QConeDomain > _2520,    monty::rc_ptr< ::mosek::fusion::Set > _2521,    std::shared_ptr< monty::ndarray< int,1 > > _2522,    int _2523,    int _2524,    int _2525,    long long _2526){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_ModelVariable::_initialize(_2518,_2519,_2521,_2526);(dom = _2520); (conesize = _2523); (coneidx = _2524); (numcone = _2525); (nativeidxs = _2522); (names_flushed = false); }}std::string mosek::fusion::ConicVariable::toString  ( ) { return mosek::fusion::p_ConicVariable::_get_impl(this)->toString(); }std::string mosek::fusion::p_ConicVariable::toString( ){ monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2527 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer(); mosek::fusion::Utils::p_StringBuffer::_get_impl(_2527.get())->a(std::string ("ConicVariable( ")); if (((int)((name).size()) > (int)0)){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_2527.get())->a(std::string ("'")).get())->a(name).get())->a(std::string ("',")); }else {}mosek::fusion::Utils::p_StringBuffer::_get_impl(_2527.get())->a(std::string ("(")); mosek::fusion::Utils::p_StringBuffer::_get_impl(_2527.get())->a(shape_p->dim((int)0)); int _8320 = (int)1; int _8321 = mosek::fusion::p_Set::_get_impl(shape_p)->nd; for (int _2528 = _8320;_2528<_8321;++_2528){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_2527.get())->a(std::string (",")).get())->a(shape_p->dim(_2528)); }mosek::fusion::Utils::p_StringBuffer::_get_impl(_2527.get())->a(std::string (") )")); return mosek::fusion::Utils::p_StringBuffer::_get_impl(_2527.get())->toString(); }monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::ConicVariable::elementDesc  ( long long _2529,    monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2530) { return mosek::fusion::p_ConicVariable::_get_impl(this)->elementDesc(_2529,_2530); }monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::p_ConicVariable::elementDesc( long long _2529,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2530){ _pubthis->elementName(_2529,_2530); mosek::fusion::p_QConeDomain::_get_impl(dom.get())->domainToString(_2529,_2530); return _2530; }void mosek::fusion::ConicVariable::elementName  ( long long _2531,    monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2532) { mosek::fusion::p_ConicVariable::_get_impl(this)->elementName(_2531,_2532); }void mosek::fusion::p_ConicVariable::elementName( long long _2531,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2532){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_2532.get())->a(([&]() -> std::string { if ( ((int)((name).size()) == (int)0)) return (std::string ("_")); else return (name); })()).get())->a(std::string ("[")).get())->a(shape_p->indexToString(_2531)).get())->a(std::string ("] ")); }void mosek::fusion::p_ConicVariable::flushNames( ){ if (((! names_flushed) && ((int)((name).size()) > (int)0))){ int _8322 = (int)0; int _8323 = (int)((nativeidxs)->size(0)); for (int _2533 = _8322;_2533<_8323;++_2533){ mosek::fusion::p_Model::_get_impl(model.get())->varname(((*nativeidxs)(_2533)),mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer().get())->a(name).get())->a(std::string ("[")).get())->a(shape_p->getname((long long)(_2533))).get())->a(std::string ("]")).get())->toString()); }(names_flushed = true); }else {}}void mosek::fusion::ConicVariable::inst  ( std::shared_ptr< monty::ndarray< long long,1 > > _2534,    int _2535,    int _2536,    long long _2537,    long long _2538,    std::shared_ptr< monty::ndarray< int,1 > > _2539,    std::shared_ptr< monty::ndarray< int,1 > > _2540,    std::shared_ptr< monty::ndarray< int,1 > > _2541) { mosek::fusion::p_ConicVariable::_get_impl(this)->inst(_2534,_2535,_2536,_2537,_2538,_2539,_2540,_2541); }void mosek::fusion::p_ConicVariable::inst( std::shared_ptr< monty::ndarray< long long,1 > > _2534,int _2535,int _2536,long long _2537,long long _2538,std::shared_ptr< monty::ndarray< int,1 > > _2539,std::shared_ptr< monty::ndarray< int,1 > > _2540,std::shared_ptr< monty::ndarray< int,1 > > _2541){ if (nativeidxs){ int _8324 = _2535; int _8325 = _2536; for (int _2542 = _8324;_2542<_8325;++_2542){ (((*_2539)((_2538 + (long long)(_2542 - _2535)))) = ((*nativeidxs)(((*_2534)(((long long)_2542 - _2537)))))); }}else {}}void mosek::fusion::ConicVariable::inst  ( long long _2543,    long long _2544,    std::shared_ptr< monty::ndarray< int,1 > > _2545,    std::shared_ptr< monty::ndarray< int,1 > > _2546,    std::shared_ptr< monty::ndarray< int,1 > > _2547) { mosek::fusion::p_ConicVariable::_get_impl(this)->inst(_2543,_2544,_2545,_2546,_2547); }void mosek::fusion::p_ConicVariable::inst( long long _2543,long long _2544,std::shared_ptr< monty::ndarray< int,1 > > _2545,std::shared_ptr< monty::ndarray< int,1 > > _2546,std::shared_ptr< monty::ndarray< int,1 > > _2547){ if (((_2543 < (int)0) || (_2543 >= (long long)((nativeidxs)->size(0))))){ throw ::mosek::fusion::IndexError(std::string ("Index out of bounds"));}else {}(((*_2545)(_2544)) = ((*nativeidxs)(_2543))); }void mosek::fusion::ConicVariable::set_values  ( long long _2548,    std::shared_ptr< monty::ndarray< int,1 > > _2549,    std::shared_ptr< monty::ndarray< long long,1 > > _2550,    int _2551,    std::shared_ptr< monty::ndarray< double,1 > > _2552,    bool _2553) { mosek::fusion::p_ConicVariable::_get_impl(this)->set_values(_2548,_2549,_2550,_2551,_2552,_2553); }void mosek::fusion::p_ConicVariable::set_values( long long _2548,std::shared_ptr< monty::ndarray< int,1 > > _2549,std::shared_ptr< monty::ndarray< long long,1 > > _2550,int _2551,std::shared_ptr< monty::ndarray< double,1 > > _2552,bool _2553){ if (_2553){ long long _2554 = (long long)1; int _2555 = (int)((_2550)->size(0)); monty::rc_ptr< ::mosek::fusion::IndexCounter > _2556 = ::mosek::fusion::p_IndexCounter::_new_IndexCounter(_2548,_2549,_2550); int _8326 = (int)0; int _8327 = _2555; for (int _2557 = _8326;_2557<_8327;++_2557){ (_2554 = (_2554 * ((*_2549)(_2557)))); }int _2558 = (int)((nativeidxs)->size(0)); std::shared_ptr< monty::ndarray< int,1 > > _2559 = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _8328; for (long long _2560=(int)0, _8329=_2554; _2560 < _8329;++_2560)_8328.push_back(((*nativeidxs)(_2556->next()))); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8328.size()),_8328.begin(),_8328.end())); })(); std::shared_ptr< monty::ndarray< double,1 > > _2561 = ([&]() -> std::shared_ptr< monty::ndarray< double,1 > > { if ( (_2551 > (int)0)) return (([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _8330; for (int _2562=(int)0, _8331=_2558; _2562 < _8331;++_2562)_8330.push_back(((*_2552)((_2551 + _2562)))); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8330.size()),_8330.begin(),_8330.end())); })()); else return (_2552); })(); mosek::fusion::p_Model::_get_impl(model.get())->setSolution_xx(_2559,_2561); }else { }}void mosek::fusion::ConicVariable::set_values  ( std::shared_ptr< monty::ndarray< long long,1 > > _2563,    std::shared_ptr< monty::ndarray< double,1 > > _2564,    bool _2565) { mosek::fusion::p_ConicVariable::_get_impl(this)->set_values(_2563,_2564,_2565); }void mosek::fusion::p_ConicVariable::set_values( std::shared_ptr< monty::ndarray< long long,1 > > _2563,std::shared_ptr< monty::ndarray< double,1 > > _2564,bool _2565){ if (_2565){ int _2566 = (int)((nativeidxs)->size(0)); std::shared_ptr< monty::ndarray< int,1 > > _2567 = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _8332; for (int _2568=(int)0, _8333=_2566; _2568 < _8333;++_2568)_8332.push_back(((*nativeidxs)(((*_2563)(_2568))))); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8332.size()),_8332.begin(),_8332.end())); })(); std::shared_ptr< monty::ndarray< double,1 > > _2569 = ([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _8334; for (int _2570=(int)0, _8335=_2566; _2570 < _8335;++_2570)_8334.push_back(((*_2564)(_2570))); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8334.size()),_8334.begin(),_8334.end())); })(); mosek::fusion::p_Model::_get_impl(model.get())->setSolution_xx(_2567,_2569); }else { }}void mosek::fusion::ConicVariable::values  ( long long _2571,    std::shared_ptr< monty::ndarray< int,1 > > _2572,    std::shared_ptr< monty::ndarray< long long,1 > > _2573,    int _2574,    std::shared_ptr< monty::ndarray< double,1 > > _2575,    bool _2576) { mosek::fusion::p_ConicVariable::_get_impl(this)->values(_2571,_2572,_2573,_2574,_2575,_2576); }void mosek::fusion::p_ConicVariable::values( long long _2571,std::shared_ptr< monty::ndarray< int,1 > > _2572,std::shared_ptr< monty::ndarray< long long,1 > > _2573,int _2574,std::shared_ptr< monty::ndarray< double,1 > > _2575,bool _2576){ long long _2577 = (long long)1; int _2578 = (int)((_2573)->size(0)); monty::rc_ptr< ::mosek::fusion::IndexCounter > _2579 = ::mosek::fusion::p_IndexCounter::_new_IndexCounter(_2571,_2572,_2573); std::shared_ptr< monty::ndarray< double,1 > > _2580 = ([&]() -> std::shared_ptr< monty::ndarray< double,1 > > { if ( _2576) return (mosek::fusion::p_Model::_get_impl(model.get())->getSolution_xx(::mosek::fusion::SolutionType::Default)); else return (mosek::fusion::p_Model::_get_impl(model.get())->getSolution_snx(::mosek::fusion::SolutionType::Default)); })(); int _8336 = (int)0; int _8337 = _2578; for (int _2581 = _8336;_2581<_8337;++_2581){ (_2577 = (_2577 * ((*_2572)(_2581)))); }long long _8338 = (long long)0; long long _8339 = _2577; for (long long _2582 = _8338;_2582<_8339;++_2582){ (((*_2575)((_2582 + _2574))) = ((*_2580)(((*nativeidxs)(_2579->get()))))); _2579->inc(); }}void mosek::fusion::ConicVariable::values  ( std::shared_ptr< monty::ndarray< long long,1 > > _2583,    int _2584,    std::shared_ptr< monty::ndarray< double,1 > > _2585,    bool _2586) { mosek::fusion::p_ConicVariable::_get_impl(this)->values(_2583,_2584,_2585,_2586); }void mosek::fusion::p_ConicVariable::values( std::shared_ptr< monty::ndarray< long long,1 > > _2583,int _2584,std::shared_ptr< monty::ndarray< double,1 > > _2585,bool _2586){ std::shared_ptr< monty::ndarray< double,1 > > _2587 = ([&]() -> std::shared_ptr< monty::ndarray< double,1 > > { if ( _2586) return (mosek::fusion::p_Model::_get_impl(model.get())->getSolution_xx(::mosek::fusion::SolutionType::Default)); else return (mosek::fusion::p_Model::_get_impl(model.get())->getSolution_snx(::mosek::fusion::SolutionType::Default)); })(); int _8340 = (int)0; int _8341 = (int)((_2583)->size(0)); for (int _2588 = _8340;_2588<_8341;++_2588){ (((*_2585)((_2584 + _2588))) = ((*_2587)(((*nativeidxs)(((*_2583)(_2588))))))); }}void mosek::fusion::ConicVariable::make_continuous  ( std::shared_ptr< monty::ndarray< long long,1 > > _2589) { mosek::fusion::p_ConicVariable::_get_impl(this)->make_continuous(_2589); }void mosek::fusion::p_ConicVariable::make_continuous( std::shared_ptr< monty::ndarray< long long,1 > > _2589){ mosek::fusion::p_Model::_get_impl(_pubthis->getModel().get())->task_var_putcontlist(([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _8342; for (int _2590=(int)0, _8343=(int)((_2589)->size(0)); _2590 < _8343;++_2590)_8342.push_back(((*nativeidxs)(((*_2589)(_2590))))); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8342.size()),_8342.begin(),_8342.end())); })()); }void mosek::fusion::ConicVariable::make_integer  ( std::shared_ptr< monty::ndarray< long long,1 > > _2591) { mosek::fusion::p_ConicVariable::_get_impl(this)->make_integer(_2591); }void mosek::fusion::p_ConicVariable::make_integer( std::shared_ptr< monty::ndarray< long long,1 > > _2591){ mosek::fusion::p_Model::_get_impl(_pubthis->getModel().get())->task_var_putintlist(([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _8344; for (int _2592=(int)0, _8345=(int)((_2591)->size(0)); _2592 < _8345;++_2592)_8344.push_back(((*nativeidxs)(((*_2591)(_2592))))); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8344.size()),_8344.begin(),_8344.end())); })()); }int mosek::fusion::p_ConicVariable::get_variable_index( int _2593){ if ((_2593 >= (int)((nativeidxs)->size(0)))){ throw ::mosek::fusion::IndexError(std::string ("Variable index out of range"));}else { return ((*nativeidxs)(_2593)); }}monty::rc_ptr< ::mosek::fusion::ModelVariable > mosek::fusion::p_ConicVariable::clone( monty::rc_ptr< ::mosek::fusion::Model > _2594){ return ::mosek::fusion::p_ConicVariable::_new_ConicVariable(_pubthis,_2594); }void mosek::fusion::p_ConicVariable::destroy(){nativeidxs.reset();dom.reset();}void mosek::fusion::ConicVariable::destroy() { mosek::fusion::p_ConicVariable::_get_impl(this)->destroy(); }mosek::fusion::ModelVariable::ModelVariable(mosek::fusion::p_ModelVariable *_impl) : mosek::fusion::BaseVariable(_impl) { /*std::cout << "ModelVariable()" << this << std::endl; */ }mosek::fusion::ModelVariable::~ModelVariable() {  /* std::cout << "~ModelVariable()" << this << std::endl << std::flush; */ }mosek::fusion::p_ModelVariable::p_ModelVariable  (::mosek::fusion::ModelVariable * _pubthis) :     mosek::fusion::p_BaseVariable(_pubthis),    _pubthis(_pubthis){}void mosek::fusion::p_ModelVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::ModelVariable > _2595,    monty::rc_ptr< ::mosek::fusion::Model > _2596){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_BaseVariable::_initialize(_2595,_2596);(name = mosek::fusion::p_ModelVariable::_get_impl(_2595)->name); (varid = mosek::fusion::p_ModelVariable::_get_impl(_2595)->varid); }}void mosek::fusion::p_ModelVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _2597,    const std::string &  _2598,    monty::rc_ptr< ::mosek::fusion::Set > _2599,    long long _2600){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_BaseVariable::_initialize(_2597,_2599);(name = _2598); (varid = _2600); }}void mosek::fusion::ModelVariable::elementName  ( long long _2601,    monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2602) { mosek::fusion::p_ModelVariable::_get_impl(this)->elementName(_2601,_2602); }void mosek::fusion::p_ModelVariable::elementName( long long _2601,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2602){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_2602.get())->a(([&]() -> std::string { if ( ((int)((name).size()) == (int)0)) return (std::string ("_")); else return (name); })()).get())->a(std::string ("[")).get())->a(shape_p->indexToString(_2601)).get())->a(std::string ("]")); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::ModelVariable::slice  ( std::shared_ptr< monty::ndarray< int,1 > > _2603,    std::shared_ptr< monty::ndarray< int,1 > > _2604) { return mosek::fusion::p_ModelVariable::_get_impl(this)->slice(_2603,_2604); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_ModelVariable::slice( std::shared_ptr< monty::ndarray< int,1 > > _2603,std::shared_ptr< monty::ndarray< int,1 > > _2604){ if (((int)((_2603)->size(0)) != (int)((_2604)->size(0)))){ throw ::mosek::fusion::LengthError(std::string ("Mismatching array lengths"));}else {}monty::rc_ptr< ::mosek::fusion::Set > _2605 = shape_p->slice(_2603,_2604); std::shared_ptr< monty::ndarray< long long,1 > > _2606 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(mosek::fusion::p_Set::_get_impl(shape_p)->nd))); (((*_2606)((mosek::fusion::p_Set::_get_impl(shape_p)->nd - (int)1))) = (long long)1); { int _2607 = (mosek::fusion::p_Set::_get_impl(shape_p)->nd - (int)1); for (;(_2607 > (int)0);(_2607 = (_2607 - (int)1))){ (((*_2606)((_2607 - (int)1))) = (((*_2606)(_2607)) * shape_p->dim(_2607))); }}long long _2608 = (long long)0; { int _2609 = (int)0; for (;(_2609 < (int)((_2606)->size(0)));( ++ _2609 )){ (_2608 = (_2608 + (((*_2606)(_2609)) * ((*_2603)(_2609))))); }}return ::mosek::fusion::p_SliceVariable::_new_SliceVariable(::mosek::fusion::Variable::t(_pubthis),_2605,_2608,_2606); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::ModelVariable::slice  ( int _2610,    int _2611) { return mosek::fusion::p_ModelVariable::_get_impl(this)->slice(_2610,_2611); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_ModelVariable::slice( int _2610,int _2611){ if ((mosek::fusion::p_Set::_get_impl(shape_p)->nd != (int)1)){ throw ::mosek::fusion::DimensionError(std::string ("Wrong size of slice"));}else {}std::shared_ptr< monty::ndarray< long long,1 > > _2612 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >{(long long)1}); return ::mosek::fusion::p_SliceVariable::_new_SliceVariable(::mosek::fusion::Variable::t(_pubthis),shape_p->slice(_2610,_2611),(long long)_2610,_2612); }void mosek::fusion::p_ModelVariable::destroy(){}void mosek::fusion::ModelVariable::destroy() { mosek::fusion::p_ModelVariable::_get_impl(this)->destroy(); }mosek::fusion::NilVariable::NilVariable(mosek::fusion::p_NilVariable *_impl) : mosek::fusion::BaseVariable(_impl) { /*std::cout << "NilVariable()" << this << std::endl; */ }mosek::fusion::NilVariable::~NilVariable() {  /* std::cout << "~NilVariable()" << this << std::endl << std::flush; */ }mosek::fusion::p_NilVariable::p_NilVariable  (::mosek::fusion::NilVariable * _pubthis) :     mosek::fusion::p_BaseVariable(_pubthis),    _pubthis(_pubthis){}mosek::fusion::NilVariable::t mosek::fusion::p_NilVariable::_new_NilVariable  (){ return new mosek::fusion::NilVariable(); }mosek::fusion::NilVariable::NilVariable  () :    NilVariable(new mosek::fusion::p_NilVariable(this)){ mosek::fusion::p_NilVariable::_get_impl(this)->_initialize(); }void mosek::fusion::p_NilVariable::_initialize  (){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_BaseVariable::_initialize(nullptr,::mosek::fusion::p_Set::make((int)0));}}monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::NilVariable::elementDesc  ( long long _2614,    monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2615) { return mosek::fusion::p_NilVariable::_get_impl(this)->elementDesc(_2614,_2615); }monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::p_NilVariable::elementDesc( long long _2614,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2615){ return _2615; }void mosek::fusion::NilVariable::elementName  ( long long _2616,    monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2617) { mosek::fusion::p_NilVariable::_get_impl(this)->elementName(_2616,_2617); }void mosek::fusion::p_NilVariable::elementName( long long _2616,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2617){ }void mosek::fusion::NilVariable::inst  ( std::shared_ptr< monty::ndarray< long long,1 > > _2618,    int _2619,    int _2620,    long long _2621,    long long _2622,    std::shared_ptr< monty::ndarray< int,1 > > _2623,    std::shared_ptr< monty::ndarray< int,1 > > _2624,    std::shared_ptr< monty::ndarray< int,1 > > _2625) { mosek::fusion::p_NilVariable::_get_impl(this)->inst(_2618,_2619,_2620,_2621,_2622,_2623,_2624,_2625); }void mosek::fusion::p_NilVariable::inst( std::shared_ptr< monty::ndarray< long long,1 > > _2618,int _2619,int _2620,long long _2621,long long _2622,std::shared_ptr< monty::ndarray< int,1 > > _2623,std::shared_ptr< monty::ndarray< int,1 > > _2624,std::shared_ptr< monty::ndarray< int,1 > > _2625){ }void mosek::fusion::NilVariable::inst  ( long long _2626,    long long _2627,    std::shared_ptr< monty::ndarray< int,1 > > _2628,    std::shared_ptr< monty::ndarray< int,1 > > _2629,    std::shared_ptr< monty::ndarray< int,1 > > _2630) { mosek::fusion::p_NilVariable::_get_impl(this)->inst(_2626,_2627,_2628,_2629,_2630); }void mosek::fusion::p_NilVariable::inst( long long _2626,long long _2627,std::shared_ptr< monty::ndarray< int,1 > > _2628,std::shared_ptr< monty::ndarray< int,1 > > _2629,std::shared_ptr< monty::ndarray< int,1 > > _2630){ }void mosek::fusion::NilVariable::set_values  ( std::shared_ptr< monty::ndarray< long long,1 > > _2631,    std::shared_ptr< monty::ndarray< double,1 > > _2632,    bool _2633) { mosek::fusion::p_NilVariable::_get_impl(this)->set_values(_2631,_2632,_2633); }void mosek::fusion::p_NilVariable::set_values( std::shared_ptr< monty::ndarray< long long,1 > > _2631,std::shared_ptr< monty::ndarray< double,1 > > _2632,bool _2633){ }void mosek::fusion::NilVariable::set_values  ( long long _2634,    std::shared_ptr< monty::ndarray< int,1 > > _2635,    std::shared_ptr< monty::ndarray< long long,1 > > _2636,    int _2637,    std::shared_ptr< monty::ndarray< double,1 > > _2638,    bool _2639) { mosek::fusion::p_NilVariable::_get_impl(this)->set_values(_2634,_2635,_2636,_2637,_2638,_2639); }void mosek::fusion::p_NilVariable::set_values( long long _2634,std::shared_ptr< monty::ndarray< int,1 > > _2635,std::shared_ptr< monty::ndarray< long long,1 > > _2636,int _2637,std::shared_ptr< monty::ndarray< double,1 > > _2638,bool _2639){ }void mosek::fusion::NilVariable::values  ( std::shared_ptr< monty::ndarray< long long,1 > > _2640,    int _2641,    std::shared_ptr< monty::ndarray< double,1 > > _2642,    bool _2643) { mosek::fusion::p_NilVariable::_get_impl(this)->values(_2640,_2641,_2642,_2643); }void mosek::fusion::p_NilVariable::values( std::shared_ptr< monty::ndarray< long long,1 > > _2640,int _2641,std::shared_ptr< monty::ndarray< double,1 > > _2642,bool _2643){ }void mosek::fusion::NilVariable::values  ( long long _2644,    std::shared_ptr< monty::ndarray< int,1 > > _2645,    std::shared_ptr< monty::ndarray< long long,1 > > _2646,    int _2647,    std::shared_ptr< monty::ndarray< double,1 > > _2648,    bool _2649) { mosek::fusion::p_NilVariable::_get_impl(this)->values(_2644,_2645,_2646,_2647,_2648,_2649); }void mosek::fusion::p_NilVariable::values( long long _2644,std::shared_ptr< monty::ndarray< int,1 > > _2645,std::shared_ptr< monty::ndarray< long long,1 > > _2646,int _2647,std::shared_ptr< monty::ndarray< double,1 > > _2648,bool _2649){ }void mosek::fusion::NilVariable::make_continuous  ( std::shared_ptr< monty::ndarray< long long,1 > > _2650) { mosek::fusion::p_NilVariable::_get_impl(this)->make_continuous(_2650); }void mosek::fusion::p_NilVariable::make_continuous( std::shared_ptr< monty::ndarray< long long,1 > > _2650){ }void mosek::fusion::NilVariable::make_integer  ( std::shared_ptr< monty::ndarray< long long,1 > > _2651) { mosek::fusion::p_NilVariable::_get_impl(this)->make_integer(_2651); }void mosek::fusion::p_NilVariable::make_integer( std::shared_ptr< monty::ndarray< long long,1 > > _2651){ }void mosek::fusion::NilVariable::makeContinuous  ( ) { mosek::fusion::p_NilVariable::_get_impl(this)->makeContinuous(); }void mosek::fusion::p_NilVariable::makeContinuous( ){ _pubthis->make_continuous(([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _8346; for (long long _2652=(int)0, _8347=_pubthis->size(); _2652 < _8347;++_2652)_8346.push_back(_2652); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_8346.size()),_8346.begin(),_8346.end())); })()); }void mosek::fusion::NilVariable::makeInteger  ( ) { mosek::fusion::p_NilVariable::_get_impl(this)->makeInteger(); }void mosek::fusion::p_NilVariable::makeInteger( ){ _pubthis->make_integer(([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _8348; for (long long _2653=(int)0, _8349=_pubthis->size(); _2653 < _8349;++_2653)_8348.push_back(_2653); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_8348.size()),_8348.begin(),_8348.end())); })()); }std::string mosek::fusion::NilVariable::toString  ( ) { return mosek::fusion::p_NilVariable::_get_impl(this)->toString(); }std::string mosek::fusion::p_NilVariable::toString( ){ return std::string ("NilVariable"); }long long mosek::fusion::NilVariable::size  ( ) { return mosek::fusion::p_NilVariable::_get_impl(this)->size(); }long long mosek::fusion::p_NilVariable::size( ){ return (int)0; }std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::NilVariable::dual  ( ) { return mosek::fusion::p_NilVariable::_get_impl(this)->dual(); }std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_NilVariable::dual( ){ return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)0))); }std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::NilVariable::level  ( ) { return mosek::fusion::p_NilVariable::_get_impl(this)->level(); }std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_NilVariable::level( ){ return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)0))); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::index  ( std::shared_ptr< monty::ndarray< int,1 > > _2654) { return mosek::fusion::p_NilVariable::_get_impl(this)->index(_2654); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_NilVariable::index( std::shared_ptr< monty::ndarray< int,1 > > _2654){ throw ::mosek::fusion::SliceError(std::string ("Slice is out of bounds"));}monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::index  ( int _2655) { return mosek::fusion::p_NilVariable::_get_impl(this)->index(_2655); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_NilVariable::index( int _2655){ throw ::mosek::fusion::SliceError(std::string ("Slice is out of bounds"));}monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::slice  ( std::shared_ptr< monty::ndarray< int,1 > > _2656,    std::shared_ptr< monty::ndarray< int,1 > > _2657) { return mosek::fusion::p_NilVariable::_get_impl(this)->slice(_2656,_2657); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_NilVariable::slice( std::shared_ptr< monty::ndarray< int,1 > > _2656,std::shared_ptr< monty::ndarray< int,1 > > _2657){ int _8350 = (int)0; int _8351 = (int)((_2656)->size(0)); for (int _2658 = _8350;_2658<_8351;++_2658){ if ((((*_2657)(_2658)) > ((*_2656)(_2658)))){ throw ::mosek::fusion::SliceError(std::string ("Slice is out of bounds"));}else {}}return _pubthis; }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::slice  ( int _2659,    int _2660) { return mosek::fusion::p_NilVariable::_get_impl(this)->slice(_2659,_2660); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_NilVariable::slice( int _2659,int _2660){ if ((_2660 > _2659)){ throw ::mosek::fusion::SliceError(std::string ("Slice is out of bounds"));}else { return _pubthis; }}void mosek::fusion::p_NilVariable::destroy(){}void mosek::fusion::NilVariable::destroy() { mosek::fusion::p_NilVariable::_get_impl(this)->destroy(); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::NilVariable::asExpr()
{ return mosek::fusion::BaseVariable::asExpr(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::pick(std::shared_ptr< monty::ndarray< int,2 > > _2737)
{ return mosek::fusion::BaseVariable::pick(_2737); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::pick(std::shared_ptr< monty::ndarray< int,1 > > _2740)
{ return mosek::fusion::BaseVariable::pick(_2740); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::antidiag()
{ return mosek::fusion::BaseVariable::antidiag(); }
monty::rc_ptr< ::mosek::fusion::Set > mosek::fusion::NilVariable::shape()
{ return mosek::fusion::BaseVariable::shape(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::pick(std::shared_ptr< monty::ndarray< int,1 > > _2730,std::shared_ptr< monty::ndarray< int,1 > > _2731,std::shared_ptr< monty::ndarray< int,1 > > _2732)
{ return mosek::fusion::BaseVariable::pick(_2730,_2731,_2732); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::index(int _2723,int _2724,int _2725)
{ return mosek::fusion::BaseVariable::index(_2723,_2724,_2725); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::diag()
{ return mosek::fusion::BaseVariable::diag(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::index(int _2726,int _2727)
{ return mosek::fusion::BaseVariable::index(_2726,_2727); }
monty::rc_ptr< ::mosek::fusion::Set > mosek::fusion::NilVariable::getShape()
{ return mosek::fusion::BaseVariable::getShape(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::transpose()
{ return mosek::fusion::BaseVariable::transpose(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::pick(std::shared_ptr< monty::ndarray< int,1 > > _2734,std::shared_ptr< monty::ndarray< int,1 > > _2735)
{ return mosek::fusion::BaseVariable::pick(_2734,_2735); }
monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::NilVariable::getModel()
{ return mosek::fusion::BaseVariable::getModel(); }
void mosek::fusion::NilVariable::setLevel(std::shared_ptr< monty::ndarray< double,1 > > _2714)
{ mosek::fusion::BaseVariable::setLevel(_2714); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::diag(int _2743)
{ return mosek::fusion::BaseVariable::diag(_2743); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::antidiag(int _2742)
{ return mosek::fusion::BaseVariable::antidiag(_2742); }
void mosek::fusion::NilVariable::values(int _2697,std::shared_ptr< monty::ndarray< double,1 > > _2698,bool _2699)
{ mosek::fusion::BaseVariable::values(_2697,_2698,_2699); }
mosek::fusion::BaseVariable::BaseVariable(mosek::fusion::p_BaseVariable *_impl) : _impl(_impl) { /*std::cout << "BaseVariable() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::BaseVariable::~BaseVariable() { delete _impl; _impl = nullptr; }mosek::fusion::p_BaseVariable::p_BaseVariable  (::mosek::fusion::BaseVariable * _pubthis) :     _pubthis(_pubthis){}void mosek::fusion::p_BaseVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::BaseVariable > _2661,    monty::rc_ptr< ::mosek::fusion::Model > _2662){monty::rc_reserve __reserve_this(_pubthis); { { (model = _2662); (shape_p = mosek::fusion::p_BaseVariable::_get_impl(_2661)->shape_p); }}}void mosek::fusion::p_BaseVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _2663,    monty::rc_ptr< ::mosek::fusion::Set > _2664){monty::rc_reserve __reserve_this(_pubthis); { { (model = _2663); (shape_p = _2664); }}}monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::BaseVariable::elementDesc  ( long long _2665,    monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2666) { return mosek::fusion::p_BaseVariable::_get_impl(this)->elementDesc(_2665,_2666); }monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::p_BaseVariable::elementDesc( long long _2665,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2666){ _pubthis->elementName(_2665,_2666); return _2666; }std::string mosek::fusion::BaseVariable::toString  ( ) { return mosek::fusion::p_BaseVariable::_get_impl(this)->toString(); }std::string mosek::fusion::p_BaseVariable::toString( ){ monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2669 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer(); mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_2669.get())->a(std::string ("Variable( (")).get())->a(shape_p->dim((int)0)); int _8352 = (int)1; int _8353 = mosek::fusion::p_Set::_get_impl(shape_p)->nd; for (int _2670 = _8352;_2670<_8353;++_2670){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_2669.get())->a(std::string (",")).get())->a(shape_p->dim(_2670)); }mosek::fusion::Utils::p_StringBuffer::_get_impl(_2669.get())->a(std::string (" )")); if ((mosek::fusion::p_Set::_get_impl(shape_p)->size < (int)51)){ int _8354 = (int)0; long long _8355 = mosek::fusion::p_Set::_get_impl(shape_p)->size; for (long long _2671 = _8354;_2671<_8355;++_2671){ mosek::fusion::Utils::p_StringBuffer::_get_impl(_2669.get())->a(std::string (",\n  ")); _pubthis->elementDesc(_2671,_2669); }}else { int _8356 = (int)0; int _8357 = (int)25; for (int _2672 = _8356;_2672<_8357;++_2672){ mosek::fusion::Utils::p_StringBuffer::_get_impl(_2669.get())->a(std::string (",\n  ")); _pubthis->elementDesc((long long)(_2672),_2669); }mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_2669.get())->a(std::string ("... (")).get())->a((mosek::fusion::p_Set::_get_impl(shape_p)->size - (int)50)).get())->a(std::string (" elements left out)")); long long _8358 = (mosek::fusion::p_Set::_get_impl(shape_p)->size - (int)25); long long _8359 = mosek::fusion::p_Set::_get_impl(shape_p)->size; for (long long _2673 = _8358;_2673<_8359;++_2673){ mosek::fusion::Utils::p_StringBuffer::_get_impl(_2669.get())->a(std::string (",\n  ")); _pubthis->elementDesc(_2673,_2669); }}mosek::fusion::Utils::p_StringBuffer::_get_impl(_2669.get())->a(std::string (" )")); return mosek::fusion::Utils::p_StringBuffer::_get_impl(_2669.get())->toString(); }void mosek::fusion::BaseVariable::inst  ( std::shared_ptr< monty::ndarray< long long,1 > > _2674,    int _2675,    int _2676,    long long _2677,    long long _2678,    std::shared_ptr< monty::ndarray< int,1 > > _2679,    std::shared_ptr< monty::ndarray< int,1 > > _2680,    std::shared_ptr< monty::ndarray< int,1 > > _2681) { mosek::fusion::p_BaseVariable::_get_impl(this)->inst(_2674,_2675,_2676,_2677,_2678,_2679,_2680,_2681); }void mosek::fusion::p_BaseVariable::inst( std::shared_ptr< monty::ndarray< long long,1 > > _2674,int _2675,int _2676,long long _2677,long long _2678,std::shared_ptr< monty::ndarray< int,1 > > _2679,std::shared_ptr< monty::ndarray< int,1 > > _2680,std::shared_ptr< monty::ndarray< int,1 > > _2681){ int _8360 = _2675; int _8361 = _2676; for (int _2682 = _8360;_2682<_8361;++_2682){ _pubthis->inst((((*_2674)(_2682)) - _2677),((_2678 + _2682) - _2675),_2679,_2680,_2681); }}void mosek::fusion::BaseVariable::values  ( int _2697,    std::shared_ptr< monty::ndarray< double,1 > > _2698,    bool _2699) { mosek::fusion::p_BaseVariable::_get_impl(this)->values(_2697,_2698,_2699); }void mosek::fusion::p_BaseVariable::values( int _2697,std::shared_ptr< monty::ndarray< double,1 > > _2698,bool _2699){ std::shared_ptr< monty::ndarray< long long,1 > > _2700 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(mosek::fusion::p_Set::_get_impl(shape_p)->nd))); std::shared_ptr< monty::ndarray< int,1 > > _2701 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(mosek::fusion::p_Set::_get_impl(shape_p)->nd))); int _8362 = (int)0; int _8363 = mosek::fusion::p_Set::_get_impl(shape_p)->nd; for (int _2702 = _8362;_2702<_8363;++_2702){ (((*_2700)(_2702)) = shape_p->stride(_2702)); }int _8364 = (int)0; int _8365 = mosek::fusion::p_Set::_get_impl(shape_p)->nd; for (int _2703 = _8364;_2703<_8365;++_2703){ (((*_2701)(_2703)) = shape_p->dim(_2703)); }_pubthis->values((long long)0,_2701,_2700,_2697,_2698,_2699); }void mosek::fusion::BaseVariable::setLevel  ( std::shared_ptr< monty::ndarray< double,1 > > _2714) { mosek::fusion::p_BaseVariable::_get_impl(this)->setLevel(_2714); }void mosek::fusion::p_BaseVariable::setLevel( std::shared_ptr< monty::ndarray< double,1 > > _2714){ if ((mosek::fusion::p_Set::_get_impl(shape_p)->size > (int)((_2714)->size(0)))){ throw ::mosek::fusion::LengthError(std::string ("Invalid length of solution values vector"));}else {}_pubthis->set_values((long long)0,([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _8366; for (int _2715=(int)0, _8367=mosek::fusion::p_Set::_get_impl(shape_p)->nd; _2715 < _8367;++_2715)_8366.push_back(shape_p->dim(_2715)); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8366.size()),_8366.begin(),_8366.end())); })(),([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _8368; for (int _2716=(int)0, _8369=mosek::fusion::p_Set::_get_impl(shape_p)->nd; _2716 < _8369;++_2716)_8368.push_back(shape_p->stride(_2716)); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_8368.size()),_8368.begin(),_8368.end())); })(),(int)0,_2714,true); }monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::BaseVariable::getModel  ( ) { return mosek::fusion::p_BaseVariable::_get_impl(this)->getModel(); }monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::p_BaseVariable::getModel( ){ return model; }monty::rc_ptr< ::mosek::fusion::Set > mosek::fusion::BaseVariable::shape  ( ) { return mosek::fusion::p_BaseVariable::_get_impl(this)->shape(); }monty::rc_ptr< ::mosek::fusion::Set > mosek::fusion::p_BaseVariable::shape( ){ return shape_p; }monty::rc_ptr< ::mosek::fusion::Set > mosek::fusion::BaseVariable::getShape  ( ) { return mosek::fusion::p_BaseVariable::_get_impl(this)->getShape(); }monty::rc_ptr< ::mosek::fusion::Set > mosek::fusion::p_BaseVariable::getShape( ){ return shape_p; }long long mosek::fusion::BaseVariable::size  ( ) { return mosek::fusion::p_BaseVariable::_get_impl(this)->size(); }long long mosek::fusion::p_BaseVariable::size( ){ return mosek::fusion::p_Set::_get_impl(shape_p)->size; }std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::BaseVariable::dual  ( ) { return mosek::fusion::p_BaseVariable::_get_impl(this)->dual(); }std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_BaseVariable::dual( ){ std::shared_ptr< monty::ndarray< double,1 > > _2717 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(mosek::fusion::p_Set::_get_impl(shape_p)->size))); if ((mosek::fusion::p_Set::_get_impl(shape_p)->size > (int)0)){ _pubthis->values((int)0,_2717,false); }else {}return _2717; }std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::BaseVariable::level  ( ) { return mosek::fusion::p_BaseVariable::_get_impl(this)->level(); }std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_BaseVariable::level( ){ std::shared_ptr< monty::ndarray< double,1 > > _2718 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(mosek::fusion::p_Set::_get_impl(shape_p)->size))); if ((mosek::fusion::p_Set::_get_impl(shape_p)->size > (int)0)){ _pubthis->values((int)0,_2718,true); }else {}return _2718; }void mosek::fusion::BaseVariable::makeContinuous  ( ) { mosek::fusion::p_BaseVariable::_get_impl(this)->makeContinuous(); }void mosek::fusion::p_BaseVariable::makeContinuous( ){ _pubthis->make_continuous(([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _8370; for (long long _2721=(long long)0, _8371=_pubthis->size(); _2721 < _8371;++_2721)_8370.push_back(_2721); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_8370.size()),_8370.begin(),_8370.end())); })()); }void mosek::fusion::BaseVariable::makeInteger  ( ) { mosek::fusion::p_BaseVariable::_get_impl(this)->makeInteger(); }void mosek::fusion::p_BaseVariable::makeInteger( ){ _pubthis->make_integer(([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _8372; for (long long _2722=(long long)0, _8373=_pubthis->size(); _2722 < _8373;++_2722)_8372.push_back(_2722); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_8372.size()),_8372.begin(),_8372.end())); })()); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::transpose  ( ) { return mosek::fusion::p_BaseVariable::_get_impl(this)->transpose(); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::transpose( ){ if ((mosek::fusion::p_Set::_get_impl(shape_p)->nd > (int)2)){ throw ::mosek::fusion::DimensionError(std::string ("Invalid shape for operation"));}else {}return ::mosek::fusion::p_SliceVariable::_new_SliceVariable(::mosek::fusion::Variable::t(_pubthis),::mosek::fusion::p_Set::make(shape_p->dim((int)1),shape_p->dim((int)0)),(long long)((int)0),std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >{shape_p->stride((int)1),shape_p->stride((int)0)})); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::index  ( int _2723,    int _2724,    int _2725) { return mosek::fusion::p_BaseVariable::_get_impl(this)->index(_2723,_2724,_2725); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::index( int _2723,int _2724,int _2725){ return _pubthis->index(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{_2723,_2724,_2725})); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::index  ( int _2726,    int _2727) { return mosek::fusion::p_BaseVariable::_get_impl(this)->index(_2726,_2727); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::index( int _2726,int _2727){ return _pubthis->index(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{_2726,_2727})); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::index  ( std::shared_ptr< monty::ndarray< int,1 > > _2728) { return mosek::fusion::p_BaseVariable::_get_impl(this)->index(_2728); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::index( std::shared_ptr< monty::ndarray< int,1 > > _2728){ if ((mosek::fusion::p_Set::_get_impl(shape_p)->nd != (int)((_2728)->size(0)))){ throw ::mosek::fusion::IndexError(std::string ("Invalid index"));}else {}return ::mosek::fusion::p_PickVariable::_new_PickVariable(::mosek::fusion::Variable::t(_pubthis),std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >{mosek::fusion::p_Set::_get_impl(shape_p.get())->linearidx(_2728)})); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::index  ( int _2729) { return mosek::fusion::p_BaseVariable::_get_impl(this)->index(_2729); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::index( int _2729){ return _pubthis->pick(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{_2729})); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::pick  ( std::shared_ptr< monty::ndarray< int,1 > > _2730,    std::shared_ptr< monty::ndarray< int,1 > > _2731,    std::shared_ptr< monty::ndarray< int,1 > > _2732) { return mosek::fusion::p_BaseVariable::_get_impl(this)->pick(_2730,_2731,_2732); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::pick( std::shared_ptr< monty::ndarray< int,1 > > _2730,std::shared_ptr< monty::ndarray< int,1 > > _2731,std::shared_ptr< monty::ndarray< int,1 > > _2732){ if ((mosek::fusion::p_Set::_get_impl(shape_p)->nd != (int)3)){ throw ::mosek::fusion::IndexError(std::string ("Invalid index"));}else {}if ((((int)((_2730)->size(0)) != (int)((_2731)->size(0))) || ((int)((_2730)->size(0)) != (int)((_2732)->size(0))))){ throw ::mosek::fusion::LengthError(std::string ("Mismatching argument lengths"));}else {}return ::mosek::fusion::p_PickVariable::_new_PickVariable(::mosek::fusion::Variable::t(_pubthis),([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _8374; for (int _2733=(int)0, _8375=(int)((_2730)->size(0)); _2733 < _8375;++_2733)_8374.push_back(mosek::fusion::p_Set::_get_impl(shape_p.get())->linearidx(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{((*_2730)(_2733)),((*_2731)(_2733)),((*_2732)(_2733))}))); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_8374.size()),_8374.begin(),_8374.end())); })()); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::pick  ( std::shared_ptr< monty::ndarray< int,1 > > _2734,    std::shared_ptr< monty::ndarray< int,1 > > _2735) { return mosek::fusion::p_BaseVariable::_get_impl(this)->pick(_2734,_2735); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::pick( std::shared_ptr< monty::ndarray< int,1 > > _2734,std::shared_ptr< monty::ndarray< int,1 > > _2735){ if ((mosek::fusion::p_Set::_get_impl(shape_p)->nd != (int)2)){ throw ::mosek::fusion::IndexError(std::string ("Invalid index"));}else {}if (((int)((_2734)->size(0)) != (int)((_2735)->size(0)))){ throw ::mosek::fusion::LengthError(std::string ("Mismatching argument lengths"));}else {}return ::mosek::fusion::p_PickVariable::_new_PickVariable(::mosek::fusion::Variable::t(_pubthis),([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _8376; for (int _2736=(int)0, _8377=(int)((_2734)->size(0)); _2736 < _8377;++_2736)_8376.push_back(mosek::fusion::p_Set::_get_impl(shape_p.get())->linearidx(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{((*_2734)(_2736)),((*_2735)(_2736))}))); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_8376.size()),_8376.begin(),_8376.end())); })()); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::pick  ( std::shared_ptr< monty::ndarray< int,2 > > _2737) { return mosek::fusion::p_BaseVariable::_get_impl(this)->pick(_2737); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::pick( std::shared_ptr< monty::ndarray< int,2 > > _2737){ if ((mosek::fusion::p_Set::_get_impl(shape_p)->nd != (int)((_2737)->size(1)))){ throw ::mosek::fusion::IndexError(std::string ("Invalid index"));}else {}return ::mosek::fusion::p_PickVariable::_new_PickVariable(::mosek::fusion::Variable::t(_pubthis),([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _8378; for (int _2738=(int)0, _8379=(int)((_2737)->size(0)); _2738 < _8379;++_2738)_8378.push_back(mosek::fusion::p_Set::_get_impl(shape_p.get())->linearidx(([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _8380; for (int _2739=(int)0, _8381=(int)((_2737)->size(1)); _2739 < _8381;++_2739)_8380.push_back(((*_2737)(_2738,_2739))); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8380.size()),_8380.begin(),_8380.end())); })())); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_8378.size()),_8378.begin(),_8378.end())); })()); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::pick  ( std::shared_ptr< monty::ndarray< int,1 > > _2740) { return mosek::fusion::p_BaseVariable::_get_impl(this)->pick(_2740); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::pick( std::shared_ptr< monty::ndarray< int,1 > > _2740){ if ((mosek::fusion::p_Set::_get_impl(shape_p)->nd != (int)1)){ throw ::mosek::fusion::IndexError(std::string ("Invalid index"));}else {}return ::mosek::fusion::p_PickVariable::_new_PickVariable(::mosek::fusion::Variable::t(_pubthis),([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _8382; for (int _2741=(int)0, _8383=(int)((_2740)->size(0)); _2741 < _8383;++_2741)_8382.push_back(((*_2740)(_2741))); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_8382.size()),_8382.begin(),_8382.end())); })()); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::antidiag  ( int _2742) { return mosek::fusion::p_BaseVariable::_get_impl(this)->antidiag(_2742); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::antidiag( int _2742){ if ((mosek::fusion::p_Set::_get_impl(shape_p)->nd != (int)2)){ throw ::mosek::fusion::DimensionError(std::string ("antidiag() only works on two-dimensional objects"));}else {}if ((_2742 >= (int)0)){ return general_diag(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)0,((shape_p->dim((int)1) - (int)1) - _2742)}),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)1,(- (int)1)})); }else { return general_diag(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(- _2742),(shape_p->dim((int)1) - (int)1)}),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)1,(- (int)1)})); }}monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::antidiag  ( ) { return mosek::fusion::p_BaseVariable::_get_impl(this)->antidiag(); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::antidiag( ){ if ((mosek::fusion::p_Set::_get_impl(shape_p)->nd != (int)2)){ throw ::mosek::fusion::DimensionError(std::string ("antidiag() only works on two-dimensional objects"));}else {}return general_diag(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)0,(shape_p->dim((int)1) - (int)1)}),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)1,(- (int)1)})); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::diag  ( int _2743) { return mosek::fusion::p_BaseVariable::_get_impl(this)->diag(_2743); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::diag( int _2743){ if ((mosek::fusion::p_Set::_get_impl(shape_p)->nd != (int)2)){ throw ::mosek::fusion::DimensionError(std::string ("diag() only works on two-dimensional objects"));}else {}if ((_2743 >= (int)0)){ return general_diag(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)0,_2743}),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)1,(int)1})); }else { return general_diag(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(- _2743),(int)0}),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)1,(int)1})); }}monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::diag  ( ) { return mosek::fusion::p_BaseVariable::_get_impl(this)->diag(); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::diag( ){ if ((mosek::fusion::p_Set::_get_impl(shape_p)->nd != (int)2)){ throw ::mosek::fusion::DimensionError(std::string ("diag() only works on two-dimensional objects"));}else {}return general_diag(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)0,(int)0}),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)1,(int)1})); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::general_diag( std::shared_ptr< monty::ndarray< int,1 > > _2744,std::shared_ptr< monty::ndarray< int,1 > > _2745){ if (((mosek::fusion::p_Set::_get_impl(shape_p)->nd != (int)((_2744)->size(0))) || (mosek::fusion::p_Set::_get_impl(shape_p)->nd != (int)((_2745)->size(0))))){ throw ::mosek::fusion::DimensionError(std::string ("Invalid start or step definition"));}else {}int _8384 = (int)0; int _8385 = mosek::fusion::p_Set::_get_impl(shape_p)->nd; for (int _2746 = _8384;_2746<_8385;++_2746){ if (((((*_2744)(_2746)) < (int)0) || (((*_2744)(_2746)) >= shape_p->dim(_2746)))){ throw ::mosek::fusion::LengthError(std::string ("Start element is out of bounds"));}else {}}long long _2747 = (long long)0; int _8386 = (int)0; int _8387 = mosek::fusion::p_Set::_get_impl(shape_p)->nd; for (int _2748 = _8386;_2748<_8387;++_2748){ (_2747 += (shape_p->stride(_2748) * ((*_2744)(_2748)))); }std::shared_ptr< monty::ndarray< int,1 > > _2749 = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _8388; for (int _2750=(int)0, _8389=mosek::fusion::p_Set::_get_impl(shape_p)->nd; _2750 < _8389;++_2750)_8388.push_back(([&]() -> int { if ( (((*_2745)(_2750)) > (int)0)) return (((((shape_p->dim(_2750) - ((*_2744)(_2750))) - (int)1) / ((*_2745)(_2750))) + (int)1)); else return (([&]() -> int { if ( (((*_2745)(_2750)) < (int)0)) return (((((*_2744)(_2750)) / (- ((*_2745)(_2750)))) + (int)1)); else return ((int)0); })()); })()); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8388.size()),_8388.begin(),_8388.end())); })(); int _2751 = ((*_2749)((int)0)); int _8390 = (int)1; int _8391 = mosek::fusion::p_Set::_get_impl(shape_p)->nd; for (int _2752 = _8390;_2752<_8391;++_2752){ (_2751 = ([&]() -> int { if ( (_2751 < ((*_2749)(_2752)))) return (_2751); else return (((*_2749)(_2752))); })()); }long long _2753 = (long long)0; int _8392 = (int)0; int _8393 = mosek::fusion::p_Set::_get_impl(shape_p)->nd; for (int _2754 = _8392;_2754<_8393;++_2754){ (_2753 += (((*_2745)(_2754)) * shape_p->stride(_2754))); }return ::mosek::fusion::p_SliceVariable::_new_SliceVariable(::mosek::fusion::Variable::t(_pubthis),::mosek::fusion::p_Set::make(_2751),_2747,std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >{_2753})); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseVariable::asExpr  ( ) { return mosek::fusion::p_BaseVariable::_get_impl(this)->asExpr(); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_BaseVariable::asExpr( ){ return ::mosek::fusion::p_Expr::_new_Expr(([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _8394; for (long long _2755=(long long)0, _8395=(mosek::fusion::p_Set::_get_impl(shape_p)->size + (int)1); _2755 < _8395;++_2755)_8394.push_back(_2755); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_8394.size()),_8394.begin(),_8394.end())); })(),std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{_pubthis}),([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _8396; for (long long _2756=(long long)0, _8397=mosek::fusion::p_Set::_get_impl(shape_p)->size; _2756 < _8397;++_2756)_8396.push_back(_2756); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_8396.size()),_8396.begin(),_8396.end())); })(),([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _8398; for (long long _2757=(long long)0, _8399=mosek::fusion::p_Set::_get_impl(shape_p)->size; _2757 < _8399;++_2757)_8398.push_back(1.0); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8398.size()),_8398.begin(),_8398.end())); })(),nullptr,shape_p,nullptr,(int)1); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::slice  ( std::shared_ptr< monty::ndarray< int,1 > > _2758,    std::shared_ptr< monty::ndarray< int,1 > > _2759) { return mosek::fusion::p_BaseVariable::_get_impl(this)->slice(_2758,_2759); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::slice( std::shared_ptr< monty::ndarray< int,1 > > _2758,std::shared_ptr< monty::ndarray< int,1 > > _2759){ return ::mosek::fusion::p_SliceVariable::_new_SliceVariable(::mosek::fusion::Variable::t(_pubthis),::mosek::fusion::p_Set::make(([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _8400; for (int _2760=(int)0, _8401=(int)((_2758)->size(0)); _2760 < _8401;++_2760)_8400.push_back((((*_2759)(_2760)) - ((*_2758)(_2760)))); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8400.size()),_8400.begin(),_8400.end())); })()),mosek::fusion::p_Set::_get_impl(shape_p.get())->linearidx(_2758),([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _8402; for (int _2761=(int)0, _8403=(int)((_2758)->size(0)); _2761 < _8403;++_2761)_8402.push_back(shape_p->stride(_2761)); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_8402.size()),_8402.begin(),_8402.end())); })()); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::slice  ( int _2762,    int _2763) { return mosek::fusion::p_BaseVariable::_get_impl(this)->slice(_2762,_2763); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::slice( int _2762,int _2763){ return ::mosek::fusion::p_SliceVariable::_new_SliceVariable(::mosek::fusion::Variable::t(_pubthis),::mosek::fusion::p_Set::make((_2763 - _2762)),(long long)(_2762),std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >{(int)1})); }void mosek::fusion::p_BaseVariable::destroy(){model.reset();shape_p.reset();}void mosek::fusion::BaseVariable::destroy() { mosek::fusion::p_BaseVariable::_get_impl(this)->destroy(); }mosek::fusion::Var::Var(mosek::fusion::p_Var *_impl) : _impl(_impl) { /*std::cout << "Var() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::Var::~Var() { delete _impl; _impl = nullptr; }mosek::fusion::p_Var::p_Var  (::mosek::fusion::Var * _pubthis) :     _pubthis(_pubthis){}monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::compress  ( monty::rc_ptr< ::mosek::fusion::Variable > _2826) { return mosek::fusion::p_Var::compress(_2826); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::compress( monty::rc_ptr< ::mosek::fusion::Variable > _2826){ int _2827 = _2826->getShape()->realnd(); if ((_2827 == mosek::fusion::p_Set::_get_impl(_2826->getShape())->nd)){ return _2826; }else if ((_2827 == (int)1)){ return ::mosek::fusion::p_Var::reshape(_2826,(int)mosek::fusion::p_Set::_get_impl(_2826->getShape())->size); }else { std::shared_ptr< monty::ndarray< int,1 > > _2828 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2827))); { int _2829 = (int)0; int _8404 = (int)0; int _8405 = mosek::fusion::p_Set::_get_impl(_2826->getShape())->nd; for (int _2830 = _8404;_2830<_8405;++_2830){ if ((_2826->getShape()->dim(_2830) > (int)1)){ (((*_2828)(_2829)) = _2826->getShape()->dim(_2830)); ( ++ _2829 ); }else {}}}return ::mosek::fusion::p_Var::reshape(_2826,::mosek::fusion::Set::t(::mosek::fusion::p_NDSet::_new_NDSet(_2828))); }}monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::reshape  ( monty::rc_ptr< ::mosek::fusion::Variable > _2831,    int _2832) { return mosek::fusion::p_Var::reshape(_2831,_2832); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::reshape( monty::rc_ptr< ::mosek::fusion::Variable > _2831,int _2832){ if ((_2832 != mosek::fusion::p_Set::_get_impl(_2831->getShape())->size)){ throw ::mosek::fusion::DimensionError(std::string ("New shape has wrong number of elements"));}else {}return ::mosek::fusion::p_SliceVariable::_new_SliceVariable(_2831,::mosek::fusion::Set::t(::mosek::fusion::p_IntSet::_new_IntSet(_2832)),(long long)0,std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >{(long long)1})); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::reshape  ( monty::rc_ptr< ::mosek::fusion::Variable > _2833,    int _2834,    int _2835) { return mosek::fusion::p_Var::reshape(_2833,_2834,_2835); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::reshape( monty::rc_ptr< ::mosek::fusion::Variable > _2833,int _2834,int _2835){ if (((_2834 * _2835) != mosek::fusion::p_Set::_get_impl(_2833->getShape())->size)){ throw ::mosek::fusion::DimensionError(std::string ("New shape has wrong number of elements"));}else {}return ::mosek::fusion::p_SliceVariable::_new_SliceVariable(_2833,::mosek::fusion::Set::t(::mosek::fusion::p_NDSet::_new_NDSet(_2834,_2835)),(long long)0,std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >{(long long)_2835,(long long)1})); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::flatten  ( monty::rc_ptr< ::mosek::fusion::Variable > _2836) { return mosek::fusion::p_Var::flatten(_2836); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::flatten( monty::rc_ptr< ::mosek::fusion::Variable > _2836){ if ((mosek::fusion::p_Set::_get_impl(_2836->getShape())->nd == (int)1)){ return _2836; }else { return ::mosek::fusion::p_Var::reshape(_2836,::mosek::fusion::p_Set::make((int)mosek::fusion::p_Set::_get_impl(_2836->getShape())->size)); }}monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::reshape  ( monty::rc_ptr< ::mosek::fusion::Variable > _2837,    std::shared_ptr< monty::ndarray< int,1 > > _2838) { return mosek::fusion::p_Var::reshape(_2837,_2838); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::reshape( monty::rc_ptr< ::mosek::fusion::Variable > _2837,std::shared_ptr< monty::ndarray< int,1 > > _2838){ monty::rc_ptr< ::mosek::fusion::Set > _2839 = ::mosek::fusion::p_Set::make(_2838); return ::mosek::fusion::p_Var::reshape(_2837,_2839); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::reshape  ( monty::rc_ptr< ::mosek::fusion::Variable > _2840,    monty::rc_ptr< ::mosek::fusion::Set > _2841) { return mosek::fusion::p_Var::reshape(_2840,_2841); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::reshape( monty::rc_ptr< ::mosek::fusion::Variable > _2840,monty::rc_ptr< ::mosek::fusion::Set > _2841){ if ((mosek::fusion::p_Set::_get_impl(_2841)->size != mosek::fusion::p_Set::_get_impl(_2840->getShape())->size)){ throw ::mosek::fusion::DimensionError(std::string ("New shape has wrong number of elements"));}else {}return ::mosek::fusion::p_SliceVariable::_new_SliceVariable(_2840,_2841,(long long)((int)0),([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _8406; for (int _2842=(int)0, _8407=mosek::fusion::p_Set::_get_impl(_2841)->nd; _2842 < _8407;++_2842)_8406.push_back(_2841->stride(_2842)); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_8406.size()),_8406.begin(),_8406.end())); })()); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::reshape_( monty::rc_ptr< ::mosek::fusion::Variable > _2843,monty::rc_ptr< ::mosek::fusion::Set > _2844){ std::shared_ptr< monty::ndarray< long long,1 > > _2845 = ([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _8408; for (int _2846=(int)0, _8409=mosek::fusion::p_Set::_get_impl(_2844)->nd; _2846 < _8409;++_2846)_8408.push_back(_2844->stride(_2846)); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_8408.size()),_8408.begin(),_8408.end())); })(); return ::mosek::fusion::p_SliceVariable::_new_SliceVariable(_2843,_2844,(long long)0,_2845); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::index_flip_( monty::rc_ptr< ::mosek::fusion::Variable > _2847,std::shared_ptr< monty::ndarray< int,1 > > _2848){ std::shared_ptr< monty::ndarray< long long,1 > > _2849 = ([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _8410; for (int _2850=(int)0, _8411=mosek::fusion::p_Set::_get_impl(_2847->getShape())->nd; _2850 < _8411;++_2850)_8410.push_back(_2847->getShape()->stride(_2850)); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_8410.size()),_8410.begin(),_8410.end())); })(); std::shared_ptr< monty::ndarray< int,1 > > _2851 = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _8412; for (int _2852=(int)0, _8413=mosek::fusion::p_Set::_get_impl(_2847->getShape())->nd; _2852 < _8413;++_2852)_8412.push_back(_2847->getShape()->dim(_2852)); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8412.size()),_8412.begin(),_8412.end())); })(); long long _2853 = (long long)0; int _8414 = (int)0; int _8415 = (int)((_2848)->size(0)); for (int _2854 = _8414;_2854<_8415;++_2854){ (_2853 = (_2853 + (((*_2849)(((*_2848)(_2854)))) * (((*_2851)(_2854)) - (int)1)))); (((*_2849)(((*_2851)(_2854)))) = (- ((*_2849)(((*_2851)(_2854)))))); }return ::mosek::fusion::p_SliceVariable::_new_SliceVariable(_2847,_2847->getShape(),(long long)0,_2849); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::index_permute_( monty::rc_ptr< ::mosek::fusion::Variable > _2855,std::shared_ptr< monty::ndarray< int,1 > > _2856){ std::shared_ptr< monty::ndarray< long long,1 > > _2857 = ([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _8416; for (int _2858=(int)0, _8417=mosek::fusion::p_Set::_get_impl(_2855->getShape())->nd; _2858 < _8417;++_2858)_8416.push_back(_2855->getShape()->stride(((*_2856)(_2858)))); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_8416.size()),_8416.begin(),_8416.end())); })(); std::shared_ptr< monty::ndarray< int,1 > > _2859 = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _8418; for (int _2860=(int)0, _8419=mosek::fusion::p_Set::_get_impl(_2855->getShape())->nd; _2860 < _8419;++_2860)_8418.push_back(_2855->getShape()->dim(((*_2856)(_2860)))); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8418.size()),_8418.begin(),_8418.end())); })(); return ::mosek::fusion::p_SliceVariable::_new_SliceVariable(_2855,::mosek::fusion::Set::t(::mosek::fusion::p_NDSet::_new_NDSet(_2859)),(long long)0,_2857); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::hrepeat  ( monty::rc_ptr< ::mosek::fusion::Variable > _2861,    int _2862) { return mosek::fusion::p_Var::hrepeat(_2861,_2862); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::hrepeat( monty::rc_ptr< ::mosek::fusion::Variable > _2861,int _2862){ return ::mosek::fusion::p_Var::drepeat(_2861,(int)1,_2862); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::vrepeat  ( monty::rc_ptr< ::mosek::fusion::Variable > _2863,    int _2864) { return mosek::fusion::p_Var::vrepeat(_2863,_2864); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::vrepeat( monty::rc_ptr< ::mosek::fusion::Variable > _2863,int _2864){ return ::mosek::fusion::p_Var::drepeat(_2863,(int)0,_2864); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::repeat  ( monty::rc_ptr< ::mosek::fusion::Variable > _2865,    int _2866) { return mosek::fusion::p_Var::repeat(_2865,_2866); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::repeat( monty::rc_ptr< ::mosek::fusion::Variable > _2865,int _2866){ return ::mosek::fusion::p_Var::drepeat(_2865,(int)0,_2866); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::repeat  ( monty::rc_ptr< ::mosek::fusion::Variable > _2867,    int _2868,    int _2869) { return mosek::fusion::p_Var::repeat(_2867,_2868,_2869); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::repeat( monty::rc_ptr< ::mosek::fusion::Variable > _2867,int _2868,int _2869){ return ::mosek::fusion::p_Var::drepeat(_2867,_2868,_2869); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::drepeat( monty::rc_ptr< ::mosek::fusion::Variable > _2870,int _2871,int _2872){ if ((_2872 < (int)0)){ throw ::mosek::fusion::LengthError(std::string ("Cannot repeat less than 0 times"));}else if ((_2872 == (int)0)){ return ::mosek::fusion::p_NilVariable::_new_NilVariable(); }else if ((_2872 == (int)1)){ return _2870; }else { return ::mosek::fusion::p_RepeatVariable::_new_RepeatVariable(_2870,_2871,_2872); }}monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::stack  ( std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >,1 > > _2873) { return mosek::fusion::p_Var::stack(_2873); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::stack( std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >,1 > > _2873){ { monty::rc_ptr< ::mosek::fusion::Model > _2874 = nullptr; int _8420 = (int)0; int _8421 = (int)((_2873)->size(0)); for (int _2875 = _8420;_2875<_8421;++_2875){ int _8422 = (int)0; int _8423 = (int)((((*_2873)(_2875)))->size(0)); for (int _2876 = _8422;_2876<_8423;++_2876){ if (! _2874){ (_2874 = ((*((*_2873)(_2875)))(_2876))->getModel()); }else if ((((*((*_2873)(_2875)))(_2876))->getModel() && (((*((*_2873)(_2875)))(_2876))->getModel() != _2874))){ throw ::mosek::fusion::ModelError(std::string ("Variables belong to different models"));}else {}}}}int _2877 = (int)0; int _8424 = (int)0; int _8425 = (int)((_2873)->size(0)); for (int _2878 = _8424;_2878<_8425;++_2878){ if (((int)((((*_2873)(_2878)))->size(0)) > (int)0)){ ( ++ _2877 ); }else {}}std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _2879 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >(monty::shape(_2877))); if ((_2877 == (int)0)){ return ::mosek::fusion::p_NilVariable::_new_NilVariable(); }else {}int _2880 = (int)0; int _8426 = (int)0; int _8427 = (int)((_2873)->size(0)); for (int _2881 = _8426;_2881<_8427;++_2881){ if (((int)((((*_2873)(_2881)))->size(0)) == (int)0)){ }else if (((int)((((*_2873)(_2881)))->size(0)) == (int)1)){ monty::rc_ptr< ::mosek::fusion::Variable > _2882 = ((*((*_2873)(_2881)))((int)0)); (((*_2879)(_2880)) = ([&]() -> monty::rc_ptr< ::mosek::fusion::Variable > { if ( (mosek::fusion::p_Set::_get_impl(_2882->getShape())->nd == (int)1)) return (::mosek::fusion::p_Var::reshape(_2882,_2882->getShape()->dim((int)0),(int)1)); else return (_2882); })()); ( ++ _2880 ); }else { int _2883 = (int)0; int _8428 = (int)0; int _8429 = (int)((((*_2873)(_2881)))->size(0)); for (int _2884 = _8428;_2884<_8429;++_2884){ if ((mosek::fusion::p_Set::_get_impl(((*((*_2873)(_2881)))(_2884))->getShape())->size > (int)0)){ ( ++ _2883 ); }else {}}std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _2885 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >(monty::shape(_2883))); int _2886 = (int)0; int _8430 = (int)0; int _8431 = (int)((((*_2873)(_2881)))->size(0)); for (int _2887 = _8430;_2887<_8431;++_2887){ monty::rc_ptr< ::mosek::fusion::Variable > _2888 = ((*((*_2873)(_2881)))(_2887)); if ((mosek::fusion::p_Set::_get_impl(_2888->getShape())->size > (int)0)){ if ((mosek::fusion::p_Set::_get_impl(_2888->getShape())->nd == (int)1)){ (((*_2885)(_2886)) = ::mosek::fusion::p_Var::reshape(_2888,_2888->getShape()->dim((int)0),(int)1)); }else { (((*_2885)(_2886)) = _2888); }( ++ _2886 ); }else {}}(((*_2879)(_2880)) = ::mosek::fusion::p_CompoundVariable::_new_CompoundVariable(_2885,(int)1)); ( ++ _2880 ); }}return ([&]() -> monty::rc_ptr< ::mosek::fusion::Variable > { if ( ((int)((_2879)->size(0)) == (int)1)) return (((*_2879)((int)0))); else return (::mosek::fusion::p_CompoundVariable::_new_CompoundVariable(_2879,(int)0)); })(); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::vstack  ( monty::rc_ptr< ::mosek::fusion::Variable > _2889,    monty::rc_ptr< ::mosek::fusion::Variable > _2890,    monty::rc_ptr< ::mosek::fusion::Variable > _2891) { return mosek::fusion::p_Var::vstack(_2889,_2890,_2891); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::vstack( monty::rc_ptr< ::mosek::fusion::Variable > _2889,monty::rc_ptr< ::mosek::fusion::Variable > _2890,monty::rc_ptr< ::mosek::fusion::Variable > _2891){ return ::mosek::fusion::p_Var::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{_2889,_2890,_2891}),(int)0); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::vstack  ( monty::rc_ptr< ::mosek::fusion::Variable > _2892,    monty::rc_ptr< ::mosek::fusion::Variable > _2893) { return mosek::fusion::p_Var::vstack(_2892,_2893); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::vstack( monty::rc_ptr< ::mosek::fusion::Variable > _2892,monty::rc_ptr< ::mosek::fusion::Variable > _2893){ return ::mosek::fusion::p_Var::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{_2892,_2893}),(int)0); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::vstack  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _2894) { return mosek::fusion::p_Var::vstack(_2894); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::vstack( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _2894){ return ::mosek::fusion::p_Var::dstack(_2894,(int)0); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::hstack  ( monty::rc_ptr< ::mosek::fusion::Variable > _2895,    monty::rc_ptr< ::mosek::fusion::Variable > _2896,    monty::rc_ptr< ::mosek::fusion::Variable > _2897) { return mosek::fusion::p_Var::hstack(_2895,_2896,_2897); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::hstack( monty::rc_ptr< ::mosek::fusion::Variable > _2895,monty::rc_ptr< ::mosek::fusion::Variable > _2896,monty::rc_ptr< ::mosek::fusion::Variable > _2897){ return ::mosek::fusion::p_Var::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{_2895,_2896,_2897}),(int)1); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::hstack  ( monty::rc_ptr< ::mosek::fusion::Variable > _2898,    monty::rc_ptr< ::mosek::fusion::Variable > _2899) { return mosek::fusion::p_Var::hstack(_2898,_2899); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::hstack( monty::rc_ptr< ::mosek::fusion::Variable > _2898,monty::rc_ptr< ::mosek::fusion::Variable > _2899){ return ::mosek::fusion::p_Var::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{_2898,_2899}),(int)1); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::hstack  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _2900) { return mosek::fusion::p_Var::hstack(_2900); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::hstack( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _2900){ return ::mosek::fusion::p_Var::dstack(_2900,(int)1); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::stack  ( monty::rc_ptr< ::mosek::fusion::Variable > _2901,    monty::rc_ptr< ::mosek::fusion::Variable > _2902,    monty::rc_ptr< ::mosek::fusion::Variable > _2903,    int _2904) { return mosek::fusion::p_Var::stack(_2901,_2902,_2903,_2904); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::stack( monty::rc_ptr< ::mosek::fusion::Variable > _2901,monty::rc_ptr< ::mosek::fusion::Variable > _2902,monty::rc_ptr< ::mosek::fusion::Variable > _2903,int _2904){ return ::mosek::fusion::p_Var::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{_2901,_2902,_2903}),_2904); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::stack  ( monty::rc_ptr< ::mosek::fusion::Variable > _2905,    monty::rc_ptr< ::mosek::fusion::Variable > _2906,    int _2907) { return mosek::fusion::p_Var::stack(_2905,_2906,_2907); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::stack( monty::rc_ptr< ::mosek::fusion::Variable > _2905,monty::rc_ptr< ::mosek::fusion::Variable > _2906,int _2907){ return ::mosek::fusion::p_Var::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{_2905,_2906}),_2907); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::stack  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _2908,    int _2909) { return mosek::fusion::p_Var::stack(_2908,_2909); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::stack( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _2908,int _2909){ return ::mosek::fusion::p_Var::dstack(_2908,_2909); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::dstack( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _2910,int _2911){ { monty::rc_ptr< ::mosek::fusion::Model > _2912 = nullptr; int _8432 = (int)0; int _8433 = (int)((_2910)->size(0)); for (int _2913 = _8432;_2913<_8433;++_2913){ if (! _2912){ (_2912 = ((*_2910)(_2913))->getModel()); }else if ((((*_2910)(_2913))->getModel() && (((*_2910)(_2913))->getModel() != _2912))){ monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2914 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer(); std::string _2915 = ([&]() -> std::string { if ( ((int)((mosek::fusion::p_Model::_get_impl(_2912.get())->getName()).size()) > (int)0)) return (mosek::fusion::p_Model::_get_impl(_2912.get())->getName()); else return (std::string ("?")); })(); std::string _2916 = ([&]() -> std::string { if ( ((int)((mosek::fusion::p_Model::_get_impl(((*_2910)(_2913))->getModel().get())->getName()).size()) > (int)0)) return (mosek::fusion::p_Model::_get_impl(((*_2910)(_2913))->getModel().get())->getName()); else return (std::string ("?")); })(); mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_2914.get())->a(std::string ("Variables belong to different models: '")).get())->a(_2915).get())->a(std::string ("' and '")).get())->a(_2916).get())->a(std::string ("'")); throw ::mosek::fusion::ModelError(mosek::fusion::Utils::p_StringBuffer::_get_impl(_2914.get())->toString());}else {}}}if (((int)((_2910)->size(0)) == (int)0)){ return ::mosek::fusion::p_NilVariable::_new_NilVariable(); }else if (((int)((_2910)->size(0)) == (int)1)){ return ((*_2910)((int)1)); }else { int _2917 = (int)((_2910)->size(0)); int _2918 = (_2911 + (int)1); int _8434 = (int)0; int _8435 = _2917; for (int _2919 = _8434;_2919<_8435;++_2919){ if ((mosek::fusion::p_Set::_get_impl(((*_2910)(_2919))->getShape())->nd > _2918)){ (_2918 = mosek::fusion::p_Set::_get_impl(((*_2910)(_2919))->getShape())->nd); }else {}}std::shared_ptr< monty::ndarray< int,1 > > _2920 = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _8436; for (int _2921=(int)0, _8437=_2918; _2921 < _8437;++_2921)_8436.push_back(((*_2910)((int)0))->getShape()->dim(_2921)); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8436.size()),_8436.begin(),_8436.end())); })(); std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _2922 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >(monty::shape(_2917))); (((*_2922)((int)0)) = ::mosek::fusion::p_Var::reshape(((*_2910)((int)0)),::mosek::fusion::Set::t(::mosek::fusion::p_NDSet::_new_NDSet(_2920)))); int _8438 = (int)1; int _8439 = _2917; for (int _2923 = _8438;_2923<_8439;++_2923){ int _8440 = (int)0; int _8441 = _2918; for (int _2924 = _8440;_2924<_8441;++_2924){ if (((_2924 != _2911) && (((*_2910)(_2923))->getShape()->dim(_2924) != ((*_2920)(_2924))))){ throw ::mosek::fusion::DimensionError(std::string ("Variable dimensions do not match"));}else {}}(((*_2920)(_2911)) = ((*_2910)(_2923))->getShape()->dim(_2911)); (((*_2922)(_2923)) = ::mosek::fusion::p_Var::reshape(((*_2910)(_2923)),::mosek::fusion::Set::t(::mosek::fusion::p_NDSet::_new_NDSet(_2920)))); }return ::mosek::fusion::p_CompoundVariable::_new_CompoundVariable(_2922,_2911); }}void mosek::fusion::p_Var::destroy(){}void mosek::fusion::Var::destroy() { mosek::fusion::p_Var::_get_impl(this)->destroy(); }mosek::fusion::LinearPSDConstraint::LinearPSDConstraint(mosek::fusion::p_LinearPSDConstraint *_impl) : mosek::fusion::ModelConstraint(_impl) { /*std::cout << "LinearPSDConstraint()" << this << std::endl; */ }mosek::fusion::LinearPSDConstraint::~LinearPSDConstraint() {  /* std::cout << "~LinearPSDConstraint()" << this << std::endl << std::flush; */ }mosek::fusion::p_LinearPSDConstraint::p_LinearPSDConstraint  (::mosek::fusion::LinearPSDConstraint * _pubthis) :     mosek::fusion::p_ModelConstraint(_pubthis),    _pubthis(_pubthis){}mosek::fusion::LinearPSDConstraint::t mosek::fusion::p_LinearPSDConstraint::_new_LinearPSDConstraint  (monty::rc_ptr< ::mosek::fusion::LinearPSDConstraint > _2925,    monty::rc_ptr< ::mosek::fusion::Model > _2926){ return new mosek::fusion::LinearPSDConstraint(_2925,_2926); }mosek::fusion::LinearPSDConstraint::LinearPSDConstraint  (monty::rc_ptr< ::mosek::fusion::LinearPSDConstraint > _2925,    monty::rc_ptr< ::mosek::fusion::Model > _2926) :    LinearPSDConstraint(new mosek::fusion::p_LinearPSDConstraint(this)){ mosek::fusion::p_LinearPSDConstraint::_get_impl(this)->_initialize(_2925,_2926); }void mosek::fusion::p_LinearPSDConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::LinearPSDConstraint > _2925,    monty::rc_ptr< ::mosek::fusion::Model > _2926){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_ModelConstraint::_initialize(_2925,_2926);(coneidx = mosek::fusion::p_LinearPSDConstraint::_get_impl(_2925)->coneidx); (conesize = mosek::fusion::p_LinearPSDConstraint::_get_impl(_2925)->conesize); (psdvardim = mosek::fusion::p_LinearPSDConstraint::_get_impl(_2925)->psdvardim); (numcones = mosek::fusion::p_LinearPSDConstraint::_get_impl(_2925)->numcones); (names_flushed = mosek::fusion::p_LinearPSDConstraint::_get_impl(_2925)->names_flushed); }}mosek::fusion::LinearPSDConstraint::t mosek::fusion::p_LinearPSDConstraint::_new_LinearPSDConstraint  (monty::rc_ptr< ::mosek::fusion::Model > _2927,    const std::string &  _2928,    monty::rc_ptr< ::mosek::fusion::Set > _2929,    std::shared_ptr< monty::ndarray< int,1 > > _2930,    int _2931,    int _2932,    int _2933,    std::shared_ptr< monty::ndarray< long long,1 > > _2934,    std::shared_ptr< monty::ndarray< int,1 > > _2935,    std::shared_ptr< monty::ndarray< double,1 > > _2936,    std::shared_ptr< monty::ndarray< double,1 > > _2937,    std::shared_ptr< monty::ndarray< int,1 > > _2938,    std::shared_ptr< monty::ndarray< int,1 > > _2939,    std::shared_ptr< monty::ndarray< int,1 > > _2940){ return new mosek::fusion::LinearPSDConstraint(_2927,_2928,_2929,_2930,_2931,_2932,_2933,_2934,_2935,_2936,_2937,_2938,_2939,_2940); }mosek::fusion::LinearPSDConstraint::LinearPSDConstraint  (monty::rc_ptr< ::mosek::fusion::Model > _2927,    const std::string &  _2928,    monty::rc_ptr< ::mosek::fusion::Set > _2929,    std::shared_ptr< monty::ndarray< int,1 > > _2930,    int _2931,    int _2932,    int _2933,    std::shared_ptr< monty::ndarray< long long,1 > > _2934,    std::shared_ptr< monty::ndarray< int,1 > > _2935,    std::shared_ptr< monty::ndarray< double,1 > > _2936,    std::shared_ptr< monty::ndarray< double,1 > > _2937,    std::shared_ptr< monty::ndarray< int,1 > > _2938,    std::shared_ptr< monty::ndarray< int,1 > > _2939,    std::shared_ptr< monty::ndarray< int,1 > > _2940) :    LinearPSDConstraint(new mosek::fusion::p_LinearPSDConstraint(this)){ mosek::fusion::p_LinearPSDConstraint::_get_impl(this)->_initialize(_2927,_2928,_2929,_2930,_2931,_2932,_2933,_2934,_2935,_2936,_2937,_2938,_2939,_2940); }void mosek::fusion::p_LinearPSDConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _2927,    const std::string &  _2928,    monty::rc_ptr< ::mosek::fusion::Set > _2929,    std::shared_ptr< monty::ndarray< int,1 > > _2930,    int _2931,    int _2932,    int _2933,    std::shared_ptr< monty::ndarray< long long,1 > > _2934,    std::shared_ptr< monty::ndarray< int,1 > > _2935,    std::shared_ptr< monty::ndarray< double,1 > > _2936,    std::shared_ptr< monty::ndarray< double,1 > > _2937,    std::shared_ptr< monty::ndarray< int,1 > > _2938,    std::shared_ptr< monty::ndarray< int,1 > > _2939,    std::shared_ptr< monty::ndarray< int,1 > > _2940){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_ModelConstraint::_initialize(_2927,_2928,_2929,_2930,_2934,_2935,_2936,_2937,_2938,_2939,_2940);(coneidx = _2932); (conesize = _2931); (numcones = _2933); int _2941 = shape_p->dim((int)0); int _2942 = (int)((::mosek::fusion::Utils::Tools::sqrt((double)(((int)1 + ((int)8 * _2941)))) - (int)1) / (int)2); if ((((_2942 * (_2942 + (int)1)) / (int)2) != _2941)){ throw ::mosek::fusion::DimensionError(std::string ("Invalid size for semidefinite constraint"));}else {}(psdvardim = _2942); (names_flushed = false); }}void mosek::fusion::p_LinearPSDConstraint::domainToString( long long _2943,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2944){ std::shared_ptr< monty::ndarray< int,1 > > _2945 = mosek::fusion::p_Set::_get_impl(shape_p.get())->idxtokey(_2943); mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_2944.get())->a(std::string (" : element (")).get())->a(((*_2945)((int)0))); int _8442 = (int)1; int _8443 = (int)((_2945)->size(0)); for (int _2946 = _8442;_2946<_8443;++_2946){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_2944.get())->a(std::string (",")).get())->a(((*_2945)(_2946))); }mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_2944.get())->a(std::string (") in a positive semi-definite cone of size (")).get())->a(shape_p->dim((int)0)); int _8444 = (int)1; int _8445 = (int)((_2945)->size(0)); for (int _2947 = _8444;_2947<_8445;++_2947){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_2944.get())->a(std::string (",")).get())->a(shape_p->dim(_2947)); }mosek::fusion::Utils::p_StringBuffer::_get_impl(_2944.get())->a(std::string (")")); }std::string mosek::fusion::LinearPSDConstraint::toString  ( ) { return mosek::fusion::p_LinearPSDConstraint::_get_impl(this)->toString(); }std::string mosek::fusion::p_LinearPSDConstraint::toString( ){ long long _2948 = mosek::fusion::p_Set::_get_impl(shape_p)->size; std::shared_ptr< monty::ndarray< std::string,1 > > _2949 = std::shared_ptr< monty::ndarray< std::string,1 > >(new monty::ndarray< std::string,1 >(monty::shape(_2948))); toStringArray(([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _8446; for (long long _2950=(int)0, _8447=_2948; _2950 < _8447;++_2950)_8446.push_back(_2950); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_8446.size()),_8446.begin(),_8446.end())); })(),(long long)0,_2949,false); monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2951 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer(); mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_2951.get())->a(std::string ("LinearPSDConstraint( (")).get())->a(shape_p->dim((int)0)); int _8448 = (int)1; int _8449 = mosek::fusion::p_Set::_get_impl(shape_p)->nd; for (int _2952 = _8448;_2952<_8449;++_2952){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_2951.get())->a(std::string (",")).get())->a(shape_p->dim(_2952)); }mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_2951.get())->a(std::string ("),")).get())->lf(); mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_2951.get())->a(std::string ("  ")).get())->a(((*_2949)((int)0))); int _8450 = (int)1; int _8451 = (int)((_2949)->size(0)); for (int _2953 = _8450;_2953<_8451;++_2953){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_2951.get())->a(std::string (",")).get())->lf().get())->a(std::string ("  ")).get())->a(((*_2949)(_2953))); }mosek::fusion::Utils::p_StringBuffer::_get_impl(_2951.get())->a(std::string (" )")); return mosek::fusion::Utils::p_StringBuffer::_get_impl(_2951.get())->toString(); }void mosek::fusion::p_LinearPSDConstraint::toStringArray( std::shared_ptr< monty::ndarray< long long,1 > > _2954,long long _2955,std::shared_ptr< monty::ndarray< std::string,1 > > _2956){ toStringArray(_2954,_2955,_2956,true); }void mosek::fusion::p_LinearPSDConstraint::toStringArray( std::shared_ptr< monty::ndarray< long long,1 > > _2957,long long _2958,std::shared_ptr< monty::ndarray< std::string,1 > > _2959,bool _2960){ int _8452 = (int)0; int _8453 = (int)((_2957)->size(0)); for (int _2961 = _8452;_2961<_8453;++_2961){ if (((((*_2957)(_2961)) < (int)0) || (((*_2957)(_2961)) >= mosek::fusion::p_Set::_get_impl(shape_p)->size))){ throw ::mosek::fusion::IndexError(std::string ("Constraint index out of bounds"));}else {}}if ((((long long)((_2957)->size(0)) + _2958) > (long long)((_2959)->size(0)))){ throw ::mosek::fusion::LengthError(std::string ("Result array is too small to hold the result"));}else {}monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2962 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer(); long long _2963 = mosek::fusion::p_ConstraintCache::_get_impl(cache.get())->order_barentries(); int _2964 = (int)0; int _8454 = (int)0; int _8455 = (int)((_2957)->size(0)); for (int _2965 = _8454;_2965<_8455;++_2965){ long long _2966 = ((*_2957)(_2965)); long long _2967 = (_2966 / conesize); long long _2968 = (_2966 % conesize); long long _2969 = (_2966 + coneidx); mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_2962.get())->clear().get())->a(name).get())->a(std::string ("[")).get())->a(_2967).get())->a(std::string (",")).get())->a(_2968).get())->a(std::string ("] : ")); int _2970 = ((*nativeindexes)(_2966)); int _2971 = (int)0; while (((_2971 < (int)((mosek::fusion::p_ConstraintCache::_get_impl(cache)->subi)->size(0))) && (((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->subi)(_2971)) < _2969))) { ( ++ _2971 ); }int _2972 = _2971; while (((_2971 < (int)((mosek::fusion::p_ConstraintCache::_get_impl(cache)->subi)->size(0))) && (((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->subi)(_2971)) == _2969))) { ( ++ _2971 ); }int _2973 = (int)0; while (((_2973 < _2963) && (((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->barsubi)(_2973)) < _2969))) { ( ++ _2973 ); }int _2974 = _2973; while (((_2973 < _2963) && (((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->barsubi)(_2973)) == _2969))) { ( ++ _2973 ); }int _8456 = _2972; int _8457 = _2971; for (int _2975 = _8456;_2975<_8457;++_2975){ double _2976 = ((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->cof)(_2975)); if ((_2976 > (int)0)){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_2962.get())->a(std::string (" + ")).get())->a(_2976).get())->a(std::string (" ")); }else if ((_2976 < (int)0)){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_2962.get())->a(std::string (" - ")).get())->a((- _2976)).get())->a(std::string (" ")); }else { mosek::fusion::Utils::p_StringBuffer::_get_impl(_2962.get())->a(std::string (" + 0.0 ")); }mosek::fusion::p_Model::_get_impl(model.get())->nativeVarToStr(((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->subj)(_2975)),_2962); }int _2977 = _2973; (_2973 = _2974); while (((_2973 < _2977) && (((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->barsubi)(_2973)) == _2969))) { int _2978 = _2973; int _2979 = ((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->barsubj)(_2973)); ( ++ _2973 ); while (((_2973 < _2977) && (((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->barsubj)(_2973)) == _2979))) { ( ++ _2973 ); }mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_2962.get())->a(std::string (" + < M")).get())->a(((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->barmatidx)(_2978))); int _8458 = (_2978 + (int)1); int _8459 = _2973; for (int _2980 = _8458;_2980<_8459;++_2980){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_2962.get())->a(std::string (" + M")).get())->a(((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->barmatidx)(_2980))); }mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_2962.get())->a(std::string (" ; ")).get())->a(([&]() -> std::string { if ( ((int)((mosek::fusion::p_ModelVariable::_get_impl(((*mosek::fusion::p_Model::_get_impl(model)->vars)(((*mosek::fusion::p_Model::_get_impl(model)->natbarvarmap_Var)(((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->barsubj)(_2978)))))))->name).size()) > (int)0)) return (mosek::fusion::p_ModelVariable::_get_impl(((*mosek::fusion::p_Model::_get_impl(model)->vars)(((*mosek::fusion::p_Model::_get_impl(model)->natbarvarmap_Var)(((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->barsubj)(_2978)))))))->name); else return (std::string ("_")); })()).get())->a(std::string (" >")); }if (cache_bfix){ if ((((*cache_bfix)(_2969)) > (int)0)){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_2962.get())->a(std::string (" + ")).get())->a(((*cache_bfix)(_2969))); }else if ((((*cache_bfix)(_2969)) < (int)0)){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_2962.get())->a(std::string (" + ")).get())->a(((*cache_bfix)(_2969))); }else {}}else {}if (_2960){ mosek::fusion::Utils::p_StringBuffer::_get_impl(_2962.get())->a(std::string (" ")); domainToString(_2966,_2962); }else {}(((*_2959)(((long long)_2965 + _2958))) = mosek::fusion::Utils::p_StringBuffer::_get_impl(_2962.get())->toString()); }}void mosek::fusion::p_LinearPSDConstraint::flushNames( ){ if (((! names_flushed) && ((int)((name).size()) > (int)0))){ monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2981 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer(); if ((numcones > (int)1)){ int _2982 = (int)0; int _8460 = (int)0; int _8461 = numcones; for (int _2983 = _8460;_2983<_8461;++_2983){ int _8462 = (int)0; int _8463 = conesize; for (int _2984 = _8462;_2984<_8463;++_2984){ mosek::fusion::p_Model::_get_impl(model.get())->task_con_name(((*nativeindexes)(_2982)),mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_2981.get())->clear().get())->a(name).get())->a(std::string ("[")).get())->a(_2983).get())->a(std::string (",")).get())->a(_2984).get())->a(std::string ("]")).get())->toString()); ( ++ _2982 ); }}}else { int _2985 = (int)0; int _8464 = (int)0; int _8465 = conesize; for (int _2986 = _8464;_2986<_8465;++_2986){ mosek::fusion::p_Model::_get_impl(model.get())->task_con_name(((*nativeindexes)(_2985)),mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_2981.get())->clear().get())->a(name).get())->a(std::string ("[")).get())->a(_2986).get())->a(std::string ("]")).get())->toString()); ( ++ _2985 ); }}int _8466 = (int)0; int _8467 = numcones; for (int _2987 = _8466;_2987<_8467;++_2987){ mosek::fusion::p_Model::_get_impl(model.get())->task_barvar_name((coneidx + _2987),mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_2981.get())->clear().get())->a(name).get())->a(std::string ("[")).get())->a(_2987).get())->a(std::string ("].coneslack")).get())->toString()); }(names_flushed = true); }else {}}void mosek::fusion::p_LinearPSDConstraint::add_fx( std::shared_ptr< monty::ndarray< long long,1 > > _2988,std::shared_ptr< monty::ndarray< double,1 > > _2989,long long _2990,int _2991,int _2992){ std::shared_ptr< monty::ndarray< double,1 > > _2993 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_2992))); std::shared_ptr< monty::ndarray< int,1 > > _2994 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2992))); int _8468 = (int)0; int _8469 = _2992; for (int _2995 = _8468;_2995<_8469;++_2995){ (((*_2994)(_2995)) = ((*nativeindexes)((((*_2988)((_2991 + _2995))) - _2990)))); }int _8470 = (int)0; int _8471 = (int)((_2993)->size(0)); for (int _2996 = _8470;_2996<_8471;++_2996){ (((*_2993)(_2996)) = (- ((*_2989)((((*_2988)((_2991 + _2996))) - _2990))))); }mosek::fusion::p_Model::_get_impl(model.get())->task_con_putboundlist_fx(_2994,_2993); }void mosek::fusion::p_LinearPSDConstraint::dual_values( long long _2997,std::shared_ptr< monty::ndarray< int,1 > > _2998,std::shared_ptr< monty::ndarray< long long,1 > > _2999,int _3000,std::shared_ptr< monty::ndarray< double,1 > > _3001){ monty::rc_ptr< ::mosek::fusion::IndexCounter > _3002 = ::mosek::fusion::p_IndexCounter::_new_IndexCounter(_2997,_2998,_2999); int _3003 = (int)1; int _8472 = (int)0; int _8473 = (int)((_2998)->size(0)); for (int _3004 = _8472;_3004<_8473;++_3004){ (_3003 *= ((*_2998)(_3004))); }std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > _3005 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_bars(::mosek::fusion::SolutionType::Default); int _3006 = conesize; int _8474 = (int)0; int _8475 = _3003; for (int _3007 = _8474;_3007<_8475;++_3007){ long long _3008 = ((_3002->get() / _3006) + coneidx); long long _3009 = (_3002->get() % _3006); (((*_3001)(_3007)) = ((*((*_3005)(coneidx)))(_3009))); _3002->inc(); }}void mosek::fusion::p_LinearPSDConstraint::dual_values( std::shared_ptr< monty::ndarray< long long,1 > > _3010,int _3011,std::shared_ptr< monty::ndarray< double,1 > > _3012){ std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > _3013 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_bars(::mosek::fusion::SolutionType::Default); int _3014 = conesize; int _8476 = (int)0; int _8477 = (int)((_3010)->size(0)); for (int _3015 = _8476;_3015<_8477;++_3015){ long long _3016 = ((((*_3010)(_3015)) / _3014) + coneidx); long long _3017 = (((*_3010)(_3015)) % _3014); (((*_3012)(_3015)) = ((*((*_3013)(_3016)))(_3017))); }}void mosek::fusion::p_LinearPSDConstraint::level_values( long long _3018,std::shared_ptr< monty::ndarray< int,1 > > _3019,std::shared_ptr< monty::ndarray< long long,1 > > _3020,int _3021,std::shared_ptr< monty::ndarray< double,1 > > _3022){ monty::rc_ptr< ::mosek::fusion::IndexCounter > _3023 = ::mosek::fusion::p_IndexCounter::_new_IndexCounter(_3018,_3019,_3020); int _3024 = (int)1; int _8478 = (int)0; int _8479 = (int)((_3019)->size(0)); for (int _3025 = _8478;_3025<_8479;++_3025){ (_3024 *= ((*_3019)(_3025))); }std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > _3026 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_barx(::mosek::fusion::SolutionType::Default); int _3027 = conesize; int _8480 = (int)0; int _8481 = _3024; for (int _3028 = _8480;_3028<_8481;++_3028){ long long _3029 = ((_3023->get() / _3027) + coneidx); long long _3030 = (_3023->get() % _3027); (((*_3022)(_3028)) = ((*((*_3026)(coneidx)))(_3030))); _3023->inc(); }}void mosek::fusion::p_LinearPSDConstraint::level_values( std::shared_ptr< monty::ndarray< long long,1 > > _3031,int _3032,std::shared_ptr< monty::ndarray< double,1 > > _3033){ std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > _3034 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_barx(::mosek::fusion::SolutionType::Default); int _3035 = psdvardim; int _8482 = (int)0; int _8483 = (int)((_3031)->size(0)); for (int _3036 = _8482;_3036<_8483;++_3036){ long long _3037 = ((((*_3031)(_3036)) / _3035) + coneidx); long long _3038 = (((*_3031)(_3036)) % _3035); (((*_3033)(_3036)) = ((*((*_3034)(_3037)))(_3038))); }}monty::rc_ptr< ::mosek::fusion::ModelConstraint > mosek::fusion::p_LinearPSDConstraint::clone( monty::rc_ptr< ::mosek::fusion::Model > _3039){ return ::mosek::fusion::p_LinearPSDConstraint::_new_LinearPSDConstraint(_pubthis,_3039); }void mosek::fusion::p_LinearPSDConstraint::destroy(){}void mosek::fusion::LinearPSDConstraint::destroy() { mosek::fusion::p_LinearPSDConstraint::_get_impl(this)->destroy(); }mosek::fusion::PSDConstraint::PSDConstraint(mosek::fusion::p_PSDConstraint *_impl) : mosek::fusion::ModelConstraint(_impl) { /*std::cout << "PSDConstraint()" << this << std::endl; */ }mosek::fusion::PSDConstraint::~PSDConstraint() {  /* std::cout << "~PSDConstraint()" << this << std::endl << std::flush; */ }mosek::fusion::p_PSDConstraint::p_PSDConstraint  (::mosek::fusion::PSDConstraint * _pubthis) :     mosek::fusion::p_ModelConstraint(_pubthis),    _pubthis(_pubthis){}mosek::fusion::PSDConstraint::t mosek::fusion::p_PSDConstraint::_new_PSDConstraint  (monty::rc_ptr< ::mosek::fusion::PSDConstraint > _3040,    monty::rc_ptr< ::mosek::fusion::Model > _3041){ return new mosek::fusion::PSDConstraint(_3040,_3041); }mosek::fusion::PSDConstraint::PSDConstraint  (monty::rc_ptr< ::mosek::fusion::PSDConstraint > _3040,    monty::rc_ptr< ::mosek::fusion::Model > _3041) :    PSDConstraint(new mosek::fusion::p_PSDConstraint(this)){ mosek::fusion::p_PSDConstraint::_get_impl(this)->_initialize(_3040,_3041); }void mosek::fusion::p_PSDConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::PSDConstraint > _3040,    monty::rc_ptr< ::mosek::fusion::Model > _3041){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_ModelConstraint::_initialize(_3040,_3041);(coneidx = mosek::fusion::p_PSDConstraint::_get_impl(_3040)->coneidx); (conesize = mosek::fusion::p_PSDConstraint::_get_impl(_3040)->conesize); (numcones = mosek::fusion::p_PSDConstraint::_get_impl(_3040)->numcones); (names_flushed = mosek::fusion::p_PSDConstraint::_get_impl(_3040)->names_flushed); }}mosek::fusion::PSDConstraint::t mosek::fusion::p_PSDConstraint::_new_PSDConstraint  (monty::rc_ptr< ::mosek::fusion::Model > _3042,    const std::string &  _3043,    monty::rc_ptr< ::mosek::fusion::Set > _3044,    std::shared_ptr< monty::ndarray< int,1 > > _3045,    int _3046,    int _3047,    int _3048,    std::shared_ptr< monty::ndarray< long long,1 > > _3049,    std::shared_ptr< monty::ndarray< int,1 > > _3050,    std::shared_ptr< monty::ndarray< double,1 > > _3051,    std::shared_ptr< monty::ndarray< double,1 > > _3052,    std::shared_ptr< monty::ndarray< int,1 > > _3053,    std::shared_ptr< monty::ndarray< int,1 > > _3054,    std::shared_ptr< monty::ndarray< int,1 > > _3055){ return new mosek::fusion::PSDConstraint(_3042,_3043,_3044,_3045,_3046,_3047,_3048,_3049,_3050,_3051,_3052,_3053,_3054,_3055); }mosek::fusion::PSDConstraint::PSDConstraint  (monty::rc_ptr< ::mosek::fusion::Model > _3042,    const std::string &  _3043,    monty::rc_ptr< ::mosek::fusion::Set > _3044,    std::shared_ptr< monty::ndarray< int,1 > > _3045,    int _3046,    int _3047,    int _3048,    std::shared_ptr< monty::ndarray< long long,1 > > _3049,    std::shared_ptr< monty::ndarray< int,1 > > _3050,    std::shared_ptr< monty::ndarray< double,1 > > _3051,    std::shared_ptr< monty::ndarray< double,1 > > _3052,    std::shared_ptr< monty::ndarray< int,1 > > _3053,    std::shared_ptr< monty::ndarray< int,1 > > _3054,    std::shared_ptr< monty::ndarray< int,1 > > _3055) :    PSDConstraint(new mosek::fusion::p_PSDConstraint(this)){ mosek::fusion::p_PSDConstraint::_get_impl(this)->_initialize(_3042,_3043,_3044,_3045,_3046,_3047,_3048,_3049,_3050,_3051,_3052,_3053,_3054,_3055); }void mosek::fusion::p_PSDConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _3042,    const std::string &  _3043,    monty::rc_ptr< ::mosek::fusion::Set > _3044,    std::shared_ptr< monty::ndarray< int,1 > > _3045,    int _3046,    int _3047,    int _3048,    std::shared_ptr< monty::ndarray< long long,1 > > _3049,    std::shared_ptr< monty::ndarray< int,1 > > _3050,    std::shared_ptr< monty::ndarray< double,1 > > _3051,    std::shared_ptr< monty::ndarray< double,1 > > _3052,    std::shared_ptr< monty::ndarray< int,1 > > _3053,    std::shared_ptr< monty::ndarray< int,1 > > _3054,    std::shared_ptr< monty::ndarray< int,1 > > _3055){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_ModelConstraint::_initialize(_3042,_3043,_3044,_3045,_3049,_3050,_3051,_3052,_3053,_3054,_3055);(coneidx = _3047); (conesize = _3046); (numcones = _3048); (names_flushed = false); }}void mosek::fusion::p_PSDConstraint::domainToString( long long _3056,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _3057){ std::shared_ptr< monty::ndarray< int,1 > > _3058 = mosek::fusion::p_Set::_get_impl(shape_p.get())->idxtokey(_3056); mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_3057.get())->a(std::string (" : element (")).get())->a(((*_3058)((int)0))); int _8484 = (int)1; int _8485 = (int)((_3058)->size(0)); for (int _3059 = _8484;_3059<_8485;++_3059){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_3057.get())->a(std::string (",")).get())->a(((*_3058)(_3059))); }mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_3057.get())->a(std::string (") in a positive semi-definite cone of size (")).get())->a(shape_p->dim((int)0)); int _8486 = (int)1; int _8487 = (int)((_3058)->size(0)); for (int _3060 = _8486;_3060<_8487;++_3060){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_3057.get())->a(std::string (",")).get())->a(shape_p->dim(_3060)); }mosek::fusion::Utils::p_StringBuffer::_get_impl(_3057.get())->a(std::string (")")); }std::string mosek::fusion::PSDConstraint::toString  ( ) { return mosek::fusion::p_PSDConstraint::_get_impl(this)->toString(); }std::string mosek::fusion::p_PSDConstraint::toString( ){ long long _3061 = mosek::fusion::p_Set::_get_impl(shape_p)->size; std::shared_ptr< monty::ndarray< std::string,1 > > _3062 = std::shared_ptr< monty::ndarray< std::string,1 > >(new monty::ndarray< std::string,1 >(monty::shape(_3061))); toStringArray(([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _8488; for (long long _3063=(int)0, _8489=_3061; _3063 < _8489;++_3063)_8488.push_back(_3063); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_8488.size()),_8488.begin(),_8488.end())); })(),(long long)0,_3062,false); monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _3064 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer(); mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_3064.get())->a(std::string ("PSDConstraint( (")).get())->a(shape_p->dim((int)0)); int _8490 = (int)1; int _8491 = mosek::fusion::p_Set::_get_impl(shape_p)->nd; for (int _3065 = _8490;_3065<_8491;++_3065){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_3064.get())->a(std::string (",")).get())->a(shape_p->dim(_3065)); }mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_3064.get())->a(std::string ("),")).get())->lf(); mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_3064.get())->a(std::string ("  ")).get())->a(((*_3062)((int)0))); int _8492 = (int)1; int _8493 = (int)((_3062)->size(0)); for (int _3066 = _8492;_3066<_8493;++_3066){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_3064.get())->a(std::string (",")).get())->lf().get())->a(std::string ("  ")).get())->a(((*_3062)(_3066))); }mosek::fusion::Utils::p_StringBuffer::_get_impl(_3064.get())->a(std::string (" )")); return mosek::fusion::Utils::p_StringBuffer::_get_impl(_3064.get())->toString(); }void mosek::fusion::p_PSDConstraint::toStringArray( std::shared_ptr< monty::ndarray< long long,1 > > _3067,long long _3068,std::shared_ptr< monty::ndarray< std::string,1 > > _3069){ toStringArray(_3067,_3068,_3069,true); }void mosek::fusion::p_PSDConstraint::toStringArray( std::shared_ptr< monty::ndarray< long long,1 > > _3070,long long _3071,std::shared_ptr< monty::ndarray< std::string,1 > > _3072,bool _3073){ int _8494 = (int)0; int _8495 = (int)((_3070)->size(0)); for (int _3074 = _8494;_3074<_8495;++_3074){ if (((((*_3070)(_3074)) < (int)0) || (((*_3070)(_3074)) >= mosek::fusion::p_Set::_get_impl(shape_p)->size))){ throw ::mosek::fusion::IndexError(std::string ("Constraint index out of bounds"));}else {}}if ((((long long)((_3070)->size(0)) + _3071) > (long long)((_3072)->size(0)))){ throw ::mosek::fusion::LengthError(std::string ("Result array is too small to hold the result"));}else {}monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _3075 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer(); long long _3076 = mosek::fusion::p_ConstraintCache::_get_impl(cache.get())->order_barentries(); int _3077 = (int)0; int _8496 = (int)0; int _8497 = (int)((_3070)->size(0)); for (int _3078 = _8496;_3078<_8497;++_3078){ long long _3079 = ((*_3070)(_3078)); long long _3080 = (_3079 / (conesize * conesize)); long long _3081 = (_3079 % (conesize * conesize)); long long _3082 = (_3081 / conesize); long long _3083 = (_3081 % conesize); long long _3084 = ([&]() -> long long { if ( (_3082 >= _3083)) return ((((_3082 * (_3082 + (int)1)) / (int)2) + _3083)); else return ((((_3083 * (_3083 + (int)1)) / (int)2) + _3082)); })(); long long _3085 = (_3084 + (((_3080 * conesize) * (conesize + (int)1)) / (int)2)); mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_3075.get())->clear().get())->a(name).get())->a(std::string ("[")).get())->a(_3080).get())->a(std::string (",")).get())->a(_3082).get())->a(std::string (",")).get())->a(_3083).get())->a(std::string ("] : ")); int _3086 = ((*nativeindexes)(_3085)); int _3087 = (int)0; while (((_3087 < (int)((mosek::fusion::p_ConstraintCache::_get_impl(cache)->subi)->size(0))) && (((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->subi)(_3087)) < _3085))) { ( ++ _3087 ); }int _3088 = _3087; while (((_3087 < (int)((mosek::fusion::p_ConstraintCache::_get_impl(cache)->subi)->size(0))) && (((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->subi)(_3087)) == _3085))) { ( ++ _3087 ); }int _3089 = (int)0; while (((_3089 < _3076) && (((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->barsubi)(_3089)) < _3085))) { ( ++ _3089 ); }int _3090 = _3089; while (((_3089 < _3076) && (((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->barsubi)(_3089)) == _3085))) { ( ++ _3089 ); }int _8498 = _3088; int _8499 = _3087; for (int _3091 = _8498;_3091<_8499;++_3091){ double _3092 = ((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->cof)(_3091)); if ((_3092 > (int)0)){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_3075.get())->a(std::string (" + ")).get())->a(_3092).get())->a(std::string (" ")); }else if ((_3092 < (int)0)){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_3075.get())->a(std::string (" - ")).get())->a((- _3092)).get())->a(std::string (" ")); }else { mosek::fusion::Utils::p_StringBuffer::_get_impl(_3075.get())->a(std::string (" + 0.0 ")); }mosek::fusion::p_Model::_get_impl(model.get())->nativeVarToStr(((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->subj)(_3091)),_3075); }int _3093 = _3089; (_3089 = _3090); while (((_3089 < _3093) && (((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->barsubi)(_3089)) == _3085))) { int _3094 = _3089; int _3095 = ((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->barsubj)(_3089)); ( ++ _3089 ); while (((_3089 < _3093) && (((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->barsubj)(_3089)) == _3095))) { ( ++ _3089 ); }mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_3075.get())->a(std::string (" + < M")).get())->a(((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->barmatidx)(_3094))); int _8500 = (_3094 + (int)1); int _8501 = _3089; for (int _3096 = _8500;_3096<_8501;++_3096){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_3075.get())->a(std::string (" + M")).get())->a(((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->barmatidx)(_3096))); }mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_3075.get())->a(std::string (" ; ")).get())->a(([&]() -> std::string { if ( ((int)((mosek::fusion::p_ModelVariable::_get_impl(((*mosek::fusion::p_Model::_get_impl(model)->vars)(((*mosek::fusion::p_Model::_get_impl(model)->natbarvarmap_Var)(((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->barsubj)(_3094)))))))->name).size()) > (int)0)) return (mosek::fusion::p_ModelVariable::_get_impl(((*mosek::fusion::p_Model::_get_impl(model)->vars)(((*mosek::fusion::p_Model::_get_impl(model)->natbarvarmap_Var)(((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->barsubj)(_3094)))))))->name); else return (std::string ("_")); })()).get())->a(std::string (" >")); }if (cache_bfix){ if ((((*cache_bfix)(_3085)) > (int)0)){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_3075.get())->a(std::string (" + ")).get())->a(((*cache_bfix)(_3085))); }else if ((((*cache_bfix)(_3085)) < (int)0)){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_3075.get())->a(std::string (" + ")).get())->a(((*cache_bfix)(_3085))); }else {}}else {}if (_3073){ mosek::fusion::Utils::p_StringBuffer::_get_impl(_3075.get())->a(std::string (" ")); domainToString(_3079,_3075); }else {}(((*_3072)(((long long)_3078 + _3071))) = mosek::fusion::Utils::p_StringBuffer::_get_impl(_3075.get())->toString()); }}void mosek::fusion::p_PSDConstraint::flushNames( ){ if (((! names_flushed) && ((int)((name).size()) > (int)0))){ monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _3097 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer(); if ((numcones > (int)1)){ int _3098 = (int)0; int _8502 = (int)0; int _8503 = numcones; for (int _3099 = _8502;_3099<_8503;++_3099){ int _8504 = (int)0; int _8505 = conesize; for (int _3100 = _8504;_3100<_8505;++_3100){ int _8506 = (int)0; int _8507 = (_3100 + (int)1); for (int _3101 = _8506;_3101<_8507;++_3101){ mosek::fusion::p_Model::_get_impl(model.get())->task_con_name(((*nativeindexes)(_3098)),mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_3097.get())->clear().get())->a(name).get())->a(std::string ("[")).get())->a(_3099).get())->a(std::string (",")).get())->a(_3100).get())->a(std::string (",")).get())->a(_3101).get())->a(std::string ("]")).get())->toString()); ( ++ _3098 ); }}}}else { int _3102 = (int)0; int _8508 = (int)0; int _8509 = conesize; for (int _3103 = _8508;_3103<_8509;++_3103){ int _8510 = (int)0; int _8511 = (_3103 + (int)1); for (int _3104 = _8510;_3104<_8511;++_3104){ mosek::fusion::p_Model::_get_impl(model.get())->task_con_name(((*nativeindexes)(_3102)),mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_3097.get())->clear().get())->a(name).get())->a(std::string ("[")).get())->a(_3103).get())->a(std::string (",")).get())->a(_3104).get())->a(std::string ("]")).get())->toString()); ( ++ _3102 ); }}}int _8512 = (int)0; int _8513 = numcones; for (int _3105 = _8512;_3105<_8513;++_3105){ mosek::fusion::p_Model::_get_impl(model.get())->task_barvar_name((coneidx + _3105),mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_3097.get())->clear().get())->a(name).get())->a(std::string ("[")).get())->a(_3105).get())->a(std::string ("].coneslack")).get())->toString()); }(names_flushed = true); }else {}}void mosek::fusion::p_PSDConstraint::add_fx( std::shared_ptr< monty::ndarray< long long,1 > > _3106,std::shared_ptr< monty::ndarray< double,1 > > _3107,long long _3108,int _3109,int _3110){ std::shared_ptr< monty::ndarray< double,1 > > _3111 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_3110))); std::shared_ptr< monty::ndarray< int,1 > > _3112 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_3110))); int _8514 = (int)0; int _8515 = _3110; for (int _3113 = _8514;_3113<_8515;++_3113){ (((*_3112)(_3113)) = ((*nativeindexes)((((*_3106)((_3109 + _3113))) - _3108)))); }int _8516 = (int)0; int _8517 = (int)((_3111)->size(0)); for (int _3114 = _8516;_3114<_8517;++_3114){ (((*_3111)(_3114)) = (- ((*_3107)((((*_3106)((_3109 + _3114))) - _3108))))); }mosek::fusion::p_Model::_get_impl(model.get())->task_con_putboundlist_fx(_3112,_3111); }void mosek::fusion::p_PSDConstraint::dual_values( long long _3115,std::shared_ptr< monty::ndarray< int,1 > > _3116,std::shared_ptr< monty::ndarray< long long,1 > > _3117,int _3118,std::shared_ptr< monty::ndarray< double,1 > > _3119){ long long _3120 = (long long)1; int _3121 = (int)((_3117)->size(0)); std::shared_ptr< monty::ndarray< int,1 > > _3122 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_3121))); std::shared_ptr< monty::ndarray< long long,1 > > _3123 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_3121))); std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > _3124 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_bars(::mosek::fusion::SolutionType::Default); int _3125 = (conesize * conesize); int _8518 = (int)0; int _8519 = _3121; for (int _3126 = _8518;_3126<_8519;++_3126){ (((*_3123)(_3126)) = _3115); }int _8520 = (int)0; int _8521 = _3121; for (int _3127 = _8520;_3127<_8521;++_3127){ (_3120 = (_3120 * ((*_3116)(_3127)))); }long long _8522 = (long long)0; long long _8523 = _3120; for (long long _3128 = _8522;_3128<_8523;++_3128){ { long long _3129 = (((*_3123)((int)0)) / _3125); long long _3130 = (((*_3123)((int)0)) - (_3129 * _3125)); long long _3131 = (_3130 / conesize); long long _3132 = (_3130 - (_3131 * conesize)); if ((_3132 > _3131)){ (((*_3119)(_3128)) = ((*((*_3124)(((long long)coneidx + _3129))))((((_3131 * conesize) + _3132) - ((_3131 * (_3131 + (int)1)) / (int)2))))); }else { (((*_3119)(_3128)) = ((*((*_3124)(((long long)coneidx + _3129))))((((_3132 * conesize) + _3131) - ((_3132 * (_3132 + (int)1)) / (int)2))))); }}{ ( ++ ((*_3122)((int)0)) ); (((*_3123)((int)0)) = (((*_3123)((int)0)) + ((*_3117)((_3121 - (int)1))))); int _3133 = (int)0; { (_3133 = (int)0); for (;((_3133 < (_3121 - (int)1)) && (((*_3122)(_3133)) == ((*_3116)(_3133))));( ++ _3133 )){ (((*_3122)(_3133)) = (int)0); ( ++ ((*_3122)((_3133 + (int)1))) ); (((*_3123)((_3133 + (int)1))) = (((*_3123)((_3133 + (int)1))) + ((*_3117)(((_3121 - (int)2) - _3133))))); }}int _8524 = (int)0; int _8525 = _3133; for (int _3134 = _8524;_3134<_8525;++_3134){ (((*_3123)(_3134)) = ((*_3123)(_3133))); }}}}void mosek::fusion::p_PSDConstraint::dual_values( std::shared_ptr< monty::ndarray< long long,1 > > _3135,int _3136,std::shared_ptr< monty::ndarray< double,1 > > _3137){ std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > _3138 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_bars(::mosek::fusion::SolutionType::Default); int _3139 = (conesize * conesize); int _8526 = (int)0; int _8527 = (int)((_3135)->size(0)); for (int _3140 = _8526;_3140<_8527;++_3140){ long long _3141 = ((((*_3135)(_3140)) / _3139) + coneidx); long long _3142 = (((*_3135)(_3140)) - (_3141 * _3139)); long long _3143 = (_3142 / conesize); long long _3144 = (_3142 - (_3143 * conesize)); if ((_3144 > _3143)){ (((*_3137)(_3140)) = ((*((*_3138)(_3141)))((((_3143 * conesize) + _3144) - ((_3143 * (_3143 + (int)1)) / (int)2))))); }else { (((*_3137)(_3140)) = ((*((*_3138)(_3141)))((((_3144 * conesize) + _3143) - ((_3144 * (_3144 + (int)1)) / (int)2))))); }}}void mosek::fusion::p_PSDConstraint::level_values( long long _3145,std::shared_ptr< monty::ndarray< int,1 > > _3146,std::shared_ptr< monty::ndarray< long long,1 > > _3147,int _3148,std::shared_ptr< monty::ndarray< double,1 > > _3149){ long long _3150 = (long long)1; int _3151 = (int)((_3147)->size(0)); std::shared_ptr< monty::ndarray< int,1 > > _3152 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_3151))); std::shared_ptr< monty::ndarray< long long,1 > > _3153 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_3151))); std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > _3154 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_barx(::mosek::fusion::SolutionType::Default); int _3155 = (conesize * conesize); int _8528 = (int)0; int _8529 = _3151; for (int _3156 = _8528;_3156<_8529;++_3156){ (((*_3153)(_3156)) = _3145); }int _8530 = (int)0; int _8531 = _3151; for (int _3157 = _8530;_3157<_8531;++_3157){ (_3150 = (_3150 * ((*_3146)(_3157)))); }long long _8532 = (long long)0; long long _8533 = _3150; for (long long _3158 = _8532;_3158<_8533;++_3158){ { long long _3159 = (((*_3153)((int)0)) / _3155); long long _3160 = (((*_3153)((int)0)) - (_3159 * _3155)); long long _3161 = (_3160 / conesize); long long _3162 = (_3160 - (_3161 * conesize)); if ((_3162 > _3161)){ (((*_3149)(_3158)) = ((*((*_3154)(((long long)coneidx + _3159))))((((_3161 * conesize) + _3162) - ((_3161 * (_3161 + (int)1)) / (int)2))))); }else { (((*_3149)(_3158)) = ((*((*_3154)(((long long)coneidx + _3159))))((((_3162 * conesize) + _3161) - ((_3162 * (_3162 + (int)1)) / (int)2))))); }}{ ( ++ ((*_3152)((int)0)) ); (((*_3153)((int)0)) = (((*_3153)((int)0)) + ((*_3147)((_3151 - (int)1))))); int _3163 = (int)0; { (_3163 = (int)0); for (;((_3163 < (_3151 - (int)1)) && (((*_3152)(_3163)) == ((*_3146)(_3163))));( ++ _3163 )){ (((*_3152)(_3163)) = (int)0); ( ++ ((*_3152)((_3163 + (int)1))) ); (((*_3153)((_3163 + (int)1))) = (((*_3153)((_3163 + (int)1))) + ((*_3147)(((_3151 - (int)2) - _3163))))); }}int _8534 = (int)0; int _8535 = _3163; for (int _3164 = _8534;_3164<_8535;++_3164){ (((*_3153)(_3164)) = ((*_3153)(_3163))); }}}}void mosek::fusion::p_PSDConstraint::level_values( std::shared_ptr< monty::ndarray< long long,1 > > _3165,int _3166,std::shared_ptr< monty::ndarray< double,1 > > _3167){ std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > _3168 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_barx(::mosek::fusion::SolutionType::Default); int _3169 = (conesize * conesize); int _8536 = (int)0; int _8537 = (int)((_3165)->size(0)); for (int _3170 = _8536;_3170<_8537;++_3170){ long long _3171 = ((((*_3165)(_3170)) / _3169) + coneidx); long long _3172 = (((*_3165)(_3170)) - (_3171 * _3169)); long long _3173 = (_3172 / conesize); long long _3174 = (_3172 - (_3173 * conesize)); if ((_3174 > _3173)){ (((*_3167)(_3170)) = ((*((*_3168)(_3171)))((((_3173 * conesize) + _3174) - ((_3173 * (_3173 + (int)1)) / (int)2))))); }else { (((*_3167)(_3170)) = ((*((*_3168)(_3171)))((((_3174 * conesize) + _3173) - ((_3174 * (_3174 + (int)1)) / (int)2))))); }}}monty::rc_ptr< ::mosek::fusion::ModelConstraint > mosek::fusion::p_PSDConstraint::clone( monty::rc_ptr< ::mosek::fusion::Model > _3175){ return ::mosek::fusion::p_PSDConstraint::_new_PSDConstraint(_pubthis,_3175); }void mosek::fusion::p_PSDConstraint::destroy(){}void mosek::fusion::PSDConstraint::destroy() { mosek::fusion::p_PSDConstraint::_get_impl(this)->destroy(); }mosek::fusion::ConstraintCache::ConstraintCache(mosek::fusion::p_ConstraintCache *_impl) : _impl(_impl) { /*std::cout << "ConstraintCache() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::ConstraintCache::~ConstraintCache() { delete _impl; _impl = nullptr; }mosek::fusion::p_ConstraintCache::p_ConstraintCache  (::mosek::fusion::ConstraintCache * _pubthis) :     _pubthis(_pubthis){}mosek::fusion::ConstraintCache::t mosek::fusion::p_ConstraintCache::_new_ConstraintCache  (monty::rc_ptr< ::mosek::fusion::ConstraintCache > _3176){ return new mosek::fusion::ConstraintCache(_3176); }mosek::fusion::ConstraintCache::ConstraintCache  (monty::rc_ptr< ::mosek::fusion::ConstraintCache > _3176) :    ConstraintCache(new mosek::fusion::p_ConstraintCache(this)){ mosek::fusion::p_ConstraintCache::_get_impl(this)->_initialize(_3176); }void mosek::fusion::p_ConstraintCache::_initialize  (monty::rc_ptr< ::mosek::fusion::ConstraintCache > _3176){monty::rc_reserve __reserve_this(_pubthis); { { (nrows = mosek::fusion::p_ConstraintCache::_get_impl(_3176)->nrows); (nnz = mosek::fusion::p_ConstraintCache::_get_impl(_3176)->nnz); (subj = ([&]() -> std::shared_ptr< monty::ndarray< int,1 > > { if ( mosek::fusion::p_ConstraintCache::_get_impl(_3176)->subj) return (::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_ConstraintCache::_get_impl(_3176)->subj)); else return (nullptr); })()); (subi = ([&]() -> std::shared_ptr< monty::ndarray< int,1 > > { if ( mosek::fusion::p_ConstraintCache::_get_impl(_3176)->subi) return (::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_ConstraintCache::_get_impl(_3176)->subi)); else return (nullptr); })()); (cof = ([&]() -> std::shared_ptr< monty::ndarray< double,1 > > { if ( mosek::fusion::p_ConstraintCache::_get_impl(_3176)->cof) return (::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_ConstraintCache::_get_impl(_3176)->cof)); else return (nullptr); })()); (bfix = ([&]() -> std::shared_ptr< monty::ndarray< double,1 > > { if ( mosek::fusion::p_ConstraintCache::_get_impl(_3176)->bfix) return (::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_ConstraintCache::_get_impl(_3176)->bfix)); else return (nullptr); })()); (buffer_cof = ([&]() -> std::shared_ptr< monty::ndarray< double,1 > > { if ( mosek::fusion::p_ConstraintCache::_get_impl(_3176)->buffer_cof) return (::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_ConstraintCache::_get_impl(_3176)->buffer_cof)); else return (nullptr); })()); (buffer_subj = ([&]() -> std::shared_ptr< monty::ndarray< int,1 > > { if ( mosek::fusion::p_ConstraintCache::_get_impl(_3176)->buffer_subj) return (::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_ConstraintCache::_get_impl(_3176)->buffer_subj)); else return (nullptr); })()); (buffer_subi = ([&]() -> std::shared_ptr< monty::ndarray< int,1 > > { if ( mosek::fusion::p_ConstraintCache::_get_impl(_3176)->buffer_subi) return (::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_ConstraintCache::_get_impl(_3176)->buffer_subi)); else return (nullptr); })()); (nunordered = mosek::fusion::p_ConstraintCache::_get_impl(_3176)->nunordered); (nbarnz = mosek::fusion::p_ConstraintCache::_get_impl(_3176)->nbarnz); (barsubi = ([&]() -> std::shared_ptr< monty::ndarray< int,1 > > { if ( mosek::fusion::p_ConstraintCache::_get_impl(_3176)->barsubi) return (::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_ConstraintCache::_get_impl(_3176)->barsubi)); else return (nullptr); })()); (barsubj = ([&]() -> std::shared_ptr< monty::ndarray< int,1 > > { if ( mosek::fusion::p_ConstraintCache::_get_impl(_3176)->barsubj) return (::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_ConstraintCache::_get_impl(_3176)->barsubj)); else return (nullptr); })()); (barmatidx = ([&]() -> std::shared_ptr< monty::ndarray< int,1 > > { if ( mosek::fusion::p_ConstraintCache::_get_impl(_3176)->barmatidx) return (::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_ConstraintCache::_get_impl(_3176)->barmatidx)); else return (nullptr); })()); }}}mosek::fusion::ConstraintCache::t mosek::fusion::p_ConstraintCache::_new_ConstraintCache  (std::shared_ptr< monty::ndarray< long long,1 > > _3177,    std::shared_ptr< monty::ndarray< double,1 > > _3178,    std::shared_ptr< monty::ndarray< int,1 > > _3179,    std::shared_ptr< monty::ndarray< double,1 > > _3180,    std::shared_ptr< monty::ndarray< int,1 > > _3181,    std::shared_ptr< monty::ndarray< int,1 > > _3182,    std::shared_ptr< monty::ndarray< int,1 > > _3183){ return new mosek::fusion::ConstraintCache(_3177,_3178,_3179,_3180,_3181,_3182,_3183); }mosek::fusion::ConstraintCache::ConstraintCache  (std::shared_ptr< monty::ndarray< long long,1 > > _3177,    std::shared_ptr< monty::ndarray< double,1 > > _3178,    std::shared_ptr< monty::ndarray< int,1 > > _3179,    std::shared_ptr< monty::ndarray< double,1 > > _3180,    std::shared_ptr< monty::ndarray< int,1 > > _3181,    std::shared_ptr< monty::ndarray< int,1 > > _3182,    std::shared_ptr< monty::ndarray< int,1 > > _3183) :    ConstraintCache(new mosek::fusion::p_ConstraintCache(this)){ mosek::fusion::p_ConstraintCache::_get_impl(this)->_initialize(_3177,_3178,_3179,_3180,_3181,_3182,_3183); }void mosek::fusion::p_ConstraintCache::_initialize  (std::shared_ptr< monty::ndarray< long long,1 > > _3177,    std::shared_ptr< monty::ndarray< double,1 > > _3178,    std::shared_ptr< monty::ndarray< int,1 > > _3179,    std::shared_ptr< monty::ndarray< double,1 > > _3180,    std::shared_ptr< monty::ndarray< int,1 > > _3181,    std::shared_ptr< monty::ndarray< int,1 > > _3182,    std::shared_ptr< monty::ndarray< int,1 > > _3183){monty::rc_reserve __reserve_this(_pubthis); { { (nrows = ((int)((_3177)->size(0)) - (int)1)); (nnz = ((*_3177)(((int)((_3177)->size(0)) - (int)1)))); (subj = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(nnz)))); (subi = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(nnz)))); (cof = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(nnz)))); if (_3180){ (bfix = _3180); }else { (bfix = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(nrows)))); }if ((_3181 && (_3182 && _3183))){ (nbarnz = (int)((_3181)->size(0))); if ((nbarnz > (int)((_3182)->size(0)))){ (nbarnz = (int)((_3182)->size(0))); }else {}if ((nbarnz > (int)((_3183)->size(0)))){ (nbarnz = (int)((_3183)->size(0))); }else {}(barsubi = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(nbarnz)))); (barsubj = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(nbarnz)))); (barmatidx = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(nbarnz)))); ::mosek::fusion::Utils::Tools::arraycopy(_3181,(long long)((int)0),barsubi,(long long)((int)0),nbarnz); ::mosek::fusion::Utils::Tools::arraycopy(_3182,(long long)((int)0),barsubj,(long long)((int)0),nbarnz); ::mosek::fusion::Utils::Tools::arraycopy(_3183,(long long)((int)0),barmatidx,(long long)((int)0),nbarnz); }else { (nbarnz = (int)0); (barsubi = nullptr); (barsubj = nullptr); (barmatidx = nullptr); }::mosek::fusion::Utils::Tools::arraycopy(_3179,(long long)0,subj,(long long)0,nnz); ::mosek::fusion::Utils::Tools::arraycopy(_3178,(long long)0,cof,(long long)0,nnz); int _8538 = (int)0; int _8539 = nrows; for (int _3184 = _8538;_3184<_8539;++_3184){ long long _8540 = ((*_3177)(_3184)); long long _8541 = ((*_3177)((_3184 + (int)1))); for (long long _3185 = _8540;_3185<_8541;++_3185){ (((*subi)(_3185)) = _3184); }}(buffer_cof = nullptr); (buffer_subj = nullptr); (buffer_subi = nullptr); (nunordered = (long long)0); }}}void mosek::fusion::p_ConstraintCache::unchecked_add_fx( std::shared_ptr< monty::ndarray< double,1 > > _3186){ int _8542 = (int)0; int _8543 = nrows; for (int _3187 = _8542;_3187<_8543;++_3187){ (((*bfix)(_3187)) = (((*bfix)(_3187)) + ((*_3186)(_3187)))); }}long long mosek::fusion::p_ConstraintCache::order_barentries( ){ std::shared_ptr< monty::ndarray< long long,1 > > _3188 = ([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _8544; for (long long _3189=(long long)0, _8545=nbarnz; _3189 < _8545;++_3189)_8544.push_back(_3189); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_8544.size()),_8544.begin(),_8544.end())); })(); if ((! ::mosek::fusion::p_Sort::issorted(_3188,barsubi,barsubj,(long long)((int)0),nbarnz,false))){ ::mosek::fusion::p_Sort::argsort(_3188,barsubi,barsubj,(long long)((int)0),nbarnz,false); std::shared_ptr< monty::ndarray< int,1 > > _3190 = barsubi; std::shared_ptr< monty::ndarray< int,1 > > _3191 = barsubj; std::shared_ptr< monty::ndarray< int,1 > > _3192 = barmatidx; (barsubi = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _8546; for (long long _3193=(int)0, _8547=nbarnz; _3193 < _8547;++_3193)_8546.push_back(((*_3190)(((*_3188)(_3193))))); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8546.size()),_8546.begin(),_8546.end())); })()); (barsubj = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _8548; for (long long _3194=(int)0, _8549=nbarnz; _3194 < _8549;++_3194)_8548.push_back(((*_3191)(((*_3188)(_3194))))); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8548.size()),_8548.begin(),_8548.end())); })()); (barmatidx = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _8550; for (long long _3195=(int)0, _8551=nbarnz; _3195 < _8551;++_3195)_8550.push_back(((*_3192)(((*_3188)(_3195))))); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8550.size()),_8550.begin(),_8550.end())); })()); }else {}return nbarnz; }void mosek::fusion::p_ConstraintCache::add_bar( std::shared_ptr< monty::ndarray< int,1 > > _3196,std::shared_ptr< monty::ndarray< int,1 > > _3197,std::shared_ptr< monty::ndarray< int,1 > > _3198){ if (_3196){ int _3199 = (int)((_3196)->size(0)); if (((int)((_3196)->size(0)) <= (nbarnz + _3199))){ std::shared_ptr< monty::ndarray< int,1 > > _3200 = barsubi; std::shared_ptr< monty::ndarray< int,1 > > _3201 = barsubj; std::shared_ptr< monty::ndarray< int,1 > > _3202 = barmatidx; long long _3203 = ([&]() -> long long { if ( (((int)2 * nbarnz) > (nbarnz + _3199))) return (((int)2 * nbarnz)); else return ((nbarnz + (_3199 * (int)2))); })(); (barsubi = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_3203)))); (barsubj = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_3203)))); (barmatidx = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_3203)))); if ((nbarnz > (int)0)){ ::mosek::fusion::Utils::Tools::arraycopy(_3200,(long long)((int)0),barsubi,(long long)((int)0),nbarnz); ::mosek::fusion::Utils::Tools::arraycopy(_3201,(long long)((int)0),barsubj,(long long)((int)0),nbarnz); ::mosek::fusion::Utils::Tools::arraycopy(_3202,(long long)((int)0),barmatidx,(long long)((int)0),nbarnz); }else {}}else {}::mosek::fusion::Utils::Tools::arraycopy(_3196,(long long)((int)0),barsubi,nbarnz,(long long)(_3199)); ::mosek::fusion::Utils::Tools::arraycopy(_3197,(long long)((int)0),barsubj,nbarnz,(long long)(_3199)); ::mosek::fusion::Utils::Tools::arraycopy(_3198,(long long)((int)0),barmatidx,nbarnz,(long long)(_3199)); (nbarnz += _3199); }else {}}void mosek::fusion::p_ConstraintCache::unchecked_add_l( std::shared_ptr< monty::ndarray< long long,1 > > _3204,std::shared_ptr< monty::ndarray< int,1 > > _3205,std::shared_ptr< monty::ndarray< double,1 > > _3206,std::shared_ptr< monty::ndarray< double,1 > > _3207){ long long _3208 = (nunordered + ((*_3204)(nrows))); long long _3209 = ((*_3204)(nrows)); std::shared_ptr< monty::ndarray< int,1 > > _3210; std::shared_ptr< monty::ndarray< int,1 > > _3211; std::shared_ptr< monty::ndarray< double,1 > > _3212; if ((! buffer_cof || ((int)((buffer_cof)->size(0)) < _3208))){ (_3210 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_3208)))); (_3211 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_3208)))); (_3212 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_3208)))); if (buffer_cof){ ::mosek::fusion::Utils::Tools::arraycopy(buffer_subi,(long long)0,_3210,(long long)0,nunordered); ::mosek::fusion::Utils::Tools::arraycopy(buffer_subj,(long long)0,_3211,(long long)0,nunordered); ::mosek::fusion::Utils::Tools::arraycopy(buffer_cof,(long long)0,_3212,(long long)0,nunordered); }else {}}else { (_3210 = buffer_subi); (_3211 = buffer_subj); (_3212 = buffer_cof); }int _8552 = (int)0; int _8553 = nrows; for (int _3213 = _8552;_3213<_8553;++_3213){ long long _8554 = ((*_3204)(_3213)); long long _8555 = ((*_3204)((_3213 + (int)1))); for (long long _3214 = _8554;_3214<_8555;++_3214){ (((*_3210)((nunordered + _3214))) = _3213); }}::mosek::fusion::Utils::Tools::arraycopy(_3205,(long long)0,_3211,nunordered,_3209); ::mosek::fusion::Utils::Tools::arraycopy(_3206,(long long)0,_3212,nunordered,_3209); (buffer_subi = _3210); (buffer_subj = _3211); (buffer_cof = _3212); if (_3207){ int _8556 = (int)0; int _8557 = nrows; for (int _3215 = _8556;_3215<_8557;++_3215){ (((*bfix)(_3215)) = (((*bfix)(_3215)) + ((*_3207)(_3215)))); }}else {}(nunordered = _3208); }void mosek::fusion::ConstraintCache::add  ( std::shared_ptr< monty::ndarray< long long,1 > > _3216,    std::shared_ptr< monty::ndarray< int,1 > > _3217,    std::shared_ptr< monty::ndarray< double,1 > > _3218,    std::shared_ptr< monty::ndarray< double,1 > > _3219) { mosek::fusion::p_ConstraintCache::_get_impl(this)->add(_3216,_3217,_3218,_3219); }void mosek::fusion::p_ConstraintCache::add( std::shared_ptr< monty::ndarray< long long,1 > > _3216,std::shared_ptr< monty::ndarray< int,1 > > _3217,std::shared_ptr< monty::ndarray< double,1 > > _3218,std::shared_ptr< monty::ndarray< double,1 > > _3219){ if ((((int)((_3216)->size(0)) != (nrows + (int)1)) || (_3219 && ((int)((_3219)->size(0)) != nrows)))){ throw ::mosek::fusion::LengthError(std::string ("Mismatching expression lengths"));}else {}unchecked_add_l(_3216,_3217,_3218,_3219); }long long mosek::fusion::ConstraintCache::flush  ( std::shared_ptr< monty::ndarray< int,1 > > _3220,    std::shared_ptr< monty::ndarray< int,1 > > _3221,    std::shared_ptr< monty::ndarray< double,1 > > _3222,    std::shared_ptr< monty::ndarray< double,1 > > _3223) { return mosek::fusion::p_ConstraintCache::_get_impl(this)->flush(_3220,_3221,_3222,_3223); }long long mosek::fusion::p_ConstraintCache::flush( std::shared_ptr< monty::ndarray< int,1 > > _3220,std::shared_ptr< monty::ndarray< int,1 > > _3221,std::shared_ptr< monty::ndarray< double,1 > > _3222,std::shared_ptr< monty::ndarray< double,1 > > _3223){ std::shared_ptr< monty::ndarray< long long,1 > > _3224 = nullptr; if ((bfix && _3223)){ int _8558 = (int)0; int _8559 = nrows; for (int _3225 = _8558;_3225<_8559;++_3225){ (((*_3223)(_3225)) = ((*bfix)(_3225))); }}else {}if ((nunordered == (long long)0)){ return (long long)0; }else {}bool _3226 = false; { int _3227 = (int)1; while (((_3227 < nunordered) && ((((*buffer_subi)((_3227 - (int)1))) < ((*buffer_subi)(_3227))) || ((((*buffer_subi)((_3227 - (int)1))) == ((*buffer_subi)(_3227))) && (((*buffer_subj)((_3227 - (int)1))) <= ((*buffer_subj)(_3227))))))) { ( ++ _3227 ); }(_3226 = (_3227 == nunordered)); }if ((! _3226)){ (_3224 = ([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _8560; for (long long _3228=(int)0, _8561=nunordered; _3228 < _8561;++_3228)_8560.push_back(_3228); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_8560.size()),_8560.begin(),_8560.end())); })()); ::mosek::fusion::p_CommonTools::argQsort(_3224,buffer_subi,buffer_subj,(long long)0,nunordered); }else {}long long _3229 = nnz; std::shared_ptr< monty::ndarray< int,1 > > _3230 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((nunordered + _3229)))); std::shared_ptr< monty::ndarray< int,1 > > _3231 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((nunordered + _3229)))); std::shared_ptr< monty::ndarray< double,1 > > _3232 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((nunordered + _3229)))); long long _3233 = (long long)0; if (_3226){ int _3234 = (int)0; int _3235 = (int)0; long long _3236 = _3229; long long _3237 = nunordered; int _3238 = (int)0; long long _3239 = (long long)0; while (((_3234 < _3236) && (_3235 < _3237))) { if (((((*subi)(_3234)) < ((*buffer_subi)(_3235))) || ((((*subi)(_3234)) == ((*buffer_subi)(_3235))) && (((*subj)(_3234)) < ((*buffer_subj)(_3235)))))){ (((*_3230)(_3238)) = ((*subi)(_3234))); (((*_3231)(_3238)) = ((*subj)(_3234))); (((*_3232)(_3238)) = ((*cof)(_3234))); ( ++ _3234 ); ( ++ _3238 ); }else if (((((*subi)(_3234)) > ((*buffer_subi)(_3235))) || ((((*subi)(_3234)) == ((*buffer_subi)(_3235))) && (((*subj)(_3234)) > ((*buffer_subj)(_3235)))))){ (((*_3230)(_3238)) = ((*buffer_subi)(_3235))); (((*_3231)(_3238)) = ((*buffer_subj)(_3235))); (((*_3232)(_3238)) = ((*buffer_cof)(_3235))); (((*_3220)(_3233)) = ((*_3230)(_3238))); (((*_3221)(_3233)) = ((*_3231)(_3238))); (((*_3222)(_3233)) = ((*_3232)(_3238))); ( ++ _3233 ); ( ++ _3235 ); ( ++ _3238 ); }else { (((*_3230)(_3238)) = ((*subi)(_3234))); (((*_3231)(_3238)) = ((*subj)(_3234))); (((*_3232)(_3238)) = ((*cof)(_3234))); while (((_3234 < (int)((subi)->size(0))) && ((_3235 < (int)((buffer_subi)->size(0))) && ((((*subi)(_3234)) == ((*buffer_subi)(_3235))) && (((*subj)(_3234)) == ((*buffer_subj)(_3235))))))) { (((*_3232)(_3238)) = (((*_3232)(_3238)) + ((*buffer_cof)(_3235)))); ( ++ _3235 ); }(((*_3220)(_3233)) = ((*_3230)(_3238))); (((*_3221)(_3233)) = ((*_3231)(_3238))); (((*_3222)(_3233)) = ((*_3232)(_3238))); ( ++ _3233 ); ( ++ _3234 ); ( ++ _3238 ); }}while ((_3234 < _3236)) { (((*_3230)(_3238)) = ((*subi)(_3234))); (((*_3231)(_3238)) = ((*subj)(_3234))); (((*_3232)(_3238)) = ((*cof)(_3234))); ( ++ _3234 ); ( ++ _3238 ); }while ((_3235 < _3237)) { (((*_3230)(_3238)) = ((*buffer_subi)(_3235))); (((*_3231)(_3238)) = ((*buffer_subj)(_3235))); (((*_3232)(_3238)) = ((*buffer_cof)(_3235))); (((*_3220)(_3233)) = ((*_3230)(_3238))); (((*_3221)(_3233)) = ((*_3231)(_3238))); (((*_3222)(_3233)) = ((*_3232)(_3238))); ( ++ _3233 ); ( ++ _3235 ); ( ++ _3238 ); }(nnz = _3238); }else { int _3240 = (int)0; int _3241 = (int)0; long long _3242 = _3229; long long _3243 = nunordered; int _3244 = (int)0; long long _3245 = (long long)0; while (((_3240 < _3242) && (_3241 < _3243))) { if (((((*subi)(_3240)) < ((*buffer_subi)(((*_3224)(_3241))))) || ((((*subi)(_3240)) == ((*buffer_subi)(((*_3224)(_3241))))) && (((*subj)(_3240)) < ((*buffer_subj)(((*_3224)(_3241)))))))){ (((*_3230)(_3244)) = ((*subi)(_3240))); (((*_3231)(_3244)) = ((*subj)(_3240))); (((*_3232)(_3244)) = ((*cof)(_3240))); ( ++ _3240 ); ( ++ _3244 ); }else if (((((*subi)(_3240)) > ((*buffer_subi)(((*_3224)(_3241))))) || ((((*subi)(_3240)) == ((*buffer_subi)(((*_3224)(_3241))))) && (((*subj)(_3240)) > ((*buffer_subj)(((*_3224)(_3241)))))))){ (((*_3230)(_3244)) = ((*buffer_subi)(((*_3224)(_3241))))); (((*_3231)(_3244)) = ((*buffer_subj)(((*_3224)(_3241))))); (((*_3232)(_3244)) = ((*buffer_cof)(((*_3224)(_3241))))); (((*_3220)(_3233)) = ((*_3230)(_3244))); (((*_3221)(_3233)) = ((*_3231)(_3244))); (((*_3222)(_3233)) = ((*_3232)(_3244))); ( ++ _3233 ); ( ++ _3241 ); ( ++ _3244 ); }else { (((*_3230)(_3244)) = ((*subi)(_3240))); (((*_3231)(_3244)) = ((*subj)(_3240))); (((*_3232)(_3244)) = ((*cof)(_3240))); while (((((*subi)(_3240)) == ((*buffer_subi)(((*_3224)(_3241))))) && (((*subj)(_3240)) == ((*buffer_subj)(((*_3224)(_3241))))))) { (((*_3232)(_3244)) = (((*_3232)(_3244)) + ((*buffer_cof)(((*_3224)(_3241)))))); ( ++ _3241 ); }(((*_3220)(_3233)) = ((*_3230)(_3244))); (((*_3221)(_3233)) = ((*_3231)(_3244))); (((*_3222)(_3233)) = ((*_3232)(_3244))); ( ++ _3233 ); ( ++ _3240 ); ( ++ _3244 ); }}(nnz = _3244); }(subi = _3230); (subj = _3231); (cof = _3232); (nunordered = (long long)0); return _3233; }long long mosek::fusion::ConstraintCache::numUnsorted  ( ) { return mosek::fusion::p_ConstraintCache::_get_impl(this)->numUnsorted(); }long long mosek::fusion::p_ConstraintCache::numUnsorted( ){ return nunordered; }monty::rc_ptr< ::mosek::fusion::ConstraintCache > mosek::fusion::p_ConstraintCache::clone( ){ return ::mosek::fusion::p_ConstraintCache::_new_ConstraintCache(_pubthis); }void mosek::fusion::p_ConstraintCache::destroy(){barmatidx.reset();barsubj.reset();barsubi.reset();buffer_subi.reset();buffer_subj.reset();buffer_cof.reset();bfix.reset();cof.reset();subi.reset();subj.reset();}void mosek::fusion::ConstraintCache::destroy() { mosek::fusion::p_ConstraintCache::_get_impl(this)->destroy(); }mosek::fusion::CompoundConstraint::CompoundConstraint(mosek::fusion::p_CompoundConstraint *_impl) : mosek::fusion::Constraint(_impl) { /*std::cout << "CompoundConstraint()" << this << std::endl; */ }mosek::fusion::CompoundConstraint::~CompoundConstraint() {  /* std::cout << "~CompoundConstraint()" << this << std::endl << std::flush; */ }mosek::fusion::p_CompoundConstraint::p_CompoundConstraint  (::mosek::fusion::CompoundConstraint * _pubthis) :     mosek::fusion::p_Constraint(_pubthis),    _pubthis(_pubthis){}mosek::fusion::CompoundConstraint::t mosek::fusion::p_CompoundConstraint::_new_CompoundConstraint  (std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > > _3246){ return new mosek::fusion::CompoundConstraint(_3246); }mosek::fusion::CompoundConstraint::CompoundConstraint  (std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > > _3246) :    CompoundConstraint(new mosek::fusion::p_CompoundConstraint(this)){ mosek::fusion::p_CompoundConstraint::_get_impl(this)->_initialize(_3246); }void mosek::fusion::p_CompoundConstraint::_initialize  (std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > > _3246){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_Constraint::_initialize(::mosek::fusion::p_CompoundConstraint::model_from_con(_3246),::mosek::fusion::p_CompoundConstraint::compute_shape(_3246,(int)0));int _3247 = (int)0; int _3248 = (int)0; int _3249 = (int)0; { int _3250 = (int)0; for (;(_3250 < (int)((_3246)->size(0)));( ++ _3250 )){ if ((mosek::fusion::p_Set::_get_impl(mosek::fusion::p_Constraint::_get_impl(((*_3246)(_3250)))->shape_p)->size == (int)1)){ ( ++ _3248 ); ( ++ _3249 ); }else if ((mosek::fusion::p_Set::_get_impl(mosek::fusion::p_Constraint::_get_impl(((*_3246)(_3250)))->shape_p)->size > (int)1)){ ( ++ _3248 ); (_3249 = (_3249 + mosek::fusion::p_Constraint::_get_impl(((*_3246)(_3250)))->shape_p->dim(_3247))); }else {}}}(cons = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 >(monty::shape(_3248)))); (consb = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((_3248 + (int)1))))); (((*consb)((int)0)) = (int)0); (stackdim = _3247); { int _3251 = (int)0; { int _3252 = (int)0; for (;(_3252 < (int)((_3246)->size(0)));( ++ _3252 )){ if ((mosek::fusion::p_Set::_get_impl(mosek::fusion::p_Constraint::_get_impl(((*_3246)(_3252)))->shape_p)->size > (int)0)){ (((*cons)(_3251)) = ((*_3246)(_3252))); ( ++ _3251 ); if ((mosek::fusion::p_Set::_get_impl(mosek::fusion::p_Constraint::_get_impl(((*_3246)(_3252)))->shape_p)->size == (int)1)){ (((*consb)((_3252 + (int)1))) = (((*consb)(_3252)) + (int)1)); }else { (((*consb)((_3252 + (int)1))) = (((*consb)(_3252)) + mosek::fusion::p_Constraint::_get_impl(((*_3246)(_3252)))->shape_p->dim(_3247))); }}else {}}}}}}void mosek::fusion::p_CompoundConstraint::toStringArray( std::shared_ptr< monty::ndarray< long long,1 > > _3253,long long _3254,std::shared_ptr< monty::ndarray< std::string,1 > > _3255){ throw ::mosek::fusion::UnimplementedError(std::string ("SliceConstraint.toStringArray() not implemented"));}void mosek::fusion::p_CompoundConstraint::add_l( std::shared_ptr< monty::ndarray< long long,1 > > _3256,std::shared_ptr< monty::ndarray< long long,1 > > _3257,std::shared_ptr< monty::ndarray< int,1 > > _3258,std::shared_ptr< monty::ndarray< int,1 > > _3259,std::shared_ptr< monty::ndarray< int,1 > > _3260,std::shared_ptr< monty::ndarray< double,1 > > _3261,std::shared_ptr< monty::ndarray< double,1 > > _3262,long long _3263,int _3264,int _3265){ std::shared_ptr< monty::ndarray< long long,1 > > _3266 = ([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _8562; for (int _3267=(int)0, _8563=_3265; _3267 < _8563;++_3267)_8562.push_back((((*_3256)((_3264 + _3267))) - _3263)); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_8562.size()),_8562.begin(),_8562.end())); })(); std::shared_ptr< monty::ndarray< long long,1 > > _3268 = ([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _8564; for (int _3269=(int)0, _8565=_3265; _3269 < _8565;++_3269)_8564.push_back(_3269); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_8564.size()),_8564.begin(),_8564.end())); })(); std::shared_ptr< monty::ndarray< long long,1 > > _3270 = ([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _8566; for (int _3271=(int)0, _8567=_3265; _3271 < _8567;++_3271)_8566.push_back(((*mosek::fusion::p_Set::_get_impl(shape_p.get())->idxtokey((((*_3256)((_3264 + _3271))) - _3263)))(stackdim))); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_8566.size()),_8566.begin(),_8566.end())); })(); ::mosek::fusion::p_CommonTools::argQsort(_3268,_3270,_3266,(long long)0,(long long)_3265); std::shared_ptr< monty::ndarray< int,1 > > _3272 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_3265))); { int _3273 = (int)0; while ((((*consb)(_3273)) < ((*_3270)(((*_3268)((int)0)))))) { ( ++ _3273 ); }(((*_3272)((int)0)) = _3273); int _8568 = (int)1; int _8569 = _3265; for (int _3274 = _8568;_3274<_8569;++_3274){ while ((((*consb)(_3273)) < ((*_3270)(((*_3268)(_3274)))))) { ( ++ _3273 ); }(((*_3272)(_3274)) = _3273); }}{ std::shared_ptr< monty::ndarray< long long,1 > > _3275 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_3265))); std::shared_ptr< monty::ndarray< long long,1 > > _3276 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((_3265 + (int)1)))); long long _3277 = (((*_3257)((_3264 + _3265))) - ((*_3257)(_3264))); std::shared_ptr< monty::ndarray< int,1 > > _3278 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_3277))); std::shared_ptr< monty::ndarray< int,1 > > _3279 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_3277))); std::shared_ptr< monty::ndarray< int,1 > > _3280 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_3277))); std::shared_ptr< monty::ndarray< double,1 > > _3281 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_3277))); std::shared_ptr< monty::ndarray< double,1 > > _3282 = ([&]() -> std::shared_ptr< monty::ndarray< double,1 > > { if ( ! _3262) return (nullptr); else return (std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_3265)))); })(); (((*_3276)((int)0)) = (long long)0); int _8570 = (int)0; int _8571 = _3265; for (int _3283 = _8570;_3283<_8571;++_3283){ int _3284 = ((*_3272)(_3283)); if ((mosek::fusion::p_Set::_get_impl(mosek::fusion::p_Constraint::_get_impl(((*cons)(_3284)))->shape_p)->size == (int)1)){ (((*_3275)(_3283)) = (long long)0); }else { std::shared_ptr< monty::ndarray< int,1 > > _3285 = mosek::fusion::p_Set::_get_impl(shape_p.get())->idxtokey(((*_3266)(((*_3268)(_3283))))); (((*_3285)(stackdim)) = (((*_3285)(stackdim)) - ((*consb)(_3284)))); (((*_3275)(_3283)) = mosek::fusion::p_Set::_get_impl(mosek::fusion::p_Constraint::_get_impl(((*cons)(_3284)))->shape_p.get())->linearidx(_3285)); }long long _3286 = (((*_3257)((((*_3268)(_3283)) + (int)1))) - ((*_3257)(((*_3268)(_3283))))); (((*_3276)((_3283 + (int)1))) = (((*_3276)(_3283)) + _3286)); ::mosek::fusion::Utils::Tools::arraycopy(_3258,((*_3257)(((*_3268)(_3283)))),_3278,((*_3276)(_3283)),_3286); ::mosek::fusion::Utils::Tools::arraycopy(_3259,((*_3257)(((*_3268)(_3283)))),_3279,((*_3276)(_3283)),_3286); ::mosek::fusion::Utils::Tools::arraycopy(_3260,((*_3257)(((*_3268)(_3283)))),_3280,((*_3276)(_3283)),_3286); ::mosek::fusion::Utils::Tools::arraycopy(_3261,((*_3257)(((*_3268)(_3283)))),_3281,((*_3276)(_3283)),_3286); }if (_3262){ int _8572 = (int)0; int _8573 = _3265; for (int _3287 = _8572;_3287<_8573;++_3287){ (((*_3282)(_3287)) = ((*_3262)(((*_3268)(_3287))))); }}else {}{ int _3288 = (int)0; while ((_3288 < _3265)) { int _3289 = _3288; ( ++ _3288 ); while (((_3288 < _3265) && (((*_3272)(_3288)) == ((*_3272)(_3289))))) { ( ++ _3288 ); }mosek::fusion::p_Constraint::_get_impl(((*cons)(((*_3272)(_3289)))).get())->add_l(_3275,_3276,_3278,_3279,_3280,_3281,_3282,(long long)0,_3289,(_3288 - _3289)); }}}}void mosek::fusion::p_CompoundConstraint::dual_values( long long _3290,std::shared_ptr< monty::ndarray< int,1 > > _3291,std::shared_ptr< monty::ndarray< long long,1 > > _3292,int _3293,std::shared_ptr< monty::ndarray< double,1 > > _3294){ int _3295 = (int)((_3292)->size(0)); int _3296 = ((*_3291)((int)0)); int _8574 = (int)1; int _8575 = (int)((_3291)->size(0)); for (int _3297 = _8574;_3297<_8575;++_3297){ (_3296 = (_3296 * ((*_3291)(_3297)))); }std::shared_ptr< monty::ndarray< long long,1 > > _3298 = ([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _8576; for (int _3299=(int)0, _8577=(int)((_3291)->size(0)); _3299 < _8577;++_3299)_8576.push_back(_3290); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_8576.size()),_8576.begin(),_8576.end())); })(); std::shared_ptr< monty::ndarray< int,1 > > _3300 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)((_3291)->size(0))))); std::shared_ptr< monty::ndarray< int,1 > > _3301 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(mosek::fusion::p_Set::_get_impl(shape_p)->nd))); std::shared_ptr< monty::ndarray< long long,1 > > _3302 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(mosek::fusion::p_Set::_get_impl(shape_p)->nd))); (((*_3302)((mosek::fusion::p_Set::_get_impl(shape_p)->nd - (int)1))) = (long long)1); int _8578 = (int)1; int _8579 = mosek::fusion::p_Set::_get_impl(shape_p)->nd; for (int _3303 = _8578;_3303<_8579;++_3303){ (((*_3302)(((mosek::fusion::p_Set::_get_impl(shape_p)->nd - _3303) - (int)1))) = (((*_3302)((mosek::fusion::p_Set::_get_impl(shape_p)->nd - _3303))) * shape_p->dim((mosek::fusion::p_Set::_get_impl(shape_p)->nd - _3303)))); }std::shared_ptr< monty::ndarray< long long,1 > > _3304 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)1))); int _8580 = (int)0; int _8581 = _3296; for (int _3305 = _8580;_3305<_8581;++_3305){ { long long _3306 = ((*_3298)((int)0)); int _8582 = (int)0; int _8583 = mosek::fusion::p_Set::_get_impl(shape_p)->nd; for (int _3307 = _8582;_3307<_8583;++_3307){ (((*_3301)(_3307)) = (int)(_3306 / ((*_3302)(_3307)))); (_3306 = (_3306 - ((long long)((*_3301)(_3307)) * ((*_3302)(_3307))))); }}{ int _3308 = (int)0; while ((((*_3301)(stackdim)) >= ((*consb)((_3308 + (int)1))))) { ( ++ _3308 ); }(((*_3301)(stackdim)) = (((*_3301)(stackdim)) - ((*consb)(_3308)))); (((*_3304)((int)0)) = mosek::fusion::p_Set::_get_impl(mosek::fusion::p_Constraint::_get_impl(((*cons)(_3308)))->shape_p.get())->linearidx(_3301)); mosek::fusion::p_Constraint::_get_impl(((*cons)(_3308)).get())->dual_values(_3304,(_3293 + _3305),_3294); }{ ( ++ ((*_3300)((int)0)) ); (((*_3298)((int)0)) = (((*_3298)((int)0)) + ((*_3292)((_3295 - (int)1))))); int _3309 = (int)0; { (_3309 = (int)0); for (;((_3309 < (_3295 - (int)1)) && (((*_3300)(_3309)) == ((*_3291)(_3309))));( ++ _3309 )){ (((*_3300)(_3309)) = (int)0); ( ++ ((*_3300)((_3309 + (int)1))) ); }}int _8584 = (int)0; int _8585 = _3309; for (int _3310 = _8584;_3310<_8585;++_3310){ (((*_3298)(_3310)) = ((*_3298)(_3309))); }}}}void mosek::fusion::p_CompoundConstraint::dual_values( std::shared_ptr< monty::ndarray< long long,1 > > _3311,int _3312,std::shared_ptr< monty::ndarray< double,1 > > _3313){ std::shared_ptr< monty::ndarray< long long,1 > > _3314 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)1))); std::shared_ptr< monty::ndarray< int,1 > > _3315 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(mosek::fusion::p_Set::_get_impl(shape_p)->nd))); int _8586 = (int)0; int _8587 = (int)((_3311)->size(0)); for (int _3316 = _8586;_3316<_8587;++_3316){ { long long _3317 = (long long)((*_3311)(_3316)); int _8588 = (int)0; int _8589 = mosek::fusion::p_Set::_get_impl(shape_p)->nd; for (int _3318 = _8588;_3318<_8589;++_3318){ (((*_3315)(_3318)) = (int)(_3317 / shape_p->stride(_3318))); (_3317 = (_3317 - ((long long)((*_3315)(_3318)) * shape_p->stride(_3318)))); }}{ int _3319 = (int)0; while ((((*_3315)(stackdim)) >= ((*consb)((_3319 + (int)1))))) { ( ++ _3319 ); }(((*_3315)(stackdim)) = (((*_3315)(stackdim)) - ((*consb)(_3319)))); (((*_3314)((int)0)) = mosek::fusion::p_Set::_get_impl(mosek::fusion::p_Constraint::_get_impl(((*cons)(_3319)))->shape_p.get())->linearidx(_3315)); mosek::fusion::p_Constraint::_get_impl(((*cons)(_3319)).get())->dual_values(_3314,(_3312 + _3316),_3313); }}}void mosek::fusion::p_CompoundConstraint::level_values( long long _3320,std::shared_ptr< monty::ndarray< int,1 > > _3321,std::shared_ptr< monty::ndarray< long long,1 > > _3322,int _3323,std::shared_ptr< monty::ndarray< double,1 > > _3324){ int _3325 = (int)((_3322)->size(0)); int _3326 = ((*_3321)((int)0)); int _8590 = (int)1; int _8591 = (int)((_3321)->size(0)); for (int _3327 = _8590;_3327<_8591;++_3327){ (_3326 = (_3326 * ((*_3321)(_3327)))); }std::shared_ptr< monty::ndarray< long long,1 > > _3328 = ([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _8592; for (int _3329=(int)0, _8593=(int)((_3321)->size(0)); _3329 < _8593;++_3329)_8592.push_back(_3320); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_8592.size()),_8592.begin(),_8592.end())); })(); std::shared_ptr< monty::ndarray< int,1 > > _3330 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)((_3321)->size(0))))); std::shared_ptr< monty::ndarray< int,1 > > _3331 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(mosek::fusion::p_Set::_get_impl(shape_p)->nd))); std::shared_ptr< monty::ndarray< long long,1 > > _3332 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(mosek::fusion::p_Set::_get_impl(shape_p)->nd))); (((*_3332)((mosek::fusion::p_Set::_get_impl(shape_p)->nd - (int)1))) = (long long)1); int _8594 = (int)1; int _8595 = mosek::fusion::p_Set::_get_impl(shape_p)->nd; for (int _3333 = _8594;_3333<_8595;++_3333){ (((*_3332)(((mosek::fusion::p_Set::_get_impl(shape_p)->nd - _3333) - (int)1))) = (((*_3332)((mosek::fusion::p_Set::_get_impl(shape_p)->nd - _3333))) * shape_p->dim((mosek::fusion::p_Set::_get_impl(shape_p)->nd - _3333)))); }std::shared_ptr< monty::ndarray< long long,1 > > _3334 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)1))); int _8596 = (int)0; int _8597 = _3326; for (int _3335 = _8596;_3335<_8597;++_3335){ { long long _3336 = ((*_3328)((int)0)); int _8598 = (int)0; int _8599 = mosek::fusion::p_Set::_get_impl(shape_p)->nd; for (int _3337 = _8598;_3337<_8599;++_3337){ (((*_3331)(_3337)) = (int)(_3336 / ((*_3332)(_3337)))); (_3336 = (_3336 - ((long long)((*_3331)(_3337)) * ((*_3332)(_3337))))); }}{ int _3338 = (int)0; while ((((*_3331)(stackdim)) >= ((*consb)((_3338 + (int)1))))) { ( ++ _3338 ); }(((*_3331)(stackdim)) = (((*_3331)(stackdim)) - ((*consb)(_3338)))); (((*_3334)((int)0)) = mosek::fusion::p_Set::_get_impl(mosek::fusion::p_Constraint::_get_impl(((*cons)(_3338)))->shape_p.get())->linearidx(_3331)); mosek::fusion::p_Constraint::_get_impl(((*cons)(_3338)).get())->level_values(_3334,(_3323 + _3335),_3324); }{ ( ++ ((*_3330)((int)0)) ); (((*_3328)((int)0)) = (((*_3328)((int)0)) + ((*_3322)((_3325 - (int)1))))); int _3339 = (int)0; { (_3339 = (int)0); for (;((_3339 < (_3325 - (int)1)) && (((*_3330)(_3339)) == ((*_3321)(_3339))));( ++ _3339 )){ (((*_3330)(_3339)) = (int)0); ( ++ ((*_3330)((_3339 + (int)1))) ); }}int _8600 = (int)0; int _8601 = _3339; for (int _3340 = _8600;_3340<_8601;++_3340){ (((*_3328)(_3340)) = ((*_3328)(_3339))); }}}}void mosek::fusion::p_CompoundConstraint::level_values( std::shared_ptr< monty::ndarray< long long,1 > > _3341,int _3342,std::shared_ptr< monty::ndarray< double,1 > > _3343){ std::shared_ptr< monty::ndarray< long long,1 > > _3344 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)1))); std::shared_ptr< monty::ndarray< int,1 > > _3345 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(mosek::fusion::p_Set::_get_impl(shape_p)->nd))); int _8602 = (int)0; int _8603 = (int)((_3341)->size(0)); for (int _3346 = _8602;_3346<_8603;++_3346){ { long long _3347 = (long long)((*_3341)(_3346)); int _8604 = (int)0; int _8605 = mosek::fusion::p_Set::_get_impl(shape_p)->nd; for (int _3348 = _8604;_3348<_8605;++_3348){ (((*_3345)(_3348)) = (int)(_3347 / shape_p->stride(_3348))); (_3347 = (_3347 - ((long long)((*_3345)(_3348)) * shape_p->stride(_3348)))); }}{ int _3349 = (int)0; while ((((*_3345)(stackdim)) >= ((*consb)((_3349 + (int)1))))) { ( ++ _3349 ); }(((*_3345)(stackdim)) = (((*_3345)(stackdim)) - ((*consb)(_3349)))); (((*_3344)((int)0)) = mosek::fusion::p_Set::_get_impl(mosek::fusion::p_Constraint::_get_impl(((*cons)(_3349)))->shape_p.get())->linearidx(_3345)); mosek::fusion::p_Constraint::_get_impl(((*cons)(_3349)).get())->level_values(_3344,(_3342 + _3346),_3343); }}}void mosek::fusion::p_CompoundConstraint::add( std::shared_ptr< monty::ndarray< long long,1 > > _3350,std::shared_ptr< monty::ndarray< int,1 > > _3351,std::shared_ptr< monty::ndarray< double,1 > > _3352,std::shared_ptr< monty::ndarray< double,1 > > _3353,int _3354,std::shared_ptr< monty::ndarray< int,1 > > _3355,int _3356){ throw ::mosek::fusion::UnimplementedError(std::string ("Functionality not implemented yet."));}monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::CompoundConstraint::slice  ( std::shared_ptr< monty::ndarray< int,1 > > _3357,    std::shared_ptr< monty::ndarray< int,1 > > _3358) { return mosek::fusion::p_CompoundConstraint::_get_impl(this)->slice(_3357,_3358); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_CompoundConstraint::slice( std::shared_ptr< monty::ndarray< int,1 > > _3357,std::shared_ptr< monty::ndarray< int,1 > > _3358){ throw ::mosek::fusion::UnimplementedError(std::string ("Compound constraints cannot be sliced"));}monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::CompoundConstraint::slice  ( int _3359,    int _3360) { return mosek::fusion::p_CompoundConstraint::_get_impl(this)->slice(_3359,_3360); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_CompoundConstraint::slice( int _3359,int _3360){ throw ::mosek::fusion::UnimplementedError(std::string ("Compound constraints cannot be sliced"));}monty::rc_ptr< ::mosek::fusion::Set > mosek::fusion::p_CompoundConstraint::compute_shape( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > > _3361,int _3362){ monty::rc_ptr< ::mosek::fusion::Set > _3363 = ((*_3361)((int)0))->shape(); int _3364 = (int)0; int _8606 = (int)0; int _8607 = (int)((_3361)->size(0)); for (int _3365 = _8606;_3365<_8607;++_3365){ if ((mosek::fusion::p_Set::_get_impl(mosek::fusion::p_Constraint::_get_impl(((*_3361)(_3365)))->shape_p)->size > (int)0)){ if ((mosek::fusion::p_Set::_get_impl(mosek::fusion::p_Constraint::_get_impl(((*_3361)(_3365)))->shape_p)->nd != mosek::fusion::p_Set::_get_impl(_3363)->nd)){ throw ::mosek::fusion::DimensionError(std::string ("Mismatching variable shape"));}else {}{ int _3366 = (int)0; for (;(_3366 < mosek::fusion::p_Set::_get_impl(_3363)->nd);( ++ _3366 )){ if (((_3366 != _3362) && (_3363->dim(_3366) != mosek::fusion::p_Constraint::_get_impl(((*_3361)(_3365)))->shape_p->dim(_3366)))){ throw ::mosek::fusion::DimensionError(std::string ("Mismatching variable shape"));}else {}}}(_3364 = (_3364 + mosek::fusion::p_Constraint::_get_impl(((*_3361)(_3365)))->shape_p->dim(_3362))); }else { throw ::mosek::fusion::DimensionError(std::string ("Empty element in compound variable"));}}if ((mosek::fusion::p_Set::_get_impl(_3363)->nd == (int)1)){ return ::mosek::fusion::p_IntSet::_new_IntSet(_3364); }else { std::shared_ptr< monty::ndarray< int,1 > > _3367 = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _8608; for (int _3368=(int)0, _8609=mosek::fusion::p_Set::_get_impl(_3363)->nd; _3368 < _8609;++_3368)_8608.push_back(_3363->dim(_3368)); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8608.size()),_8608.begin(),_8608.end())); })(); (((*_3367)(_3362)) = _3364); return ::mosek::fusion::p_NDSet::_new_NDSet(_3367); }}int mosek::fusion::p_CompoundConstraint::count_numcon( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > > _3369){ int _3370 = (int)0; { int _3371 = (int)0; for (;(_3371 < (int)((_3369)->size(0)));( ++ _3371 )){ monty::rc_ptr< ::mosek::fusion::Constraint > _3372 = ((*_3369)(_3371)); monty::rc_ptr< ::mosek::fusion::Constraint > _8610 = _3372; if (nullptr != dynamic_cast< ::mosek::fusion::CompoundConstraint* >(_8610.get())) {::mosek::fusion::CompoundConstraint::t _3373(dynamic_cast< ::mosek::fusion::CompoundConstraint* >(_8610.get()));{ (_3370 = (_3370 + (int)((mosek::fusion::p_CompoundConstraint::_get_impl(_3373)->cons)->size(0)))); }}else {mosek::fusion::Constraint::t _3374 = _8610;{ ( ++ _3370 ); }}}}return _3370; }monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::p_CompoundConstraint::model_from_con( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > > _3375){ return mosek::fusion::p_Constraint::_get_impl(((*_3375)((int)0)))->model; }void mosek::fusion::p_CompoundConstraint::destroy(){consb.reset();cons.reset();}void mosek::fusion::CompoundConstraint::destroy() { mosek::fusion::p_CompoundConstraint::_get_impl(this)->destroy(); }mosek::fusion::BoundInterfaceConstraint::BoundInterfaceConstraint(mosek::fusion::p_BoundInterfaceConstraint *_impl) : mosek::fusion::SliceConstraint(_impl) { /*std::cout << "BoundInterfaceConstraint()" << this << std::endl; */ }mosek::fusion::BoundInterfaceConstraint::~BoundInterfaceConstraint() {  /* std::cout << "~BoundInterfaceConstraint()" << this << std::endl << std::flush; */ }mosek::fusion::p_BoundInterfaceConstraint::p_BoundInterfaceConstraint  (::mosek::fusion::BoundInterfaceConstraint * _pubthis) :     mosek::fusion::p_SliceConstraint(_pubthis),    _pubthis(_pubthis){}mosek::fusion::BoundInterfaceConstraint::t mosek::fusion::p_BoundInterfaceConstraint::_new_BoundInterfaceConstraint  (monty::rc_ptr< ::mosek::fusion::RangedConstraint > _3376,    monty::rc_ptr< ::mosek::fusion::Set > _3377,    long long _3378,    std::shared_ptr< monty::ndarray< long long,1 > > _3379,    bool _3380){ return new mosek::fusion::BoundInterfaceConstraint(_3376,_3377,_3378,_3379,_3380); }mosek::fusion::BoundInterfaceConstraint::BoundInterfaceConstraint  (monty::rc_ptr< ::mosek::fusion::RangedConstraint > _3376,    monty::rc_ptr< ::mosek::fusion::Set > _3377,    long long _3378,    std::shared_ptr< monty::ndarray< long long,1 > > _3379,    bool _3380) :    BoundInterfaceConstraint(new mosek::fusion::p_BoundInterfaceConstraint(this)){ mosek::fusion::p_BoundInterfaceConstraint::_get_impl(this)->_initialize(_3376,_3377,_3378,_3379,_3380); }void mosek::fusion::p_BoundInterfaceConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::RangedConstraint > _3376,    monty::rc_ptr< ::mosek::fusion::Set > _3377,    long long _3378,    std::shared_ptr< monty::ndarray< long long,1 > > _3379,    bool _3380){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_SliceConstraint::_initialize(_3376,_3377,_3378,_3379);(origincon = _3376); (islower = _3380); }}monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_BoundInterfaceConstraint::slice_( monty::rc_ptr< ::mosek::fusion::Set > _3381,long long _3382,std::shared_ptr< monty::ndarray< long long,1 > > _3383){ return ::mosek::fusion::p_BoundInterfaceConstraint::_new_BoundInterfaceConstraint(origincon,_3381,_3382,_3383,islower); }void mosek::fusion::p_BoundInterfaceConstraint::dual_values( long long _3384,std::shared_ptr< monty::ndarray< int,1 > > _3385,std::shared_ptr< monty::ndarray< long long,1 > > _3386,int _3387,std::shared_ptr< monty::ndarray< double,1 > > _3388){ if (islower){ mosek::fusion::p_RangedConstraint::_get_impl(origincon.get())->dual_l(_3384,_3385,_3386,_3387,_3388); }else { mosek::fusion::p_RangedConstraint::_get_impl(origincon.get())->dual_u(_3384,_3385,_3386,_3387,_3388); }}void mosek::fusion::p_BoundInterfaceConstraint::dual_values( std::shared_ptr< monty::ndarray< long long,1 > > _3389,int _3390,std::shared_ptr< monty::ndarray< double,1 > > _3391){ if (islower){ mosek::fusion::p_RangedConstraint::_get_impl(origincon.get())->dual_l(_3389,_3390,_3391); }else { mosek::fusion::p_RangedConstraint::_get_impl(origincon.get())->dual_u(_3389,_3390,_3391); }}void mosek::fusion::p_BoundInterfaceConstraint::destroy(){origincon.reset();}void mosek::fusion::BoundInterfaceConstraint::destroy() { mosek::fusion::p_BoundInterfaceConstraint::_get_impl(this)->destroy(); }mosek::fusion::SliceConstraint::SliceConstraint(mosek::fusion::p_SliceConstraint *_impl) : mosek::fusion::Constraint(_impl) { /*std::cout << "SliceConstraint()" << this << std::endl; */ }mosek::fusion::SliceConstraint::~SliceConstraint() {  /* std::cout << "~SliceConstraint()" << this << std::endl << std::flush; */ }mosek::fusion::p_SliceConstraint::p_SliceConstraint  (::mosek::fusion::SliceConstraint * _pubthis) :     mosek::fusion::p_Constraint(_pubthis),    _pubthis(_pubthis){}mosek::fusion::SliceConstraint::t mosek::fusion::p_SliceConstraint::_new_SliceConstraint  (monty::rc_ptr< ::mosek::fusion::ModelConstraint > _3392,    monty::rc_ptr< ::mosek::fusion::Set > _3393,    long long _3394,    std::shared_ptr< monty::ndarray< long long,1 > > _3395){ return new mosek::fusion::SliceConstraint(_3392,_3393,_3394,_3395); }mosek::fusion::SliceConstraint::SliceConstraint  (monty::rc_ptr< ::mosek::fusion::ModelConstraint > _3392,    monty::rc_ptr< ::mosek::fusion::Set > _3393,    long long _3394,    std::shared_ptr< monty::ndarray< long long,1 > > _3395) :    SliceConstraint(new mosek::fusion::p_SliceConstraint(this)){ mosek::fusion::p_SliceConstraint::_get_impl(this)->_initialize(_3392,_3393,_3394,_3395); }void mosek::fusion::p_SliceConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::ModelConstraint > _3392,    monty::rc_ptr< ::mosek::fusion::Set > _3393,    long long _3394,    std::shared_ptr< monty::ndarray< long long,1 > > _3395){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_Constraint::_initialize(mosek::fusion::p_Constraint::_get_impl(_3392)->model,_3393);(origin = _3392); (first = _3394); (strides = _3395); }}void mosek::fusion::p_SliceConstraint::add_l( std::shared_ptr< monty::ndarray< long long,1 > > _3396,std::shared_ptr< monty::ndarray< long long,1 > > _3397,std::shared_ptr< monty::ndarray< int,1 > > _3398,std::shared_ptr< monty::ndarray< int,1 > > _3399,std::shared_ptr< monty::ndarray< int,1 > > _3400,std::shared_ptr< monty::ndarray< double,1 > > _3401,std::shared_ptr< monty::ndarray< double,1 > > _3402,long long _3403,int _3404,int _3405){ long long _3406 = (((*_3397)((_3404 + _3405))) - ((*_3397)(_3404))); std::shared_ptr< monty::ndarray< long long,1 > > _3407 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_3405))); std::shared_ptr< monty::ndarray< long long,1 > > _3408 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((_3405 + (int)1)))); std::shared_ptr< monty::ndarray< double,1 > > _3409 = ([&]() -> std::shared_ptr< monty::ndarray< double,1 > > { if ( ! _3402) return (nullptr); else return (std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_3405)))); })(); int _8611 = (int)0; int _8612 = (_3405 + (int)1); for (int _3410 = _8611;_3410<_8612;++_3410){ (((*_3408)(_3410)) = ((*_3397)((_3404 + _3410)))); }if ((mosek::fusion::p_Set::_get_impl(shape_p)->nd == (int)1)){ int _8613 = (int)0; int _8614 = _3405; for (int _3411 = _8613;_3411<_8614;++_3411){ (((*_3407)(_3411)) = ((((*_3396)((_3411 + _3404))) - _3403) + first)); }}else { int _8615 = (int)0; int _8616 = _3405; for (int _3412 = _8615;_3412<_8616;++_3412){ std::shared_ptr< monty::ndarray< int,1 > > _3413 = mosek::fusion::p_Set::_get_impl(shape_p.get())->idxtokey((((*_3396)((_3404 + _3412))) - _3403)); long long _3414 = (long long)0; int _8617 = (int)0; int _8618 = (int)((_3413)->size(0)); for (int _3415 = _8617;_3415<_8618;++_3415){ (_3414 = (_3414 + ((long long)((*_3413)(_3415)) * ((*strides)(_3415))))); }(((*_3407)(_3412)) = _3414); }}if (_3402){ ::mosek::fusion::Utils::Tools::arraycopy(_3402,_3404,_3409,(int)0,_3405); }else {}mosek::fusion::p_ModelConstraint::_get_impl(origin.get())->add_l(_3407,_3408,_3398,_3399,_3400,_3401,_3409,(long long)0,(int)0,_3405); }void mosek::fusion::p_SliceConstraint::add_fx( std::shared_ptr< monty::ndarray< long long,1 > > _3416,std::shared_ptr< monty::ndarray< double,1 > > _3417,long long _3418,int _3419,int _3420){ std::shared_ptr< monty::ndarray< long long,1 > > _3421 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_3420))); std::shared_ptr< monty::ndarray< double,1 > > _3422 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_3420))); ::mosek::fusion::Utils::Tools::arraycopy(_3417,_3419,_3422,(int)0,_3420); int _8619 = (int)0; int _8620 = _3420; for (int _3423 = _8619;_3423<_8620;++_3423){ std::shared_ptr< monty::ndarray< int,1 > > _3424 = mosek::fusion::p_Set::_get_impl(shape_p.get())->idxtokey(((*_3416)((_3419 + _3423)))); long long _3425 = (long long)0; int _8621 = (int)0; int _8622 = (int)((_3424)->size(0)); for (int _3426 = _8621;_3426<_8622;++_3426){ (_3425 = (_3425 + ((long long)((*_3424)(_3426)) * ((*strides)(_3426))))); }(((*_3421)(_3423)) = _3425); }mosek::fusion::p_ModelConstraint::_get_impl(origin.get())->add_fx(_3421,_3422,(long long)0,(int)0,_3420); }void mosek::fusion::p_SliceConstraint::dual_values( long long _3427,std::shared_ptr< monty::ndarray< int,1 > > _3428,std::shared_ptr< monty::ndarray< long long,1 > > _3429,int _3430,std::shared_ptr< monty::ndarray< double,1 > > _3431){ if (((_3427 == (long long)0) && (((int)((_3428)->size(0)) == (int)1) && ((((*_3428)((int)0)) == mosek::fusion::p_Set::_get_impl(shape_p)->size) && (((*_3429)((int)0)) == (int)1))))){ std::shared_ptr< monty::ndarray< int,1 > > _3432 = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _8623; for (int _3433=(int)0, _8624=mosek::fusion::p_Set::_get_impl(shape_p)->nd; _3433 < _8624;++_3433)_8623.push_back(shape_p->dim(_3433)); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8623.size()),_8623.begin(),_8623.end())); })(); mosek::fusion::p_ModelConstraint::_get_impl(origin.get())->dual_values(first,_3432,strides,_3430,_3431); }else { int _3434 = (int)((_3428)->size(0)); bool _3435 = (_3434 == mosek::fusion::p_Set::_get_impl(shape_p)->nd); { int _3436 = (int)0; for (;((_3436 < _3434) && _3435);( ++ _3436 )){ (_3435 = (((*_3429)(_3436)) == shape_p->stride(_3436))); }}if (_3435){ long long _3437 = first; { long long _3438 = _3427; int _8625 = (int)0; int _8626 = (mosek::fusion::p_Set::_get_impl(shape_p)->nd - (int)1); for (int _3439 = _8625;_3439<_8626;++_3439){ long long _3440 = (_3438 / ((*_3429)(_3439))); (_3438 = (_3438 - (((*_3429)(_3439)) * _3440))); (_3437 = (_3437 + (shape_p->stride(_3439) * _3440))); }}mosek::fusion::p_ModelConstraint::_get_impl(origin.get())->dual_values(_3437,_3428,strides,_3430,_3431); }else { long long _3441 = (long long)1; int _8627 = (int)0; int _8628 = (int)((_3428)->size(0)); for (int _3442 = _8627;_3442<_8628;++_3442){ (_3441 = (_3441 * ((*_3428)(_3442)))); }std::shared_ptr< monty::ndarray< long long,1 > > _3443 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_3441))); { std::shared_ptr< monty::ndarray< int,1 > > _3444 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)((_3428)->size(0))))); std::shared_ptr< monty::ndarray< long long,1 > > _3445 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((_3428)->size(0))))); int _8629 = (int)0; int _8630 = (int)((_3428)->size(0)); for (int _3446 = _8629;_3446<_8630;++_3446){ (((*_3445)(_3446)) = (long long)0); }long long _8631 = (long long)0; long long _8632 = _3441; for (long long _3447 = _8631;_3447<_8632;++_3447){ { long long _3448 = (_3427 + ((*_3445)((int)0))); long long _3449 = (long long)0; int _8633 = (int)0; int _8634 = mosek::fusion::p_Set::_get_impl(shape_p)->nd; for (int _3450 = _8633;_3450<_8634;++_3450){ long long _3451 = (_3448 / shape_p->stride(_3450)); (_3449 = (_3449 + (((*strides)(_3450)) * _3451))); (_3448 = (_3448 - (_3451 * shape_p->stride(_3450)))); }(((*_3443)(_3447)) = _3449); }{ int _3452 = (int)0; ( ++ ((*_3444)((int)0)) ); (((*_3445)((int)0)) = (((*_3445)((int)0)) + ((*_3429)((_3434 - (int)1))))); while (((_3452 < (_3434 - (int)1)) && (((*_3444)(_3452)) >= ((*_3428)(((_3434 - _3452) - (int)1)))))) { (((*_3445)(_3452)) = (long long)0); (((*_3445)(_3452)) = (((*_3445)(_3452)) + ((*_3429)(((_3434 - _3452) - (int)1))))); (((*_3444)(_3452)) = (int)0); ( ++ ((*_3444)((_3452 + (int)1))) ); ( ++ _3452 ); }int _8635 = (int)0; int _8636 = _3452; for (int _3453 = _8635;_3453<_8636;++_3453){ (((*_3445)(_3453)) = ((*_3445)(_3452))); }}}}mosek::fusion::p_ModelConstraint::_get_impl(origin.get())->dual_values(_3443,_3430,_3431); }}}void mosek::fusion::p_SliceConstraint::dual_values( std::shared_ptr< monty::ndarray< long long,1 > > _3454,int _3455,std::shared_ptr< monty::ndarray< double,1 > > _3456){ std::shared_ptr< monty::ndarray< long long,1 > > _3457 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((_3454)->size(0))))); int _8637 = (int)0; int _8638 = (int)((_3454)->size(0)); for (int _3458 = _8637;_3458<_8638;++_3458){ std::shared_ptr< monty::ndarray< int,1 > > _3459 = mosek::fusion::p_Set::_get_impl(shape_p.get())->idxtokey(((*_3454)(_3458))); long long _3460 = (long long)0; int _8639 = (int)0; int _8640 = mosek::fusion::p_Set::_get_impl(shape_p)->nd; for (int _3461 = _8639;_3461<_8640;++_3461){ (_3460 = (_3460 + ((long long)((*_3459)(_3461)) * ((*strides)(_3461))))); }(((*_3457)(_3458)) = _3460); }mosek::fusion::p_ModelConstraint::_get_impl(origin.get())->dual_values(_3457,_3455,_3456); }void mosek::fusion::p_SliceConstraint::level_values( long long _3462,std::shared_ptr< monty::ndarray< int,1 > > _3463,std::shared_ptr< monty::ndarray< long long,1 > > _3464,int _3465,std::shared_ptr< monty::ndarray< double,1 > > _3466){ if (((_3462 == (long long)0) && (((int)((_3463)->size(0)) == (int)1) && ((((*_3463)((int)0)) == mosek::fusion::p_Set::_get_impl(shape_p)->size) && (((*_3464)((int)0)) == (int)1))))){ std::shared_ptr< monty::ndarray< int,1 > > _3467 = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _8641; for (int _3468=(int)0, _8642=mosek::fusion::p_Set::_get_impl(shape_p)->nd; _3468 < _8642;++_3468)_8641.push_back(shape_p->dim(_3468)); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8641.size()),_8641.begin(),_8641.end())); })(); mosek::fusion::p_ModelConstraint::_get_impl(origin.get())->level_values(first,_3467,strides,_3465,_3466); }else { int _3469 = (int)((_3463)->size(0)); bool _3470 = (_3469 == mosek::fusion::p_Set::_get_impl(shape_p)->nd); { int _3471 = (int)0; for (;((_3471 < _3469) && _3470);( ++ _3471 )){ (_3470 = (((*_3464)(_3471)) == shape_p->stride(_3471))); }}if (_3470){ long long _3472 = first; { long long _3473 = _3462; int _8643 = (int)0; int _8644 = (mosek::fusion::p_Set::_get_impl(shape_p)->nd - (int)1); for (int _3474 = _8643;_3474<_8644;++_3474){ long long _3475 = (_3473 / ((*_3464)(_3474))); (_3473 = (_3473 - (((*_3464)(_3474)) * _3475))); (_3472 = (_3472 + (shape_p->stride(_3474) * _3475))); }}mosek::fusion::p_ModelConstraint::_get_impl(origin.get())->level_values(_3472,_3463,strides,_3465,_3466); }else { long long _3476 = (long long)1; int _8645 = (int)0; int _8646 = (int)((_3463)->size(0)); for (int _3477 = _8645;_3477<_8646;++_3477){ (_3476 = (_3476 * ((*_3463)(_3477)))); }std::shared_ptr< monty::ndarray< long long,1 > > _3478 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_3476))); { std::shared_ptr< monty::ndarray< int,1 > > _3479 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)((_3463)->size(0))))); std::shared_ptr< monty::ndarray< long long,1 > > _3480 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((_3463)->size(0))))); long long _8647 = (long long)0; long long _8648 = _3476; for (long long _3481 = _8647;_3481<_8648;++_3481){ { long long _3482 = (_3462 + ((*_3480)((int)0))); long long _3483 = (long long)0; int _8649 = (int)0; int _8650 = mosek::fusion::p_Set::_get_impl(shape_p)->nd; for (int _3484 = _8649;_3484<_8650;++_3484){ long long _3485 = (_3482 / shape_p->stride(_3484)); (_3483 = (_3483 + (((*strides)(_3484)) * _3485))); (_3482 = (_3482 - (_3485 * shape_p->stride(_3484)))); }(((*_3478)(_3481)) = _3483); }{ int _3486 = (int)0; ( ++ ((*_3479)((int)0)) ); (((*_3480)((int)0)) = (((*_3480)((int)0)) + ((*_3464)((_3469 - (int)1))))); while (((_3486 < (_3469 - (int)1)) && (((*_3479)(_3486)) >= ((*_3463)(((_3469 - _3486) - (int)1)))))) { (((*_3480)(_3486)) = (long long)0); (((*_3480)(_3486)) = (((*_3480)(_3486)) + ((*_3464)(((_3469 - _3486) - (int)1))))); (((*_3479)(_3486)) = (int)0); ( ++ ((*_3479)((_3486 + (int)1))) ); ( ++ _3486 ); }int _8651 = (int)0; int _8652 = _3486; for (int _3487 = _8651;_3487<_8652;++_3487){ (((*_3480)(_3487)) = ((*_3480)(_3486))); }}}}mosek::fusion::p_ModelConstraint::_get_impl(origin.get())->level_values(_3478,_3465,_3466); }}}void mosek::fusion::p_SliceConstraint::level_values( std::shared_ptr< monty::ndarray< long long,1 > > _3488,int _3489,std::shared_ptr< monty::ndarray< double,1 > > _3490){ std::shared_ptr< monty::ndarray< long long,1 > > _3491 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((_3488)->size(0))))); int _8653 = (int)0; int _8654 = (int)((_3488)->size(0)); for (int _3492 = _8653;_3492<_8654;++_3492){ std::shared_ptr< monty::ndarray< int,1 > > _3493 = mosek::fusion::p_Set::_get_impl(shape_p.get())->idxtokey(((*_3488)(_3492))); long long _3494 = (long long)0; int _8655 = (int)0; int _8656 = mosek::fusion::p_Set::_get_impl(shape_p)->nd; for (int _3495 = _8655;_3495<_8656;++_3495){ (_3494 = (_3494 + ((long long)((*_3493)(_3495)) * ((*strides)(_3495))))); }(((*_3491)(_3492)) = _3494); }mosek::fusion::p_ModelConstraint::_get_impl(origin.get())->level_values(_3491,_3489,_3490); }void mosek::fusion::p_SliceConstraint::toStringArray( std::shared_ptr< monty::ndarray< long long,1 > > _3496,long long _3497,std::shared_ptr< monty::ndarray< std::string,1 > > _3498){ std::shared_ptr< monty::ndarray< long long,1 > > _3499 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((_3496)->size(0))))); int _8657 = (int)0; int _8658 = (int)((_3496)->size(0)); for (int _3500 = _8657;_3500<_8658;++_3500){ std::shared_ptr< monty::ndarray< int,1 > > _3501 = mosek::fusion::p_Set::_get_impl(shape_p.get())->idxtokey(((*_3496)(_3500))); long long _3502 = (long long)0; int _8659 = (int)0; int _8660 = mosek::fusion::p_Set::_get_impl(shape_p)->nd; for (int _3503 = _8659;_3503<_8660;++_3503){ (_3502 = (_3502 + ((long long)((*_3501)(_3503)) * ((*strides)(_3503))))); }(((*_3499)(_3500)) = _3502); }mosek::fusion::p_ModelConstraint::_get_impl(origin.get())->toStringArray(_3499,_3497,_3498); }long long mosek::fusion::SliceConstraint::size  ( ) { return mosek::fusion::p_SliceConstraint::_get_impl(this)->size(); }long long mosek::fusion::p_SliceConstraint::size( ){ return mosek::fusion::p_Set::_get_impl(shape_p)->size; }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::SliceConstraint::slice  ( std::shared_ptr< monty::ndarray< int,1 > > _3504,    std::shared_ptr< monty::ndarray< int,1 > > _3505) { return mosek::fusion::p_SliceConstraint::_get_impl(this)->slice(_3504,_3505); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_SliceConstraint::slice( std::shared_ptr< monty::ndarray< int,1 > > _3504,std::shared_ptr< monty::ndarray< int,1 > > _3505){ monty::rc_ptr< ::mosek::fusion::Set > _3506 = shape_p->slice(_3504,_3505); long long _3507 = first; { int _3508 = (int)0; for (;(_3508 < (int)((_3504)->size(0)));( ++ _3508 )){ (_3507 = (_3507 + ((long long)((*_3504)(_3508)) * ((*strides)(_3508))))); }}return slice_(_3506,_3507,strides); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::SliceConstraint::slice  ( int _3509,    int _3510) { return mosek::fusion::p_SliceConstraint::_get_impl(this)->slice(_3509,_3510); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_SliceConstraint::slice( int _3509,int _3510){ monty::rc_ptr< ::mosek::fusion::Set > _3511 = shape_p->slice(_3509,_3510); return slice_(_3511,(long long)((_3509 + _3509)),strides); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_SliceConstraint::slice_( monty::rc_ptr< ::mosek::fusion::Set > _3512,long long _3513,std::shared_ptr< monty::ndarray< long long,1 > > _3514){ return ::mosek::fusion::p_SliceConstraint::_new_SliceConstraint(origin,_3512,_3513,_3514); }void mosek::fusion::p_SliceConstraint::destroy(){strides.reset();origin.reset();}void mosek::fusion::SliceConstraint::destroy() { mosek::fusion::p_SliceConstraint::_get_impl(this)->destroy(); }mosek::fusion::RangedConstraint::RangedConstraint(mosek::fusion::p_RangedConstraint *_impl) : mosek::fusion::ModelConstraint(_impl) { /*std::cout << "RangedConstraint()" << this << std::endl; */ }mosek::fusion::RangedConstraint::~RangedConstraint() {  /* std::cout << "~RangedConstraint()" << this << std::endl << std::flush; */ }mosek::fusion::p_RangedConstraint::p_RangedConstraint  (::mosek::fusion::RangedConstraint * _pubthis) :     mosek::fusion::p_ModelConstraint(_pubthis),    _pubthis(_pubthis){}mosek::fusion::RangedConstraint::t mosek::fusion::p_RangedConstraint::_new_RangedConstraint  (monty::rc_ptr< ::mosek::fusion::RangedConstraint > _3515,    monty::rc_ptr< ::mosek::fusion::Model > _3516){ return new mosek::fusion::RangedConstraint(_3515,_3516); }mosek::fusion::RangedConstraint::RangedConstraint  (monty::rc_ptr< ::mosek::fusion::RangedConstraint > _3515,    monty::rc_ptr< ::mosek::fusion::Model > _3516) :    RangedConstraint(new mosek::fusion::p_RangedConstraint(this)){ mosek::fusion::p_RangedConstraint::_get_impl(this)->_initialize(_3515,_3516); }void mosek::fusion::p_RangedConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::RangedConstraint > _3515,    monty::rc_ptr< ::mosek::fusion::Model > _3516){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_ModelConstraint::_initialize(_3515,_3516);(dom = mosek::fusion::p_RangedConstraint::_get_impl(_3515)->dom); (idxmap = nullptr); }}mosek::fusion::RangedConstraint::t mosek::fusion::p_RangedConstraint::_new_RangedConstraint  (monty::rc_ptr< ::mosek::fusion::Model > _3517,    const std::string &  _3518,    monty::rc_ptr< ::mosek::fusion::Set > _3519,    monty::rc_ptr< ::mosek::fusion::RangeDomain > _3520,    std::shared_ptr< monty::ndarray< int,1 > > _3521,    std::shared_ptr< monty::ndarray< long long,1 > > _3522,    std::shared_ptr< monty::ndarray< int,1 > > _3523,    std::shared_ptr< monty::ndarray< double,1 > > _3524,    std::shared_ptr< monty::ndarray< double,1 > > _3525,    std::shared_ptr< monty::ndarray< int,1 > > _3526,    std::shared_ptr< monty::ndarray< int,1 > > _3527,    std::shared_ptr< monty::ndarray< int,1 > > _3528){ return new mosek::fusion::RangedConstraint(_3517,_3518,_3519,_3520,_3521,_3522,_3523,_3524,_3525,_3526,_3527,_3528); }mosek::fusion::RangedConstraint::RangedConstraint  (monty::rc_ptr< ::mosek::fusion::Model > _3517,    const std::string &  _3518,    monty::rc_ptr< ::mosek::fusion::Set > _3519,    monty::rc_ptr< ::mosek::fusion::RangeDomain > _3520,    std::shared_ptr< monty::ndarray< int,1 > > _3521,    std::shared_ptr< monty::ndarray< long long,1 > > _3522,    std::shared_ptr< monty::ndarray< int,1 > > _3523,    std::shared_ptr< monty::ndarray< double,1 > > _3524,    std::shared_ptr< monty::ndarray< double,1 > > _3525,    std::shared_ptr< monty::ndarray< int,1 > > _3526,    std::shared_ptr< monty::ndarray< int,1 > > _3527,    std::shared_ptr< monty::ndarray< int,1 > > _3528) :    RangedConstraint(new mosek::fusion::p_RangedConstraint(this)){ mosek::fusion::p_RangedConstraint::_get_impl(this)->_initialize(_3517,_3518,_3519,_3520,_3521,_3522,_3523,_3524,_3525,_3526,_3527,_3528); }void mosek::fusion::p_RangedConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _3517,    const std::string &  _3518,    monty::rc_ptr< ::mosek::fusion::Set > _3519,    monty::rc_ptr< ::mosek::fusion::RangeDomain > _3520,    std::shared_ptr< monty::ndarray< int,1 > > _3521,    std::shared_ptr< monty::ndarray< long long,1 > > _3522,    std::shared_ptr< monty::ndarray< int,1 > > _3523,    std::shared_ptr< monty::ndarray< double,1 > > _3524,    std::shared_ptr< monty::ndarray< double,1 > > _3525,    std::shared_ptr< monty::ndarray< int,1 > > _3526,    std::shared_ptr< monty::ndarray< int,1 > > _3527,    std::shared_ptr< monty::ndarray< int,1 > > _3528){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_ModelConstraint::_initialize(_3517,_3518,_3519,_3521,_3522,_3523,_3524,_3525,_3526,_3527,_3528);(dom = _3520); (idxmap = nullptr); }}void mosek::fusion::p_RangedConstraint::add_fx( std::shared_ptr< monty::ndarray< long long,1 > > _3529,std::shared_ptr< monty::ndarray< double,1 > > _3530,long long _3531,int _3532,int _3533){ std::shared_ptr< monty::ndarray< double,1 > > _3534 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_3533))); std::shared_ptr< monty::ndarray< double,1 > > _3535 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_3533))); std::shared_ptr< monty::ndarray< int,1 > > _3536 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_3533))); int _8661 = (int)0; int _8662 = _3533; for (int _3537 = _8661;_3537<_8662;++_3537){ (((*_3536)(_3537)) = ((*nativeindexes)((((*_3529)((_3532 + _3537))) - _3531)))); }int _8663 = (int)0; int _8664 = (int)((_3534)->size(0)); for (int _3538 = _8663;_3538<_8664;++_3538){ (((*_3534)(_3538)) = (mosek::fusion::p_RangeDomain::_get_impl(dom.get())->get_lb_item((((*_3529)((_3532 + _3538))) - _3531)) - ((*_3530)((((*_3529)((_3532 + _3538))) - _3531))))); (((*_3535)(_3538)) = (mosek::fusion::p_RangeDomain::_get_impl(dom.get())->get_ub_item((((*_3529)((_3532 + _3538))) - _3531)) - ((*_3530)((((*_3529)((_3532 + _3538))) - _3531))))); }mosek::fusion::p_Model::_get_impl(model.get())->task_con_putboundlist_ra(_3536,_3534,_3535); }void mosek::fusion::p_RangedConstraint::dual_u( long long _3539,std::shared_ptr< monty::ndarray< int,1 > > _3540,std::shared_ptr< monty::ndarray< long long,1 > > _3541,int _3542,std::shared_ptr< monty::ndarray< double,1 > > _3543){ long long _3544 = (long long)1; int _3545 = (int)((_3541)->size(0)); monty::rc_ptr< ::mosek::fusion::IndexCounter > _3546 = ::mosek::fusion::p_IndexCounter::_new_IndexCounter(_3539,_3540,_3541); std::shared_ptr< monty::ndarray< double,1 > > _3547 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_suc(::mosek::fusion::SolutionType::Default); int _8665 = (int)0; int _8666 = _3545; for (int _3548 = _8665;_3548<_8666;++_3548){ (_3544 = (_3544 * ((*_3540)(_3548)))); }if (nativeindexes){ long long _8667 = (long long)0; long long _8668 = _3544; for (long long _3549 = _8667;_3549<_8668;++_3549){ (((*_3543)((_3549 + _3542))) = (((*_3547)(((*nativeindexes)(_3546->get())))) + ((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->bfix)(_3546->get())))); _3546->inc(); }}else { long long _8669 = (long long)0; long long _8670 = _3544; for (long long _3550 = _8669;_3550<_8670;++_3550){ if (mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->hasItem(_3546->get())){ (((*_3543)(_3550)) = (((*_3547)(mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->getItem(_3546->get()))) + ((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->bfix)(_3546->get())))); }else { (((*_3543)(_3550)) = mosek::fusion::p_RangeDomain::_get_impl(dom.get())->get_ub_item(_3546->get())); }_3546->inc(); }}}void mosek::fusion::p_RangedConstraint::dual_u( std::shared_ptr< monty::ndarray< long long,1 > > _3551,int _3552,std::shared_ptr< monty::ndarray< double,1 > > _3553){ std::shared_ptr< monty::ndarray< double,1 > > _3554 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_suc(::mosek::fusion::SolutionType::Default); if (nativeindexes){ int _8671 = (int)0; int _8672 = (int)((_3551)->size(0)); for (int _3555 = _8671;_3555<_8672;++_3555){ (((*_3553)((_3552 + _3555))) = (((*_3554)(((*nativeindexes)(((*_3551)(_3555)))))) + ((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->bfix)(((*_3551)(_3555)))))); }}else { int _8673 = (int)0; int _8674 = (int)((_3551)->size(0)); for (int _3556 = _8673;_3556<_8674;++_3556){ if (mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->hasItem(((*_3551)(_3556)))){ (((*_3553)((_3552 + _3556))) = (((*_3554)(mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->getItem(((*_3551)(_3556))))) + ((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->bfix)(((*_3551)(_3556)))))); }else { (((*_3553)((_3552 + _3556))) = mosek::fusion::p_RangeDomain::_get_impl(dom.get())->get_ub_item(((*_3551)(_3556)))); }}}}void mosek::fusion::p_RangedConstraint::dual_l( long long _3557,std::shared_ptr< monty::ndarray< int,1 > > _3558,std::shared_ptr< monty::ndarray< long long,1 > > _3559,int _3560,std::shared_ptr< monty::ndarray< double,1 > > _3561){ long long _3562 = (long long)1; int _3563 = (int)((_3559)->size(0)); monty::rc_ptr< ::mosek::fusion::IndexCounter > _3564 = ::mosek::fusion::p_IndexCounter::_new_IndexCounter(_3557,_3558,_3559); std::shared_ptr< monty::ndarray< double,1 > > _3565 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_slc(::mosek::fusion::SolutionType::Default); int _8675 = (int)0; int _8676 = _3563; for (int _3566 = _8675;_3566<_8676;++_3566){ (_3562 = (_3562 * ((*_3558)(_3566)))); }if (nativeindexes){ long long _8677 = (long long)0; long long _8678 = _3562; for (long long _3567 = _8677;_3567<_8678;++_3567){ (((*_3561)((_3567 + _3560))) = (((*_3565)(((*nativeindexes)(_3564->get())))) + ((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->bfix)(_3564->get())))); _3564->inc(); }}else { long long _8679 = (long long)0; long long _8680 = _3562; for (long long _3568 = _8679;_3568<_8680;++_3568){ if (mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->hasItem(_3564->get())){ (((*_3561)(_3568)) = (((*_3565)(mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->getItem(_3564->get()))) + ((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->bfix)(_3564->get())))); }else { (((*_3561)(_3568)) = mosek::fusion::p_RangeDomain::_get_impl(dom.get())->get_ub_item(_3564->get())); }_3564->inc(); }}}void mosek::fusion::p_RangedConstraint::dual_l( std::shared_ptr< monty::ndarray< long long,1 > > _3569,int _3570,std::shared_ptr< monty::ndarray< double,1 > > _3571){ std::shared_ptr< monty::ndarray< double,1 > > _3572 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_slc(::mosek::fusion::SolutionType::Default); if (nativeindexes){ int _8681 = (int)0; int _8682 = (int)((_3569)->size(0)); for (int _3573 = _8681;_3573<_8682;++_3573){ (((*_3571)((_3570 + _3573))) = (((*_3572)(((*nativeindexes)(((*_3569)(_3573)))))) + ((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->bfix)(((*_3569)(_3573)))))); }}else { int _8683 = (int)0; int _8684 = (int)((_3569)->size(0)); for (int _3574 = _8683;_3574<_8684;++_3574){ if (mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->hasItem(((*_3569)(_3574)))){ (((*_3571)((_3570 + _3574))) = (((*_3572)(mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->getItem(((*_3569)(_3574))))) + ((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->bfix)(((*_3569)(_3574)))))); }else { (((*_3571)((_3570 + _3574))) = mosek::fusion::p_RangeDomain::_get_impl(dom.get())->get_ub_item(((*_3569)(_3574)))); }}}}void mosek::fusion::p_RangedConstraint::dual_values( long long _3575,std::shared_ptr< monty::ndarray< int,1 > > _3576,std::shared_ptr< monty::ndarray< long long,1 > > _3577,int _3578,std::shared_ptr< monty::ndarray< double,1 > > _3579){ long long _3580 = (long long)1; int _3581 = (int)((_3577)->size(0)); monty::rc_ptr< ::mosek::fusion::IndexCounter > _3582 = ::mosek::fusion::p_IndexCounter::_new_IndexCounter(_3575,_3576,_3577); std::shared_ptr< monty::ndarray< double,1 > > _3583 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_y(::mosek::fusion::SolutionType::Default); int _8685 = (int)0; int _8686 = _3581; for (int _3584 = _8685;_3584<_8686;++_3584){ (_3580 = (_3580 * ((*_3576)(_3584)))); }if (nativeindexes){ long long _8687 = (long long)0; long long _8688 = _3580; for (long long _3585 = _8687;_3585<_8688;++_3585){ (((*_3579)((_3585 + _3578))) = (((*_3583)(((*nativeindexes)(_3582->get())))) + ((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->bfix)(_3582->get())))); _3582->inc(); }}else { long long _8689 = (long long)0; long long _8690 = _3580; for (long long _3586 = _8689;_3586<_8690;++_3586){ if (mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->hasItem(_3582->get())){ (((*_3579)(_3586)) = (((*_3583)(mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->getItem(_3582->get()))) + ((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->bfix)(_3582->get())))); }else { (((*_3579)(_3586)) = mosek::fusion::p_RangeDomain::_get_impl(dom.get())->get_ub_item(_3582->get())); }_3582->inc(); }}}void mosek::fusion::p_RangedConstraint::dual_values( std::shared_ptr< monty::ndarray< long long,1 > > _3587,int _3588,std::shared_ptr< monty::ndarray< double,1 > > _3589){ std::shared_ptr< monty::ndarray< double,1 > > _3590 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_y(::mosek::fusion::SolutionType::Default); if (nativeindexes){ int _8691 = (int)0; int _8692 = (int)((_3587)->size(0)); for (int _3591 = _8691;_3591<_8692;++_3591){ (((*_3589)((_3588 + _3591))) = (((*_3590)(((*nativeindexes)(((*_3587)(_3591)))))) + ((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->bfix)(((*_3587)(_3591)))))); }}else { int _8693 = (int)0; int _8694 = (int)((_3587)->size(0)); for (int _3592 = _8693;_3592<_8694;++_3592){ if (mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->hasItem(((*_3587)(_3592)))){ (((*_3589)((_3588 + _3592))) = (((*_3590)(mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->getItem(((*_3587)(_3592))))) + ((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->bfix)(((*_3587)(_3592)))))); }else { (((*_3589)((_3588 + _3592))) = mosek::fusion::p_RangeDomain::_get_impl(dom.get())->get_ub_item(((*_3587)(_3592)))); }}}}void mosek::fusion::p_RangedConstraint::level_values( long long _3593,std::shared_ptr< monty::ndarray< int,1 > > _3594,std::shared_ptr< monty::ndarray< long long,1 > > _3595,int _3596,std::shared_ptr< monty::ndarray< double,1 > > _3597){ long long _3598 = (long long)1; int _3599 = (int)((_3595)->size(0)); monty::rc_ptr< ::mosek::fusion::IndexCounter > _3600 = ::mosek::fusion::p_IndexCounter::_new_IndexCounter(_3593,_3594,_3595); std::shared_ptr< monty::ndarray< double,1 > > _3601 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_xc(::mosek::fusion::SolutionType::Default); int _8695 = (int)0; int _8696 = _3599; for (int _3602 = _8695;_3602<_8696;++_3602){ (_3598 = (_3598 * ((*_3594)(_3602)))); }if (nativeindexes){ long long _8697 = (long long)0; long long _8698 = _3598; for (long long _3603 = _8697;_3603<_8698;++_3603){ (((*_3597)((_3603 + _3596))) = (((*_3601)(((*nativeindexes)(_3600->get())))) + ((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->bfix)(_3600->get())))); _3600->inc(); }}else { long long _8699 = (long long)0; long long _8700 = _3598; for (long long _3604 = _8699;_3604<_8700;++_3604){ if (mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->hasItem(_3600->get())){ (((*_3597)(_3604)) = (((*_3601)(mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->getItem(_3600->get()))) + ((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->bfix)(_3600->get())))); }else { (((*_3597)(_3604)) = mosek::fusion::p_RangeDomain::_get_impl(dom.get())->get_ub_item(_3600->get())); }_3600->inc(); }}}void mosek::fusion::p_RangedConstraint::level_values( std::shared_ptr< monty::ndarray< long long,1 > > _3605,int _3606,std::shared_ptr< monty::ndarray< double,1 > > _3607){ std::shared_ptr< monty::ndarray< double,1 > > _3608 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_xc(::mosek::fusion::SolutionType::Default); if (nativeindexes){ int _8701 = (int)0; int _8702 = (int)((_3605)->size(0)); for (int _3609 = _8701;_3609<_8702;++_3609){ (((*_3607)((_3606 + _3609))) = (((*_3608)(((*nativeindexes)(((*_3605)(_3609)))))) + ((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->bfix)(((*_3605)(_3609)))))); }}else { int _8703 = (int)0; int _8704 = (int)((_3605)->size(0)); for (int _3610 = _8703;_3610<_8704;++_3610){ if (mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->hasItem(((*_3605)(_3610)))){ (((*_3607)((_3606 + _3610))) = (((*_3608)(mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->getItem(((*_3605)(_3610))))) + ((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->bfix)(((*_3605)(_3610)))))); }else { (((*_3607)((_3606 + _3610))) = mosek::fusion::p_RangeDomain::_get_impl(dom.get())->get_ub_item(((*_3605)(_3610)))); }}}}void mosek::fusion::p_RangedConstraint::add_l( std::shared_ptr< monty::ndarray< long long,1 > > _3611,std::shared_ptr< monty::ndarray< long long,1 > > _3612,std::shared_ptr< monty::ndarray< int,1 > > _3613,std::shared_ptr< monty::ndarray< int,1 > > _3614,std::shared_ptr< monty::ndarray< int,1 > > _3615,std::shared_ptr< monty::ndarray< double,1 > > _3616,std::shared_ptr< monty::ndarray< double,1 > > _3617,int _3618,int _3619,int _3620){ add_l(_3611,_3612,_3613,_3614,_3615,_3616,_3617,_3618,_3619,_3620); if (_3617){ long long _3621 = mosek::fusion::p_Set::_get_impl(mosek::fusion::p_RangeDomain::_get_impl(dom)->shape)->size; std::shared_ptr< monty::ndarray< double,1 > > _3622 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_3621))); std::shared_ptr< monty::ndarray< double,1 > > _3623 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_3621))); std::shared_ptr< monty::ndarray< int,1 > > _3624 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_3620))); int _8705 = (int)0; int _8706 = _3620; for (int _3625 = _8705;_3625<_8706;++_3625){ (((*_3622)(_3625)) = (mosek::fusion::p_RangeDomain::_get_impl(dom.get())->get_lb_item(((*_3611)(_3625))) - ((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->bfix)(_3625)))); (((*_3623)(_3625)) = (mosek::fusion::p_RangeDomain::_get_impl(dom.get())->get_ub_item(((*_3611)(_3625))) - ((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->bfix)(_3625)))); (((*_3624)(_3625)) = ((*nativeindexes)(((*_3611)(_3625))))); }mosek::fusion::p_Model::_get_impl(model.get())->task_con_putboundlist_ra(_3624,_3622,_3623); }else {}}void mosek::fusion::p_RangedConstraint::domainToString( long long _3626,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _3627){ mosek::fusion::p_RangeDomain::_get_impl(dom.get())->domainToString(_3626,_3627); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::RangedConstraint::upperBoundCon  ( ) { return mosek::fusion::p_RangedConstraint::_get_impl(this)->upperBoundCon(); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_RangedConstraint::upperBoundCon( ){ std::shared_ptr< monty::ndarray< long long,1 > > _3628 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(mosek::fusion::p_Set::_get_impl(shape_p)->nd))); (((*_3628)((mosek::fusion::p_Set::_get_impl(shape_p)->nd - (int)1))) = (long long)1); { int _3629 = (mosek::fusion::p_Set::_get_impl(shape_p)->nd - (int)1); for (;(_3629 > (int)0);( -- _3629 )){ (((*_3628)((_3629 - (int)1))) = (((*_3628)(_3629)) * shape_p->dim(_3629))); }}return ::mosek::fusion::p_BoundInterfaceConstraint::_new_BoundInterfaceConstraint(_pubthis,shape_p,(long long)0,_3628,false); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::RangedConstraint::lowerBoundCon  ( ) { return mosek::fusion::p_RangedConstraint::_get_impl(this)->lowerBoundCon(); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_RangedConstraint::lowerBoundCon( ){ std::shared_ptr< monty::ndarray< long long,1 > > _3630 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(mosek::fusion::p_Set::_get_impl(shape_p)->nd))); (((*_3630)((mosek::fusion::p_Set::_get_impl(shape_p)->nd - (int)1))) = (long long)1); { int _3631 = (mosek::fusion::p_Set::_get_impl(shape_p)->nd - (int)1); for (;(_3631 > (int)0);( -- _3631 )){ (((*_3630)((_3631 - (int)1))) = (((*_3630)(_3631)) * shape_p->dim(_3631))); }}return ::mosek::fusion::p_BoundInterfaceConstraint::_new_BoundInterfaceConstraint(_pubthis,shape_p,(long long)0,_3630,true); }monty::rc_ptr< ::mosek::fusion::ModelConstraint > mosek::fusion::p_RangedConstraint::clone( monty::rc_ptr< ::mosek::fusion::Model > _3632){ return ::mosek::fusion::p_RangedConstraint::_new_RangedConstraint(_pubthis,_3632); }void mosek::fusion::p_RangedConstraint::destroy(){idxmap.reset();dom.reset();}void mosek::fusion::RangedConstraint::destroy() { mosek::fusion::p_RangedConstraint::_get_impl(this)->destroy(); }mosek::fusion::ConicConstraint::ConicConstraint(mosek::fusion::p_ConicConstraint *_impl) : mosek::fusion::ModelConstraint(_impl) { /*std::cout << "ConicConstraint()" << this << std::endl; */ }mosek::fusion::ConicConstraint::~ConicConstraint() {  /* std::cout << "~ConicConstraint()" << this << std::endl << std::flush; */ }mosek::fusion::p_ConicConstraint::p_ConicConstraint  (::mosek::fusion::ConicConstraint * _pubthis) :     mosek::fusion::p_ModelConstraint(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ConicConstraint::t mosek::fusion::p_ConicConstraint::_new_ConicConstraint  (monty::rc_ptr< ::mosek::fusion::ConicConstraint > _3633,    monty::rc_ptr< ::mosek::fusion::Model > _3634){ return new mosek::fusion::ConicConstraint(_3633,_3634); }mosek::fusion::ConicConstraint::ConicConstraint  (monty::rc_ptr< ::mosek::fusion::ConicConstraint > _3633,    monty::rc_ptr< ::mosek::fusion::Model > _3634) :    ConicConstraint(new mosek::fusion::p_ConicConstraint(this)){ mosek::fusion::p_ConicConstraint::_get_impl(this)->_initialize(_3633,_3634); }void mosek::fusion::p_ConicConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::ConicConstraint > _3633,    monty::rc_ptr< ::mosek::fusion::Model > _3634){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_ModelConstraint::_initialize(_3633,_3634);(first_slack = mosek::fusion::p_ConicConstraint::_get_impl(_3633)->first_slack); (last_slack = mosek::fusion::p_ConicConstraint::_get_impl(_3633)->last_slack); (first = mosek::fusion::p_ConicConstraint::_get_impl(_3633)->first); (last = mosek::fusion::p_ConicConstraint::_get_impl(_3633)->last); (dom = mosek::fusion::p_ConicConstraint::_get_impl(_3633)->dom); (conesize = mosek::fusion::p_ConicConstraint::_get_impl(_3633)->conesize); (coneidx = mosek::fusion::p_ConicConstraint::_get_impl(_3633)->coneidx); (names_flushed = mosek::fusion::p_ConicConstraint::_get_impl(_3633)->names_flushed); }}mosek::fusion::ConicConstraint::t mosek::fusion::p_ConicConstraint::_new_ConicConstraint  (monty::rc_ptr< ::mosek::fusion::Model > _3635,    const std::string &  _3636,    monty::rc_ptr< ::mosek::fusion::QConeDomain > _3637,    monty::rc_ptr< ::mosek::fusion::Set > _3638,    std::shared_ptr< monty::ndarray< int,1 > > _3639,    int _3640,    int _3641,    int _3642,    int _3643,    int _3644,    std::shared_ptr< monty::ndarray< long long,1 > > _3645,    std::shared_ptr< monty::ndarray< int,1 > > _3646,    std::shared_ptr< monty::ndarray< double,1 > > _3647,    std::shared_ptr< monty::ndarray< double,1 > > _3648,    std::shared_ptr< monty::ndarray< int,1 > > _3649,    std::shared_ptr< monty::ndarray< int,1 > > _3650,    std::shared_ptr< monty::ndarray< int,1 > > _3651){ return new mosek::fusion::ConicConstraint(_3635,_3636,_3637,_3638,_3639,_3640,_3641,_3642,_3643,_3644,_3645,_3646,_3647,_3648,_3649,_3650,_3651); }mosek::fusion::ConicConstraint::ConicConstraint  (monty::rc_ptr< ::mosek::fusion::Model > _3635,    const std::string &  _3636,    monty::rc_ptr< ::mosek::fusion::QConeDomain > _3637,    monty::rc_ptr< ::mosek::fusion::Set > _3638,    std::shared_ptr< monty::ndarray< int,1 > > _3639,    int _3640,    int _3641,    int _3642,    int _3643,    int _3644,    std::shared_ptr< monty::ndarray< long long,1 > > _3645,    std::shared_ptr< monty::ndarray< int,1 > > _3646,    std::shared_ptr< monty::ndarray< double,1 > > _3647,    std::shared_ptr< monty::ndarray< double,1 > > _3648,    std::shared_ptr< monty::ndarray< int,1 > > _3649,    std::shared_ptr< monty::ndarray< int,1 > > _3650,    std::shared_ptr< monty::ndarray< int,1 > > _3651) :    ConicConstraint(new mosek::fusion::p_ConicConstraint(this)){ mosek::fusion::p_ConicConstraint::_get_impl(this)->_initialize(_3635,_3636,_3637,_3638,_3639,_3640,_3641,_3642,_3643,_3644,_3645,_3646,_3647,_3648,_3649,_3650,_3651); }void mosek::fusion::p_ConicConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _3635,    const std::string &  _3636,    monty::rc_ptr< ::mosek::fusion::QConeDomain > _3637,    monty::rc_ptr< ::mosek::fusion::Set > _3638,    std::shared_ptr< monty::ndarray< int,1 > > _3639,    int _3640,    int _3641,    int _3642,    int _3643,    int _3644,    std::shared_ptr< monty::ndarray< long long,1 > > _3645,    std::shared_ptr< monty::ndarray< int,1 > > _3646,    std::shared_ptr< monty::ndarray< double,1 > > _3647,    std::shared_ptr< monty::ndarray< double,1 > > _3648,    std::shared_ptr< monty::ndarray< int,1 > > _3649,    std::shared_ptr< monty::ndarray< int,1 > > _3650,    std::shared_ptr< monty::ndarray< int,1 > > _3651){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_ModelConstraint::_initialize(_3635,_3636,_3638,_3639,_3645,_3646,_3647,_3648,_3649,_3650,_3651);(first_slack = _3640); (last_slack = _3641); (first = _3643); (last = (_3643 + _3644)); (dom = _3637); (conesize = _3642); (coneidx = _3643); (names_flushed = false); }}void mosek::fusion::p_ConicConstraint::flushNames( ){ ::mosek::fusion::p_ModelConstraint::flushNames(); if (((! names_flushed) && ((int)((name).size()) > (int)0))){ int _8707 = first_slack; int _8708 = last_slack; for (int _3652 = _8707;_3652<_8708;++_3652){ mosek::fusion::p_Model::_get_impl(model.get())->task_var_name(_3652,([&]() -> std::string { if ( ((int)((name).size()) == (int)0)) return (std::string ("")); else return (mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer().get())->a(name).get())->a(std::string ("[")).get())->a(shape_p->getname((long long)((_3652 - first_slack)))).get())->a(std::string ("].coneslack")).get())->toString()); })()); }int _8709 = first; int _8710 = last; for (int _3653 = _8709;_3653<_8710;++_3653){ mosek::fusion::p_Model::_get_impl(model.get())->task_cone_name(_3653,([&]() -> std::string { if ( ((int)((name).size()) == (int)0)) return (std::string ("")); else return (mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer().get())->a(name).get())->a(std::string ("[")).get())->a((_3653 - first)).get())->a(std::string ("]")).get())->toString()); })()); }(names_flushed = true); }else {}}std::string mosek::fusion::ConicConstraint::toString  ( ) { return mosek::fusion::p_ConicConstraint::_get_impl(this)->toString(); }std::string mosek::fusion::p_ConicConstraint::toString( ){ long long _3654 = mosek::fusion::p_Set::_get_impl(shape_p)->size; std::shared_ptr< monty::ndarray< std::string,1 > > _3655 = std::shared_ptr< monty::ndarray< std::string,1 > >(new monty::ndarray< std::string,1 >(monty::shape(_3654))); toStringArray(::mosek::fusion::Utils::Tools::range(_3654),(long long)0,_3655); monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _3656 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer(); mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_3656.get())->a(std::string ("ConicConstraint( (")).get())->a(shape_p->dim((int)0)); int _8711 = (int)1; int _8712 = mosek::fusion::p_Set::_get_impl(shape_p)->nd; for (int _3657 = _8711;_3657<_8712;++_3657){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_3656.get())->a(std::string (",")).get())->a(shape_p->dim(_3657)); }mosek::fusion::Utils::p_StringBuffer::_get_impl(_3656.get())->a(std::string ("),")); if ((mosek::fusion::p_QConeDomain::_get_impl(dom)->key == ::mosek::fusion::QConeKey::InQCone)){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_3656.get())->a(std::string (" QuadCone,")).get())->lf(); }else { mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_3656.get())->a(std::string (" RotatedQuadCone,")).get())->lf(); }mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_3656.get())->a(std::string ("  ")).get())->a(((*_3655)((int)0))); int _8713 = (int)1; int _8714 = (int)((_3655)->size(0)); for (int _3658 = _8713;_3658<_8714;++_3658){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_3656.get())->a(std::string (",")).get())->lf().get())->a(std::string ("  ")).get())->a(((*_3655)(_3658))); }mosek::fusion::Utils::p_StringBuffer::_get_impl(_3656.get())->a(std::string (" )")); return mosek::fusion::Utils::p_StringBuffer::_get_impl(_3656.get())->toString(); }void mosek::fusion::p_ConicConstraint::dual_values( long long _3659,std::shared_ptr< monty::ndarray< int,1 > > _3660,std::shared_ptr< monty::ndarray< long long,1 > > _3661,int _3662,std::shared_ptr< monty::ndarray< double,1 > > _3663){ long long _3664 = (long long)1; int _3665 = (int)((_3661)->size(0)); monty::rc_ptr< ::mosek::fusion::IndexCounter > _3666 = ::mosek::fusion::p_IndexCounter::_new_IndexCounter(_3659,_3660,_3661); std::shared_ptr< monty::ndarray< double,1 > > _3667 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_snx(::mosek::fusion::SolutionType::Default); int _8715 = (int)0; int _8716 = _3665; for (int _3668 = _8715;_3668<_8716;++_3668){ (_3664 = (_3664 * ((*_3660)(_3668)))); }long long _8717 = (long long)0; long long _8718 = _3664; for (long long _3669 = _8717;_3669<_8718;++_3669){ (((*_3663)((_3669 + _3662))) = ((*_3667)(((long long)first_slack + _3666->get())))); _3666->inc(); }}void mosek::fusion::p_ConicConstraint::dual_values( std::shared_ptr< monty::ndarray< long long,1 > > _3670,int _3671,std::shared_ptr< monty::ndarray< double,1 > > _3672){ std::shared_ptr< monty::ndarray< double,1 > > _3673 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_snx(::mosek::fusion::SolutionType::Default); int _8719 = (int)0; int _8720 = (int)((_3670)->size(0)); for (int _3674 = _8719;_3674<_8720;++_3674){ (((*_3672)((_3671 + _3674))) = ((*_3673)(((long long)first_slack + ((*_3670)(_3674)))))); }}void mosek::fusion::p_ConicConstraint::level_values( long long _3675,std::shared_ptr< monty::ndarray< int,1 > > _3676,std::shared_ptr< monty::ndarray< long long,1 > > _3677,int _3678,std::shared_ptr< monty::ndarray< double,1 > > _3679){ long long _3680 = (long long)1; int _3681 = (int)((_3677)->size(0)); monty::rc_ptr< ::mosek::fusion::IndexCounter > _3682 = ::mosek::fusion::p_IndexCounter::_new_IndexCounter(_3675,_3676,_3677); std::shared_ptr< monty::ndarray< double,1 > > _3683 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_xx(::mosek::fusion::SolutionType::Default); std::shared_ptr< monty::ndarray< double,1 > > _3684 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_xc(::mosek::fusion::SolutionType::Default); int _8721 = (int)0; int _8722 = _3681; for (int _3685 = _8721;_3685<_8722;++_3685){ (_3680 = (_3680 * ((*_3676)(_3685)))); }long long _8723 = (long long)0; long long _8724 = _3680; for (long long _3686 = _8723;_3686<_8724;++_3686){ (((*_3679)((_3686 + _3678))) = (((*_3683)((first_slack + _3682->get()))) + ((*_3684)(((*nativeindexes)(_3682->get())))))); _3682->inc(); }}void mosek::fusion::p_ConicConstraint::level_values( std::shared_ptr< monty::ndarray< long long,1 > > _3687,int _3688,std::shared_ptr< monty::ndarray< double,1 > > _3689){ std::shared_ptr< monty::ndarray< double,1 > > _3690 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_xx(::mosek::fusion::SolutionType::Default); std::shared_ptr< monty::ndarray< double,1 > > _3691 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_xc(::mosek::fusion::SolutionType::Default); int _8725 = (int)0; int _8726 = (int)((_3687)->size(0)); for (int _3692 = _8725;_3692<_8726;++_3692){ (((*_3689)((_3688 + _3692))) = (((*_3691)(((*nativeindexes)(((*_3687)(_3692)))))) + ((*_3690)((first_slack + ((*_3687)(_3692))))))); }}void mosek::fusion::p_ConicConstraint::add_fx( std::shared_ptr< monty::ndarray< long long,1 > > _3693,std::shared_ptr< monty::ndarray< double,1 > > _3694,long long _3695,int _3696,int _3697){ std::shared_ptr< monty::ndarray< double,1 > > _3698 = ([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _8727; for (int _3699=(int)0, _8728=_3697; _3699 < _8728;++_3699)_8727.push_back((- ((*_3694)((((*_3693)((_3696 + _3699))) - _3695))))); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8727.size()),_8727.begin(),_8727.end())); })(); std::shared_ptr< monty::ndarray< int,1 > > _3700 = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _8729; for (int _3701=(int)0, _8730=_3697; _3701 < _8730;++_3701)_8729.push_back(((*nativeindexes)((((*_3693)((_3696 + _3701))) - _3695)))); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8729.size()),_8729.begin(),_8729.end())); })(); mosek::fusion::p_Model::_get_impl(model.get())->task_con_putboundlist_fx(_3700,_3698); }void mosek::fusion::p_ConicConstraint::dual( std::shared_ptr< monty::ndarray< int,1 > > _3702,int _3703,int _3704,int _3705,std::shared_ptr< monty::ndarray< double,1 > > _3706){ if (((_3704 - _3703) > ((int)((_3706)->size(0)) - _3705))){ throw ::mosek::fusion::SliceError(std::string ("Wrong target array length"));}else if (((_3704 < _3703) || (_3704 >= (int)((_3702)->size(0))))){ throw ::mosek::fusion::SliceError(std::string ("Slice indexes out of bounds"));}else {}std::shared_ptr< monty::ndarray< double,1 > > _3707 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_snx(::mosek::fusion::SolutionType::Default); { int _3708 = (int)0; for (;(_3708 < (_3704 - _3703));( ++ _3708 )){ (((*_3706)((_3708 + _3705))) = ((*_3707)((first_slack + ((*_3702)((_3703 + _3708))))))); }}}void mosek::fusion::p_ConicConstraint::dual_values( std::shared_ptr< monty::ndarray< int,1 > > _3709,std::shared_ptr< monty::ndarray< int,1 > > _3710,int _3711,std::shared_ptr< monty::ndarray< double,1 > > _3712){ if ((((int)((_3709)->size(0)) != (int)1) || ((int)((_3710)->size(0)) != (int)1))){ throw ::mosek::fusion::SliceError(std::string ("Invalid slice dimensions"));}else {}int _3713 = ((*_3709)((int)0)); int _3714 = ((*_3710)((int)0)); if (((_3714 - _3713) > ((int)((_3712)->size(0)) - _3711))){ throw ::mosek::fusion::SliceError(std::string ("Wrong target array length"));}else if (((_3714 < _3713) || (_3714 > (last_slack - first_slack)))){ throw ::mosek::fusion::SliceError(std::string ("Slice indexes out of bounds"));}else {}std::shared_ptr< monty::ndarray< double,1 > > _3715; (_3715 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_snx(::mosek::fusion::SolutionType::Default)); { int _3716 = (int)0; for (;(_3716 < (_3714 - _3713));( ++ _3716 )){ (((*_3712)((_3716 + _3711))) = ((*_3715)(((_3713 + _3716) + first_slack)))); }}}void mosek::fusion::p_ConicConstraint::domainToString( long long _3717,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _3718){ mosek::fusion::p_QConeDomain::_get_impl(dom.get())->domainToString(_3717,_3718); }monty::rc_ptr< ::mosek::fusion::ModelConstraint > mosek::fusion::p_ConicConstraint::clone( monty::rc_ptr< ::mosek::fusion::Model > _3719){ return ::mosek::fusion::p_ConicConstraint::_new_ConicConstraint(_pubthis,_3719); }void mosek::fusion::p_ConicConstraint::destroy(){dom.reset();}void mosek::fusion::ConicConstraint::destroy() { mosek::fusion::p_ConicConstraint::_get_impl(this)->destroy(); }mosek::fusion::LinearConstraint::LinearConstraint(mosek::fusion::p_LinearConstraint *_impl) : mosek::fusion::ModelConstraint(_impl) { /*std::cout << "LinearConstraint()" << this << std::endl; */ }mosek::fusion::LinearConstraint::~LinearConstraint() {  /* std::cout << "~LinearConstraint()" << this << std::endl << std::flush; */ }mosek::fusion::p_LinearConstraint::p_LinearConstraint  (::mosek::fusion::LinearConstraint * _pubthis) :     mosek::fusion::p_ModelConstraint(_pubthis),    _pubthis(_pubthis){}mosek::fusion::LinearConstraint::t mosek::fusion::p_LinearConstraint::_new_LinearConstraint  (monty::rc_ptr< ::mosek::fusion::LinearConstraint > _3720,    monty::rc_ptr< ::mosek::fusion::Model > _3721){ return new mosek::fusion::LinearConstraint(_3720,_3721); }mosek::fusion::LinearConstraint::LinearConstraint  (monty::rc_ptr< ::mosek::fusion::LinearConstraint > _3720,    monty::rc_ptr< ::mosek::fusion::Model > _3721) :    LinearConstraint(new mosek::fusion::p_LinearConstraint(this)){ mosek::fusion::p_LinearConstraint::_get_impl(this)->_initialize(_3720,_3721); }void mosek::fusion::p_LinearConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::LinearConstraint > _3720,    monty::rc_ptr< ::mosek::fusion::Model > _3721){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_ModelConstraint::_initialize(_3720,_3721);(dom = mosek::fusion::p_LinearConstraint::_get_impl(_3720)->dom); (idxmap = nullptr); }}mosek::fusion::LinearConstraint::t mosek::fusion::p_LinearConstraint::_new_LinearConstraint  (monty::rc_ptr< ::mosek::fusion::Model > _3722,    const std::string &  _3723,    monty::rc_ptr< ::mosek::fusion::LinearDomain > _3724,    monty::rc_ptr< ::mosek::fusion::Set > _3725,    std::shared_ptr< monty::ndarray< int,1 > > _3726,    std::shared_ptr< monty::ndarray< long long,1 > > _3727,    std::shared_ptr< monty::ndarray< int,1 > > _3728,    std::shared_ptr< monty::ndarray< double,1 > > _3729,    std::shared_ptr< monty::ndarray< double,1 > > _3730,    std::shared_ptr< monty::ndarray< int,1 > > _3731,    std::shared_ptr< monty::ndarray< int,1 > > _3732,    std::shared_ptr< monty::ndarray< int,1 > > _3733){ return new mosek::fusion::LinearConstraint(_3722,_3723,_3724,_3725,_3726,_3727,_3728,_3729,_3730,_3731,_3732,_3733); }mosek::fusion::LinearConstraint::LinearConstraint  (monty::rc_ptr< ::mosek::fusion::Model > _3722,    const std::string &  _3723,    monty::rc_ptr< ::mosek::fusion::LinearDomain > _3724,    monty::rc_ptr< ::mosek::fusion::Set > _3725,    std::shared_ptr< monty::ndarray< int,1 > > _3726,    std::shared_ptr< monty::ndarray< long long,1 > > _3727,    std::shared_ptr< monty::ndarray< int,1 > > _3728,    std::shared_ptr< monty::ndarray< double,1 > > _3729,    std::shared_ptr< monty::ndarray< double,1 > > _3730,    std::shared_ptr< monty::ndarray< int,1 > > _3731,    std::shared_ptr< monty::ndarray< int,1 > > _3732,    std::shared_ptr< monty::ndarray< int,1 > > _3733) :    LinearConstraint(new mosek::fusion::p_LinearConstraint(this)){ mosek::fusion::p_LinearConstraint::_get_impl(this)->_initialize(_3722,_3723,_3724,_3725,_3726,_3727,_3728,_3729,_3730,_3731,_3732,_3733); }void mosek::fusion::p_LinearConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _3722,    const std::string &  _3723,    monty::rc_ptr< ::mosek::fusion::LinearDomain > _3724,    monty::rc_ptr< ::mosek::fusion::Set > _3725,    std::shared_ptr< monty::ndarray< int,1 > > _3726,    std::shared_ptr< monty::ndarray< long long,1 > > _3727,    std::shared_ptr< monty::ndarray< int,1 > > _3728,    std::shared_ptr< monty::ndarray< double,1 > > _3729,    std::shared_ptr< monty::ndarray< double,1 > > _3730,    std::shared_ptr< monty::ndarray< int,1 > > _3731,    std::shared_ptr< monty::ndarray< int,1 > > _3732,    std::shared_ptr< monty::ndarray< int,1 > > _3733){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_ModelConstraint::_initialize(_3722,_3723,_3725,_3726,_3727,_3728,_3729,_3730,_3731,_3732,_3733);(dom = _3724); (idxmap = nullptr); }}void mosek::fusion::p_LinearConstraint::add_fx( std::shared_ptr< monty::ndarray< long long,1 > > _3734,std::shared_ptr< monty::ndarray< double,1 > > _3735,long long _3736,int _3737,int _3738){ std::shared_ptr< monty::ndarray< double,1 > > _3739; if ((mosek::fusion::p_LinearDomain::_get_impl(dom)->key == ::mosek::fusion::RelationKey::IsFree)){ }else { (_3739 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_3738)))); std::shared_ptr< monty::ndarray< int,1 > > _3740 = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _8731; for (int _3741=(int)0, _8732=_3738; _3741 < _8732;++_3741)_8731.push_back(((*nativeindexes)((((*_3734)((_3737 + _3741))) - _3736)))); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8731.size()),_8731.begin(),_8731.end())); })(); (_3739 = ([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _8733; for (int _3742=(int)0, _8734=_3738; _3742 < _8734;++_3742)_8733.push_back((mosek::fusion::p_LinearDomain::_get_impl(dom.get())->get_rhs_item((((*_3734)((_3737 + _3742))) - _3736)) - ((*_3735)((((*_3734)((_3737 + _3742))) - _3736))))); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8733.size()),_8733.begin(),_8733.end())); })()); if ((mosek::fusion::p_LinearDomain::_get_impl(dom)->key == ::mosek::fusion::RelationKey::EqualsTo)){ mosek::fusion::p_Model::_get_impl(model.get())->task_con_putboundlist_fx(_3740,_3739); }else if ((mosek::fusion::p_LinearDomain::_get_impl(dom)->key == ::mosek::fusion::RelationKey::LessThan)){ mosek::fusion::p_Model::_get_impl(model.get())->task_con_putboundlist_up(_3740,_3739); }else if ((mosek::fusion::p_LinearDomain::_get_impl(dom)->key == ::mosek::fusion::RelationKey::GreaterThan)){ mosek::fusion::p_Model::_get_impl(model.get())->task_con_putboundlist_lo(_3740,_3739); }else {}}}void mosek::fusion::p_LinearConstraint::dual_values( long long _3743,std::shared_ptr< monty::ndarray< int,1 > > _3744,std::shared_ptr< monty::ndarray< long long,1 > > _3745,int _3746,std::shared_ptr< monty::ndarray< double,1 > > _3747){ long long _3748 = (long long)1; int _3749 = (int)((_3745)->size(0)); monty::rc_ptr< ::mosek::fusion::IndexCounter > _3750 = ::mosek::fusion::p_IndexCounter::_new_IndexCounter(_3743,_3744,_3745); std::shared_ptr< monty::ndarray< double,1 > > _3751 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_y(::mosek::fusion::SolutionType::Default); int _8735 = (int)0; int _8736 = _3749; for (int _3752 = _8735;_3752<_8736;++_3752){ (_3748 = (_3748 * ((*_3744)(_3752)))); }if (nativeindexes){ long long _8737 = (long long)0; long long _8738 = _3748; for (long long _3753 = _8737;_3753<_8738;++_3753){ (((*_3747)((_3753 + _3746))) = ((*_3751)(((*nativeindexes)(_3750->get()))))); _3750->inc(); }}else { long long _8739 = (long long)0; long long _8740 = _3748; for (long long _3754 = _8739;_3754<_8740;++_3754){ if (mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->hasItem(_3750->get())){ (((*_3747)(_3754)) = ((*_3751)(mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->getItem(_3750->get())))); }else { (((*_3747)(_3754)) = 0.0); }_3750->inc(); }}}void mosek::fusion::p_LinearConstraint::dual_values( std::shared_ptr< monty::ndarray< long long,1 > > _3755,int _3756,std::shared_ptr< monty::ndarray< double,1 > > _3757){ std::shared_ptr< monty::ndarray< double,1 > > _3758 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_y(::mosek::fusion::SolutionType::Default); if (nativeindexes){ int _8741 = (int)0; int _8742 = (int)((_3755)->size(0)); for (int _3759 = _8741;_3759<_8742;++_3759){ (((*_3757)((_3756 + _3759))) = ((*_3758)(((*nativeindexes)(((*_3755)(_3759))))))); }}else { int _8743 = (int)0; int _8744 = (int)((_3755)->size(0)); for (int _3760 = _8743;_3760<_8744;++_3760){ if (mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->hasItem(((*_3755)(_3760)))){ (((*_3757)((_3756 + _3760))) = ((*_3758)(mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->getItem(((*_3755)(_3760)))))); }else { (((*_3757)((_3756 + _3760))) = 0.0); }}}}void mosek::fusion::p_LinearConstraint::level_values( long long _3761,std::shared_ptr< monty::ndarray< int,1 > > _3762,std::shared_ptr< monty::ndarray< long long,1 > > _3763,int _3764,std::shared_ptr< monty::ndarray< double,1 > > _3765){ long long _3766 = (long long)1; int _3767 = (int)((_3763)->size(0)); monty::rc_ptr< ::mosek::fusion::IndexCounter > _3768 = ::mosek::fusion::p_IndexCounter::_new_IndexCounter(_3761,_3762,_3763); std::shared_ptr< monty::ndarray< double,1 > > _3769 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_xc(::mosek::fusion::SolutionType::Default); int _8745 = (int)0; int _8746 = _3767; for (int _3770 = _8745;_3770<_8746;++_3770){ (_3766 = (_3766 * ((*_3762)(_3770)))); }if (nativeindexes){ long long _8747 = (long long)0; long long _8748 = _3766; for (long long _3771 = _8747;_3771<_8748;++_3771){ (((*_3765)((_3771 + _3764))) = ((*_3769)(((*nativeindexes)(_3768->get()))))); _3768->inc(); }}else { long long _8749 = (long long)0; long long _8750 = _3766; for (long long _3772 = _8749;_3772<_8750;++_3772){ if (mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->hasItem(_3768->get())){ (((*_3765)(_3772)) = ((*_3769)(mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->getItem(_3768->get())))); }else { (((*_3765)(_3772)) = 0.0); }_3768->inc(); }}}void mosek::fusion::p_LinearConstraint::level_values( std::shared_ptr< monty::ndarray< long long,1 > > _3773,int _3774,std::shared_ptr< monty::ndarray< double,1 > > _3775){ std::shared_ptr< monty::ndarray< double,1 > > _3776 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_xc(::mosek::fusion::SolutionType::Default); if (nativeindexes){ int _8751 = (int)0; int _8752 = (int)((_3773)->size(0)); for (int _3777 = _8751;_3777<_8752;++_3777){ (((*_3775)((_3774 + _3777))) = ((*_3776)(((*nativeindexes)(((*_3773)(_3777))))))); }}else { int _8753 = (int)0; int _8754 = (int)((_3773)->size(0)); for (int _3778 = _8753;_3778<_8754;++_3778){ if (mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->hasItem(((*_3773)(_3778)))){ (((*_3775)((_3774 + _3778))) = ((*_3776)(mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->getItem(((*_3773)(_3778)))))); }else { (((*_3775)((_3774 + _3778))) = 0.0); }}}}void mosek::fusion::p_LinearConstraint::domainToString( long long _3779,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _3780){ mosek::fusion::p_LinearDomain::_get_impl(dom.get())->domainToString(_3779,_3780); }monty::rc_ptr< ::mosek::fusion::ModelConstraint > mosek::fusion::p_LinearConstraint::clone( monty::rc_ptr< ::mosek::fusion::Model > _3781){ return ::mosek::fusion::p_LinearConstraint::_new_LinearConstraint(_pubthis,_3781); }void mosek::fusion::p_LinearConstraint::destroy(){dom.reset();idxmap.reset();}void mosek::fusion::LinearConstraint::destroy() { mosek::fusion::p_LinearConstraint::_get_impl(this)->destroy(); }mosek::fusion::ModelConstraint::ModelConstraint(mosek::fusion::p_ModelConstraint *_impl) : mosek::fusion::Constraint(_impl) { /*std::cout << "ModelConstraint()" << this << std::endl; */ }mosek::fusion::ModelConstraint::~ModelConstraint() {  /* std::cout << "~ModelConstraint()" << this << std::endl << std::flush; */ }mosek::fusion::p_ModelConstraint::p_ModelConstraint  (::mosek::fusion::ModelConstraint * _pubthis) :     mosek::fusion::p_Constraint(_pubthis),    _pubthis(_pubthis){}void mosek::fusion::p_ModelConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::ModelConstraint > _3782,    monty::rc_ptr< ::mosek::fusion::Model > _3783){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_Constraint::_initialize(_3782,_3783);(cache = mosek::fusion::p_ConstraintCache::_get_impl(mosek::fusion::p_ModelConstraint::_get_impl(_3782)->cache.get())->clone()); (nativeindexes = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _8755; for (int _3784=(int)0, _8756=(int)((mosek::fusion::p_ModelConstraint::_get_impl(_3782)->nativeindexes)->size(0)); _3784 < _8756;++_3784)_8755.push_back(((*mosek::fusion::p_ModelConstraint::_get_impl(_3782)->nativeindexes)(_3784))); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8755.size()),_8755.begin(),_8755.end())); })()); (name = mosek::fusion::p_ModelConstraint::_get_impl(_3782)->name); (cache_bfix = ([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _8757; for (int _3785=(int)0, _8758=(int)((mosek::fusion::p_ModelConstraint::_get_impl(_3782)->cache_bfix)->size(0)); _3785 < _8758;++_3785)_8757.push_back(((*mosek::fusion::p_ModelConstraint::_get_impl(_3782)->cache_bfix)(_3785))); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8757.size()),_8757.begin(),_8757.end())); })()); (names_flushed = mosek::fusion::p_ModelConstraint::_get_impl(_3782)->names_flushed); }}void mosek::fusion::p_ModelConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _3786,    const std::string &  _3787,    monty::rc_ptr< ::mosek::fusion::Set > _3788,    std::shared_ptr< monty::ndarray< int,1 > > _3789,    std::shared_ptr< monty::ndarray< long long,1 > > _3790,    std::shared_ptr< monty::ndarray< int,1 > > _3791,    std::shared_ptr< monty::ndarray< double,1 > > _3792,    std::shared_ptr< monty::ndarray< double,1 > > _3793,    std::shared_ptr< monty::ndarray< int,1 > > _3794,    std::shared_ptr< monty::ndarray< int,1 > > _3795,    std::shared_ptr< monty::ndarray< int,1 > > _3796){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_Constraint::_initialize(_3786,_3788);(cache = ::mosek::fusion::p_ConstraintCache::_new_ConstraintCache(_3790,_3792,_3791,_3793,_3794,_3795,_3796)); (nativeindexes = _3789); (name = _3787); if (_3793){ (cache_bfix = ::mosek::fusion::Utils::Tools::arraycopy(_3793)); }else { (cache_bfix = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)((_3789)->size(0)))))); }(names_flushed = false); }}void mosek::fusion::p_ModelConstraint::flushNames( ){ if (((! names_flushed) && ((int)((name).size()) > (int)0))){ int _8759 = (int)0; int _8760 = (int)((nativeindexes)->size(0)); for (int _3797 = _8759;_3797<_8760;++_3797){ mosek::fusion::p_Model::_get_impl(model.get())->task_con_name(((*nativeindexes)(_3797)),([&]() -> std::string { if ( ((int)((name).size()) == (int)0)) return (std::string ("")); else return (mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer().get())->a(name).get())->a(std::string ("[")).get())->a(shape_p->getname((long long)(_3797))).get())->a(std::string ("]")).get())->toString()); })()); }(names_flushed = true); }else {}}std::string mosek::fusion::ModelConstraint::toString  ( ) { return mosek::fusion::p_ModelConstraint::_get_impl(this)->toString(); }std::string mosek::fusion::p_ModelConstraint::toString( ){ long long _3798 = mosek::fusion::p_Set::_get_impl(shape_p)->size; std::shared_ptr< monty::ndarray< std::string,1 > > _3799 = std::shared_ptr< monty::ndarray< std::string,1 > >(new monty::ndarray< std::string,1 >(monty::shape(_3798))); toStringArray(::mosek::fusion::Utils::Tools::range(_3798),(long long)0,_3799); monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _3800 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer(); mosek::fusion::Utils::p_StringBuffer::_get_impl(_3800.get())->a(std::string ("Constraint( ")); if (((int)((name).size()) > (int)0)){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_3800.get())->a(std::string ("'")).get())->a(name).get())->a(std::string ("', ")); }else {}mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_3800.get())->a(std::string ("(")).get())->a(shape_p->dim((int)0)); int _8761 = (int)1; int _8762 = mosek::fusion::p_Set::_get_impl(shape_p)->nd; for (int _3801 = _8761;_3801<_8762;++_3801){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_3800.get())->a(std::string (",")).get())->a(shape_p->dim(_3801)); }mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_3800.get())->a(std::string ("),")).get())->lf(); if (((int)((_3799)->size(0)) > (int)0)){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_3800.get())->a(std::string ("  ")).get())->a(((*_3799)((int)0))); int _8763 = (int)1; int _8764 = (int)((_3799)->size(0)); for (int _3802 = _8763;_3802<_8764;++_3802){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_3800.get())->a(std::string (",")).get())->lf().get())->a(std::string ("  ")).get())->a(((*_3799)(_3802))); }}else {}mosek::fusion::Utils::p_StringBuffer::_get_impl(_3800.get())->a(std::string (" )")); return mosek::fusion::Utils::p_StringBuffer::_get_impl(_3800.get())->toString(); }void mosek::fusion::p_ModelConstraint::toStringArray( std::shared_ptr< monty::ndarray< long long,1 > > _3803,long long _3804,std::shared_ptr< monty::ndarray< std::string,1 > > _3805){ int _8765 = (int)0; int _8766 = (int)((_3803)->size(0)); for (int _3806 = _8765;_3806<_8766;++_3806){ if (((((*_3803)(_3806)) < (int)0) || (((*_3803)(_3806)) >= mosek::fusion::p_Set::_get_impl(shape_p)->size))){ throw ::mosek::fusion::IndexError(std::string ("Constraint index out of bounds"));}else {}}if ((((long long)((_3803)->size(0)) + _3804) > (long long)((_3805)->size(0)))){ throw ::mosek::fusion::LengthError(std::string ("Result array is too small to hold the result"));}else {}monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _3807 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer(); int _3808 = (int)0; long long _3809 = mosek::fusion::p_ConstraintCache::_get_impl(cache.get())->order_barentries(); int _3810 = (int)0; int _8767 = (int)0; int _8768 = (int)((_3803)->size(0)); for (int _3811 = _8767;_3811<_8768;++_3811){ long long _3812 = ((*_3803)(_3811)); int _3813 = ((*nativeindexes)(_3812)); int _3814 = _3808; while (((_3808 < mosek::fusion::p_ConstraintCache::_get_impl(cache)->nnz) && (((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->subi)(_3808)) == _3812))) { ( ++ _3808 ); }mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_3807.get())->clear().get())->a(name).get())->a(std::string ("[")).get())->a(shape_p->indexToString(_3812)).get())->a(std::string ("] : ")); int _8769 = _3814; int _8770 = _3808; for (int _3815 = _8769;_3815<_8770;++_3815){ double _3816 = ((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->cof)(_3815)); if ((_3816 > (int)0)){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_3807.get())->a(std::string (" + ")).get())->a(_3816).get())->a(std::string (" ")); mosek::fusion::p_Model::_get_impl(model.get())->nativeVarToStr(((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->subj)(_3815)),_3807); }else if ((_3816 < (int)0)){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_3807.get())->a(std::string (" - ")).get())->a((- _3816)).get())->a(std::string (" ")); mosek::fusion::p_Model::_get_impl(model.get())->nativeVarToStr(((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->subj)(_3815)),_3807); }else {}}while (((_3810 < _3809) && (((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->barsubi)(_3810)) < _3812))) { ( ++ _3810 ); }int _3817 = _3810; while (((_3817 < _3809) && (((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->barsubi)(_3817)) == _3812))) { ( ++ _3817 ); }while (((_3810 < _3817) && (((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->barsubi)(_3810)) == _3812))) { int _3818 = _3810; int _3819 = ((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->barsubj)(_3810)); ( ++ _3810 ); while (((_3810 < _3817) && (((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->barsubj)(_3810)) == _3819))) { ( ++ _3810 ); }mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_3807.get())->a(std::string (" + < M")).get())->a(((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->barmatidx)(_3818))); int _8771 = (_3818 + (int)1); int _8772 = _3810; for (int _3820 = _8771;_3820<_8772;++_3820){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_3807.get())->a(std::string (" + M")).get())->a(((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->barmatidx)(_3820))); }mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_3807.get())->a(std::string (" ; ")).get())->a(([&]() -> std::string { if ( ((int)((mosek::fusion::p_ModelVariable::_get_impl(((*mosek::fusion::p_Model::_get_impl(model)->vars)(((*mosek::fusion::p_Model::_get_impl(model)->natbarvarmap_Var)(((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->barsubj)(_3818)))))))->name).size()) > (int)0)) return (mosek::fusion::p_ModelVariable::_get_impl(((*mosek::fusion::p_Model::_get_impl(model)->vars)(((*mosek::fusion::p_Model::_get_impl(model)->natbarvarmap_Var)(((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->barsubj)(_3818)))))))->name); else return (std::string ("_")); })()).get())->a(std::string (" >")); }if (cache_bfix){ if ((((*cache_bfix)(_3812)) > (int)0)){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_3807.get())->a(std::string (" + ")).get())->a(((*cache_bfix)(_3812))); }else if ((((*cache_bfix)(_3812)) < (int)0)){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_3807.get())->a(std::string (" + ")).get())->a(((*cache_bfix)(_3812))); }else {}}else {}mosek::fusion::Utils::p_StringBuffer::_get_impl(_3807.get())->a(std::string (" ")); domainToString(_3812,_3807); (((*_3805)(((long long)_3811 + _3804))) = mosek::fusion::Utils::p_StringBuffer::_get_impl(_3807.get())->toString()); }}void mosek::fusion::p_ModelConstraint::add_l( std::shared_ptr< monty::ndarray< long long,1 > > _3823,std::shared_ptr< monty::ndarray< long long,1 > > _3824,std::shared_ptr< monty::ndarray< int,1 > > _3825,std::shared_ptr< monty::ndarray< int,1 > > _3826,std::shared_ptr< monty::ndarray< int,1 > > _3827,std::shared_ptr< monty::ndarray< double,1 > > _3828,std::shared_ptr< monty::ndarray< double,1 > > _3829,long long _3830,int _3831,int _3832){ int _8773 = (int)1; int _8774 = (int)((_3823)->size(0)); for (int _3833 = _8773;_3833<_8774;++_3833){ if ((((*_3823)((_3833 - (int)1))) >= ((*_3823)(_3833)))){ throw ::mosek::fusion::UnimplementedError(std::string ("Not supported: Non-contiguous index ranges in ModelConstraint.add_l"));}else {}}if (((((*_3824)((_3831 + _3832))) <= ((*_3824)(_3831))) && ! _3829)){ return ; }else {}std::shared_ptr< monty::ndarray< long long,1 > > _3834 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((((*_3824)((_3831 + _3832))) - ((*_3824)(_3831)))))); long long _8775 = (long long)0; long long _8776 = (((*_3824)((_3831 + _3832))) - ((*_3824)(_3831))); for (long long _3835 = _8775;_3835<_8776;++_3835){ (((*_3834)(_3835)) = (((*_3824)(_3831)) + _3835)); }int _8777 = (int)0; int _8778 = _3832; for (int _3836 = _8777;_3836<_8778;++_3836){ ::mosek::fusion::p_CommonTools::argQsort(_3834,_3825,std::shared_ptr< monty::ndarray< int,1 > >(nullptr),((*_3824)((_3831 + _3836))),((*_3824)(((_3831 + _3836) + (int)1)))); }int _3837 = (int)0; int _3838 = (int)0; long long _8779 = ((*_3824)(_3831)); long long _8780 = ((*_3824)((_3831 + _3832))); for (long long _3839 = _8779;_3839<_8780;++_3839){ if ((((*_3825)(_3839)) >= (int)0)){ ( ++ _3837 ); }else { ( ++ _3838 ); }}if (((_3837 > (int)0) || _3829)){ std::shared_ptr< monty::ndarray< long long,1 > > _3840 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((mosek::fusion::p_ConstraintCache::_get_impl(cache)->nrows + (int)1)))); std::shared_ptr< monty::ndarray< int,1 > > _3841 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_3837))); std::shared_ptr< monty::ndarray< double,1 > > _3842 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_3837))); std::shared_ptr< monty::ndarray< double,1 > > _3843 = nullptr; if (_3829){ (_3843 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(mosek::fusion::p_ConstraintCache::_get_impl(cache)->nrows)))); int _8781 = (int)0; int _8782 = _3832; for (int _3844 = _8781;_3844<_8782;++_3844){ (((*_3843)((((*_3823)((_3844 + _3831))) - _3830))) = ((*_3829)((_3831 + _3844)))); }}else {}(((*_3840)((int)0)) = (long long)0); int _3845 = _3831; int _8783 = (int)0; int _8784 = mosek::fusion::p_ConstraintCache::_get_impl(cache)->nrows; for (int _3846 = _8783;_3846<_8784;++_3846){ if (((_3845 < _3832) && ((((*_3823)(_3845)) - _3830) == _3846))){ long long _3847 = ((*_3840)(_3846)); long long _8785 = ((*_3824)(_3845)); long long _8786 = ((*_3824)((_3845 + (int)1))); for (long long _3848 = _8785;_3848<_8786;++_3848){ if ((((*_3825)(_3848)) >= (int)0)){ (((*_3841)(_3847)) = ((*_3825)(_3848))); (((*_3842)(_3847)) = ((*_3828)(_3848))); ( ++ _3847 ); }else {}}(((*_3840)((_3846 + (int)1))) = _3847); ( ++ _3845 ); }else { (((*_3840)((_3846 + (int)1))) = ((*_3840)(_3846))); }}cache->add(_3840,_3841,_3842,_3843); { int _3849 = mosek::fusion::p_ConstraintCache::_get_impl(cache)->nrows; int _3850 = (int)cache->numUnsorted(); std::shared_ptr< monty::ndarray< int,1 > > _3851 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_3850))); std::shared_ptr< monty::ndarray< int,1 > > _3852 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_3850))); std::shared_ptr< monty::ndarray< double,1 > > _3853 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_3850))); long long _3854 = cache->flush(_3851,_3852,_3853,std::shared_ptr< monty::ndarray< double,1 > >(nullptr)); long long _8787 = (long long)0; long long _8788 = _3854; for (long long _3855 = _8787;_3855<_8788;++_3855){ (((*_3851)(_3855)) = ((*nativeindexes)(((*_3851)(_3855))))); }mosek::fusion::p_Model::_get_impl(model.get())->task_putaijlist(_3851,_3852,_3853,_3854); if (_3829){ add_fx(_3823,mosek::fusion::p_ConstraintCache::_get_impl(cache)->bfix,_3830,_3831,_3832); }else {}}}else {}if ((_3838 > (int)0)){ int _3856 = (int)0; { long long _3857 = ((*_3824)(_3831)); int _8789 = (int)0; int _8790 = _3832; for (int _3858 = _8789;_3858<_8790;++_3858){ if ((((*_3825)(((*_3834)((((*_3824)(_3831)) - _3857))))) < (int)0)){ int _3859 = (int)1; long long _8791 = ((((*_3824)((_3831 + _3858))) - _3857) + (int)1); long long _8792 = (((*_3824)(((_3831 + _3858) + (int)1))) - _3857); for (long long _3860 = _8791;_3860<_8792;++_3860){ if (((((*_3825)(((*_3834)(_3860)))) < (int)0) && (((*_3825)(((*_3834)(_3860)))) != ((*_3825)(((*_3834)((_3860 - (int)1)))))))){ ( ++ _3859 ); }else {}}(_3856 += _3859); }else {}}}std::shared_ptr< monty::ndarray< int,1 > > _3861 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_3856))); std::shared_ptr< monty::ndarray< int,1 > > _3862 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_3856))); std::shared_ptr< monty::ndarray< int,1 > > _3863 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_3856))); std::shared_ptr< monty::ndarray< int,1 > > _3864 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_3856))); { long long _3865 = ((*_3824)(_3831)); int _3866 = (int)0; int _8793 = (int)0; int _8794 = _3832; for (int _3867 = _8793;_3867<_8794;++_3867){ long long _3868 = (((*_3824)((_3831 + _3867))) - _3865); long long _3869 = (((*_3824)(((_3831 + _3867) + (int)1))) - _3865); if ((((*_3825)(((*_3834)(_3868)))) < (int)0)){ while (((_3868 < _3869) && (((*_3825)(((*_3834)(_3868)))) < (int)0))) { (((*_3862)(_3866)) = (int)((*_3823)((_3831 + _3867)))); (((*_3861)(_3866)) = ((*nativeindexes)((int)((*_3823)((_3831 + _3867)))))); (((*_3863)(_3866)) = ((- ((*_3825)(((*_3834)(_3868))))) - (int)1)); long long _3870 = _3868; while (((_3868 < _3869) && ((((*_3825)(((*_3834)(_3868)))) < (int)0) && (((*_3825)(((*_3834)(_3868)))) == ((*_3825)(((*_3834)(_3870)))))))) { ( ++ _3868 ); }std::shared_ptr< monty::ndarray< int,1 > > _3871; std::shared_ptr< monty::ndarray< int,1 > > _3872; std::shared_ptr< monty::ndarray< double,1 > > _3873; int _3874 = (int)1; if (((_3868 - _3870) > (int)1)){ ::mosek::fusion::p_CommonTools::argQsort(_3834,_3826,_3827,(long long)_3870,(long long)(_3868 - _3870)); int _3875 = (int)1; long long _8795 = (long long)1; long long _8796 = (_3868 - _3870); for (long long _3876 = _8795;_3876<_8796;++_3876){ if (((((*_3826)(((*_3834)(((_3868 + _3876) - (int)1))))) != ((*_3826)(((*_3834)((_3868 + _3876)))))) || (((*_3827)(((*_3834)(((_3868 + _3876) - (int)1))))) != ((*_3827)(((*_3834)((_3868 + _3876)))))))){ ( ++ _3875 ); }else {}}(_3871 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_3875)))); (_3872 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_3875)))); (_3873 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_3875)))); (((*_3871)((int)0)) = ((*_3826)(((*_3834)((int)0))))); (((*_3872)((int)0)) = ((*_3827)(((*_3834)((int)0))))); (((*_3873)((int)0)) = ((*_3828)(((*_3834)((int)0))))); int _3877 = (int)0; long long _8797 = (long long)1; long long _8798 = (_3868 - _3870); for (long long _3878 = _8797;_3878<_8798;++_3878){ if (((((*_3871)(((*_3834)(((_3868 + _3878) - (int)1))))) != ((*_3871)(((*_3834)((_3868 + _3878)))))) || (((*_3872)(((*_3834)(((_3868 + _3878) - (int)1))))) != ((*_3872)(((*_3834)((_3868 + _3878)))))))){ ( ++ _3877 ); (((*_3871)(_3877)) = ((*_3826)(((*_3834)((_3868 + _3878)))))); (((*_3872)(_3877)) = ((*_3827)(((*_3834)((_3868 + _3878)))))); }else {}(((*_3873)(_3877)) = (((*_3873)(_3877)) + ((*_3828)(((*_3834)((_3868 + _3878))))))); }}else { (_3871 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{((*_3826)(((*_3834)(_3870))))})); (_3872 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{((*_3827)(((*_3834)(_3870))))})); (_3873 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{((*_3828)(((*_3834)(_3870))))})); }int _3879 = mosek::fusion::p_Model::_get_impl(model.get())->task_append_barmatrix(mosek::fusion::p_Model::_get_impl(model.get())->task_barvardim(((*_3863)(_3866))),_3871,_3872,_3873); (((*_3864)(_3866)) = _3879); ( ++ _3866 ); }}else {}}}mosek::fusion::p_ConstraintCache::_get_impl(cache.get())->add_bar(_3862,_3863,_3864); }else {}}monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::ModelConstraint::slice  ( std::shared_ptr< monty::ndarray< int,1 > > _3885,    std::shared_ptr< monty::ndarray< int,1 > > _3886) { return mosek::fusion::p_ModelConstraint::_get_impl(this)->slice(_3885,_3886); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_ModelConstraint::slice( std::shared_ptr< monty::ndarray< int,1 > > _3885,std::shared_ptr< monty::ndarray< int,1 > > _3886){ if (((int)((_3885)->size(0)) != (int)((_3886)->size(0)))){ throw ::mosek::fusion::LengthError(std::string ("Mismatching array lengths"));}else {}monty::rc_ptr< ::mosek::fusion::Set > _3887 = shape_p->slice(_3885,_3886); std::shared_ptr< monty::ndarray< long long,1 > > _3888 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(mosek::fusion::p_Set::_get_impl(shape_p)->nd))); (((*_3888)((mosek::fusion::p_Set::_get_impl(shape_p)->nd - (int)1))) = (long long)1); { int _3889 = (mosek::fusion::p_Set::_get_impl(shape_p)->nd - (int)1); for (;(_3889 > (int)0);(_3889 = (_3889 - (int)1))){ (((*_3888)((_3889 - (int)1))) = (((*_3888)(_3889)) * shape_p->dim(_3889))); }}long long _3890 = (long long)0; int _8799 = (int)0; int _8800 = (int)((_3888)->size(0)); for (int _3891 = _8799;_3891<_8800;++_3891){ (_3890 = (_3890 + (((*_3888)(_3891)) * ((*_3885)(_3891))))); }return ::mosek::fusion::p_SliceConstraint::_new_SliceConstraint(_pubthis,_3887,_3890,_3888); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::ModelConstraint::slice  ( int _3892,    int _3893) { return mosek::fusion::p_ModelConstraint::_get_impl(this)->slice(_3892,_3893); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_ModelConstraint::slice( int _3892,int _3893){ std::shared_ptr< monty::ndarray< long long,1 > > _3894 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >{(long long)1}); return ::mosek::fusion::p_SliceConstraint::_new_SliceConstraint(_pubthis,shape_p->slice(_3892,_3893),(long long)_3892,_3894); }void mosek::fusion::p_ModelConstraint::destroy(){nativeindexes.reset();cache_bfix.reset();cache.reset();}void mosek::fusion::ModelConstraint::destroy() { mosek::fusion::p_ModelConstraint::_get_impl(this)->destroy(); }mosek::fusion::Constraint::Constraint(mosek::fusion::p_Constraint *_impl) : _impl(_impl) { /*std::cout << "Constraint() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::Constraint::~Constraint() { delete _impl; _impl = nullptr; }mosek::fusion::p_Constraint::p_Constraint  (::mosek::fusion::Constraint * _pubthis) :     _pubthis(_pubthis){}void mosek::fusion::p_Constraint::_initialize  (monty::rc_ptr< ::mosek::fusion::Constraint > _3896,    monty::rc_ptr< ::mosek::fusion::Model > _3897){monty::rc_reserve __reserve_this(_pubthis); { { (model = _3897); (shape_p = mosek::fusion::p_Constraint::_get_impl(_3896)->shape_p); }}}void mosek::fusion::p_Constraint::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _3898,    monty::rc_ptr< ::mosek::fusion::Set > _3899){monty::rc_reserve __reserve_this(_pubthis); { { (model = _3898); (shape_p = _3899); }}}std::string mosek::fusion::Constraint::toString  ( ) { return mosek::fusion::p_Constraint::_get_impl(this)->toString(); }std::string mosek::fusion::p_Constraint::toString( ){ long long _3900 = mosek::fusion::p_Set::_get_impl(shape_p)->size; std::shared_ptr< monty::ndarray< std::string,1 > > _3901 = std::shared_ptr< monty::ndarray< std::string,1 > >(new monty::ndarray< std::string,1 >(monty::shape(_3900))); toStringArray(::mosek::fusion::Utils::Tools::range(_3900),(long long)0,_3901); monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _3902 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer(); mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_3902.get())->a(std::string ("Constraint( (")).get())->a(shape_p->dim((int)0)); int _8801 = (int)1; int _8802 = mosek::fusion::p_Set::_get_impl(shape_p)->nd; for (int _3903 = _8801;_3903<_8802;++_3903){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_3902.get())->a(std::string (",")).get())->a(shape_p->dim(_3903)); }mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_3902.get())->a(std::string ("),")).get())->lf(); mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_3902.get())->a(std::string ("  ")).get())->a(((*_3901)((int)0))); int _8803 = (int)1; int _8804 = (int)((_3901)->size(0)); for (int _3904 = _8803;_3904<_8804;++_3904){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_3902.get())->a(std::string (",")).get())->lf().get())->a(std::string ("  ")).get())->a(((*_3901)(_3904))); }mosek::fusion::Utils::p_StringBuffer::_get_impl(_3902.get())->a(std::string (" )")); return mosek::fusion::Utils::p_StringBuffer::_get_impl(_3902.get())->toString(); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::add  ( double _3908) { return mosek::fusion::p_Constraint::_get_impl(this)->add(_3908); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::add( double _3908){ long long _3909 = mosek::fusion::p_Set::_get_impl(shape_p)->size; add_l(([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _8805; for (long long _3910=(int)0, _8806=_3909; _3910 < _8806;++_3910)_8805.push_back(_3910); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_8805.size()),_8805.begin(),_8805.end())); })(),([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _8807; for (long long _3911=(int)0, _8808=(_3909 + (int)1); _3911 < _8808;++_3911)_8807.push_back((int)0); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_8807.size()),_8807.begin(),_8807.end())); })(),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)0))),([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _8809; for (long long _3912=(int)0, _8810=_3909; _3912 < _8810;++_3912)_8809.push_back(_3908); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8809.size()),_8809.begin(),_8809.end())); })(),(long long)0,(int)0,(int)_3909); return _pubthis; }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::add  ( std::shared_ptr< monty::ndarray< double,1 > > _3913) { return mosek::fusion::p_Constraint::_get_impl(this)->add(_3913); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::add( std::shared_ptr< monty::ndarray< double,1 > > _3913){ long long _3914 = mosek::fusion::p_Set::_get_impl(shape_p)->size; if (((mosek::fusion::p_Set::_get_impl(shape_p)->nd != (int)1) || ((int)((_3913)->size(0)) != shape_p->dim((int)0)))){ throw ::mosek::fusion::DimensionError(std::string ("The added constant array does not have the same shape as the constraint"));}else {}add_l(([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _8811; for (long long _3915=(int)0, _8812=_3914; _3915 < _8812;++_3915)_8811.push_back(_3915); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_8811.size()),_8811.begin(),_8811.end())); })(),([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _8813; for (long long _3916=(int)0, _8814=(_3914 + (int)1); _3916 < _8814;++_3916)_8813.push_back((int)0); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_8813.size()),_8813.begin(),_8813.end())); })(),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)0))),_3913,(long long)0,(int)0,(int)_3914); return _pubthis; }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::add  ( monty::rc_ptr< ::mosek::fusion::Variable > _3917) { return mosek::fusion::p_Constraint::_get_impl(this)->add(_3917); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::add( monty::rc_ptr< ::mosek::fusion::Variable > _3917){ if ((! _3917->shape()->compare(shape_p))){ throw ::mosek::fusion::DimensionError(std::string ("The added variable does not have the same shape as the constraint"));}else {}long long _3918 = mosek::fusion::p_Set::_get_impl(_3917->getShape())->size; std::shared_ptr< monty::ndarray< int,1 > > _3919 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_3918))); std::shared_ptr< monty::ndarray< int,1 > > _3920 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_3918))); std::shared_ptr< monty::ndarray< int,1 > > _3921 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_3918))); std::shared_ptr< monty::ndarray< long long,1 > > _3922 = ::mosek::fusion::Utils::Tools::range((long long)0,(_3918 + (int)1)); std::shared_ptr< monty::ndarray< double,1 > > _3923 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_3918))); long long _8815 = (long long)0; long long _8816 = _3918; for (long long _3924 = _8815;_3924<_8816;++_3924){ _3917->inst(_3924,_3924,_3919,_3920,_3921); (((*_3923)(_3924)) = 1.0); }std::shared_ptr< monty::ndarray< long long,1 > > _3925 = ::mosek::fusion::Utils::Tools::range((long long)0,_3918); add_l(_3925,_3922,_3919,_3920,_3920,_3923,std::shared_ptr< monty::ndarray< double,1 > >(nullptr),(long long)0,(int)0,(int)_3918); return _pubthis; }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::add  ( monty::rc_ptr< ::mosek::fusion::Expression > _3926) { return mosek::fusion::p_Constraint::_get_impl(this)->add(_3926); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::add( monty::rc_ptr< ::mosek::fusion::Expression > _3926){ if ((! _3926->shape()->compare(shape_p))){ throw ::mosek::fusion::DimensionError(std::string ("The added expression does not have the same shape as the constraint"));}else {}monty::rc_ptr< ::mosek::fusion::FlatExpr > _3927 = _3926->eval(); int _3928 = ((int)((mosek::fusion::p_FlatExpr::_get_impl(_3927)->ptrb)->size(0)) - (int)1); std::shared_ptr< monty::ndarray< int,1 > > _3929 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(mosek::fusion::p_FlatExpr::_get_impl(_3927)->nnz))); std::shared_ptr< monty::ndarray< int,1 > > _3930 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(mosek::fusion::p_FlatExpr::_get_impl(_3927)->nnz))); std::shared_ptr< monty::ndarray< int,1 > > _3931 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(mosek::fusion::p_FlatExpr::_get_impl(_3927)->nnz))); ::mosek::fusion::p_Constraint::inst(mosek::fusion::p_FlatExpr::_get_impl(_3927)->x,mosek::fusion::p_FlatExpr::_get_impl(_3927)->subj,_3929,_3929,_3929); std::shared_ptr< monty::ndarray< long long,1 > > _3932 = mosek::fusion::p_FlatExpr::_get_impl(_3927)->inst; if (! _3932){ (_3932 = ::mosek::fusion::Utils::Tools::range((long long)0,(long long)_3928)); }else {}add_l(_3932,mosek::fusion::p_FlatExpr::_get_impl(_3927)->ptrb,_3929,_3930,_3931,mosek::fusion::p_FlatExpr::_get_impl(_3927)->cof,mosek::fusion::p_FlatExpr::_get_impl(_3927)->bfix,(long long)0,(int)0,_3928); return _pubthis; }void mosek::fusion::p_Constraint::inst( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _3933,std::shared_ptr< monty::ndarray< long long,1 > > _3934,std::shared_ptr< monty::ndarray< int,1 > > _3935,std::shared_ptr< monty::ndarray< int,1 > > _3936,std::shared_ptr< monty::ndarray< int,1 > > _3937){ std::shared_ptr< monty::ndarray< long long,1 > > _3938 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(((int)((_3933)->size(0)) + (int)1)))); int _8817 = (int)0; int _8818 = (int)((_3933)->size(0)); for (int _3939 = _8817;_3939<_8818;++_3939){ (((*_3938)((_3939 + (int)1))) = (((*_3938)(_3939)) + ((*_3933)(_3939))->size())); }int _8819 = (int)0; int _8820 = (int)((_3934)->size(0)); for (int _3940 = _8819;_3940<_8820;++_3940){ int _3941 = ((int)((_3938)->size(0)) / (int)2); { int _3942 = (int)0; int _3943 = ((int)((_3938)->size(0)) - (int)1); int _3944 = (int)0; while ((_3942 < _3943)) { (_3944 = ((_3942 + _3943) / (int)2)); if ((((*_3934)(_3940)) < ((*_3938)(_3944)))){ (_3943 = _3944); }else if ((((*_3934)(_3940)) >= ((*_3938)((_3944 + (int)1))))){ (_3942 = _3944); }else { (_3942 = _3944); (_3943 = _3944); }}(_3941 = _3944); }((*_3933)(_3941))->inst((((*_3934)(_3940)) - ((*_3938)(_3941))),(long long)_3940,_3935,_3936,_3937); }}std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::Constraint::dual  ( std::shared_ptr< monty::ndarray< int,1 > > _3955,    std::shared_ptr< monty::ndarray< int,1 > > _3956) { return mosek::fusion::p_Constraint::_get_impl(this)->dual(_3955,_3956); }std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Constraint::dual( std::shared_ptr< monty::ndarray< int,1 > > _3955,std::shared_ptr< monty::ndarray< int,1 > > _3956){ if (((mosek::fusion::p_Set::_get_impl(shape_p)->nd != (int)((_3955)->size(0))) || (mosek::fusion::p_Set::_get_impl(shape_p)->nd != (int)((_3956)->size(0))))){ throw ::mosek::fusion::SliceError(std::string ("Invalid slice specification"));}else {}int _3957 = (int)1; { int _3958 = (int)0; for (;(_3958 < mosek::fusion::p_Set::_get_impl(shape_p)->nd);( ++ _3958 )){ if (((((*_3955)(_3958)) > ((*_3956)(_3958))) || ((((*_3955)(_3958)) < (int)0) || (((*_3956)(_3958)) >= shape_p->dim(_3958))))){ throw ::mosek::fusion::SliceError(std::string ("Slice index out of bound"));}else {}(_3957 = (_3957 * (((*_3956)(_3958)) * ((*_3955)(_3958))))); }}std::shared_ptr< monty::ndarray< double,1 > > _3959 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_3957))); std::shared_ptr< monty::ndarray< int,1 > > _3960 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(mosek::fusion::p_Set::_get_impl(shape_p)->nd))); std::shared_ptr< monty::ndarray< long long,1 > > _3961 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(mosek::fusion::p_Set::_get_impl(shape_p)->nd))); long long _3962 = (long long)0; int _8821 = (int)0; int _8822 = mosek::fusion::p_Set::_get_impl(shape_p)->nd; for (int _3963 = _8821;_3963<_8822;++_3963){ (((*_3960)(_3963)) = (((*_3956)(_3963)) - ((*_3955)(_3963)))); (((*_3961)(_3963)) = shape_p->stride(_3963)); (_3962 = (_3962 + (((*_3961)(_3963)) * ((*_3955)(_3963))))); }dual_values(_3962,_3960,_3961,(int)0,_3959); return _3959; }std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::Constraint::dual  ( int _3964,    int _3965) { return mosek::fusion::p_Constraint::_get_impl(this)->dual(_3964,_3965); }std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Constraint::dual( int _3964,int _3965){ if (((mosek::fusion::p_Set::_get_impl(shape_p)->nd != (int)1) || ((_3964 > _3965) || ((_3964 < (int)0) || (_3965 >= shape_p->dim((int)0)))))){ throw ::mosek::fusion::SliceError(std::string ("Invalid slice specification"));}else {}int _3966 = (_3965 - _3964); std::shared_ptr< monty::ndarray< double,1 > > _3967 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_3966))); dual_values((long long)(_3964),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{_3966}),std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >{(long long)1}),(int)0,_3967); return _3967; }std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::Constraint::dual  ( ) { return mosek::fusion::p_Constraint::_get_impl(this)->dual(); }std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Constraint::dual( ){ std::shared_ptr< monty::ndarray< double,1 > > _3968 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(mosek::fusion::p_Set::_get_impl(shape_p)->size))); dual_values((int)0,_3968); return _3968; }void mosek::fusion::p_Constraint::dual_values( int _3969,std::shared_ptr< monty::ndarray< double,1 > > _3970){ std::shared_ptr< monty::ndarray< int,1 > > _3971 = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _8823; for (int _3972=(int)0, _8824=mosek::fusion::p_Set::_get_impl(shape_p)->nd; _3972 < _8824;++_3972)_8823.push_back(shape_p->dim(_3972)); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8823.size()),_8823.begin(),_8823.end())); })(); std::shared_ptr< monty::ndarray< long long,1 > > _3973 = ([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _8825; for (int _3974=(int)0, _8826=mosek::fusion::p_Set::_get_impl(shape_p)->nd; _3974 < _8826;++_3974)_8825.push_back(shape_p->stride(_3974)); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_8825.size()),_8825.begin(),_8825.end())); })(); dual_values((long long)0,_3971,_3973,_3969,_3970); }std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::Constraint::level  ( ) { return mosek::fusion::p_Constraint::_get_impl(this)->level(); }std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Constraint::level( ){ std::shared_ptr< monty::ndarray< double,1 > > _3983 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(mosek::fusion::p_Set::_get_impl(shape_p)->size))); level_values((int)0,_3983); return _3983; }double mosek::fusion::p_Constraint::level( int _3984){ if (((mosek::fusion::p_Set::_get_impl(shape_p)->nd != (int)1) || ((_3984 < (int)0) || (_3984 >= shape_p->dim((int)0))))){ throw ::mosek::fusion::SliceError(std::string ("Invalid index."));}else {}std::shared_ptr< monty::ndarray< long long,1 > > _3985 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >{(long long)_3984}); std::shared_ptr< monty::ndarray< double,1 > > _3986 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)1))); level_values(_3985,(int)0,_3986); return ((*_3986)((int)0)); }std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Constraint::level( std::shared_ptr< monty::ndarray< int,1 > > _3987,std::shared_ptr< monty::ndarray< int,1 > > _3988){ if (((mosek::fusion::p_Set::_get_impl(shape_p)->nd != (int)((_3987)->size(0))) || (mosek::fusion::p_Set::_get_impl(shape_p)->nd != (int)((_3988)->size(0))))){ throw ::mosek::fusion::SliceError(std::string ("Invalid slice specification"));}else {}int _3989 = (int)1; { int _3990 = (int)0; for (;(_3990 < mosek::fusion::p_Set::_get_impl(shape_p)->nd);( ++ _3990 )){ if (((((*_3987)(_3990)) > ((*_3988)(_3990))) || ((((*_3987)(_3990)) < (int)0) || (((*_3988)(_3990)) > shape_p->dim(_3990))))){ throw ::mosek::fusion::SliceError(std::string ("Slice index out of bound"));}else {}(_3989 = (_3989 * (((*_3988)(_3990)) - ((*_3987)(_3990))))); }}std::shared_ptr< monty::ndarray< double,1 > > _3991 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_3989))); if ((_3989 > (int)0)){ std::shared_ptr< monty::ndarray< int,1 > > _3992 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(mosek::fusion::p_Set::_get_impl(shape_p)->nd))); std::shared_ptr< monty::ndarray< long long,1 > > _3993 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(mosek::fusion::p_Set::_get_impl(shape_p)->nd))); int _8827 = (int)0; int _8828 = mosek::fusion::p_Set::_get_impl(shape_p)->nd; for (int _3994 = _8827;_3994<_8828;++_3994){ (((*_3993)(_3994)) = shape_p->stride(_3994)); }int _8829 = (int)0; int _8830 = mosek::fusion::p_Set::_get_impl(shape_p)->nd; for (int _3995 = _8829;_3995<_8830;++_3995){ (((*_3992)(_3995)) = (((*_3988)(_3995)) - ((*_3987)(_3995)))); }long long _3996 = (long long)0; int _8831 = (int)0; int _8832 = mosek::fusion::p_Set::_get_impl(shape_p)->nd; for (int _3997 = _8831;_3997<_8832;++_3997){ (_3996 = (_3996 + ((long long)((*_3987)(_3997)) * ((*_3993)(_3997))))); }level_values(_3996,_3992,_3993,(int)0,_3991); }else {}return _3991; }std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Constraint::level( int _3998,int _3999){ if (((mosek::fusion::p_Set::_get_impl(shape_p)->nd != (int)1) || ((_3998 < (int)0) || ((_3998 > _3999) || (_3999 > shape_p->dim((int)0)))))){ throw ::mosek::fusion::SliceError(std::string ("Invalid slice specification"));}else {}int _4000 = (_3999 - _3998); std::shared_ptr< monty::ndarray< double,1 > > _4001 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_4000))); std::shared_ptr< monty::ndarray< int,1 > > _4002 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(_3999 - _3998)}); std::shared_ptr< monty::ndarray< long long,1 > > _4003 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >{(long long)1}); level_values((long long)_3998,_4002,_4003,(int)0,_4001); return _4001; }void mosek::fusion::p_Constraint::level_values( int _4004,std::shared_ptr< monty::ndarray< double,1 > > _4005){ std::shared_ptr< monty::ndarray< long long,1 > > _4006 = ([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _8833; for (int _4007=(int)0, _8834=mosek::fusion::p_Set::_get_impl(shape_p)->nd; _4007 < _8834;++_4007)_8833.push_back(shape_p->stride(_4007)); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_8833.size()),_8833.begin(),_8833.end())); })(); std::shared_ptr< monty::ndarray< int,1 > > _4008 = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _8835; for (int _4009=(int)0, _8836=mosek::fusion::p_Set::_get_impl(shape_p)->nd; _4009 < _8836;++_4009)_8835.push_back(shape_p->dim(_4009)); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8835.size()),_8835.begin(),_8835.end())); })(); level_values((long long)0,_4008,_4006,_4004,_4005); }monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::Constraint::get_model  ( ) { return mosek::fusion::p_Constraint::_get_impl(this)->get_model(); }monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::p_Constraint::get_model( ){ return model; }int mosek::fusion::Constraint::get_nd  ( ) { return mosek::fusion::p_Constraint::_get_impl(this)->get_nd(); }int mosek::fusion::p_Constraint::get_nd( ){ return mosek::fusion::p_Set::_get_impl(shape_p)->nd_p; }long long mosek::fusion::Constraint::size  ( ) { return mosek::fusion::p_Constraint::_get_impl(this)->size(); }long long mosek::fusion::p_Constraint::size( ){ return mosek::fusion::p_Set::_get_impl(shape_p)->size; }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::stack  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > > _4018) { return mosek::fusion::p_Constraint::stack(_4018); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::stack( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > > _4018){ return ::mosek::fusion::p_CompoundConstraint::_new_CompoundConstraint(_4018); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::stack  ( monty::rc_ptr< ::mosek::fusion::Constraint > _4019,    monty::rc_ptr< ::mosek::fusion::Constraint > _4020,    monty::rc_ptr< ::mosek::fusion::Constraint > _4021) { return mosek::fusion::p_Constraint::stack(_4019,_4020,_4021); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::stack( monty::rc_ptr< ::mosek::fusion::Constraint > _4019,monty::rc_ptr< ::mosek::fusion::Constraint > _4020,monty::rc_ptr< ::mosek::fusion::Constraint > _4021){ std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > > _4022 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 >{_4019,_4020}); return ::mosek::fusion::p_CompoundConstraint::_new_CompoundConstraint(_4022); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::stack  ( monty::rc_ptr< ::mosek::fusion::Constraint > _4023,    monty::rc_ptr< ::mosek::fusion::Constraint > _4024) { return mosek::fusion::p_Constraint::stack(_4023,_4024); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::stack( monty::rc_ptr< ::mosek::fusion::Constraint > _4023,monty::rc_ptr< ::mosek::fusion::Constraint > _4024){ std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > > _4025 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 >{_4023,_4024}); return ::mosek::fusion::p_CompoundConstraint::_new_CompoundConstraint(_4025); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::index  ( std::shared_ptr< monty::ndarray< int,1 > > _4026) { return mosek::fusion::p_Constraint::_get_impl(this)->index(_4026); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::index( std::shared_ptr< monty::ndarray< int,1 > > _4026){ return mosek::fusion::p_Constraint::_get_impl(_pubthis->slice(_4026,([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _8837; for (int _4027=(int)0, _8838=(int)((_4026)->size(0)); _4027 < _8838;++_4027)_8837.push_back((((*_4026)(_4027)) + (int)1)); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8837.size()),_8837.begin(),_8837.end())); })()).get())->reduceDims(); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::index  ( int _4028) { return mosek::fusion::p_Constraint::_get_impl(this)->index(_4028); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::index( int _4028){ return _pubthis->slice(_4028,(_4028 + (int)1)); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::reduceDims( ){ if ((mosek::fusion::p_Set::_get_impl(shape_p)->nd > (int)1)){ int _4033 = shape_p->realnd(); std::shared_ptr< monty::ndarray< int,1 > > _4034 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4033))); { int _4035 = (int)0; { int _4036 = (int)0; for (;(_4036 < _4033);( ++ _4036 )){ if ((shape_p->dim(_4036) > (int)1)){ (((*_4034)(_4035)) = shape_p->dim(_4036)); ( ++ _4035 ); }else {}}}}(shape_p = ::mosek::fusion::p_NDSet::_new_NDSet(_4034)); }else {}return _pubthis; }monty::rc_ptr< ::mosek::fusion::Set > mosek::fusion::Constraint::shape  ( ) { return mosek::fusion::p_Constraint::_get_impl(this)->shape(); }monty::rc_ptr< ::mosek::fusion::Set > mosek::fusion::p_Constraint::shape( ){ return shape_p; }void mosek::fusion::p_Constraint::destroy(){shape_p.reset();model.reset();}void mosek::fusion::Constraint::destroy() { mosek::fusion::p_Constraint::_get_impl(this)->destroy(); }mosek::fusion::ProductSet::ProductSet(mosek::fusion::p_ProductSet *_impl) : mosek::fusion::NDSet(_impl) { /*std::cout << "ProductSet()" << this << std::endl; */ }mosek::fusion::ProductSet::~ProductSet() {  /* std::cout << "~ProductSet()" << this << std::endl << std::flush; */ }mosek::fusion::p_ProductSet::p_ProductSet  (::mosek::fusion::ProductSet * _pubthis) :     mosek::fusion::p_NDSet(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ProductSet::t mosek::fusion::p_ProductSet::_new_ProductSet  (std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Set >,1 > > _4037){ return new mosek::fusion::ProductSet(_4037); }mosek::fusion::ProductSet::ProductSet  (std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Set >,1 > > _4037) :    ProductSet(new mosek::fusion::p_ProductSet(this)){ mosek::fusion::p_ProductSet::_get_impl(this)->_initialize(_4037); }void mosek::fusion::p_ProductSet::_initialize  (std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Set >,1 > > _4037){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_NDSet::_initialize(::mosek::fusion::p_ProductSet::computedims(_4037));(sets = ([=]()->std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Set >,1 > > { std::vector< monty::rc_ptr< ::mosek::fusion::Set > > _8839; for (int _4038=(int)0, _8840=(int)((_4037)->size(0)); _4038 < _8840;++_4038)_8839.push_back(((*_4037)(_4038))); return std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Set >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Set >,1 >(monty::shape(_8839.size()),_8839.begin(),_8839.end())); })()); }}std::string mosek::fusion::ProductSet::indexToString  ( long long _4039) { return mosek::fusion::p_ProductSet::_get_impl(this)->indexToString(_4039); }std::string mosek::fusion::p_ProductSet::indexToString( long long _4039){ std::shared_ptr< monty::ndarray< int,1 > > _4040 = idxtokey(_4039); monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _4041 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer(); { std::shared_ptr< monty::ndarray< int,1 > > _4042 = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _8841; for (int _4043=(int)0, _8842=mosek::fusion::p_Set::_get_impl(((*sets)((int)0)))->nd; _4043 < _8842;++_4043)_8841.push_back(((*_4040)(_4043))); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8841.size()),_8841.begin(),_8841.end())); })(); mosek::fusion::Utils::p_StringBuffer::_get_impl(_4041.get())->a(((*sets)((int)0))->indexToString(mosek::fusion::p_Set::_get_impl(((*sets)((int)0)).get())->linearidx(_4042))); }int _4044 = mosek::fusion::p_Set::_get_impl(((*sets)((int)0)))->nd; int _8843 = (int)1; int _8844 = (int)((sets)->size(0)); for (int _4045 = _8843;_4045<_8844;++_4045){ int _4046 = _4044; (_4044 = (_4044 + mosek::fusion::p_Set::_get_impl(((*sets)(_4045)))->nd)); std::shared_ptr< monty::ndarray< int,1 > > _4047 = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _8845; for (int _4048=(int)0, _8846=(_4044 - _4046); _4048 < _8846;++_4048)_8845.push_back(((*_4040)((_4048 + _4046)))); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8845.size()),_8845.begin(),_8845.end())); })(); mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_4041.get())->a(std::string (",")).get())->a(((*sets)(_4045))->indexToString(mosek::fusion::p_Set::_get_impl(((*sets)(_4045)).get())->linearidx(_4047))); }return mosek::fusion::Utils::p_StringBuffer::_get_impl(_4041.get())->toString(); }std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_ProductSet::computedims( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Set >,1 > > _4049){ int _4050 = (int)0; int _8847 = (int)0; int _8848 = (int)((_4049)->size(0)); for (int _4051 = _8847;_4051<_8848;++_4051){ (_4050 = (_4050 + mosek::fusion::p_Set::_get_impl(((*_4049)(_4051)))->nd)); }std::shared_ptr< monty::ndarray< int,1 > > _4052 = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _8849; for (int _4053=(int)0, _8850=(int)((_4049)->size(0)); _4053 < _8850;++_4053) for (int _4054=(int)0, _8851=mosek::fusion::p_Set::_get_impl(((*_4049)(_4053)))->nd; _4054 < _8851;++_4054)_8849.push_back(((*_4049)(_4053))->dim(_4054)); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8849.size()),_8849.begin(),_8849.end())); })(); return _4052; }void mosek::fusion::p_ProductSet::destroy(){sets.reset();}void mosek::fusion::ProductSet::destroy() { mosek::fusion::p_ProductSet::_get_impl(this)->destroy(); }mosek::fusion::IntSet::IntSet(mosek::fusion::p_IntSet *_impl) : mosek::fusion::BaseSet(_impl) { /*std::cout << "IntSet()" << this << std::endl; */ }mosek::fusion::IntSet::~IntSet() {  /* std::cout << "~IntSet()" << this << std::endl << std::flush; */ }mosek::fusion::p_IntSet::p_IntSet  (::mosek::fusion::IntSet * _pubthis) :     mosek::fusion::p_BaseSet(_pubthis),    _pubthis(_pubthis){}mosek::fusion::IntSet::t mosek::fusion::p_IntSet::_new_IntSet  (int _4055){ return new mosek::fusion::IntSet(_4055); }mosek::fusion::IntSet::IntSet  (int _4055) :    IntSet(new mosek::fusion::p_IntSet(this)){ mosek::fusion::p_IntSet::_get_impl(this)->_initialize(_4055); }void mosek::fusion::p_IntSet::_initialize  (int _4055){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_BaseSet::_initialize((long long)_4055);(first = (int)0); (last = _4055); }}mosek::fusion::IntSet::t mosek::fusion::p_IntSet::_new_IntSet  (int _4056,    int _4057){ return new mosek::fusion::IntSet(_4056,_4057); }mosek::fusion::IntSet::IntSet  (int _4056,    int _4057) :    IntSet(new mosek::fusion::p_IntSet(this)){ mosek::fusion::p_IntSet::_get_impl(this)->_initialize(_4056,_4057); }void mosek::fusion::p_IntSet::_initialize  (int _4056,    int _4057){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_BaseSet::_initialize((long long)(_4057 - _4056));(first = _4056); (last = _4057); }}std::string mosek::fusion::IntSet::indexToString  ( long long _4058) { return mosek::fusion::p_IntSet::_get_impl(this)->indexToString(_4058); }std::string mosek::fusion::p_IntSet::indexToString( long long _4058){ return mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer().get())->a((int)_4058).get())->toString(); }std::string mosek::fusion::IntSet::getname  ( std::shared_ptr< monty::ndarray< int,1 > > _4059) { return mosek::fusion::p_IntSet::_get_impl(this)->getname(_4059); }std::string mosek::fusion::p_IntSet::getname( std::shared_ptr< monty::ndarray< int,1 > > _4059){ if (((int)((_4059)->size(0)) != (int)1)){ throw ::mosek::fusion::IndexError(std::string ("Invalid key specification"));}else {}return ::mosek::fusion::Utils::Tools::stringvalue(((*_4059)((int)0))); }std::string mosek::fusion::IntSet::getname  ( long long _4060) { return mosek::fusion::p_IntSet::_get_impl(this)->getname(_4060); }std::string mosek::fusion::p_IntSet::getname( long long _4060){ return ::mosek::fusion::Utils::Tools::stringvalue(_4060); }monty::rc_ptr< ::mosek::fusion::Set > mosek::fusion::IntSet::slice  ( std::shared_ptr< monty::ndarray< int,1 > > _4061,    std::shared_ptr< monty::ndarray< int,1 > > _4062) { return mosek::fusion::p_IntSet::_get_impl(this)->slice(_4061,_4062); }monty::rc_ptr< ::mosek::fusion::Set > mosek::fusion::p_IntSet::slice( std::shared_ptr< monty::ndarray< int,1 > > _4061,std::shared_ptr< monty::ndarray< int,1 > > _4062){ if ((((int)((_4061)->size(0)) != (int)1) || ((int)((_4062)->size(0)) != (int)1))){ throw ::mosek::fusion::SliceError(std::string ("Invalid slice specification"));}else {}return _pubthis->slice(((*_4061)((int)0)),((*_4062)((int)0))); }monty::rc_ptr< ::mosek::fusion::Set > mosek::fusion::IntSet::slice  ( int _4063,    int _4064) { return mosek::fusion::p_IntSet::_get_impl(this)->slice(_4063,_4064); }monty::rc_ptr< ::mosek::fusion::Set > mosek::fusion::p_IntSet::slice( int _4063,int _4064){ if (((_4063 < (int)0) || ((_4063 > _4064) || (_4064 > (last - first))))){ throw ::mosek::fusion::SliceError(std::string ("Invalid slice specification"));}else {}return ::mosek::fusion::p_IntSet::_new_IntSet((first + _4063),(first + _4064)); }int mosek::fusion::IntSet::getidx  ( int _4065) { return mosek::fusion::p_IntSet::_get_impl(this)->getidx(_4065); }int mosek::fusion::p_IntSet::getidx( int _4065){ if (((_4065 < first) || (_4065 > last))){ throw ::mosek::fusion::IndexError(std::string ("Index out of bounds"));}else {}return (_4065 - first); }long long mosek::fusion::IntSet::stride  ( int _4066) { return mosek::fusion::p_IntSet::_get_impl(this)->stride(_4066); }long long mosek::fusion::p_IntSet::stride( int _4066){ return (long long)1; }void mosek::fusion::p_IntSet::destroy(){}void mosek::fusion::IntSet::destroy() { mosek::fusion::p_IntSet::_get_impl(this)->destroy(); }mosek::fusion::StringSet::StringSet(mosek::fusion::p_StringSet *_impl) : mosek::fusion::BaseSet(_impl) { /*std::cout << "StringSet()" << this << std::endl; */ }mosek::fusion::StringSet::~StringSet() {  /* std::cout << "~StringSet()" << this << std::endl << std::flush; */ }mosek::fusion::p_StringSet::p_StringSet  (::mosek::fusion::StringSet * _pubthis) :     mosek::fusion::p_BaseSet(_pubthis),    _pubthis(_pubthis){}mosek::fusion::StringSet::t mosek::fusion::p_StringSet::_new_StringSet  (std::shared_ptr< monty::ndarray< std::string,1 > > _4067){ return new mosek::fusion::StringSet(_4067); }mosek::fusion::StringSet::StringSet  (std::shared_ptr< monty::ndarray< std::string,1 > > _4067) :    StringSet(new mosek::fusion::p_StringSet(this)){ mosek::fusion::p_StringSet::_get_impl(this)->_initialize(_4067); }void mosek::fusion::p_StringSet::_initialize  (std::shared_ptr< monty::ndarray< std::string,1 > > _4067){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_BaseSet::_initialize((long long)(int)((_4067)->size(0)));(keys = ::mosek::fusion::Utils::Tools::arraycopy(_4067)); }}std::string mosek::fusion::StringSet::indexToString  ( long long _4068) { return mosek::fusion::p_StringSet::_get_impl(this)->indexToString(_4068); }std::string mosek::fusion::p_StringSet::indexToString( long long _4068){ return ((*keys)(_4068)); }std::string mosek::fusion::StringSet::getname  ( std::shared_ptr< monty::ndarray< int,1 > > _4069) { return mosek::fusion::p_StringSet::_get_impl(this)->getname(_4069); }std::string mosek::fusion::p_StringSet::getname( std::shared_ptr< monty::ndarray< int,1 > > _4069){ if (((int)((_4069)->size(0)) != (int)1)){ throw ::mosek::fusion::IndexError(std::string ("Invalid key specification"));}else {}return ((*keys)(((*_4069)((int)0)))); }std::string mosek::fusion::StringSet::getname  ( long long _4070) { return mosek::fusion::p_StringSet::_get_impl(this)->getname(_4070); }std::string mosek::fusion::p_StringSet::getname( long long _4070){ return ((*keys)(_4070)); }monty::rc_ptr< ::mosek::fusion::BaseSet > mosek::fusion::p_StringSet::slice_( std::shared_ptr< monty::ndarray< int,1 > > _4071,std::shared_ptr< monty::ndarray< int,1 > > _4072){ if ((((int)((_4071)->size(0)) != (int)1) || (((int)((_4072)->size(0)) != (int)1) || ((((*_4071)((int)0)) < (int)0) || ((((*_4071)((int)0)) > ((*_4072)((int)0))) || (((*_4072)((int)0)) >= (int)((keys)->size(0)))))))){ throw ::mosek::fusion::SliceError(std::string ("Invalid slice specification"));}else {}return slice_(((*_4071)((int)0)),((*_4072)((int)0))); }monty::rc_ptr< ::mosek::fusion::BaseSet > mosek::fusion::p_StringSet::slice_( int _4073,int _4074){ if (((_4073 < (int)0) || ((_4073 > _4074) || (_4074 > (int)((keys)->size(0)))))){ throw ::mosek::fusion::SliceError(std::string ("Invalid slice specification"));}else {}return ::mosek::fusion::p_StringSet::_new_StringSet(([=]()->std::shared_ptr< monty::ndarray< std::string,1 > > { std::vector< std::string > _8852; for (int _4075=(int)0, _8853=(_4074 - _4073); _4075 < _8853;++_4075)_8852.push_back(((*keys)((_4075 + _4073)))); return std::shared_ptr< monty::ndarray< std::string,1 > >(new monty::ndarray< std::string,1 >(monty::shape(_8852.size()),_8852.begin(),_8852.end())); })()); }monty::rc_ptr< ::mosek::fusion::Set > mosek::fusion::StringSet::slice  ( std::shared_ptr< monty::ndarray< int,1 > > _4076,    std::shared_ptr< monty::ndarray< int,1 > > _4077) { return mosek::fusion::p_StringSet::_get_impl(this)->slice(_4076,_4077); }monty::rc_ptr< ::mosek::fusion::Set > mosek::fusion::p_StringSet::slice( std::shared_ptr< monty::ndarray< int,1 > > _4076,std::shared_ptr< monty::ndarray< int,1 > > _4077){ return slice_(_4076,_4077); }monty::rc_ptr< ::mosek::fusion::Set > mosek::fusion::StringSet::slice  ( int _4078,    int _4079) { return mosek::fusion::p_StringSet::_get_impl(this)->slice(_4078,_4079); }monty::rc_ptr< ::mosek::fusion::Set > mosek::fusion::p_StringSet::slice( int _4078,int _4079){ return slice_(_4078,_4079); }std::string mosek::fusion::StringSet::toString  ( ) { return mosek::fusion::p_StringSet::_get_impl(this)->toString(); }std::string mosek::fusion::p_StringSet::toString( ){ monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _4080 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer(); mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_4080.get())->a(std::string ("{'")).get())->a(((*keys)((int)0))).get())->a(std::string ("'")); { int _4081 = (int)1; for (;(_4081 < (int)((keys)->size(0)));( ++ _4081 )){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_4080.get())->a(std::string (",'")).get())->a(((*keys)(_4081))).get())->a(std::string ("'")); }}mosek::fusion::Utils::p_StringBuffer::_get_impl(_4080.get())->a(std::string ("}")); return mosek::fusion::Utils::p_StringBuffer::_get_impl(_4080.get())->toString(); }long long mosek::fusion::StringSet::stride  ( int _4082) { return mosek::fusion::p_StringSet::_get_impl(this)->stride(_4082); }long long mosek::fusion::p_StringSet::stride( int _4082){ return (long long)1; }void mosek::fusion::p_StringSet::destroy(){keys.reset();}void mosek::fusion::StringSet::destroy() { mosek::fusion::p_StringSet::_get_impl(this)->destroy(); }mosek::fusion::BaseSet::BaseSet(mosek::fusion::p_BaseSet *_impl) : mosek::fusion::Set(_impl) { /*std::cout << "BaseSet()" << this << std::endl; */ }mosek::fusion::BaseSet::~BaseSet() {  /* std::cout << "~BaseSet()" << this << std::endl << std::flush; */ }mosek::fusion::p_BaseSet::p_BaseSet  (::mosek::fusion::BaseSet * _pubthis) :     mosek::fusion::p_Set(_pubthis),    _pubthis(_pubthis){}void mosek::fusion::p_BaseSet::_initialize  (long long _4083){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_Set::_initialize((int)1,_4083);}}int mosek::fusion::BaseSet::dim  ( int _4084) { return mosek::fusion::p_BaseSet::_get_impl(this)->dim(_4084); }int mosek::fusion::p_BaseSet::dim( int _4084){ if ((_4084 < (int)0)){ throw ::mosek::fusion::IndexError(std::string ("Invalid dimension"));}else if ((_4084 > (int)0)){ return (int)1; }else { return (int)size; }}void mosek::fusion::p_BaseSet::destroy(){}void mosek::fusion::BaseSet::destroy() { mosek::fusion::p_BaseSet::_get_impl(this)->destroy(); }mosek::fusion::NDSet::NDSet(mosek::fusion::p_NDSet *_impl) : mosek::fusion::Set(_impl) { /*std::cout << "NDSet()" << this << std::endl; */ }mosek::fusion::NDSet::~NDSet() {  /* std::cout << "~NDSet()" << this << std::endl << std::flush; */ }mosek::fusion::p_NDSet::p_NDSet  (::mosek::fusion::NDSet * _pubthis) :     mosek::fusion::p_Set(_pubthis),    _pubthis(_pubthis){}mosek::fusion::NDSet::t mosek::fusion::p_NDSet::_new_NDSet  (int _4085,    int _4086,    int _4087){ return new mosek::fusion::NDSet(_4085,_4086,_4087); }mosek::fusion::NDSet::NDSet  (int _4085,    int _4086,    int _4087) :    NDSet(new mosek::fusion::p_NDSet(this)){ mosek::fusion::p_NDSet::_get_impl(this)->_initialize(_4085,_4086,_4087); }void mosek::fusion::p_NDSet::_initialize  (int _4085,    int _4086,    int _4087){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_Set::_initialize((int)3,(long long)((_4085 * _4086) * _4087));(dimdef = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{_4085,_4086,_4087})); (strides = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >{(long long)(_4086 * _4087),(long long)_4087,(long long)1})); }}mosek::fusion::NDSet::t mosek::fusion::p_NDSet::_new_NDSet  (int _4088,    int _4089){ return new mosek::fusion::NDSet(_4088,_4089); }mosek::fusion::NDSet::NDSet  (int _4088,    int _4089) :    NDSet(new mosek::fusion::p_NDSet(this)){ mosek::fusion::p_NDSet::_get_impl(this)->_initialize(_4088,_4089); }void mosek::fusion::p_NDSet::_initialize  (int _4088,    int _4089){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_Set::_initialize((int)2,(long long)(_4088 * _4089));(dimdef = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{_4088,_4089})); (strides = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >{(long long)_4089,(long long)1})); }}mosek::fusion::NDSet::t mosek::fusion::p_NDSet::_new_NDSet  (std::shared_ptr< monty::ndarray< int,1 > > _4090){ return new mosek::fusion::NDSet(_4090); }mosek::fusion::NDSet::NDSet  (std::shared_ptr< monty::ndarray< int,1 > > _4090) :    NDSet(new mosek::fusion::p_NDSet(this)){ mosek::fusion::p_NDSet::_get_impl(this)->_initialize(_4090); }void mosek::fusion::p_NDSet::_initialize  (std::shared_ptr< monty::ndarray< int,1 > > _4090){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_Set::_initialize((int)((_4090)->size(0)),::mosek::fusion::p_NDSet::sumdims(_4090));int _8854 = (int)0; int _8855 = nd; for (int _4091 = _8854;_4091<_8855;++_4091){ if ((((*_4090)(_4091)) < (int)0)){ throw ::mosek::fusion::SliceError(std::string ("Negative dimension size"));}else {}}(dimdef = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _8856; for (int _4092=(int)0, _8857=(int)((_4090)->size(0)); _4092 < _8857;++_4092)_8856.push_back(((*_4090)(_4092))); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8856.size()),_8856.begin(),_8856.end())); })()); (strides = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(nd)))); (((*strides)((nd - (int)1))) = (long long)1); { int _4093 = (nd - (int)1); for (;(_4093 > (int)0);( -- _4093 )){ (((*strides)((_4093 - (int)1))) = (((*strides)(_4093)) * ((*dimdef)(_4093)))); }}}}std::string mosek::fusion::NDSet::indexToString  ( long long _4094) { return mosek::fusion::p_NDSet::_get_impl(this)->indexToString(_4094); }std::string mosek::fusion::p_NDSet::indexToString( long long _4094){ monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _4095 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer(); std::shared_ptr< monty::ndarray< int,1 > > _4096 = idxtokey(_4094); mosek::fusion::Utils::p_StringBuffer::_get_impl(_4095.get())->a(((*_4096)((int)0))); int _8858 = (int)1; int _8859 = (int)((_4096)->size(0)); for (int _4097 = _8858;_4097<_8859;++_4097){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_4095.get())->a(std::string (",")).get())->a(((*_4096)(_4097))); }return mosek::fusion::Utils::p_StringBuffer::_get_impl(_4095.get())->toString(); }std::string mosek::fusion::NDSet::getname  ( std::shared_ptr< monty::ndarray< int,1 > > _4098) { return mosek::fusion::p_NDSet::_get_impl(this)->getname(_4098); }std::string mosek::fusion::p_NDSet::getname( std::shared_ptr< monty::ndarray< int,1 > > _4098){ if ((nd != (int)((_4098)->size(0)))){ throw ::mosek::fusion::DimensionError(std::string ("Key dimensions do not match set dimensions."));}else {}{ int _4099 = (int)0; for (;(_4099 < nd);( ++ _4099 )){ if (((((*_4098)(_4099)) < (int)0) || (((*_4098)(_4099)) >= (((*dimdef)(_4099)) + (int)1)))){ throw ::mosek::fusion::IndexError(std::string ("Key dimensions do not match set dimensions."));}else {}}}monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _4100 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer(); mosek::fusion::Utils::p_StringBuffer::_get_impl(_4100.get())->a(((*_4098)((int)0))); int _8860 = (int)1; int _8861 = nd; for (int _4101 = _8860;_4101<_8861;++_4101){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_4100.get())->a(std::string (",")).get())->a(((*_4098)(_4101))); }return mosek::fusion::Utils::p_StringBuffer::_get_impl(_4100.get())->toString(); }std::string mosek::fusion::NDSet::getname  ( long long _4102) { return mosek::fusion::p_NDSet::_get_impl(this)->getname(_4102); }std::string mosek::fusion::p_NDSet::getname( long long _4102){ if ((nd == (int)1)){ std::shared_ptr< monty::ndarray< long long,1 > > _4103 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(nd))); long long _4104 = _4102; int _8862 = (int)0; int _8863 = nd; for (int _4105 = _8862;_4105<_8863;++_4105){ (((*_4103)(_4105)) = (_4104 / ((*strides)(_4105)))); (_4104 = (_4104 - (((*_4103)(_4105)) * ((*strides)(_4105))))); }monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _4106 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer(); mosek::fusion::Utils::p_StringBuffer::_get_impl(_4106.get())->a(_4102); return mosek::fusion::Utils::p_StringBuffer::_get_impl(_4106.get())->toString(); }else { return _pubthis->getname(idxtokey(_4102)); }}int mosek::fusion::NDSet::dim  ( int _4107) { return mosek::fusion::p_NDSet::_get_impl(this)->dim(_4107); }int mosek::fusion::p_NDSet::dim( int _4107){ return ([&]() -> int { if ( (_4107 >= nd)) return ((int)1); else return (((*dimdef)(_4107))); })(); }monty::rc_ptr< ::mosek::fusion::Set > mosek::fusion::NDSet::slice  ( std::shared_ptr< monty::ndarray< int,1 > > _4108,    std::shared_ptr< monty::ndarray< int,1 > > _4109) { return mosek::fusion::p_NDSet::_get_impl(this)->slice(_4108,_4109); }monty::rc_ptr< ::mosek::fusion::Set > mosek::fusion::p_NDSet::slice( std::shared_ptr< monty::ndarray< int,1 > > _4108,std::shared_ptr< monty::ndarray< int,1 > > _4109){ if (((nd != (int)((_4108)->size(0))) || (nd != (int)((_4109)->size(0))))){ throw ::mosek::fusion::SliceError(std::string ("Slice dimensions do not match set dimensions."));}else {}{ int _4110 = (int)0; for (;(_4110 < nd);( ++ _4110 )){ if (((((*_4108)(_4110)) < (int)0) || ((((*_4109)(_4110)) < ((*_4108)(_4110))) || (((*_4109)(_4110)) > ((*dimdef)(_4110)))))){ throw ::mosek::fusion::SliceError(std::string ("Slice is out of bounds."));}else {}}}std::shared_ptr< monty::ndarray< int,1 > > _4111 = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _8864; for (int _4112=(int)0, _8865=nd; _4112 < _8865;++_4112)_8864.push_back((((*_4109)(_4112)) - ((*_4108)(_4112)))); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8864.size()),_8864.begin(),_8864.end())); })(); return ::mosek::fusion::p_NDSet::_new_NDSet(_4111); }monty::rc_ptr< ::mosek::fusion::Set > mosek::fusion::NDSet::slice  ( int _4113,    int _4114) { return mosek::fusion::p_NDSet::_get_impl(this)->slice(_4113,_4114); }monty::rc_ptr< ::mosek::fusion::Set > mosek::fusion::p_NDSet::slice( int _4113,int _4114){ if ((nd != (int)1)){ throw ::mosek::fusion::SliceError(std::string ("Slice dimensions do not match set dimensions."));}else if (((_4113 < (int)0) || ((_4114 < _4113) || (_4114 > size)))){ throw ::mosek::fusion::SliceError(std::string ("Slice dimensions do not match set dimensions."));}else {}return ::mosek::fusion::p_IntSet::_new_IntSet(_4113,_4114); }std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_NDSet::selectidxs( std::shared_ptr< monty::ndarray< std::string,1 > > _4115){ throw ::mosek::fusion::IndexError(std::string ("invalid key type"));}int mosek::fusion::p_NDSet::linear_index_in_dim( int _4116,std::shared_ptr< monty::ndarray< int,1 > > _4117){ throw ::mosek::fusion::IndexError(std::string ("invalid key type"));}int mosek::fusion::p_NDSet::linear_index_in_dim( int _4118,int _4119){ if (((_4118 < (int)0) || (_4118 >= (int)((dimdef)->size(0))))){ throw ::mosek::fusion::IndexError(std::string ("dimension index out of bounds"));}else {}if (((_4119 < (int)0) || (_4119 >= ((*dimdef)(_4118))))){ throw ::mosek::fusion::IndexError(std::string ("key out of bounds"));}else { return _4119; }}long long mosek::fusion::p_NDSet::sumdims( std::shared_ptr< monty::ndarray< int,1 > > _4120){ long long _4121 = (long long)1; int _8866 = (int)0; int _8867 = (int)((_4120)->size(0)); for (int _4122 = _8866;_4122<_8867;++_4122){ (_4121 *= ((*_4120)(_4122))); }return _4121; }long long mosek::fusion::NDSet::stride  ( int _4123) { return mosek::fusion::p_NDSet::_get_impl(this)->stride(_4123); }long long mosek::fusion::p_NDSet::stride( int _4123){ return ((*strides)(_4123)); }void mosek::fusion::p_NDSet::destroy(){strides.reset();dimdef.reset();}void mosek::fusion::NDSet::destroy() { mosek::fusion::p_NDSet::_get_impl(this)->destroy(); }mosek::fusion::Set::Set(mosek::fusion::p_Set *_impl) : _impl(_impl) { /*std::cout << "Set() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::Set::~Set() { delete _impl; _impl = nullptr; }mosek::fusion::p_Set::p_Set  (::mosek::fusion::Set * _pubthis) :     _pubthis(_pubthis){}void mosek::fusion::p_Set::_initialize  (int _4124,    long long _4125){monty::rc_reserve __reserve_this(_pubthis); { { (nd = _4124); (nd_p = _4124); (size = _4125); }}}std::string mosek::fusion::Set::toString  ( ) { return mosek::fusion::p_Set::_get_impl(this)->toString(); }std::string mosek::fusion::p_Set::toString( ){ monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _4126 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer(); mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_4126.get())->a(std::string ("Set(shape=(")).get())->a(_pubthis->dim((int)0)); int _8868 = (int)1; int _8869 = nd; for (int _4127 = _8868;_4127<_8869;++_4127){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_4126.get())->a(std::string (",")).get())->a(_pubthis->dim(_4127)); }mosek::fusion::Utils::p_StringBuffer::_get_impl(_4126.get())->a(std::string ("))")); return mosek::fusion::Utils::p_StringBuffer::_get_impl(_4126.get())->toString(); }long long mosek::fusion::p_Set::linearidx( int _4133,int _4134,int _4135){ return (long long)((((_4133 * _pubthis->dim((int)1)) + _4134) * _pubthis->dim((int)2)) + _4135); }long long mosek::fusion::p_Set::linearidx( int _4136,int _4137){ return ((_4136 * _pubthis->dim((int)1)) + _4137); }long long mosek::fusion::p_Set::linearidx( std::shared_ptr< monty::ndarray< int,1 > > _4138){ long long _4139 = ((*_4138)((int)0)); int _8870 = (int)1; int _8871 = (int)((_4138)->size(0)); for (int _4140 = _8870;_4140<_8871;++_4140){ (_4139 = ((_4139 * _pubthis->dim(_4140)) + ((*_4138)(_4140)))); }return _4139; }std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::Set::idxtokey  ( long long _4141) { return mosek::fusion::p_Set::_get_impl(this)->idxtokey(_4141); }std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_Set::idxtokey( long long _4141){ std::shared_ptr< monty::ndarray< int,1 > > _4142 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(nd_p))); long long _4143 = _4141; int _8872 = (int)0; int _8873 = nd_p; for (int _4144 = _8872;_4144<_8873;++_4144){ (((*_4142)(_4144)) = (int)(_4143 / _pubthis->stride(_4144))); (_4143 = (_4143 % _pubthis->stride(_4144))); }return _4142; }monty::rc_ptr< ::mosek::fusion::Set > mosek::fusion::Set::make  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Set >,1 > > _4149) { return mosek::fusion::p_Set::make(_4149); }monty::rc_ptr< ::mosek::fusion::Set > mosek::fusion::p_Set::make( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Set >,1 > > _4149){ return ::mosek::fusion::p_ProductSet::_new_ProductSet(_4149); }monty::rc_ptr< ::mosek::fusion::Set > mosek::fusion::Set::make  ( monty::rc_ptr< ::mosek::fusion::Set > _4150,    monty::rc_ptr< ::mosek::fusion::Set > _4151) { return mosek::fusion::p_Set::make(_4150,_4151); }monty::rc_ptr< ::mosek::fusion::Set > mosek::fusion::p_Set::make( monty::rc_ptr< ::mosek::fusion::Set > _4150,monty::rc_ptr< ::mosek::fusion::Set > _4151){ return ::mosek::fusion::p_ProductSet::_new_ProductSet(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Set >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Set >,1 >{_4150,_4151})); }monty::rc_ptr< ::mosek::fusion::Set > mosek::fusion::Set::make  ( std::shared_ptr< monty::ndarray< int,1 > > _4152) { return mosek::fusion::p_Set::make(_4152); }monty::rc_ptr< ::mosek::fusion::Set > mosek::fusion::p_Set::make( std::shared_ptr< monty::ndarray< int,1 > > _4152){ return ::mosek::fusion::p_NDSet::_new_NDSet(_4152); }monty::rc_ptr< ::mosek::fusion::Set > mosek::fusion::Set::make  ( int _4153,    int _4154,    int _4155) { return mosek::fusion::p_Set::make(_4153,_4154,_4155); }monty::rc_ptr< ::mosek::fusion::Set > mosek::fusion::p_Set::make( int _4153,int _4154,int _4155){ return ::mosek::fusion::p_NDSet::_new_NDSet(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{_4153,_4154,_4155})); }monty::rc_ptr< ::mosek::fusion::Set > mosek::fusion::Set::make  ( int _4156,    int _4157) { return mosek::fusion::p_Set::make(_4156,_4157); }monty::rc_ptr< ::mosek::fusion::Set > mosek::fusion::p_Set::make( int _4156,int _4157){ return ::mosek::fusion::p_NDSet::_new_NDSet(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{_4156,_4157})); }monty::rc_ptr< ::mosek::fusion::Set > mosek::fusion::Set::make  ( int _4158) { return mosek::fusion::p_Set::make(_4158); }monty::rc_ptr< ::mosek::fusion::Set > mosek::fusion::p_Set::make( int _4158){ return ::mosek::fusion::p_IntSet::_new_IntSet(_4158); }monty::rc_ptr< ::mosek::fusion::Set > mosek::fusion::Set::scalar  ( ) { return mosek::fusion::p_Set::scalar(); }monty::rc_ptr< ::mosek::fusion::Set > mosek::fusion::p_Set::scalar( ){ return ::mosek::fusion::p_Set::make((int)1); }monty::rc_ptr< ::mosek::fusion::Set > mosek::fusion::Set::make  ( std::shared_ptr< monty::ndarray< std::string,1 > > _4159) { return mosek::fusion::p_Set::make(_4159); }monty::rc_ptr< ::mosek::fusion::Set > mosek::fusion::p_Set::make( std::shared_ptr< monty::ndarray< std::string,1 > > _4159){ return ::mosek::fusion::p_StringSet::_new_StringSet(_4159); }int mosek::fusion::Set::realnd  ( ) { return mosek::fusion::p_Set::_get_impl(this)->realnd(); }int mosek::fusion::p_Set::realnd( ){ if ((nd == (int)1)){ return (int)1; }else { int _4160 = (int)0; { int _4161 = (int)0; for (;(_4161 < nd);( ++ _4161 )){ if ((_pubthis->dim(_4161) != (int)1)){ ( ++ _4160 ); }else {}}}if ((_4160 == (int)0)){ ( ++ _4160 ); }else {}return _4160; }}long long mosek::fusion::Set::getSize  ( ) { return mosek::fusion::p_Set::_get_impl(this)->getSize(); }long long mosek::fusion::p_Set::getSize( ){ return size; }bool mosek::fusion::Set::compare  ( monty::rc_ptr< ::mosek::fusion::Set > _4162) { return mosek::fusion::p_Set::_get_impl(this)->compare(_4162); }bool mosek::fusion::p_Set::compare( monty::rc_ptr< ::mosek::fusion::Set > _4162){ if (((size != mosek::fusion::p_Set::_get_impl(_4162)->size) || (_pubthis->realnd() != _4162->realnd()))){ return false; }else {}int _4163 = (int)0; int _4164 = (int)0; while (((_4163 < nd) && (_4164 < mosek::fusion::p_Set::_get_impl(_4162)->nd))) { if ((_pubthis->dim(_4163) == (int)1)){ ( ++ _4163 ); }else if ((_4162->dim(_4164) == (int)1)){ ( ++ _4164 ); }else if ((_pubthis->dim(_4163) != _4162->dim(_4164))){ return false; }else { ( ++ _4163 ); ( ++ _4164 ); }}return true; }void mosek::fusion::p_Set::destroy(){}void mosek::fusion::Set::destroy() { mosek::fusion::p_Set::_get_impl(this)->destroy(); }mosek::fusion::QConeDomain::QConeDomain(mosek::fusion::p_QConeDomain *_impl) : _impl(_impl) { /*std::cout << "QConeDomain() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::QConeDomain::~QConeDomain() { delete _impl; _impl = nullptr; }mosek::fusion::p_QConeDomain::p_QConeDomain  (::mosek::fusion::QConeDomain * _pubthis) :     _pubthis(_pubthis){}mosek::fusion::QConeDomain::t mosek::fusion::p_QConeDomain::_new_QConeDomain  (mosek::fusion::QConeKey _4165,    std::shared_ptr< monty::ndarray< int,1 > > _4166,    int _4167){ return new mosek::fusion::QConeDomain(_4165,_4166,_4167); }mosek::fusion::QConeDomain::QConeDomain  (mosek::fusion::QConeKey _4165,    std::shared_ptr< monty::ndarray< int,1 > > _4166,    int _4167) :    QConeDomain(new mosek::fusion::p_QConeDomain(this)){ mosek::fusion::p_QConeDomain::_get_impl(this)->_initialize(_4165,_4166,_4167); }void mosek::fusion::p_QConeDomain::_initialize  (mosek::fusion::QConeKey _4165,    std::shared_ptr< monty::ndarray< int,1 > > _4166,    int _4167){monty::rc_reserve __reserve_this(_pubthis); { { (shape = ([&]() -> monty::rc_ptr< ::mosek::fusion::Set > { if ( _4166) return (::mosek::fusion::p_Set::make(_4166)); else return (nullptr); })()); (key = _4165); (axisidx = _4167); (int_flag = false); }}}std::string mosek::fusion::p_QConeDomain::domainToString( long long _4168,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _4169){ if ((key == ::mosek::fusion::QConeKey::InQCone)){ if (shape){ std::shared_ptr< monty::ndarray< int,1 > > _4170 = mosek::fusion::p_Set::_get_impl(shape.get())->idxtokey(_4168); mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_4169.get())->a(std::string (" : element (")).get())->a(((*_4170)((int)0))); int _8874 = (int)1; int _8875 = (int)((_4170)->size(0)); for (int _4171 = _8874;_4171<_8875;++_4171){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_4169.get())->a(std::string (",")).get())->a(((*_4170)(_4171))); }mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_4169.get())->a(std::string (") in a quadratic cone of size (")).get())->a(shape->dim((int)0)); int _8876 = (int)1; int _8877 = (int)((_4170)->size(0)); for (int _4172 = _8876;_4172<_8877;++_4172){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_4169.get())->a(std::string (",")).get())->a(shape->dim(_4172)); }mosek::fusion::Utils::p_StringBuffer::_get_impl(_4169.get())->a(std::string (")")); }else { mosek::fusion::Utils::p_StringBuffer::_get_impl(_4169.get())->a(std::string (" : element in a quadratic cone")); }}else if ((key == ::mosek::fusion::QConeKey::InRotatedQCone)){ if (shape){ std::shared_ptr< monty::ndarray< int,1 > > _4173 = mosek::fusion::p_Set::_get_impl(shape.get())->idxtokey(_4168); mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_4169.get())->a(std::string (" : element (")).get())->a(((*_4173)((int)0))); int _8878 = (int)1; int _8879 = (int)((_4173)->size(0)); for (int _4174 = _8878;_4174<_8879;++_4174){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_4169.get())->a(std::string (",")).get())->a(((*_4173)(_4174))); }mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_4169.get())->a(std::string (") in a rotated quadratic cone of size (")).get())->a(shape->dim((int)0)); int _8880 = (int)1; int _8881 = (int)((_4173)->size(0)); for (int _4175 = _8880;_4175<_8881;++_4175){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_4169.get())->a(std::string (",")).get())->a(shape->dim(_4175)); }mosek::fusion::Utils::p_StringBuffer::_get_impl(_4169.get())->a(std::string (")")); }else { mosek::fusion::Utils::p_StringBuffer::_get_impl(_4169.get())->a(std::string (" : element in a rotated quadratic cone")); }}else {}return mosek::fusion::Utils::p_StringBuffer::_get_impl(_4169.get())->toString(); }bool mosek::fusion::p_QConeDomain::match_shape( monty::rc_ptr< ::mosek::fusion::Set > _4176){ return (! shape || shape->compare(_4176)); }monty::rc_ptr< ::mosek::fusion::QConeDomain > mosek::fusion::QConeDomain::integral  ( ) { return mosek::fusion::p_QConeDomain::_get_impl(this)->integral(); }monty::rc_ptr< ::mosek::fusion::QConeDomain > mosek::fusion::p_QConeDomain::integral( ){ (int_flag = true); return _pubthis; }int mosek::fusion::QConeDomain::getAxis  ( ) { return mosek::fusion::p_QConeDomain::_get_impl(this)->getAxis(); }int mosek::fusion::p_QConeDomain::getAxis( ){ return axisidx; }monty::rc_ptr< ::mosek::fusion::QConeDomain > mosek::fusion::QConeDomain::axis  ( int _4177) { return mosek::fusion::p_QConeDomain::_get_impl(this)->axis(_4177); }monty::rc_ptr< ::mosek::fusion::QConeDomain > mosek::fusion::p_QConeDomain::axis( int _4177){ (axisidx = _4177); return _pubthis; }void mosek::fusion::p_QConeDomain::destroy(){shape.reset();}void mosek::fusion::QConeDomain::destroy() { mosek::fusion::p_QConeDomain::_get_impl(this)->destroy(); }mosek::fusion::LinPSDDomain::LinPSDDomain(mosek::fusion::p_LinPSDDomain *_impl) : _impl(_impl) { /*std::cout << "LinPSDDomain() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::LinPSDDomain::~LinPSDDomain() { delete _impl; _impl = nullptr; }mosek::fusion::p_LinPSDDomain::p_LinPSDDomain  (::mosek::fusion::LinPSDDomain * _pubthis) :     _pubthis(_pubthis){}mosek::fusion::LinPSDDomain::t mosek::fusion::p_LinPSDDomain::_new_LinPSDDomain  (monty::rc_ptr< ::mosek::fusion::Set > _4178){ return new mosek::fusion::LinPSDDomain(_4178); }mosek::fusion::LinPSDDomain::LinPSDDomain  (monty::rc_ptr< ::mosek::fusion::Set > _4178) :    LinPSDDomain(new mosek::fusion::p_LinPSDDomain(this)){ mosek::fusion::p_LinPSDDomain::_get_impl(this)->_initialize(_4178); }void mosek::fusion::p_LinPSDDomain::_initialize  (monty::rc_ptr< ::mosek::fusion::Set > _4178){monty::rc_reserve __reserve_this(_pubthis); { { (shape = _4178); }}}void mosek::fusion::p_LinPSDDomain::destroy(){shape.reset();}void mosek::fusion::LinPSDDomain::destroy() { mosek::fusion::p_LinPSDDomain::_get_impl(this)->destroy(); }mosek::fusion::PSDDomain::PSDDomain(mosek::fusion::p_PSDDomain *_impl) : _impl(_impl) { /*std::cout << "PSDDomain() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::PSDDomain::~PSDDomain() { delete _impl; _impl = nullptr; }mosek::fusion::p_PSDDomain::p_PSDDomain  (::mosek::fusion::PSDDomain * _pubthis) :     _pubthis(_pubthis){}mosek::fusion::PSDDomain::t mosek::fusion::p_PSDDomain::_new_PSDDomain  (mosek::fusion::PSDKey _4179,    monty::rc_ptr< ::mosek::fusion::Set > _4180){ return new mosek::fusion::PSDDomain(_4179,_4180); }mosek::fusion::PSDDomain::PSDDomain  (mosek::fusion::PSDKey _4179,    monty::rc_ptr< ::mosek::fusion::Set > _4180) :    PSDDomain(new mosek::fusion::p_PSDDomain(this)){ mosek::fusion::p_PSDDomain::_get_impl(this)->_initialize(_4179,_4180); }void mosek::fusion::p_PSDDomain::_initialize  (mosek::fusion::PSDKey _4179,    monty::rc_ptr< ::mosek::fusion::Set > _4180){monty::rc_reserve __reserve_this(_pubthis); { { (shape = _4180); (key = _4179); }}}std::string mosek::fusion::p_PSDDomain::domainToString( long long _4181,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _4182){ if (shape){ std::shared_ptr< monty::ndarray< int,1 > > _4183 = mosek::fusion::p_Set::_get_impl(shape.get())->idxtokey(_4181); mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_4182.get())->a(std::string (" : element (")).get())->a(((*_4183)((int)0))); int _8882 = (int)1; int _8883 = (int)((_4183)->size(0)); for (int _4184 = _8882;_4184<_8883;++_4184){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_4182.get())->a(std::string (",")).get())->a(((*_4183)(_4184))); }mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_4182.get())->a(std::string (") in a semidefinite cone of size (")).get())->a(shape->dim((int)0)); int _8884 = (int)1; int _8885 = (int)((_4183)->size(0)); for (int _4185 = _8884;_4185<_8885;++_4185){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_4182.get())->a(std::string (",")).get())->a(shape->dim(_4185)); }mosek::fusion::Utils::p_StringBuffer::_get_impl(_4182.get())->a(std::string (")")); }else { mosek::fusion::Utils::p_StringBuffer::_get_impl(_4182.get())->a(std::string (" : element in a semidefinite cone")); }return mosek::fusion::Utils::p_StringBuffer::_get_impl(_4182.get())->toString(); }void mosek::fusion::p_PSDDomain::destroy(){shape.reset();}void mosek::fusion::PSDDomain::destroy() { mosek::fusion::p_PSDDomain::_get_impl(this)->destroy(); }mosek::fusion::SymmetricRangeDomain::SymmetricRangeDomain(mosek::fusion::p_SymmetricRangeDomain *_impl) : mosek::fusion::RangeDomain(_impl) { /*std::cout << "SymmetricRangeDomain()" << this << std::endl; */ }mosek::fusion::SymmetricRangeDomain::~SymmetricRangeDomain() {  /* std::cout << "~SymmetricRangeDomain()" << this << std::endl << std::flush; */ }mosek::fusion::p_SymmetricRangeDomain::p_SymmetricRangeDomain  (::mosek::fusion::SymmetricRangeDomain * _pubthis) :     mosek::fusion::p_RangeDomain(_pubthis),    _pubthis(_pubthis){}mosek::fusion::SymmetricRangeDomain::t mosek::fusion::p_SymmetricRangeDomain::_new_SymmetricRangeDomain  (monty::rc_ptr< ::mosek::fusion::RangeDomain > _4186){ return new mosek::fusion::SymmetricRangeDomain(_4186); }mosek::fusion::SymmetricRangeDomain::SymmetricRangeDomain  (monty::rc_ptr< ::mosek::fusion::RangeDomain > _4186) :    SymmetricRangeDomain(new mosek::fusion::p_SymmetricRangeDomain(this)){ mosek::fusion::p_SymmetricRangeDomain::_get_impl(this)->_initialize(_4186); }void mosek::fusion::p_SymmetricRangeDomain::_initialize  (monty::rc_ptr< ::mosek::fusion::RangeDomain > _4186){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_RangeDomain::_initialize(_4186);if ((shape && ((mosek::fusion::p_Set::_get_impl(shape)->nd != (int)2) || (shape->dim((int)0) != mosek::fusion::p_RangeDomain::_get_impl(_4186)->shape->dim((int)1))))){ throw ::mosek::fusion::DimensionError(std::string ("Only square domains can be symmetric"));}else {}(dim = ([&]() -> int { if ( ! shape) return ((int)0); else return (shape->dim((int)0)); })()); }}void mosek::fusion::p_SymmetricRangeDomain::destroy(){}void mosek::fusion::SymmetricRangeDomain::destroy() { mosek::fusion::p_SymmetricRangeDomain::_get_impl(this)->destroy(); }mosek::fusion::RangeDomain::RangeDomain(mosek::fusion::p_RangeDomain *_impl) : _impl(_impl) { /*std::cout << "RangeDomain() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::RangeDomain::~RangeDomain() { delete _impl; _impl = nullptr; }mosek::fusion::p_RangeDomain::p_RangeDomain  (::mosek::fusion::RangeDomain * _pubthis) :     _pubthis(_pubthis){}mosek::fusion::RangeDomain::t mosek::fusion::p_RangeDomain::_new_RangeDomain  (std::shared_ptr< monty::ndarray< double,1 > > _4187,    std::shared_ptr< monty::ndarray< double,1 > > _4188,    std::shared_ptr< monty::ndarray< int,1 > > _4189,    std::shared_ptr< monty::ndarray< long long,1 > > _4190){ return new mosek::fusion::RangeDomain(_4187,_4188,_4189,_4190); }mosek::fusion::RangeDomain::RangeDomain  (std::shared_ptr< monty::ndarray< double,1 > > _4187,    std::shared_ptr< monty::ndarray< double,1 > > _4188,    std::shared_ptr< monty::ndarray< int,1 > > _4189,    std::shared_ptr< monty::ndarray< long long,1 > > _4190) :    RangeDomain(new mosek::fusion::p_RangeDomain(this)){ mosek::fusion::p_RangeDomain::_get_impl(this)->_initialize(_4187,_4188,_4189,_4190); }void mosek::fusion::p_RangeDomain::_initialize  (std::shared_ptr< monty::ndarray< double,1 > > _4187,    std::shared_ptr< monty::ndarray< double,1 > > _4188,    std::shared_ptr< monty::ndarray< int,1 > > _4189,    std::shared_ptr< monty::ndarray< long long,1 > > _4190){monty::rc_reserve __reserve_this(_pubthis); { { (cardinal_flag = false); (sparse_flag = false); if (! _4189){ (shape = nullptr); }else { (shape = ::mosek::fusion::p_Set::make(_4189)); }if (_4190){ (idxmap = ::mosek::fusion::Utils::p_IntMap::_new_IntMap()); int _8886 = (int)0; int _8887 = (int)((_4187)->size(0)); for (int _4191 = _8886;_4191<_8887;++_4191){ mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->setItem(((*_4190)(_4191)),_4191); }}else { (idxmap = nullptr); }(ub = _4188); (lb = _4187); }}}mosek::fusion::RangeDomain::t mosek::fusion::p_RangeDomain::_new_RangeDomain  (monty::rc_ptr< ::mosek::fusion::RangeDomain > _4192){ return new mosek::fusion::RangeDomain(_4192); }mosek::fusion::RangeDomain::RangeDomain  (monty::rc_ptr< ::mosek::fusion::RangeDomain > _4192) :    RangeDomain(new mosek::fusion::p_RangeDomain(this)){ mosek::fusion::p_RangeDomain::_get_impl(this)->_initialize(_4192); }void mosek::fusion::p_RangeDomain::_initialize  (monty::rc_ptr< ::mosek::fusion::RangeDomain > _4192){monty::rc_reserve __reserve_this(_pubthis); { { (cardinal_flag = mosek::fusion::p_RangeDomain::_get_impl(_4192)->cardinal_flag); (sparse_flag = mosek::fusion::p_RangeDomain::_get_impl(_4192)->sparse_flag); (shape = mosek::fusion::p_RangeDomain::_get_impl(_4192)->shape); (idxmap = mosek::fusion::p_RangeDomain::_get_impl(_4192)->idxmap); (ub = mosek::fusion::p_RangeDomain::_get_impl(_4192)->ub); (lb = mosek::fusion::p_RangeDomain::_get_impl(_4192)->lb); }}}monty::rc_ptr< ::mosek::fusion::SymmetricRangeDomain > mosek::fusion::RangeDomain::symmetric  ( ) { return mosek::fusion::p_RangeDomain::_get_impl(this)->symmetric(); }monty::rc_ptr< ::mosek::fusion::SymmetricRangeDomain > mosek::fusion::p_RangeDomain::symmetric( ){ return ::mosek::fusion::p_SymmetricRangeDomain::_new_SymmetricRangeDomain(_pubthis); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain::sparse  ( ) { return mosek::fusion::p_RangeDomain::_get_impl(this)->sparse(); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_RangeDomain::sparse( ){ (sparse_flag = true); return _pubthis; }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain::integral  ( ) { return mosek::fusion::p_RangeDomain::_get_impl(this)->integral(); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_RangeDomain::integral( ){ (cardinal_flag = true); return _pubthis; }std::string mosek::fusion::p_RangeDomain::domainToString( long long _4193,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _4194){ return mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_4194.get())->a(std::string (" in [ ")).get())->a(get_lb_item(_4193)).get())->a(std::string (",")).get())->a(get_ub_item(_4193)).get())->a(std::string ("]")).get())->toString(); }bool mosek::fusion::p_RangeDomain::match_shape( monty::rc_ptr< ::mosek::fusion::Set > _4195){ if (! shape){ return true; }else { return shape->compare(_4195); }}double mosek::fusion::p_RangeDomain::get_ub_item( long long _4196){ if (idxmap){ if (! ub){ return 0.0; }else { if (mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->hasItem(_4196)){ return ((*ub)(mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->getItem(_4196))); }else { return 0.0; }}}else { if (((int)((ub)->size(0)) == (int)1)){ return ((*ub)((int)0)); }else if (ub){ return ((*ub)(_4196)); }else { return 0.0; }}}double mosek::fusion::p_RangeDomain::get_lb_item( long long _4197){ if (idxmap){ if (! lb){ return 0.0; }else if (mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->hasItem(_4197)){ return ((*lb)(mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->getItem(_4197))); }else { return 0.0; }}else { if (((int)((lb)->size(0)) == (int)1)){ return ((*lb)((int)0)); }else if (lb){ return ((*lb)(_4197)); }else { return 0.0; }}}void mosek::fusion::p_RangeDomain::destroy(){ub.reset();lb.reset();idxmap.reset();shape.reset();}void mosek::fusion::RangeDomain::destroy() { mosek::fusion::p_RangeDomain::_get_impl(this)->destroy(); }mosek::fusion::SymmetricLinearDomain::SymmetricLinearDomain(mosek::fusion::p_SymmetricLinearDomain *_impl) : _impl(_impl) { /*std::cout << "SymmetricLinearDomain() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::SymmetricLinearDomain::~SymmetricLinearDomain() { delete _impl; _impl = nullptr; }mosek::fusion::p_SymmetricLinearDomain::p_SymmetricLinearDomain  (::mosek::fusion::SymmetricLinearDomain * _pubthis) :     _pubthis(_pubthis){}mosek::fusion::SymmetricLinearDomain::t mosek::fusion::p_SymmetricLinearDomain::_new_SymmetricLinearDomain  (monty::rc_ptr< ::mosek::fusion::LinearDomain > _4198){ return new mosek::fusion::SymmetricLinearDomain(_4198); }mosek::fusion::SymmetricLinearDomain::SymmetricLinearDomain  (monty::rc_ptr< ::mosek::fusion::LinearDomain > _4198) :    SymmetricLinearDomain(new mosek::fusion::p_SymmetricLinearDomain(this)){ mosek::fusion::p_SymmetricLinearDomain::_get_impl(this)->_initialize(_4198); }void mosek::fusion::p_SymmetricLinearDomain::_initialize  (monty::rc_ptr< ::mosek::fusion::LinearDomain > _4198){monty::rc_reserve __reserve_this(_pubthis); { { (dom = _4198); (shape = mosek::fusion::p_LinearDomain::_get_impl(_4198)->shape); (key = mosek::fusion::p_LinearDomain::_get_impl(_4198)->key); (cardinal_flag = mosek::fusion::p_LinearDomain::_get_impl(_4198)->cardinal_flag); (sparse_flag = mosek::fusion::p_LinearDomain::_get_impl(_4198)->sparse_flag); if ((shape && ((mosek::fusion::p_Set::_get_impl(shape)->nd != (int)2) || (shape->dim((int)0) != mosek::fusion::p_LinearDomain::_get_impl(_4198)->shape->dim((int)1))))){ throw ::mosek::fusion::DimensionError(std::string ("Only square domains can be symmetric"));}else {}(dim = ([&]() -> int { if ( ! shape) return ((int)0); else return (shape->dim((int)0)); })()); }}}monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::SymmetricLinearDomain::sparse  ( ) { return mosek::fusion::p_SymmetricLinearDomain::_get_impl(this)->sparse(); }monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::p_SymmetricLinearDomain::sparse( ){ (sparse_flag = true); return _pubthis; }monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::SymmetricLinearDomain::integral  ( ) { return mosek::fusion::p_SymmetricLinearDomain::_get_impl(this)->integral(); }monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::p_SymmetricLinearDomain::integral( ){ (cardinal_flag = true); return _pubthis; }std::string mosek::fusion::p_SymmetricLinearDomain::domainToString( long long _4199,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _4200){ return mosek::fusion::p_LinearDomain::_get_impl(dom.get())->domainToString(_4199,_4200); }bool mosek::fusion::p_SymmetricLinearDomain::match_shape( monty::rc_ptr< ::mosek::fusion::Set > _4201){ return mosek::fusion::p_LinearDomain::_get_impl(dom.get())->match_shape(_4201); }double mosek::fusion::p_SymmetricLinearDomain::get_rhs_item( long long _4202){ return mosek::fusion::p_LinearDomain::_get_impl(dom.get())->get_rhs_item(_4202); }void mosek::fusion::p_SymmetricLinearDomain::destroy(){shape.reset();dom.reset();}void mosek::fusion::SymmetricLinearDomain::destroy() { mosek::fusion::p_SymmetricLinearDomain::_get_impl(this)->destroy(); }mosek::fusion::LinearDomain::LinearDomain(mosek::fusion::p_LinearDomain *_impl) : _impl(_impl) { /*std::cout << "LinearDomain() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::LinearDomain::~LinearDomain() { delete _impl; _impl = nullptr; }mosek::fusion::p_LinearDomain::p_LinearDomain  (::mosek::fusion::LinearDomain * _pubthis) :     _pubthis(_pubthis){}mosek::fusion::LinearDomain::t mosek::fusion::p_LinearDomain::_new_LinearDomain  (mosek::fusion::RelationKey _4203,    std::shared_ptr< monty::ndarray< double,1 > > _4204,    std::shared_ptr< monty::ndarray< long long,1 > > _4205,    std::shared_ptr< monty::ndarray< int,1 > > _4206){ return new mosek::fusion::LinearDomain(_4203,_4204,_4205,_4206); }mosek::fusion::LinearDomain::LinearDomain  (mosek::fusion::RelationKey _4203,    std::shared_ptr< monty::ndarray< double,1 > > _4204,    std::shared_ptr< monty::ndarray< long long,1 > > _4205,    std::shared_ptr< monty::ndarray< int,1 > > _4206) :    LinearDomain(new mosek::fusion::p_LinearDomain(this)){ mosek::fusion::p_LinearDomain::_get_impl(this)->_initialize(_4203,_4204,_4205,_4206); }void mosek::fusion::p_LinearDomain::_initialize  (mosek::fusion::RelationKey _4203,    std::shared_ptr< monty::ndarray< double,1 > > _4204,    std::shared_ptr< monty::ndarray< long long,1 > > _4205,    std::shared_ptr< monty::ndarray< int,1 > > _4206){monty::rc_reserve __reserve_this(_pubthis); { { (shape = ([&]() -> monty::rc_ptr< ::mosek::fusion::Set > { if ( _4206) return (::mosek::fusion::p_Set::make(_4206)); else return (nullptr); })()); (key = _4203); (bnd = _4204); if (_4205){ (inst = ::mosek::fusion::Utils::p_IntMap::_new_IntMap()); int _8888 = (int)0; int _8889 = (int)((_4205)->size(0)); for (int _4207 = _8888;_4207<_8889;++_4207){ mosek::fusion::Utils::p_IntMap::_get_impl(inst.get())->setItem(((*_4205)(_4207)),_4207); }}else { (inst = nullptr); }(cardinal_flag = false); (sparse_flag = false); }}}mosek::fusion::LinearDomain::t mosek::fusion::p_LinearDomain::_new_LinearDomain  (monty::rc_ptr< ::mosek::fusion::LinearDomain > _4208){ return new mosek::fusion::LinearDomain(_4208); }mosek::fusion::LinearDomain::LinearDomain  (monty::rc_ptr< ::mosek::fusion::LinearDomain > _4208) :    LinearDomain(new mosek::fusion::p_LinearDomain(this)){ mosek::fusion::p_LinearDomain::_get_impl(this)->_initialize(_4208); }void mosek::fusion::p_LinearDomain::_initialize  (monty::rc_ptr< ::mosek::fusion::LinearDomain > _4208){monty::rc_reserve __reserve_this(_pubthis); { { (shape = mosek::fusion::p_LinearDomain::_get_impl(_4208)->shape); (inst = mosek::fusion::p_LinearDomain::_get_impl(_4208)->inst); (bnd = mosek::fusion::p_LinearDomain::_get_impl(_4208)->bnd); (key = mosek::fusion::p_LinearDomain::_get_impl(_4208)->key); (cardinal_flag = mosek::fusion::p_LinearDomain::_get_impl(_4208)->cardinal_flag); (sparse_flag = mosek::fusion::p_LinearDomain::_get_impl(_4208)->sparse_flag); }}}monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::LinearDomain::symmetric  ( ) { return mosek::fusion::p_LinearDomain::_get_impl(this)->symmetric(); }monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::p_LinearDomain::symmetric( ){ return ::mosek::fusion::p_SymmetricLinearDomain::_new_SymmetricLinearDomain(_pubthis); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain::sparse  ( ) { return mosek::fusion::p_LinearDomain::_get_impl(this)->sparse(); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_LinearDomain::sparse( ){ (sparse_flag = true); return _pubthis; }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain::integral  ( ) { return mosek::fusion::p_LinearDomain::_get_impl(this)->integral(); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_LinearDomain::integral( ){ (cardinal_flag = true); return _pubthis; }std::string mosek::fusion::p_LinearDomain::domainToString( long long _4209,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _4210){ if ((key == ::mosek::fusion::RelationKey::EqualsTo)){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_4210.get())->a(std::string (" = ")).get())->a(get_rhs_item(_4209)); }else if ((key == ::mosek::fusion::RelationKey::LessThan)){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_4210.get())->a(std::string (" <= ")).get())->a(get_rhs_item(_4209)); }else if ((key == ::mosek::fusion::RelationKey::GreaterThan)){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_4210.get())->a(std::string (" >= ")).get())->a(get_rhs_item(_4209)); }else if ((key == ::mosek::fusion::RelationKey::IsFree)){ mosek::fusion::Utils::p_StringBuffer::_get_impl(_4210.get())->a(std::string (" is unbounded")); }else {}return mosek::fusion::Utils::p_StringBuffer::_get_impl(_4210.get())->toString(); }bool mosek::fusion::p_LinearDomain::match_shape( monty::rc_ptr< ::mosek::fusion::Set > _4211){ if (! shape){ return true; }else { return shape->compare(_4211); }}double mosek::fusion::p_LinearDomain::get_rhs_item( long long _4212){ if (inst){ if (mosek::fusion::Utils::p_IntMap::_get_impl(inst.get())->hasItem(_4212)){ return ((*bnd)(mosek::fusion::Utils::p_IntMap::_get_impl(inst.get())->getItem(_4212))); }else { return 0.0; }}else { if (scalable()){ return ([&]() -> double { if ( bnd) return (((*bnd)((int)0))); else return (0.0); })(); }else { return ([&]() -> double { if ( bnd) return (((*bnd)(_4212))); else return (0.0); })(); }}}bool mosek::fusion::p_LinearDomain::scalable( ){ return (! bnd || (((int)((bnd)->size(0)) == (int)1) && ! inst)); }void mosek::fusion::p_LinearDomain::destroy(){bnd.reset();inst.reset();shape.reset();}void mosek::fusion::LinearDomain::destroy() { mosek::fusion::p_LinearDomain::_get_impl(this)->destroy(); }mosek::fusion::Domain::Domain(mosek::fusion::p_Domain *_impl) : _impl(_impl) { /*std::cout << "Domain() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::Domain::~Domain() { delete _impl; _impl = nullptr; }mosek::fusion::p_Domain::p_Domain  (::mosek::fusion::Domain * _pubthis) :     _pubthis(_pubthis){}long long mosek::fusion::p_Domain::dimsize( std::shared_ptr< monty::ndarray< int,1 > > _4213){ long long _4214 = (long long)1; int _8890 = (int)0; int _8891 = (int)((_4213)->size(0)); for (int _4215 = _8890;_4215<_8891;++_4215){ (_4214 *= ((*_4213)(_4215))); }return _4214; }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::mkLinearDomain( mosek::fusion::RelationKey _4216,monty::rc_ptr< ::mosek::fusion::Matrix > _4217){ if (_4217->isSparse()){ std::shared_ptr< monty::ndarray< int,1 > > _4218 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4217->numNonzeros()))); std::shared_ptr< monty::ndarray< int,1 > > _4219 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4217->numNonzeros()))); std::shared_ptr< monty::ndarray< double,1 > > _4220 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_4217->numNonzeros()))); _4217->getDataAsTriplets(_4218,_4219,_4220); std::shared_ptr< monty::ndarray< long long,1 > > _4221 = ([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _8892; for (int _4222=(int)0, _8893=(int)((_4218)->size(0)); _4222 < _8893;++_4222)_8892.push_back(((((*_4218)(_4222)) * mosek::fusion::p_Matrix::_get_impl(_4217)->dimj) + ((*_4219)(_4222)))); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_8892.size()),_8892.begin(),_8892.end())); })(); return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(_4216,_4220,_4221,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{mosek::fusion::p_Matrix::_get_impl(_4217)->dimi,mosek::fusion::p_Matrix::_get_impl(_4217)->dimj})); }else { return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(_4216,_4217->getDataAsArray(),nullptr,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{mosek::fusion::p_Matrix::_get_impl(_4217)->dimi,mosek::fusion::p_Matrix::_get_impl(_4217)->dimj})); }}monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::mkLinearDomain( mosek::fusion::RelationKey _4223,std::shared_ptr< monty::ndarray< double,2 > > _4224){ return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(_4223,([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _8894; for (int _4225=(int)0, _8895=(int)((_4224)->size(0)); _4225 < _8895;++_4225) for (int _4226=(int)0, _8896=(int)((_4224)->size(1)); _4226 < _8896;++_4226)_8894.push_back(((*_4224)(_4225,_4226))); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8894.size()),_8894.begin(),_8894.end())); })(),nullptr,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((_4224)->size(0)),(int)((_4224)->size(1))})); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::mkLinearDomain( mosek::fusion::RelationKey _4227,std::shared_ptr< monty::ndarray< double,1 > > _4228,std::shared_ptr< monty::ndarray< int,1 > > _4229){ return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(_4227,([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _8897; for (int _4230=(int)0, _8898=(int)((_4228)->size(0)); _4230 < _8898;++_4230)_8897.push_back(((*_4228)(_4230))); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8897.size()),_8897.begin(),_8897.end())); })(),nullptr,([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _8899; for (int _4231=(int)0, _8900=(int)((_4229)->size(0)); _4231 < _8900;++_4231)_8899.push_back(((*_4229)(_4231))); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8899.size()),_8899.begin(),_8899.end())); })()); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::mkLinearDomain( mosek::fusion::RelationKey _4232,std::shared_ptr< monty::ndarray< double,1 > > _4233){ return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(_4232,([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _8901; for (int _4234=(int)0, _8902=(int)((_4233)->size(0)); _4234 < _8902;++_4234)_8901.push_back(((*_4233)(_4234))); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8901.size()),_8901.begin(),_8901.end())); })(),nullptr,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((_4233)->size(0))})); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::mkLinearDomain( mosek::fusion::RelationKey _4235,double _4236,std::shared_ptr< monty::ndarray< int,1 > > _4237){ return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(_4235,([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _8903; for (long long _4238=(int)0, _8904=::mosek::fusion::p_Domain::dimsize(_4237); _4238 < _8904;++_4238)_8903.push_back(_4236); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8903.size()),_8903.begin(),_8903.end())); })(),nullptr,([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _8905; for (int _4239=(int)0, _8906=(int)((_4237)->size(0)); _4239 < _8906;++_4239)_8905.push_back(((*_4237)(_4239))); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8905.size()),_8905.begin(),_8905.end())); })()); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::mkLinearDomain( mosek::fusion::RelationKey _4240,double _4241){ return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(_4240,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{_4241}),nullptr,nullptr); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::inRange( std::shared_ptr< monty::ndarray< double,1 > > _4242,std::shared_ptr< monty::ndarray< double,1 > > _4243,std::shared_ptr< monty::ndarray< int,1 > > _4244){ if (((int)((_4242)->size(0)) != (int)((_4243)->size(0)))){ throw ::mosek::fusion::LengthError(std::string ("Mismatching lengths of upper and lower bounds."));}else {}int _8907 = (int)0; int _8908 = (int)((_4243)->size(0)); for (int _4245 = _8907;_4245<_8908;++_4245){ if ((((*_4242)(_4245)) > ((*_4243)(_4245)))){ throw ::mosek::fusion::DomainError(std::string ("Invalid range specified"));}else {}}if ((_4244 && (::mosek::fusion::p_Domain::dimsize(_4244) != (int)((_4242)->size(0))))){ throw ::mosek::fusion::LengthError(std::string ("Mismatching dimensions."));}else {}return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(_4242,_4243,_4244,nullptr); }monty::rc_ptr< ::mosek::fusion::SymmetricRangeDomain > mosek::fusion::Domain::symmetric  ( monty::rc_ptr< ::mosek::fusion::RangeDomain > _4246) { return mosek::fusion::p_Domain::symmetric(_4246); }monty::rc_ptr< ::mosek::fusion::SymmetricRangeDomain > mosek::fusion::p_Domain::symmetric( monty::rc_ptr< ::mosek::fusion::RangeDomain > _4246){ return _4246->symmetric(); }monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::Domain::symmetric  ( monty::rc_ptr< ::mosek::fusion::LinearDomain > _4247) { return mosek::fusion::p_Domain::symmetric(_4247); }monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::p_Domain::symmetric( monty::rc_ptr< ::mosek::fusion::LinearDomain > _4247){ return _4247->symmetric(); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::sparse  ( monty::rc_ptr< ::mosek::fusion::RangeDomain > _4248) { return mosek::fusion::p_Domain::sparse(_4248); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::sparse( monty::rc_ptr< ::mosek::fusion::RangeDomain > _4248){ return _4248->sparse(); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::sparse  ( monty::rc_ptr< ::mosek::fusion::LinearDomain > _4249) { return mosek::fusion::p_Domain::sparse(_4249); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::sparse( monty::rc_ptr< ::mosek::fusion::LinearDomain > _4249){ return _4249->sparse(); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::integral  ( monty::rc_ptr< ::mosek::fusion::RangeDomain > _4250) { return mosek::fusion::p_Domain::integral(_4250); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::integral( monty::rc_ptr< ::mosek::fusion::RangeDomain > _4250){ return _4250->integral(); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::integral  ( monty::rc_ptr< ::mosek::fusion::LinearDomain > _4251) { return mosek::fusion::p_Domain::integral(_4251); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::integral( monty::rc_ptr< ::mosek::fusion::LinearDomain > _4251){ return _4251->integral(); }monty::rc_ptr< ::mosek::fusion::QConeDomain > mosek::fusion::Domain::integral  ( monty::rc_ptr< ::mosek::fusion::QConeDomain > _4252) { return mosek::fusion::p_Domain::integral(_4252); }monty::rc_ptr< ::mosek::fusion::QConeDomain > mosek::fusion::p_Domain::integral( monty::rc_ptr< ::mosek::fusion::QConeDomain > _4252){ return _4252->integral(); }monty::rc_ptr< ::mosek::fusion::QConeDomain > mosek::fusion::Domain::axis  ( monty::rc_ptr< ::mosek::fusion::QConeDomain > _4253,    int _4254) { return mosek::fusion::p_Domain::axis(_4253,_4254); }monty::rc_ptr< ::mosek::fusion::QConeDomain > mosek::fusion::p_Domain::axis( monty::rc_ptr< ::mosek::fusion::QConeDomain > _4253,int _4254){ return _4253->axis(_4254); }monty::rc_ptr< ::mosek::fusion::QConeDomain > mosek::fusion::Domain::inRotatedQCone  ( std::shared_ptr< monty::ndarray< int,1 > > _4255) { return mosek::fusion::p_Domain::inRotatedQCone(_4255); }monty::rc_ptr< ::mosek::fusion::QConeDomain > mosek::fusion::p_Domain::inRotatedQCone( std::shared_ptr< monty::ndarray< int,1 > > _4255){ return ::mosek::fusion::p_QConeDomain::_new_QConeDomain(::mosek::fusion::QConeKey::InRotatedQCone,([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _8909; for (int _4256=(int)0, _8910=(int)((_4255)->size(0)); _4256 < _8910;++_4256)_8909.push_back(((*_4255)(_4256))); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8909.size()),_8909.begin(),_8909.end())); })(),((int)((_4255)->size(0)) - (int)1)); }monty::rc_ptr< ::mosek::fusion::QConeDomain > mosek::fusion::Domain::inRotatedQCone  ( int _4257,    int _4258) { return mosek::fusion::p_Domain::inRotatedQCone(_4257,_4258); }monty::rc_ptr< ::mosek::fusion::QConeDomain > mosek::fusion::p_Domain::inRotatedQCone( int _4257,int _4258){ return ::mosek::fusion::p_QConeDomain::_new_QConeDomain(::mosek::fusion::QConeKey::InRotatedQCone,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{_4257,_4258}),(int)1); }monty::rc_ptr< ::mosek::fusion::QConeDomain > mosek::fusion::Domain::inRotatedQCone  ( int _4259) { return mosek::fusion::p_Domain::inRotatedQCone(_4259); }monty::rc_ptr< ::mosek::fusion::QConeDomain > mosek::fusion::p_Domain::inRotatedQCone( int _4259){ return ::mosek::fusion::p_QConeDomain::_new_QConeDomain(::mosek::fusion::QConeKey::InRotatedQCone,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{_4259}),(int)0); }monty::rc_ptr< ::mosek::fusion::QConeDomain > mosek::fusion::Domain::inRotatedQCone  ( ) { return mosek::fusion::p_Domain::inRotatedQCone(); }monty::rc_ptr< ::mosek::fusion::QConeDomain > mosek::fusion::p_Domain::inRotatedQCone( ){ return ::mosek::fusion::p_QConeDomain::_new_QConeDomain(::mosek::fusion::QConeKey::InRotatedQCone,nullptr,(int)0); }monty::rc_ptr< ::mosek::fusion::QConeDomain > mosek::fusion::Domain::inQCone  ( std::shared_ptr< monty::ndarray< int,1 > > _4260) { return mosek::fusion::p_Domain::inQCone(_4260); }monty::rc_ptr< ::mosek::fusion::QConeDomain > mosek::fusion::p_Domain::inQCone( std::shared_ptr< monty::ndarray< int,1 > > _4260){ return ::mosek::fusion::p_QConeDomain::_new_QConeDomain(::mosek::fusion::QConeKey::InQCone,([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _8911; for (int _4261=(int)0, _8912=(int)((_4260)->size(0)); _4261 < _8912;++_4261)_8911.push_back(((*_4260)(_4261))); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8911.size()),_8911.begin(),_8911.end())); })(),((int)((_4260)->size(0)) - (int)1)); }monty::rc_ptr< ::mosek::fusion::QConeDomain > mosek::fusion::Domain::inQCone  ( int _4262,    int _4263) { return mosek::fusion::p_Domain::inQCone(_4262,_4263); }monty::rc_ptr< ::mosek::fusion::QConeDomain > mosek::fusion::p_Domain::inQCone( int _4262,int _4263){ return ::mosek::fusion::p_QConeDomain::_new_QConeDomain(::mosek::fusion::QConeKey::InQCone,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{_4262,_4263}),(int)1); }monty::rc_ptr< ::mosek::fusion::QConeDomain > mosek::fusion::Domain::inQCone  ( int _4264) { return mosek::fusion::p_Domain::inQCone(_4264); }monty::rc_ptr< ::mosek::fusion::QConeDomain > mosek::fusion::p_Domain::inQCone( int _4264){ return ::mosek::fusion::p_QConeDomain::_new_QConeDomain(::mosek::fusion::QConeKey::InQCone,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{_4264}),(int)0); }monty::rc_ptr< ::mosek::fusion::QConeDomain > mosek::fusion::Domain::inQCone  ( ) { return mosek::fusion::p_Domain::inQCone(); }monty::rc_ptr< ::mosek::fusion::QConeDomain > mosek::fusion::p_Domain::inQCone( ){ return ::mosek::fusion::p_QConeDomain::_new_QConeDomain(::mosek::fusion::QConeKey::InQCone,nullptr,(int)0); }monty::rc_ptr< ::mosek::fusion::LinPSDDomain > mosek::fusion::Domain::isLinPSD  ( int _4265,    int _4266) { return mosek::fusion::p_Domain::isLinPSD(_4265,_4266); }monty::rc_ptr< ::mosek::fusion::LinPSDDomain > mosek::fusion::p_Domain::isLinPSD( int _4265,int _4266){ return ::mosek::fusion::p_LinPSDDomain::_new_LinPSDDomain(::mosek::fusion::Set::t(::mosek::fusion::p_NDSet::_new_NDSet(((_4265 * (_4265 + (int)1)) / (int)2),_4266))); }monty::rc_ptr< ::mosek::fusion::LinPSDDomain > mosek::fusion::Domain::isLinPSD  ( int _4267) { return mosek::fusion::p_Domain::isLinPSD(_4267); }monty::rc_ptr< ::mosek::fusion::LinPSDDomain > mosek::fusion::p_Domain::isLinPSD( int _4267){ return ::mosek::fusion::p_LinPSDDomain::_new_LinPSDDomain(::mosek::fusion::Set::t(::mosek::fusion::p_IntSet::_new_IntSet(((_4267 * (_4267 + (int)1)) / (int)2)))); }monty::rc_ptr< ::mosek::fusion::LinPSDDomain > mosek::fusion::Domain::isLinPSD  ( ) { return mosek::fusion::p_Domain::isLinPSD(); }monty::rc_ptr< ::mosek::fusion::LinPSDDomain > mosek::fusion::p_Domain::isLinPSD( ){ return ::mosek::fusion::p_LinPSDDomain::_new_LinPSDDomain(::mosek::fusion::Set::t(nullptr)); }monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::Domain::isTrilPSD  ( int _4268,    int _4269) { return mosek::fusion::p_Domain::isTrilPSD(_4268,_4269); }monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::p_Domain::isTrilPSD( int _4268,int _4269){ return ::mosek::fusion::p_PSDDomain::_new_PSDDomain(::mosek::fusion::PSDKey::IsTrilPSD,::mosek::fusion::Set::t(::mosek::fusion::p_NDSet::_new_NDSet(_4268,_4268,_4269))); }monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::Domain::isTrilPSD  ( int _4270) { return mosek::fusion::p_Domain::isTrilPSD(_4270); }monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::p_Domain::isTrilPSD( int _4270){ return ::mosek::fusion::p_PSDDomain::_new_PSDDomain(::mosek::fusion::PSDKey::IsTrilPSD,::mosek::fusion::Set::t(::mosek::fusion::p_NDSet::_new_NDSet(_4270,_4270,(int)1))); }monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::Domain::isTrilPSD  ( ) { return mosek::fusion::p_Domain::isTrilPSD(); }monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::p_Domain::isTrilPSD( ){ return ::mosek::fusion::p_PSDDomain::_new_PSDDomain(::mosek::fusion::PSDKey::IsTrilPSD,::mosek::fusion::Set::t(nullptr)); }monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::Domain::inPSDCone  ( int _4271,    int _4272) { return mosek::fusion::p_Domain::inPSDCone(_4271,_4272); }monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::p_Domain::inPSDCone( int _4271,int _4272){ return ::mosek::fusion::p_PSDDomain::_new_PSDDomain(::mosek::fusion::PSDKey::IsSymPSD,::mosek::fusion::Set::t(::mosek::fusion::p_NDSet::_new_NDSet(_4271,_4271,_4272))); }monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::Domain::inPSDCone  ( int _4273) { return mosek::fusion::p_Domain::inPSDCone(_4273); }monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::p_Domain::inPSDCone( int _4273){ return ::mosek::fusion::p_PSDDomain::_new_PSDDomain(::mosek::fusion::PSDKey::IsSymPSD,::mosek::fusion::Set::t(::mosek::fusion::p_NDSet::_new_NDSet(_4273,_4273,(int)1))); }monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::Domain::inPSDCone  ( ) { return mosek::fusion::p_Domain::inPSDCone(); }monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::p_Domain::inPSDCone( ){ return ::mosek::fusion::p_PSDDomain::_new_PSDDomain(::mosek::fusion::PSDKey::IsSymPSD,::mosek::fusion::Set::t(nullptr)); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::binary  ( ) { return mosek::fusion::p_Domain::binary(); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::binary( ){ return ::mosek::fusion::p_Domain::inRange(0.0,1.0)->integral(); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::binary  ( std::shared_ptr< monty::ndarray< int,1 > > _4274) { return mosek::fusion::p_Domain::binary(_4274); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::binary( std::shared_ptr< monty::ndarray< int,1 > > _4274){ return ::mosek::fusion::p_Domain::inRange(([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _8913; for (long long _4275=(int)0, _8914=::mosek::fusion::p_Domain::dimsize(_4274); _4275 < _8914;++_4275)_8913.push_back(0.0); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8913.size()),_8913.begin(),_8913.end())); })(),([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _8915; for (long long _4276=(int)0, _8916=::mosek::fusion::p_Domain::dimsize(_4274); _4276 < _8916;++_4276)_8915.push_back(1.0); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8915.size()),_8915.begin(),_8915.end())); })(),_4274)->integral(); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::binary  ( int _4277,    int _4278) { return mosek::fusion::p_Domain::binary(_4277,_4278); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::binary( int _4277,int _4278){ return ::mosek::fusion::p_Domain::inRange(([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _8917; for (int _4279=(int)0, _8918=(_4278 * _4277); _4279 < _8918;++_4279)_8917.push_back(0.0); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8917.size()),_8917.begin(),_8917.end())); })(),([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _8919; for (int _4280=(int)0, _8920=(_4278 * _4277); _4280 < _8920;++_4280)_8919.push_back(1.0); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8919.size()),_8919.begin(),_8919.end())); })(),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{_4277,_4278}))->integral(); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::binary  ( int _4281) { return mosek::fusion::p_Domain::binary(_4281); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::binary( int _4281){ return ::mosek::fusion::p_Domain::inRange(([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _8921; for (int _4282=(int)0, _8922=_4281; _4282 < _8922;++_4282)_8921.push_back(0.0); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8921.size()),_8921.begin(),_8921.end())); })(),([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _8923; for (int _4283=(int)0, _8924=_4281; _4283 < _8924;++_4283)_8923.push_back(1.0); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8923.size()),_8923.begin(),_8923.end())); })(),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{_4281}))->integral(); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::inRange  ( monty::rc_ptr< ::mosek::fusion::Matrix > _4284,    monty::rc_ptr< ::mosek::fusion::Matrix > _4285) { return mosek::fusion::p_Domain::inRange(_4284,_4285); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::inRange( monty::rc_ptr< ::mosek::fusion::Matrix > _4284,monty::rc_ptr< ::mosek::fusion::Matrix > _4285){ return ::mosek::fusion::p_Domain::inRange(_4284->getDataAsArray(),_4285->getDataAsArray(),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{mosek::fusion::p_Matrix::_get_impl(_4284)->dimi,mosek::fusion::p_Matrix::_get_impl(_4284)->dimj})); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::inRange  ( monty::rc_ptr< ::mosek::fusion::Matrix > _4286,    double _4287) { return mosek::fusion::p_Domain::inRange(_4286,_4287); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::inRange( monty::rc_ptr< ::mosek::fusion::Matrix > _4286,double _4287){ return ::mosek::fusion::p_Domain::inRange(_4286->getDataAsArray(),([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _8925; for (int _4288=(int)0, _8926=(mosek::fusion::p_Matrix::_get_impl(_4286)->dimi * mosek::fusion::p_Matrix::_get_impl(_4286)->dimj); _4288 < _8926;++_4288)_8925.push_back(_4287); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8925.size()),_8925.begin(),_8925.end())); })(),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{mosek::fusion::p_Matrix::_get_impl(_4286)->dimi,mosek::fusion::p_Matrix::_get_impl(_4286)->dimj})); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::inRange  ( double _4289,    monty::rc_ptr< ::mosek::fusion::Matrix > _4290) { return mosek::fusion::p_Domain::inRange(_4289,_4290); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::inRange( double _4289,monty::rc_ptr< ::mosek::fusion::Matrix > _4290){ return ::mosek::fusion::p_Domain::inRange(([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _8927; for (int _4291=(int)0, _8928=(mosek::fusion::p_Matrix::_get_impl(_4290)->dimi * mosek::fusion::p_Matrix::_get_impl(_4290)->dimj); _4291 < _8928;++_4291)_8927.push_back(_4289); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8927.size()),_8927.begin(),_8927.end())); })(),_4290->getDataAsArray(),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{mosek::fusion::p_Matrix::_get_impl(_4290)->dimi,mosek::fusion::p_Matrix::_get_impl(_4290)->dimj})); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::inRange  ( std::shared_ptr< monty::ndarray< double,1 > > _4292,    std::shared_ptr< monty::ndarray< double,1 > > _4293) { return mosek::fusion::p_Domain::inRange(_4292,_4293); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::inRange( std::shared_ptr< monty::ndarray< double,1 > > _4292,std::shared_ptr< monty::ndarray< double,1 > > _4293){ return ::mosek::fusion::p_Domain::inRange(_4292,_4293,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((_4292)->size(0))})); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::inRange  ( std::shared_ptr< monty::ndarray< double,1 > > _4294,    double _4295) { return mosek::fusion::p_Domain::inRange(_4294,_4295); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::inRange( std::shared_ptr< monty::ndarray< double,1 > > _4294,double _4295){ return ::mosek::fusion::p_Domain::inRange(_4294,([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _8929; for (int _4296=(int)0, _8930=(int)((_4294)->size(0)); _4296 < _8930;++_4296)_8929.push_back(_4295); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8929.size()),_8929.begin(),_8929.end())); })(),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((_4294)->size(0))})); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::inRange  ( double _4297,    std::shared_ptr< monty::ndarray< double,1 > > _4298) { return mosek::fusion::p_Domain::inRange(_4297,_4298); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::inRange( double _4297,std::shared_ptr< monty::ndarray< double,1 > > _4298){ return ::mosek::fusion::p_Domain::inRange(([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _8931; for (int _4299=(int)0, _8932=(int)((_4298)->size(0)); _4299 < _8932;++_4299)_8931.push_back(_4297); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8931.size()),_8931.begin(),_8931.end())); })(),_4298,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((_4298)->size(0))})); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::inRange  ( double _4300,    double _4301) { return mosek::fusion::p_Domain::inRange(_4300,_4301); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::inRange( double _4300,double _4301){ return ::mosek::fusion::p_Domain::inRange(std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{_4300}),std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{_4301}),nullptr); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::greaterThan  ( monty::rc_ptr< ::mosek::fusion::Matrix > _4302) { return mosek::fusion::p_Domain::greaterThan(_4302); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::greaterThan( monty::rc_ptr< ::mosek::fusion::Matrix > _4302){ return ::mosek::fusion::p_Domain::mkLinearDomain(::mosek::fusion::RelationKey::GreaterThan,_4302); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::greaterThan  ( std::shared_ptr< monty::ndarray< double,1 > > _4303,    std::shared_ptr< monty::ndarray< int,1 > > _4304) { return mosek::fusion::p_Domain::greaterThan(_4303,_4304); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::greaterThan( std::shared_ptr< monty::ndarray< double,1 > > _4303,std::shared_ptr< monty::ndarray< int,1 > > _4304){ return ::mosek::fusion::p_Domain::mkLinearDomain(::mosek::fusion::RelationKey::GreaterThan,_4303); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::greaterThan  ( std::shared_ptr< monty::ndarray< double,2 > > _4305) { return mosek::fusion::p_Domain::greaterThan(_4305); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::greaterThan( std::shared_ptr< monty::ndarray< double,2 > > _4305){ return ::mosek::fusion::p_Domain::mkLinearDomain(::mosek::fusion::RelationKey::GreaterThan,_4305); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::greaterThan  ( std::shared_ptr< monty::ndarray< double,1 > > _4306) { return mosek::fusion::p_Domain::greaterThan(_4306); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::greaterThan( std::shared_ptr< monty::ndarray< double,1 > > _4306){ return ::mosek::fusion::p_Domain::mkLinearDomain(::mosek::fusion::RelationKey::GreaterThan,_4306); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::greaterThan  ( double _4307,    std::shared_ptr< monty::ndarray< int,1 > > _4308) { return mosek::fusion::p_Domain::greaterThan(_4307,_4308); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::greaterThan( double _4307,std::shared_ptr< monty::ndarray< int,1 > > _4308){ return ::mosek::fusion::p_Domain::mkLinearDomain(::mosek::fusion::RelationKey::GreaterThan,_4307,_4308); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::greaterThan  ( double _4309,    int _4310,    int _4311) { return mosek::fusion::p_Domain::greaterThan(_4309,_4310,_4311); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::greaterThan( double _4309,int _4310,int _4311){ return ::mosek::fusion::p_Domain::mkLinearDomain(::mosek::fusion::RelationKey::GreaterThan,_4309,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{_4310,_4311})); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::greaterThan  ( double _4312,    int _4313) { return mosek::fusion::p_Domain::greaterThan(_4312,_4313); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::greaterThan( double _4312,int _4313){ return ::mosek::fusion::p_Domain::mkLinearDomain(::mosek::fusion::RelationKey::GreaterThan,_4312,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{_4313})); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::greaterThan  ( double _4314) { return mosek::fusion::p_Domain::greaterThan(_4314); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::greaterThan( double _4314){ return ::mosek::fusion::p_Domain::mkLinearDomain(::mosek::fusion::RelationKey::GreaterThan,_4314); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::lessThan  ( monty::rc_ptr< ::mosek::fusion::Matrix > _4315) { return mosek::fusion::p_Domain::lessThan(_4315); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::lessThan( monty::rc_ptr< ::mosek::fusion::Matrix > _4315){ return ::mosek::fusion::p_Domain::mkLinearDomain(::mosek::fusion::RelationKey::LessThan,_4315); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::lessThan  ( std::shared_ptr< monty::ndarray< double,1 > > _4316,    std::shared_ptr< monty::ndarray< int,1 > > _4317) { return mosek::fusion::p_Domain::lessThan(_4316,_4317); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::lessThan( std::shared_ptr< monty::ndarray< double,1 > > _4316,std::shared_ptr< monty::ndarray< int,1 > > _4317){ return ::mosek::fusion::p_Domain::mkLinearDomain(::mosek::fusion::RelationKey::LessThan,_4316,_4317); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::lessThan  ( std::shared_ptr< monty::ndarray< double,2 > > _4318) { return mosek::fusion::p_Domain::lessThan(_4318); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::lessThan( std::shared_ptr< monty::ndarray< double,2 > > _4318){ return ::mosek::fusion::p_Domain::mkLinearDomain(::mosek::fusion::RelationKey::LessThan,_4318); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::lessThan  ( std::shared_ptr< monty::ndarray< double,1 > > _4319) { return mosek::fusion::p_Domain::lessThan(_4319); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::lessThan( std::shared_ptr< monty::ndarray< double,1 > > _4319){ return ::mosek::fusion::p_Domain::mkLinearDomain(::mosek::fusion::RelationKey::LessThan,_4319); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::lessThan  ( double _4320,    std::shared_ptr< monty::ndarray< int,1 > > _4321) { return mosek::fusion::p_Domain::lessThan(_4320,_4321); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::lessThan( double _4320,std::shared_ptr< monty::ndarray< int,1 > > _4321){ return ::mosek::fusion::p_Domain::mkLinearDomain(::mosek::fusion::RelationKey::LessThan,_4320,_4321); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::lessThan  ( double _4322,    int _4323,    int _4324) { return mosek::fusion::p_Domain::lessThan(_4322,_4323,_4324); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::lessThan( double _4322,int _4323,int _4324){ return ::mosek::fusion::p_Domain::mkLinearDomain(::mosek::fusion::RelationKey::LessThan,_4322,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{_4323,_4324})); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::lessThan  ( double _4325,    int _4326) { return mosek::fusion::p_Domain::lessThan(_4325,_4326); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::lessThan( double _4325,int _4326){ return ::mosek::fusion::p_Domain::mkLinearDomain(::mosek::fusion::RelationKey::LessThan,_4325,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{_4326})); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::lessThan  ( double _4327) { return mosek::fusion::p_Domain::lessThan(_4327); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::lessThan( double _4327){ return ::mosek::fusion::p_Domain::mkLinearDomain(::mosek::fusion::RelationKey::LessThan,_4327); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::equalsTo  ( monty::rc_ptr< ::mosek::fusion::Matrix > _4328) { return mosek::fusion::p_Domain::equalsTo(_4328); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::equalsTo( monty::rc_ptr< ::mosek::fusion::Matrix > _4328){ return ::mosek::fusion::p_Domain::mkLinearDomain(::mosek::fusion::RelationKey::EqualsTo,_4328); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::equalsTo  ( std::shared_ptr< monty::ndarray< double,1 > > _4329,    std::shared_ptr< monty::ndarray< int,1 > > _4330) { return mosek::fusion::p_Domain::equalsTo(_4329,_4330); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::equalsTo( std::shared_ptr< monty::ndarray< double,1 > > _4329,std::shared_ptr< monty::ndarray< int,1 > > _4330){ return ::mosek::fusion::p_Domain::mkLinearDomain(::mosek::fusion::RelationKey::EqualsTo,_4329,_4330); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::equalsTo  ( std::shared_ptr< monty::ndarray< double,2 > > _4331) { return mosek::fusion::p_Domain::equalsTo(_4331); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::equalsTo( std::shared_ptr< monty::ndarray< double,2 > > _4331){ return ::mosek::fusion::p_Domain::mkLinearDomain(::mosek::fusion::RelationKey::EqualsTo,_4331); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::equalsTo  ( std::shared_ptr< monty::ndarray< double,1 > > _4332) { return mosek::fusion::p_Domain::equalsTo(_4332); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::equalsTo( std::shared_ptr< monty::ndarray< double,1 > > _4332){ return ::mosek::fusion::p_Domain::mkLinearDomain(::mosek::fusion::RelationKey::EqualsTo,_4332); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::equalsTo  ( double _4333,    std::shared_ptr< monty::ndarray< int,1 > > _4334) { return mosek::fusion::p_Domain::equalsTo(_4333,_4334); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::equalsTo( double _4333,std::shared_ptr< monty::ndarray< int,1 > > _4334){ return ::mosek::fusion::p_Domain::mkLinearDomain(::mosek::fusion::RelationKey::EqualsTo,_4333,_4334); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::equalsTo  ( double _4335,    int _4336,    int _4337) { return mosek::fusion::p_Domain::equalsTo(_4335,_4336,_4337); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::equalsTo( double _4335,int _4336,int _4337){ return ::mosek::fusion::p_Domain::mkLinearDomain(::mosek::fusion::RelationKey::EqualsTo,_4335,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{_4336,_4337})); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::equalsTo  ( double _4338,    int _4339) { return mosek::fusion::p_Domain::equalsTo(_4338,_4339); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::equalsTo( double _4338,int _4339){ return ::mosek::fusion::p_Domain::mkLinearDomain(::mosek::fusion::RelationKey::EqualsTo,_4338,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{_4339})); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::equalsTo  ( double _4340) { return mosek::fusion::p_Domain::equalsTo(_4340); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::equalsTo( double _4340){ return ::mosek::fusion::p_Domain::mkLinearDomain(::mosek::fusion::RelationKey::EqualsTo,_4340); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::unbounded  ( std::shared_ptr< monty::ndarray< int,1 > > _4341) { return mosek::fusion::p_Domain::unbounded(_4341); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::unbounded( std::shared_ptr< monty::ndarray< int,1 > > _4341){ return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::IsFree,nullptr,nullptr,([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _8933; for (int _4342=(int)0, _8934=(int)((_4341)->size(0)); _4342 < _8934;++_4342)_8933.push_back(((*_4341)(_4342))); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8933.size()),_8933.begin(),_8933.end())); })()); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::unbounded  ( int _4343,    int _4344) { return mosek::fusion::p_Domain::unbounded(_4343,_4344); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::unbounded( int _4343,int _4344){ return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::IsFree,nullptr,nullptr,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{_4343,_4344})); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::unbounded  ( int _4345) { return mosek::fusion::p_Domain::unbounded(_4345); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::unbounded( int _4345){ return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::IsFree,nullptr,nullptr,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{_4345})); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::unbounded  ( ) { return mosek::fusion::p_Domain::unbounded(); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::unbounded( ){ return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::IsFree,nullptr,nullptr,nullptr); }void mosek::fusion::p_Domain::destroy(){}void mosek::fusion::Domain::destroy() { mosek::fusion::p_Domain::_get_impl(this)->destroy(); }mosek::fusion::SymmetricExpr::SymmetricExpr(mosek::fusion::p_SymmetricExpr *_impl) : _impl(_impl) { /*std::cout << "SymmetricExpr() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::SymmetricExpr::~SymmetricExpr() { delete _impl; _impl = nullptr; }mosek::fusion::p_SymmetricExpr::p_SymmetricExpr  (::mosek::fusion::SymmetricExpr * _pubthis) :     _pubthis(_pubthis){}mosek::fusion::SymmetricExpr::t mosek::fusion::p_SymmetricExpr::_new_SymmetricExpr  (int _4354,    std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::SymmetricMatrix >,1 > > _4355,    std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _4356,    monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _4357){ return new mosek::fusion::SymmetricExpr(_4354,_4355,_4356,_4357); }mosek::fusion::SymmetricExpr::SymmetricExpr  (int _4354,    std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::SymmetricMatrix >,1 > > _4355,    std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _4356,    monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _4357) :    SymmetricExpr(new mosek::fusion::p_SymmetricExpr(this)){ mosek::fusion::p_SymmetricExpr::_get_impl(this)->_initialize(_4354,_4355,_4356,_4357); }void mosek::fusion::p_SymmetricExpr::_initialize  (int _4354,    std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::SymmetricMatrix >,1 > > _4355,    std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _4356,    monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _4357){monty::rc_reserve __reserve_this(_pubthis); { { (mosek::fusion::p_SymmetricExpr::_get_impl(_pubthis)->n = _4354); (mosek::fusion::p_SymmetricExpr::_get_impl(_pubthis)->Ms = _4355); (mosek::fusion::p_SymmetricExpr::_get_impl(_pubthis)->xs = _4356); (mosek::fusion::p_SymmetricExpr::_get_impl(_pubthis)->b = _4357); }}}monty::rc_ptr< ::mosek::fusion::SymmetricExpr > mosek::fusion::p_SymmetricExpr::add( monty::rc_ptr< ::mosek::fusion::SymmetricExpr > _4358,monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _4359){ if ((mosek::fusion::p_SymmetricExpr::_get_impl(_4358)->n != _4359->getdim())){ throw ::mosek::fusion::DimensionError(std::string ("Dimension does not match"));}else {}return ::mosek::fusion::p_SymmetricExpr::_new_SymmetricExpr(mosek::fusion::p_SymmetricExpr::_get_impl(_4358)->n,mosek::fusion::p_SymmetricExpr::_get_impl(_4358)->Ms,mosek::fusion::p_SymmetricExpr::_get_impl(_4358)->xs,([&]() -> monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > { if ( mosek::fusion::p_SymmetricExpr::_get_impl(_4358)->b) return (mosek::fusion::p_SymmetricExpr::_get_impl(_4358)->b->add(_4359)); else return (_4359); })()); }monty::rc_ptr< ::mosek::fusion::SymmetricExpr > mosek::fusion::p_SymmetricExpr::mul( monty::rc_ptr< ::mosek::fusion::SymmetricExpr > _4360,double _4361){ return ::mosek::fusion::p_SymmetricExpr::_new_SymmetricExpr(mosek::fusion::p_SymmetricExpr::_get_impl(_4360)->n,([=]()->std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::SymmetricMatrix >,1 > > { std::vector< monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > > _8935; for (int _4362=(int)0, _8936=(int)((mosek::fusion::p_SymmetricExpr::_get_impl(_4360)->Ms)->size(0)); _4362 < _8936;++_4362)_8935.push_back(((*mosek::fusion::p_SymmetricExpr::_get_impl(_4360)->Ms)(_4362))->mul(_4361)); return std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::SymmetricMatrix >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::SymmetricMatrix >,1 >(monty::shape(_8935.size()),_8935.begin(),_8935.end())); })(),mosek::fusion::p_SymmetricExpr::_get_impl(_4360)->xs,([&]() -> monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > { if ( mosek::fusion::p_SymmetricExpr::_get_impl(_4360)->b) return (mosek::fusion::p_SymmetricExpr::_get_impl(_4360)->b->mul(_4361)); else return (nullptr); })()); }monty::rc_ptr< ::mosek::fusion::SymmetricExpr > mosek::fusion::p_SymmetricExpr::add( monty::rc_ptr< ::mosek::fusion::SymmetricExpr > _4363,monty::rc_ptr< ::mosek::fusion::SymmetricExpr > _4364){ if ((mosek::fusion::p_SymmetricExpr::_get_impl(_4363)->n != mosek::fusion::p_SymmetricExpr::_get_impl(_4364)->n)){ throw ::mosek::fusion::DimensionError(std::string ("Mismatching dimensions of operands"));}else {}std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::SymmetricMatrix >,1 > > _4365 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::SymmetricMatrix >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::SymmetricMatrix >,1 >(monty::shape(((int)((mosek::fusion::p_SymmetricExpr::_get_impl(_4363)->Ms)->size(0)) + (int)((mosek::fusion::p_SymmetricExpr::_get_impl(_4364)->Ms)->size(0)))))); std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _4366 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >(monty::shape(((int)((mosek::fusion::p_SymmetricExpr::_get_impl(_4363)->xs)->size(0)) + (int)((mosek::fusion::p_SymmetricExpr::_get_impl(_4364)->xs)->size(0)))))); int _4367 = (int)((mosek::fusion::p_SymmetricExpr::_get_impl(_4363)->Ms)->size(0)); int _8937 = (int)0; int _8938 = (int)((mosek::fusion::p_SymmetricExpr::_get_impl(_4363)->Ms)->size(0)); for (int _4368 = _8937;_4368<_8938;++_4368){ (((*_4365)(_4368)) = ((*mosek::fusion::p_SymmetricExpr::_get_impl(_4363)->Ms)(_4368))); }int _8939 = (int)0; int _8940 = (int)((mosek::fusion::p_SymmetricExpr::_get_impl(_4364)->Ms)->size(0)); for (int _4369 = _8939;_4369<_8940;++_4369){ (((*_4365)((_4369 + _4367))) = ((*mosek::fusion::p_SymmetricExpr::_get_impl(_4364)->Ms)(_4369))); }int _4370 = (int)((mosek::fusion::p_SymmetricExpr::_get_impl(_4363)->xs)->size(0)); int _8941 = (int)0; int _8942 = (int)((mosek::fusion::p_SymmetricExpr::_get_impl(_4363)->xs)->size(0)); for (int _4371 = _8941;_4371<_8942;++_4371){ (((*_4366)(_4371)) = ((*mosek::fusion::p_SymmetricExpr::_get_impl(_4363)->xs)(_4371))); }int _8943 = (int)0; int _8944 = (int)((mosek::fusion::p_SymmetricExpr::_get_impl(_4364)->xs)->size(0)); for (int _4372 = _8943;_4372<_8944;++_4372){ (((*_4366)((_4372 + _4370))) = ((*mosek::fusion::p_SymmetricExpr::_get_impl(_4364)->xs)(_4372))); }monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _4373 = ([&]() -> monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > { if ( (! mosek::fusion::p_SymmetricExpr::_get_impl(_4363)->b && ! mosek::fusion::p_SymmetricExpr::_get_impl(_4364)->b)) return (nullptr); else return (([&]() -> monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > { if ( (mosek::fusion::p_SymmetricExpr::_get_impl(_4363)->b && mosek::fusion::p_SymmetricExpr::_get_impl(_4364)->b)) return (mosek::fusion::p_SymmetricExpr::_get_impl(_4363)->b->add(mosek::fusion::p_SymmetricExpr::_get_impl(_4364)->b)); else return (([&]() -> monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > { if ( mosek::fusion::p_SymmetricExpr::_get_impl(_4363)->b) return (mosek::fusion::p_SymmetricExpr::_get_impl(_4363)->b); else return (mosek::fusion::p_SymmetricExpr::_get_impl(_4364)->b); })()); })()); })(); return ::mosek::fusion::p_SymmetricExpr::_new_SymmetricExpr(mosek::fusion::p_SymmetricExpr::_get_impl(_4363)->n,_4365,_4366,_4373); }std::string mosek::fusion::SymmetricExpr::toString  ( ) { return mosek::fusion::p_SymmetricExpr::_get_impl(this)->toString(); }std::string mosek::fusion::p_SymmetricExpr::toString( ){ monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _4374 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer(); mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_4374.get())->a(std::string ("SymmetricExpr( (")).get())->a(n).get())->a(std::string (",")).get())->a(n).get())->a(std::string (") )")); return mosek::fusion::Utils::p_StringBuffer::_get_impl(_4374.get())->toString(); }void mosek::fusion::p_SymmetricExpr::destroy(){xs.reset();b.reset();Ms.reset();}void mosek::fusion::SymmetricExpr::destroy() { mosek::fusion::p_SymmetricExpr::_get_impl(this)->destroy(); }mosek::fusion::Expr::Expr(mosek::fusion::p_Expr *_impl) : _impl(_impl) { /*std::cout << "Expr() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::Expr::~Expr() { delete _impl; _impl = nullptr; }mosek::fusion::p_Expr::p_Expr  (::mosek::fusion::Expr * _pubthis) :     _pubthis(_pubthis){}mosek::fusion::Expr::t mosek::fusion::p_Expr::_new_Expr  (std::shared_ptr< monty::ndarray< long long,1 > > _4375,    std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _4376,    std::shared_ptr< monty::ndarray< long long,1 > > _4377,    std::shared_ptr< monty::ndarray< double,1 > > _4378,    std::shared_ptr< monty::ndarray< double,1 > > _4379,    monty::rc_ptr< ::mosek::fusion::Set > _4380,    std::shared_ptr< monty::ndarray< long long,1 > > _4381){ return new mosek::fusion::Expr(_4375,_4376,_4377,_4378,_4379,_4380,_4381); }mosek::fusion::Expr::Expr  (std::shared_ptr< monty::ndarray< long long,1 > > _4375,    std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _4376,    std::shared_ptr< monty::ndarray< long long,1 > > _4377,    std::shared_ptr< monty::ndarray< double,1 > > _4378,    std::shared_ptr< monty::ndarray< double,1 > > _4379,    monty::rc_ptr< ::mosek::fusion::Set > _4380,    std::shared_ptr< monty::ndarray< long long,1 > > _4381) :    Expr(new mosek::fusion::p_Expr(this)){ mosek::fusion::p_Expr::_get_impl(this)->_initialize(_4375,_4376,_4377,_4378,_4379,_4380,_4381); }void mosek::fusion::p_Expr::_initialize  (std::shared_ptr< monty::ndarray< long long,1 > > _4375,    std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _4376,    std::shared_ptr< monty::ndarray< long long,1 > > _4377,    std::shared_ptr< monty::ndarray< double,1 > > _4378,    std::shared_ptr< monty::ndarray< double,1 > > _4379,    monty::rc_ptr< ::mosek::fusion::Set > _4380,    std::shared_ptr< monty::ndarray< long long,1 > > _4381){monty::rc_reserve __reserve_this(_pubthis); { { (model = ::mosek::fusion::p_Expr::extractModel(_4376)); (shape_p = _4380); (x = _4376); (varsb = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(((int)((x)->size(0)) + (int)1))))); int _8945 = (int)0; int _8946 = (int)((x)->size(0)); for (int _4382 = _8945;_4382<_8946;++_4382){ (((*varsb)((_4382 + (int)1))) = (((*varsb)(_4382)) + mosek::fusion::p_Set::_get_impl(((*x)(_4382))->shape())->size)); }int _4383 = ((int)((_4375)->size(0)) - (int)1); long long _4384 = ((*_4375)(((int)((_4375)->size(0)) - (int)1))); ::mosek::fusion::p_Expr::validateData(_4375,_4376,_4377,_4378,_4379,shape_p,_4381); if (_4381){ (inst = ::mosek::fusion::Utils::Tools::arraycopy(_4381)); }else { (inst = nullptr); }(shape_p = ([&]() -> monty::rc_ptr< ::mosek::fusion::Set > { if ( ! _4380) return (::mosek::fusion::p_Set::make(((int)((_4375)->size(0)) - (int)1))); else return (_4380); })()); (subj = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_4384)))); (cof_v = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_4384)))); (ptrb = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((_4375)->size(0)))))); (bfix = ([&]() -> std::shared_ptr< monty::ndarray< double,1 > > { if ( ! _4379) return (nullptr); else return (std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)((_4379)->size(0)))))); })()); { ::mosek::fusion::Utils::Tools::arraycopy(_4375,(int)0,ptrb,(int)0,(int)((ptrb)->size(0))); ::mosek::fusion::Utils::Tools::arraycopy(_4377,(long long)((int)0),subj,(long long)((int)0),_4384); ::mosek::fusion::Utils::Tools::arraycopy(_4378,(long long)((int)0),cof_v,(long long)((int)0),_4384); if (bfix){ ::mosek::fusion::Utils::Tools::arraycopy(_4379,(int)0,bfix,(int)0,(int)((bfix)->size(0))); }else {}}}}}mosek::fusion::Expr::t mosek::fusion::p_Expr::_new_Expr  (std::shared_ptr< monty::ndarray< long long,1 > > _4385,    std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _4386,    std::shared_ptr< monty::ndarray< long long,1 > > _4387,    std::shared_ptr< monty::ndarray< double,1 > > _4388,    std::shared_ptr< monty::ndarray< double,1 > > _4389,    monty::rc_ptr< ::mosek::fusion::Set > _4390,    std::shared_ptr< monty::ndarray< long long,1 > > _4391,    int _4392){ return new mosek::fusion::Expr(_4385,_4386,_4387,_4388,_4389,_4390,_4391,_4392); }mosek::fusion::Expr::Expr  (std::shared_ptr< monty::ndarray< long long,1 > > _4385,    std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _4386,    std::shared_ptr< monty::ndarray< long long,1 > > _4387,    std::shared_ptr< monty::ndarray< double,1 > > _4388,    std::shared_ptr< monty::ndarray< double,1 > > _4389,    monty::rc_ptr< ::mosek::fusion::Set > _4390,    std::shared_ptr< monty::ndarray< long long,1 > > _4391,    int _4392) :    Expr(new mosek::fusion::p_Expr(this)){ mosek::fusion::p_Expr::_get_impl(this)->_initialize(_4385,_4386,_4387,_4388,_4389,_4390,_4391,_4392); }void mosek::fusion::p_Expr::_initialize  (std::shared_ptr< monty::ndarray< long long,1 > > _4385,    std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _4386,    std::shared_ptr< monty::ndarray< long long,1 > > _4387,    std::shared_ptr< monty::ndarray< double,1 > > _4388,    std::shared_ptr< monty::ndarray< double,1 > > _4389,    monty::rc_ptr< ::mosek::fusion::Set > _4390,    std::shared_ptr< monty::ndarray< long long,1 > > _4391,    int _4392){monty::rc_reserve __reserve_this(_pubthis); { { (model = ::mosek::fusion::p_Expr::extractModel(_4386)); (mosek::fusion::p_Expr::_get_impl(_pubthis)->shape_p = _4390); (x = _4386); (ptrb = _4385); (subj = _4387); (cof_v = _4388); if (((int)((subj)->size(0)) != (int)((cof_v)->size(0)))){ throw ::mosek::fusion::SparseFormatError(std::string ("Mismatching subj and cof"));}else {}(varsb = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(((int)((x)->size(0)) + (int)1))))); int _8947 = (int)0; int _8948 = (int)((x)->size(0)); for (int _4393 = _8947;_4393<_8948;++_4393){ (((*varsb)((_4393 + (int)1))) = (((*varsb)(_4393)) + mosek::fusion::p_Set::_get_impl(((*x)(_4393))->shape())->size)); }(bfix = _4389); (shape_p = ([&]() -> monty::rc_ptr< ::mosek::fusion::Set > { if ( ! _4390) return (::mosek::fusion::p_IntSet::_new_IntSet(((int)((_4385)->size(0)) - (int)1))); else return (_4390); })()); (inst = _4391); }}}mosek::fusion::Expr::t mosek::fusion::p_Expr::_new_Expr  (monty::rc_ptr< ::mosek::fusion::Expression > _4394){ return new mosek::fusion::Expr(_4394); }mosek::fusion::Expr::Expr  (monty::rc_ptr< ::mosek::fusion::Expression > _4394) :    Expr(new mosek::fusion::p_Expr(this)){ mosek::fusion::p_Expr::_get_impl(this)->_initialize(_4394); }void mosek::fusion::p_Expr::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _4394){monty::rc_reserve __reserve_this(_pubthis); { { monty::rc_ptr< ::mosek::fusion::Expression > _8949 = _4394; if (nullptr != dynamic_cast< ::mosek::fusion::Expr* >(_8949.get())) {::mosek::fusion::Expr::t _4395(dynamic_cast< ::mosek::fusion::Expr* >(_8949.get()));{ (model = mosek::fusion::p_Expr::_get_impl(_4395)->model); (shape_p = mosek::fusion::p_Expr::_get_impl(_4395)->shape_p); (ptrb = mosek::fusion::p_Expr::_get_impl(_4395)->ptrb); (subj = mosek::fusion::p_Expr::_get_impl(_4395)->subj); (x = mosek::fusion::p_Expr::_get_impl(_4395)->x); (cof_v = mosek::fusion::p_Expr::_get_impl(_4395)->cof_v); (bfix = mosek::fusion::p_Expr::_get_impl(_4395)->bfix); (varsb = mosek::fusion::p_Expr::_get_impl(_4395)->varsb); (inst = mosek::fusion::p_Expr::_get_impl(_4395)->inst); }}else {mosek::fusion::Expression::t _4396 = _8949;{ monty::rc_ptr< ::mosek::fusion::FlatExpr > _4397 = _4396->eval(); (model = _4394->getModel()); (shape_p = mosek::fusion::p_FlatExpr::_get_impl(_4397)->shape); (ptrb = mosek::fusion::p_FlatExpr::_get_impl(_4397)->ptrb); (subj = mosek::fusion::p_FlatExpr::_get_impl(_4397)->subj); (x = mosek::fusion::p_FlatExpr::_get_impl(_4397)->x); (cof_v = mosek::fusion::p_FlatExpr::_get_impl(_4397)->cof); (bfix = mosek::fusion::p_FlatExpr::_get_impl(_4397)->bfix); (varsb = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(((int)((x)->size(0)) + (int)1))))); int _8950 = (int)0; int _8951 = (int)((x)->size(0)); for (int _4398 = _8950;_4398<_8951;++_4398){ (((*varsb)((_4398 + (int)1))) = (((*varsb)(_4398)) + mosek::fusion::p_Set::_get_impl(((*x)(_4398))->shape())->size)); }(inst = mosek::fusion::p_FlatExpr::_get_impl(_4397)->inst); }}}}}std::string mosek::fusion::Expr::toString  ( ) { return mosek::fusion::p_Expr::_get_impl(this)->toString(); }std::string mosek::fusion::p_Expr::toString( ){ monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _4399 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer(); mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_4399.get())->a(std::string ("Expr(ndim=(")).get())->a(shape_p->dim((int)0)); int _8952 = (int)1; int _8953 = mosek::fusion::p_Set::_get_impl(shape_p)->nd; for (int _4400 = _8952;_4400<_8953;++_4400){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_4399.get())->a(std::string (",")).get())->a(shape_p->dim(_4400)); }mosek::fusion::Utils::p_StringBuffer::_get_impl(_4399.get())->a(std::string ("),\n     [ ")); if (((int)((ptrb)->size(0)) > (int)1)){ if (! inst){ tostr(_4399,(int)0); int _8954 = (int)1; int _8955 = ((int)((ptrb)->size(0)) - (int)1); for (int _4401 = _8954;_4401<_8955;++_4401){ mosek::fusion::Utils::p_StringBuffer::_get_impl(_4399.get())->a(std::string (",\n       ")); tostr(_4399,_4401); }}else { if (((int)((inst)->size(0)) > (int)0)){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_4399.get())->a(std::string ("(")).get())->a(mosek::fusion::p_Set::_get_impl(shape_p.get())->idxtokey(((*inst)((int)0)))).get())->a(std::string (") -> ")); tostr(_4399,(int)0); int _8956 = (int)1; int _8957 = ((int)((ptrb)->size(0)) - (int)1); for (int _4402 = _8956;_4402<_8957;++_4402){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_4399.get())->a(std::string (",\n       (")).get())->a(mosek::fusion::p_Set::_get_impl(shape_p.get())->idxtokey(((*inst)(_4402)))).get())->a(std::string (") -> ")); tostr(_4399,_4402); }}else {}}}else {}mosek::fusion::Utils::p_StringBuffer::_get_impl(_4399.get())->a(std::string (" ])")); return mosek::fusion::Utils::p_StringBuffer::_get_impl(_4399.get())->toString(); }void mosek::fusion::p_Expr::tostr( monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _4403,int _4404){ long long _8958 = ((*ptrb)(_4404)); long long _8959 = ((*ptrb)((_4404 + (int)1))); for (long long _4405 = _8958;_4405<_8959;++_4405){ long long _4406 = ((*subj)(_4405)); double _4407 = ((*cof_v)(_4405)); if ((_4407 < (int)0)){ int _4408 = (int)0; while ((((*varsb)((_4408 + (int)1))) <= _4406)) { ( ++ _4408 ); }if (((_4407 < (- 1.0)) || (_4407 > (- 1.0)))){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_4403.get())->a(std::string (" - ")).get())->a((- _4407)).get())->a(std::string (" ")); }else { mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_4403.get())->a(std::string (" - ")).get())->a(std::string (" ")); }((*x)(_4408))->elementName((_4406 - ((*varsb)(_4408))),_4403); }else { int _4409 = (int)0; while ((((*varsb)((_4409 + (int)1))) <= _4406)) { ( ++ _4409 ); }if (((_4407 < 1.0) || (_4407 > 1.0))){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_4403.get())->a(std::string (" + ")).get())->a(_4407).get())->a(std::string (" ")); }else { mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_4403.get())->a(std::string (" + ")).get())->a(std::string (" ")); }((*x)(_4409))->elementName((_4406 - ((*varsb)(_4409))),_4403); }}if (bfix){ if ((((*bfix)(_4404)) < 0.0)){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_4403.get())->a(std::string (" - ")).get())->a((- ((*bfix)(_4404)))); }else { mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_4403.get())->a(std::string (" + ")).get())->a(((*bfix)(_4404))); }}else {}}std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > mosek::fusion::p_Expr::varstack( std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >,1 > > _4410){ return ([=]()->std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > { std::vector< monty::rc_ptr< ::mosek::fusion::Variable > > _8960; for (int _4411=(int)0, _8961=(int)((_4410)->size(0)); _4411 < _8961;++_4411) for (int _4412=(int)0, _8962=(int)((((*_4410)(_4411)))->size(0)); _4412 < _8962;++_4412)_8960.push_back(((*((*_4410)(_4411)))(_4412))); return std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >(monty::shape(_8960.size()),_8960.begin(),_8960.end())); })(); }std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > mosek::fusion::p_Expr::varstack( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _4413,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _4414){ if (! _4413){ return _4414; }else if (! _4414){ return _4413; }else { std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _4415 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >(monty::shape(((int)((_4413)->size(0)) + (int)((_4414)->size(0)))))); int _8963 = (int)0; int _8964 = (int)((_4413)->size(0)); for (int _4416 = _8963;_4416<_8964;++_4416){ (((*_4415)(_4416)) = ((*_4413)(_4416))); }int _8965 = (int)0; int _8966 = (int)((_4414)->size(0)); for (int _4417 = _8965;_4417<_8966;++_4417){ (((*_4415)((_4417 + (int)((_4413)->size(0))))) = ((*_4414)(_4417))); }return _4415; }}monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::flatten  ( monty::rc_ptr< ::mosek::fusion::Expression > _4418) { return mosek::fusion::p_Expr::flatten(_4418); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::flatten( monty::rc_ptr< ::mosek::fusion::Expression > _4418){ if (! _4418){ throw monty::NullPointerException(std::string ("Arguments for flatten may not be null"));}else {}return ::mosek::fusion::p_Expr::reshape(_4418,(int)mosek::fusion::p_Set::_get_impl(_4418->shape())->size); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::reshape  ( monty::rc_ptr< ::mosek::fusion::Expression > _4419,    int _4420,    int _4421) { return mosek::fusion::p_Expr::reshape(_4419,_4420,_4421); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::reshape( monty::rc_ptr< ::mosek::fusion::Expression > _4419,int _4420,int _4421){ if (! _4419){ throw monty::NullPointerException(std::string ("Arguments for reshape may not be null"));}else {}return ::mosek::fusion::p_Expr::reshape(_4419,::mosek::fusion::Set::t(::mosek::fusion::p_NDSet::_new_NDSet(_4420,_4421))); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::reshape  ( monty::rc_ptr< ::mosek::fusion::Expression > _4422,    int _4423) { return mosek::fusion::p_Expr::reshape(_4422,_4423); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::reshape( monty::rc_ptr< ::mosek::fusion::Expression > _4422,int _4423){ if (! _4422){ throw monty::NullPointerException(std::string ("Arguments for reshape may not be null"));}else {}return ::mosek::fusion::p_Expr::reshape(_4422,::mosek::fusion::Set::t(::mosek::fusion::p_IntSet::_new_IntSet(_4423))); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::reshape  ( monty::rc_ptr< ::mosek::fusion::Expression > _4424,    monty::rc_ptr< ::mosek::fusion::Set > _4425) { return mosek::fusion::p_Expr::reshape(_4424,_4425); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::reshape( monty::rc_ptr< ::mosek::fusion::Expression > _4424,monty::rc_ptr< ::mosek::fusion::Set > _4425){ if ((! _4424 || ! _4425)){ throw monty::NullPointerException(std::string ("Arguments for reshape may not be null"));}else {}if ((mosek::fusion::p_Set::_get_impl(_4425)->size != mosek::fusion::p_Set::_get_impl(_4424->shape())->size)){ throw ::mosek::fusion::DimensionError(std::string ("New shape has wrong number of elements"));}else {}monty::rc_ptr< ::mosek::fusion::Expression > _8967 = _4424; if (nullptr != dynamic_cast< ::mosek::fusion::Expr* >(_8967.get())) {::mosek::fusion::Expr::t _4426(dynamic_cast< ::mosek::fusion::Expr* >(_8967.get()));{ return ::mosek::fusion::p_Expr::_new_Expr(mosek::fusion::p_Expr::_get_impl(_4426)->ptrb,mosek::fusion::p_Expr::_get_impl(_4426)->x,mosek::fusion::p_Expr::_get_impl(_4426)->subj,mosek::fusion::p_Expr::_get_impl(_4426)->cof_v,mosek::fusion::p_Expr::_get_impl(_4426)->bfix,_4425,mosek::fusion::p_Expr::_get_impl(_4426)->inst,(int)1); }}else {mosek::fusion::Expression::t _4427 = _8967;{ monty::rc_ptr< ::mosek::fusion::FlatExpr > _4428 = _4424->eval(); return ::mosek::fusion::p_Expr::_new_Expr(mosek::fusion::p_FlatExpr::_get_impl(_4428)->ptrb,mosek::fusion::p_FlatExpr::_get_impl(_4428)->x,mosek::fusion::p_FlatExpr::_get_impl(_4428)->subj,mosek::fusion::p_FlatExpr::_get_impl(_4428)->cof,mosek::fusion::p_FlatExpr::_get_impl(_4428)->bfix,_4425,mosek::fusion::p_FlatExpr::_get_impl(_4428)->inst,(int)1); }}}long long mosek::fusion::Expr::size  ( ) { return mosek::fusion::p_Expr::_get_impl(this)->size(); }long long mosek::fusion::p_Expr::size( ){ return ((long long)((ptrb)->size(0)) - (int)1); }monty::rc_ptr< ::mosek::fusion::FlatExpr > mosek::fusion::Expr::eval  ( ) { return mosek::fusion::p_Expr::_get_impl(this)->eval(); }monty::rc_ptr< ::mosek::fusion::FlatExpr > mosek::fusion::p_Expr::eval( ){ std::shared_ptr< monty::ndarray< double,1 > > _4429 = ([&]() -> std::shared_ptr< monty::ndarray< double,1 > > { if ( ! bfix) return (nullptr); else return (::mosek::fusion::Utils::Tools::arraycopy(bfix)); })(); std::shared_ptr< monty::ndarray< long long,1 > > _4430 = ([&]() -> std::shared_ptr< monty::ndarray< long long,1 > > { if ( ! inst) return (nullptr); else return (::mosek::fusion::Utils::Tools::arraycopy(inst)); })(); return ::mosek::fusion::p_FlatExpr::_new_FlatExpr(_4429,::mosek::fusion::Utils::Tools::arraycopy(ptrb),::mosek::fusion::Utils::Tools::arraycopy(subj),x,::mosek::fusion::Utils::Tools::arraycopy(cof_v),shape_p,inst); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::zeros  ( int _4431) { return mosek::fusion::p_Expr::zeros(_4431); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::zeros( int _4431){ std::shared_ptr< monty::ndarray< long long,1 > > _4432 = ::mosek::fusion::Utils::Tools::makevector((long long)0,((int)1 + _4431)); std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _4433 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >(monty::shape((int)0))); std::shared_ptr< monty::ndarray< long long,1 > > _4434 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)0))); std::shared_ptr< monty::ndarray< double,1 > > _4435 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)0))); std::shared_ptr< monty::ndarray< double,1 > > _4436 = ::mosek::fusion::Utils::Tools::zeros(_4431); return ::mosek::fusion::p_Expr::_new_Expr(_4432,_4433,_4434,_4435,_4436,::mosek::fusion::Set::t(nullptr),nullptr,(int)1); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::ones  ( int _4437) { return mosek::fusion::p_Expr::ones(_4437); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::ones( int _4437){ std::shared_ptr< monty::ndarray< long long,1 > > _4438 = ::mosek::fusion::Utils::Tools::makevector((long long)0,((int)1 + _4437)); std::shared_ptr< monty::ndarray< long long,1 > > _4439 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)0))); std::shared_ptr< monty::ndarray< double,1 > > _4440 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)0))); std::shared_ptr< monty::ndarray< double,1 > > _4441 = ::mosek::fusion::Utils::Tools::ones(_4437); return ::mosek::fusion::p_Expr::_new_Expr(_4438,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >(monty::shape((int)0))),_4439,_4440,_4441,::mosek::fusion::Set::t(nullptr),nullptr,(int)1); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::constTerm  ( monty::rc_ptr< ::mosek::fusion::NDSparseArray > _4442) { return mosek::fusion::p_Expr::constTerm(_4442); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::constTerm( monty::rc_ptr< ::mosek::fusion::NDSparseArray > _4442){ monty::rc_ptr< ::mosek::fusion::Set > _4443 = ::mosek::fusion::p_Set::make(mosek::fusion::p_NDSparseArray::_get_impl(_4442)->dims); std::shared_ptr< monty::ndarray< long long,1 > > _4444 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(((int)((mosek::fusion::p_NDSparseArray::_get_impl(_4442)->inst)->size(0)) + (int)1)))); std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _4445 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >(monty::shape((int)0))); std::shared_ptr< monty::ndarray< long long,1 > > _4446 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)0))); std::shared_ptr< monty::ndarray< double,1 > > _4447 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)0))); std::shared_ptr< monty::ndarray< double,1 > > _4448 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_NDSparseArray::_get_impl(_4442)->cof); std::shared_ptr< monty::ndarray< long long,1 > > _4449 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_NDSparseArray::_get_impl(_4442)->inst); return ::mosek::fusion::p_Expr::_new_Expr(_4444,_4445,_4446,_4447,_4448,_4443,_4449); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::constTerm  ( monty::rc_ptr< ::mosek::fusion::Matrix > _4450) { return mosek::fusion::p_Expr::constTerm(_4450); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::constTerm( monty::rc_ptr< ::mosek::fusion::Matrix > _4450){ monty::rc_ptr< ::mosek::fusion::Set > _4451 = ::mosek::fusion::p_Set::make(_4450->numRows(),_4450->numColumns()); std::shared_ptr< monty::ndarray< long long,1 > > _4452 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((_4450->numNonzeros() + (int)1)))); std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _4453 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >(monty::shape((int)0))); std::shared_ptr< monty::ndarray< long long,1 > > _4454 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)0))); std::shared_ptr< monty::ndarray< double,1 > > _4455 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)0))); std::shared_ptr< monty::ndarray< double,1 > > _4456 = nullptr; std::shared_ptr< monty::ndarray< long long,1 > > _4457 = nullptr; if (_4450->isSparse()){ std::shared_ptr< monty::ndarray< int,1 > > _4458 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4450->numNonzeros()))); std::shared_ptr< monty::ndarray< int,1 > > _4459 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4450->numNonzeros()))); std::shared_ptr< monty::ndarray< double,1 > > _4460 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_4450->numNonzeros()))); _4450->getDataAsTriplets(_4458,_4459,_4460); (_4456 = _4460); (_4457 = ([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _8968; for (long long _4461=(int)0, _8969=_4450->numNonzeros(); _4461 < _8969;++_4461)_8968.push_back((((long long)((*_4458)(_4461)) * _4450->numColumns()) + ((*_4459)(_4461)))); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_8968.size()),_8968.begin(),_8968.end())); })()); }else { (_4456 = _4450->getDataAsArray()); }return ::mosek::fusion::p_Expr::_new_Expr(_4452,_4453,_4454,_4455,_4456,_4451,_4457); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::constTerm  ( double _4462) { return mosek::fusion::p_Expr::constTerm(_4462); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::constTerm( double _4462){ std::shared_ptr< monty::ndarray< long long,1 > > _4463 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >{(long long)0,(long long)0}); std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _4464 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >(monty::shape((int)0))); std::shared_ptr< monty::ndarray< long long,1 > > _4465 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)0))); std::shared_ptr< monty::ndarray< double,1 > > _4466 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)0))); std::shared_ptr< monty::ndarray< double,1 > > _4467 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{_4462}); return ::mosek::fusion::p_Expr::_new_Expr(_4463,_4464,_4465,_4466,_4467,::mosek::fusion::Set::t(nullptr),nullptr,(int)1); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::constTerm  ( monty::rc_ptr< ::mosek::fusion::Set > _4468,    double _4469) { return mosek::fusion::p_Expr::constTerm(_4468,_4469); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::constTerm( monty::rc_ptr< ::mosek::fusion::Set > _4468,double _4469){ std::shared_ptr< monty::ndarray< long long,1 > > _4470 = ::mosek::fusion::Utils::Tools::makevector((long long)0,((int)mosek::fusion::p_Set::_get_impl(_4468)->size + (int)1)); std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _4471 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >(monty::shape((int)0))); std::shared_ptr< monty::ndarray< long long,1 > > _4472 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)0))); std::shared_ptr< monty::ndarray< double,1 > > _4473 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)0))); std::shared_ptr< monty::ndarray< double,1 > > _4474 = ::mosek::fusion::Utils::Tools::makevector(_4469,(int)mosek::fusion::p_Set::_get_impl(_4468)->size); return ::mosek::fusion::p_Expr::_new_Expr(_4470,_4471,_4472,_4473,_4474,_4468,nullptr,(int)1); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::constTerm  ( int _4475,    double _4476) { return mosek::fusion::p_Expr::constTerm(_4475,_4476); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::constTerm( int _4475,double _4476){ std::shared_ptr< monty::ndarray< long long,1 > > _4477 = ::mosek::fusion::Utils::Tools::makevector((long long)0,(_4475 + (int)1)); std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _4478 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >(monty::shape((int)0))); std::shared_ptr< monty::ndarray< long long,1 > > _4479 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)0))); std::shared_ptr< monty::ndarray< double,1 > > _4480 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)0))); std::shared_ptr< monty::ndarray< double,1 > > _4481 = ::mosek::fusion::Utils::Tools::makevector(_4476,_4475); return ::mosek::fusion::p_Expr::_new_Expr(_4477,_4478,_4479,_4480,_4481,::mosek::fusion::Set::t(nullptr),nullptr,(int)1); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::constTerm  ( std::shared_ptr< monty::ndarray< double,2 > > _4482) { return mosek::fusion::p_Expr::constTerm(_4482); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::constTerm( std::shared_ptr< monty::ndarray< double,2 > > _4482){ if (! _4482){ throw monty::NullPointerException(std::string ("Arguments for constTerm may not be null"));}else {}int _4483 = ((int)((_4482)->size(0)) * (int)((_4482)->size(1))); std::shared_ptr< monty::ndarray< long long,1 > > _4484 = ::mosek::fusion::Utils::Tools::makevector((long long)0,(_4483 + (int)1)); std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _4485 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >(monty::shape((int)0))); std::shared_ptr< monty::ndarray< long long,1 > > _4486 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)0))); std::shared_ptr< monty::ndarray< double,1 > > _4487 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)0))); std::shared_ptr< monty::ndarray< double,1 > > _4488 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_4483))); { int _4489 = (int)0; int _8970 = (int)0; int _8971 = (int)((_4482)->size(0)); for (int _4490 = _8970;_4490<_8971;++_4490){ int _8972 = (int)0; int _8973 = (int)((_4482)->size(1)); for (int _4491 = _8972;_4491<_8973;++_4491){ (((*_4488)(_4489)) = ((*_4482)(_4490,_4491))); ( ++ _4489 ); }}}return ::mosek::fusion::p_Expr::_new_Expr(_4484,_4485,_4486,_4487,_4488,::mosek::fusion::p_Set::make((int)((_4482)->size(0)),(int)((_4482)->size(1))),nullptr,(int)1); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::constTerm  ( std::shared_ptr< monty::ndarray< double,1 > > _4492) { return mosek::fusion::p_Expr::constTerm(_4492); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::constTerm( std::shared_ptr< monty::ndarray< double,1 > > _4492){ if (! _4492){ throw monty::NullPointerException(std::string ("Arguments for constTerm may not be null"));}else {}std::shared_ptr< monty::ndarray< long long,1 > > _4493 = ::mosek::fusion::Utils::Tools::makevector((long long)0,((int)((_4492)->size(0)) + (int)1)); std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _4494 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >(monty::shape((int)0))); std::shared_ptr< monty::ndarray< long long,1 > > _4495 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)0))); std::shared_ptr< monty::ndarray< double,1 > > _4496 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)0))); std::shared_ptr< monty::ndarray< double,1 > > _4497 = ::mosek::fusion::Utils::Tools::arraycopy(_4492); return ::mosek::fusion::p_Expr::_new_Expr(_4493,_4494,_4495,_4496,_4497,::mosek::fusion::Set::t(nullptr),nullptr,(int)1); }long long mosek::fusion::Expr::numNonzeros  ( ) { return mosek::fusion::p_Expr::_get_impl(this)->numNonzeros(); }long long mosek::fusion::p_Expr::numNonzeros( ){ return (long long)((cof_v)->size(0)); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sum_expr( monty::rc_ptr< ::mosek::fusion::Expression > _4498,int _4499,int _4500){ if (((_4499 < (int)0) || ((_4500 <= _4499) || (mosek::fusion::p_Set::_get_impl(_4498->shape())->nd < _4500)))){ throw ::mosek::fusion::DimensionError(std::string ("The sum-dimension is invalid or out of bounds"));}else {}monty::rc_ptr< ::mosek::fusion::FlatExpr > _4501 = _4498->eval(); if ((mosek::fusion::p_Set::_get_impl(mosek::fusion::p_FlatExpr::_get_impl(_4501)->shape)->size == (int)0)){ std::shared_ptr< monty::ndarray< int,1 > > _4502 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((mosek::fusion::p_Set::_get_impl(mosek::fusion::p_FlatExpr::_get_impl(_4501)->shape)->nd - (_4500 - _4499))))); long long _4503 = (long long)1; long long _4504 = (long long)1; long long _4505 = (long long)1; int _8974 = (int)0; int _8975 = _4499; for (int _4506 = _8974;_4506<_8975;++_4506){ (_4503 *= mosek::fusion::p_FlatExpr::_get_impl(_4501)->shape->dim(_4506)); (((*_4502)(_4506)) = mosek::fusion::p_FlatExpr::_get_impl(_4501)->shape->dim(_4506)); }int _8976 = _4499; int _8977 = _4500; for (int _4507 = _8976;_4507<_8977;++_4507){ (_4504 *= mosek::fusion::p_FlatExpr::_get_impl(_4501)->shape->dim(_4507)); }int _8978 = _4500; int _8979 = mosek::fusion::p_Set::_get_impl(mosek::fusion::p_FlatExpr::_get_impl(_4501)->shape)->nd; for (int _4508 = _8978;_4508<_8979;++_4508){ (_4505 *= mosek::fusion::p_FlatExpr::_get_impl(_4501)->shape->dim(_4508)); (((*_4502)((_4508 - _4500))) = mosek::fusion::p_FlatExpr::_get_impl(_4501)->shape->dim(_4508)); }if (((_4503 == (int)0) || (_4505 == (int)0))){ return ::mosek::fusion::p_Expr::_new_Expr(std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >{(long long)0}),mosek::fusion::p_FlatExpr::_get_impl(_4501)->x,std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)0))),::mosek::fusion::p_Set::make(_4502),nullptr); }else { return ::mosek::fusion::p_Expr::_new_Expr(std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >{(long long)0}),mosek::fusion::p_FlatExpr::_get_impl(_4501)->x,std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)0))),::mosek::fusion::p_Set::make(_4502),std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)0)))); }}else { std::shared_ptr< monty::ndarray< long long,1 > > _4509 = mosek::fusion::p_FlatExpr::_get_impl(_4501)->inst; if (! _4509){ (_4509 = ::mosek::fusion::Utils::Tools::range((long long)0,((long long)((mosek::fusion::p_FlatExpr::_get_impl(_4501)->ptrb)->size(0)) - (long long)1))); }else {}std::shared_ptr< monty::ndarray< long long,1 > > _4510 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((_4509)->size(0))))); std::shared_ptr< monty::ndarray< long long,1 > > _4511 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((_4509)->size(0))))); { long long _4512 = (long long)1; long long _4513 = (long long)1; long long _4514 = (long long)1; int _8980 = (int)0; int _8981 = _4499; for (int _4515 = _8980;_4515<_8981;++_4515){ (_4512 *= mosek::fusion::p_FlatExpr::_get_impl(_4501)->shape->dim(_4515)); }int _8982 = _4499; int _8983 = _4500; for (int _4516 = _8982;_4516<_8983;++_4516){ (_4513 *= mosek::fusion::p_FlatExpr::_get_impl(_4501)->shape->dim(_4516)); }int _8984 = _4500; int _8985 = mosek::fusion::p_Set::_get_impl(mosek::fusion::p_FlatExpr::_get_impl(_4501)->shape)->nd; for (int _4517 = _8984;_4517<_8985;++_4517){ (_4514 *= mosek::fusion::p_FlatExpr::_get_impl(_4501)->shape->dim(_4517)); }int _8986 = (int)0; int _8987 = (int)((_4509)->size(0)); for (int _4518 = _8986;_4518<_8987;++_4518){ long long _4519 = ((*_4509)(_4518)); (((*_4510)(_4518)) = ((_4519 % _4514) + ((_4519 / (_4514 * _4513)) * _4514))); (((*_4511)(_4518)) = ((_4519 / _4514) % _4513)); }}std::shared_ptr< monty::ndarray< long long,1 > > _4520 = ::mosek::fusion::Utils::Tools::range((long long)0,(long long)((_4509)->size(0))); ::mosek::fusion::p_CommonTools::argQsort(_4520,_4510,_4511,(long long)0,(long long)((_4509)->size(0))); long long _4521 = (long long)1; int _8988 = (int)1; int _8989 = (int)((_4510)->size(0)); for (int _4522 = _8988;_4522<_8989;++_4522){ if ((((*_4510)(((*_4520)(_4522)))) > ((*_4510)(((*_4520)((_4522 - (int)1))))))){ ( ++ _4521 ); }else {}}std::shared_ptr< monty::ndarray< long long,1 > > _4523 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((_4521 + (int)1)))); std::shared_ptr< monty::ndarray< long long,1 > > _4524 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((mosek::fusion::p_FlatExpr::_get_impl(_4501)->subj)->size(0))))); std::shared_ptr< monty::ndarray< double,1 > > _4525 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)((mosek::fusion::p_FlatExpr::_get_impl(_4501)->cof)->size(0))))); { int _4526 = (int)0; long long _8990 = (long long)0; long long _8991 = _4521; for (long long _4527 = _8990;_4527<_8991;++_4527){ int _4528 = _4526; long long _4529 = ((*_4510)(((*_4520)(_4526)))); while (((_4526 < (int)((_4510)->size(0))) && (_4529 == ((*_4510)(((*_4520)(_4526))))))) { ( ++ _4526 ); }(((*_4523)((_4527 + (int)1))) = ((*_4523)(_4527))); int _8992 = _4528; int _8993 = _4526; for (int _4530 = _8992;_4530<_8993;++_4530){ long long _4531 = (((*mosek::fusion::p_FlatExpr::_get_impl(_4501)->ptrb)((((*_4520)(_4530)) + (int)1))) - ((*mosek::fusion::p_FlatExpr::_get_impl(_4501)->ptrb)(((*_4520)(_4530))))); ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_FlatExpr::_get_impl(_4501)->subj,((*mosek::fusion::p_FlatExpr::_get_impl(_4501)->ptrb)(((*_4520)(_4530)))),_4524,((*_4523)((_4527 + (int)1))),_4531); ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_FlatExpr::_get_impl(_4501)->cof,((*mosek::fusion::p_FlatExpr::_get_impl(_4501)->ptrb)(((*_4520)(_4530)))),_4525,((*_4523)((_4527 + (int)1))),_4531); (((*_4523)((_4527 + (int)1))) = (((*_4523)((_4527 + (int)1))) + _4531)); }}}std::shared_ptr< monty::ndarray< double,1 > > _4532 = nullptr; if (mosek::fusion::p_FlatExpr::_get_impl(_4501)->bfix){ (_4532 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_4521)))); int _4533 = (int)0; long long _8994 = (long long)0; long long _8995 = _4521; for (long long _4534 = _8994;_4534<_8995;++_4534){ int _4535 = _4533; long long _4536 = ((*_4510)(((*_4520)(_4533)))); while (((_4533 < (int)((_4510)->size(0))) && (_4536 == ((*_4510)(((*_4520)(_4533))))))) { ( ++ _4533 ); }int _8996 = _4535; int _8997 = _4533; for (int _4537 = _8996;_4537<_8997;++_4537){ (((*_4532)(_4534)) += ((*mosek::fusion::p_FlatExpr::_get_impl(_4501)->bfix)(((*_4520)(_4537))))); }}}else {}monty::rc_ptr< ::mosek::fusion::Set > _4538; { std::shared_ptr< monty::ndarray< int,1 > > _4539 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((mosek::fusion::p_Set::_get_impl(mosek::fusion::p_FlatExpr::_get_impl(_4501)->shape)->nd - (_4500 - _4499))))); int _4540 = (int)0; int _8998 = (int)0; int _8999 = _4499; for (int _4541 = _8998;_4541<_8999;++_4541){ (((*_4539)(_4540)) = mosek::fusion::p_FlatExpr::_get_impl(_4501)->shape->dim(_4541)); ( ++ _4540 ); }int _9000 = _4500; int _9001 = mosek::fusion::p_Set::_get_impl(mosek::fusion::p_FlatExpr::_get_impl(_4501)->shape)->nd; for (int _4542 = _9000;_4542<_9001;++_4542){ (((*_4539)(_4540)) = mosek::fusion::p_FlatExpr::_get_impl(_4501)->shape->dim(_4542)); ( ++ _4540 ); }(_4538 = ::mosek::fusion::p_NDSet::_new_NDSet(_4539)); }std::shared_ptr< monty::ndarray< long long,1 > > _4543 = nullptr; if ((_4521 < mosek::fusion::p_Set::_get_impl(_4538)->size)){ (_4543 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_4521)))); (((*_4543)((int)0)) = ((*_4510)(((*_4520)((int)0))))); int _4544 = (int)0; long long _9002 = (long long)1; long long _9003 = _4521; for (long long _4545 = _9002;_4545<_9003;++_4545){ while ((((*_4510)(((*_4520)(_4544)))) <= ((*_4543)((_4545 - (int)1))))) { ( ++ _4544 ); }(((*_4543)(_4545)) = ((*_4510)(((*_4520)(_4544))))); }}else {}return ::mosek::fusion::p_Expr::_new_Expr(_4523,mosek::fusion::p_FlatExpr::_get_impl(_4501)->x,_4524,_4525,_4532,_4538,_4543); }}monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sum_var( monty::rc_ptr< ::mosek::fusion::Variable > _4546,int _4547,int _4548){ if (((_4547 < (int)0) || ((_4548 <= _4547) || (_4548 > mosek::fusion::p_Set::_get_impl(_4546->shape())->nd)))){ throw ::mosek::fusion::DimensionError(std::string ("The sum-dimension is invalid or out of bounds"));}else {}if ((mosek::fusion::p_Set::_get_impl(_4546->shape())->size == (int)0)){ int _4549 = (mosek::fusion::p_Set::_get_impl(_4546->shape())->nd - (_4548 - _4547)); if ((_4549 < (int)1)){ (_4549 = (int)1); }else {}std::shared_ptr< monty::ndarray< int,1 > > _4550 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4549))); long long _4551 = (long long)1; long long _4552 = (long long)1; long long _4553 = (long long)1; int _9004 = (int)0; int _9005 = _4547; for (int _4554 = _9004;_4554<_9005;++_4554){ (_4551 *= _4546->shape()->dim(_4554)); (((*_4550)(_4554)) = _4546->shape()->dim(_4554)); }int _9006 = _4547; int _9007 = _4548; for (int _4555 = _9006;_4555<_9007;++_4555){ (_4552 *= _4546->shape()->dim(_4555)); }int _9008 = _4548; int _9009 = mosek::fusion::p_Set::_get_impl(_4546->shape())->nd; for (int _4556 = _9008;_4556<_9009;++_4556){ (_4553 *= _4546->shape()->dim(_4556)); (((*_4550)((_4556 - _4548))) = _4546->shape()->dim(_4556)); }if (((_4547 == (int)0) && ((_4548 == mosek::fusion::p_Set::_get_impl(_4546->shape())->nd) && (_4552 == (int)0)))){ (((*_4550)((int)0)) = (int)1); }else {}if (((_4551 == (int)0) || (_4553 == (int)0))){ return ::mosek::fusion::p_Expr::_new_Expr(std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >{(long long)0}),std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)0))),::mosek::fusion::p_Set::make(_4550),nullptr); }else { return ::mosek::fusion::p_Expr::_new_Expr(std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >{(long long)0,(long long)0}),std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)0))),nullptr,::mosek::fusion::p_Set::make(_4550),nullptr); }}else { int _4557 = (mosek::fusion::p_Set::_get_impl(_4546->shape())->nd - (_4548 - _4547)); monty::rc_ptr< ::mosek::fusion::Set > _4558; if ((_4557 == (int)0)){ (_4557 = (int)1); (_4558 = ::mosek::fusion::p_IntSet::_new_IntSet((int)1)); }else { std::shared_ptr< monty::ndarray< int,1 > > _4559 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4557))); int _4560 = (int)0; int _9010 = (int)0; int _9011 = _4547; for (int _4561 = _9010;_4561<_9011;++_4561){ (((*_4559)(_4560)) = _4546->shape()->dim(_4561)); ( ++ _4560 ); }int _9012 = _4548; int _9013 = mosek::fusion::p_Set::_get_impl(_4546->shape())->nd; for (int _4562 = _9012;_4562<_9013;++_4562){ (((*_4559)(_4560)) = _4546->shape()->dim(_4562)); ( ++ _4560 ); }if ((_4557 > (int)1)){ (_4558 = ::mosek::fusion::p_NDSet::_new_NDSet(_4559)); }else { (_4558 = ::mosek::fusion::p_IntSet::_new_IntSet(((*_4559)((int)0)))); }}long long _4563 = (long long)1; int _9014 = _4547; int _9015 = _4548; for (int _4564 = _9014;_4564<_9015;++_4564){ (_4563 *= _4546->shape()->dim(_4564)); }std::shared_ptr< monty::ndarray< long long,1 > > _4565 = ([&]() -> std::shared_ptr< monty::ndarray< long long,1 > > { if ( (_4563 > (int)0)) return (::mosek::fusion::Utils::Tools::range((long long)0,(mosek::fusion::p_Set::_get_impl(_4546->shape())->size + (int)1),_4563)); else return (std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >{(long long)0})); })(); std::shared_ptr< monty::ndarray< double,1 > > _4566 = ::mosek::fusion::Utils::Tools::ones((int)mosek::fusion::p_Set::_get_impl(_4546->shape())->size); std::shared_ptr< monty::ndarray< double,1 > > _4567 = nullptr; long long _4568 = (long long)1; long long _4569 = (long long)1; long long _4570 = (long long)1; int _9016 = (int)0; int _9017 = _4547; for (int _4571 = _9016;_4571<_9017;++_4571){ (_4568 *= _4546->shape()->dim(_4571)); }int _9018 = _4547; int _9019 = _4548; for (int _4572 = _9018;_4572<_9019;++_4572){ (_4569 *= _4546->shape()->dim(_4572)); }int _9020 = _4548; int _9021 = mosek::fusion::p_Set::_get_impl(_4546->shape())->nd; for (int _4573 = _9020;_4573<_9021;++_4573){ (_4570 *= _4546->shape()->dim(_4573)); }std::shared_ptr< monty::ndarray< long long,1 > > _4574 = ([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _9022; for (long long _4575=(int)0, _9023=_4568; _4575 < _9023;++_4575) for (long long _4576=(int)0, _9024=_4570; _4576 < _9024;++_4576) for (long long _4577=(int)0, _9025=_4569; _4577 < _9025;++_4577)_9022.push_back(((((_4575 * _4569) * _4570) + (_4577 * _4570)) + _4576)); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9022.size()),_9022.begin(),_9022.end())); })(); return ::mosek::fusion::p_Expr::_new_Expr(_4565,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{_4546}),_4574,_4566,_4567,_4558,nullptr); }}monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sum  ( monty::rc_ptr< ::mosek::fusion::Expression > _4578,    int _4579,    int _4580) { return mosek::fusion::p_Expr::sum(_4578,_4579,_4580); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sum( monty::rc_ptr< ::mosek::fusion::Expression > _4578,int _4579,int _4580){ return ::mosek::fusion::p_Expr::sum_expr(_4578,_4579,_4580); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sum  ( monty::rc_ptr< ::mosek::fusion::Expression > _4581,    int _4582) { return mosek::fusion::p_Expr::sum(_4581,_4582); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sum( monty::rc_ptr< ::mosek::fusion::Expression > _4581,int _4582){ if (((_4582 < (int)0) || (mosek::fusion::p_Set::_get_impl(_4581->shape())->nd <= _4582))){ throw ::mosek::fusion::DimensionError(std::string ("The sum-dimension is invalid or out of bounds"));}else {}return ::mosek::fusion::p_Expr::sum_expr(_4581,_4582,(_4582 + (int)1)); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sum  ( monty::rc_ptr< ::mosek::fusion::Variable > _4583,    int _4584,    int _4585) { return mosek::fusion::p_Expr::sum(_4583,_4584,_4585); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sum( monty::rc_ptr< ::mosek::fusion::Variable > _4583,int _4584,int _4585){ return ::mosek::fusion::p_Expr::sum_var(_4583,_4584,_4585); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sum  ( monty::rc_ptr< ::mosek::fusion::Variable > _4586,    int _4587) { return mosek::fusion::p_Expr::sum(_4586,_4587); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sum( monty::rc_ptr< ::mosek::fusion::Variable > _4586,int _4587){ if (! _4586){ throw monty::NullPointerException(std::string ("Arguments for sum may not be null"));}else {}return ::mosek::fusion::p_Expr::sum_var(_4586,_4587,(_4587 + (int)1)); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sum  ( monty::rc_ptr< ::mosek::fusion::Variable > _4588) { return mosek::fusion::p_Expr::sum(_4588); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sum( monty::rc_ptr< ::mosek::fusion::Variable > _4588){ if (! _4588){ throw monty::NullPointerException(std::string ("Arguments for sum may not be null"));}else {}return ::mosek::fusion::p_Expr::sum_var(_4588,(int)0,mosek::fusion::p_Set::_get_impl(_4588->shape())->nd); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sum  ( monty::rc_ptr< ::mosek::fusion::Expression > _4589) { return mosek::fusion::p_Expr::sum(_4589); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sum( monty::rc_ptr< ::mosek::fusion::Expression > _4589){ if (! _4589){ throw monty::NullPointerException(std::string ("Arguments for neg may not be null"));}else {}monty::rc_ptr< ::mosek::fusion::FlatExpr > _4590 = _4589->eval(); std::shared_ptr< monty::ndarray< long long,1 > > _4591 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >{(long long)0,(long long)((mosek::fusion::p_FlatExpr::_get_impl(_4590)->cof)->size(0))}); std::shared_ptr< monty::ndarray< long long,1 > > _4592 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_FlatExpr::_get_impl(_4590)->subj); std::shared_ptr< monty::ndarray< double,1 > > _4593 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_FlatExpr::_get_impl(_4590)->cof); std::shared_ptr< monty::ndarray< double,1 > > _4594; if (mosek::fusion::p_FlatExpr::_get_impl(_4590)->bfix){ double _4595 = 0.0; { int _4596 = (int)0; for (;(_4596 < (int)((mosek::fusion::p_FlatExpr::_get_impl(_4590)->bfix)->size(0)));( ++ _4596 )){ (_4595 = (_4595 + ((*mosek::fusion::p_FlatExpr::_get_impl(_4590)->bfix)(_4596)))); }}(_4594 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{_4595})); }else { (_4594 = nullptr); }return ::mosek::fusion::p_Expr::_new_Expr(_4591,mosek::fusion::p_FlatExpr::_get_impl(_4590)->x,_4592,_4593,_4594,::mosek::fusion::Set::t(nullptr),nullptr,(int)1); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::neg  ( monty::rc_ptr< ::mosek::fusion::Variable > _4597) { return mosek::fusion::p_Expr::neg(_4597); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::neg( monty::rc_ptr< ::mosek::fusion::Variable > _4597){ if (! _4597){ throw monty::NullPointerException(std::string ("Arguments for neg may not be null"));}else {}std::shared_ptr< monty::ndarray< long long,1 > > _4598 = ::mosek::fusion::Utils::Tools::range((mosek::fusion::p_Set::_get_impl(_4597->shape())->size + (int)1)); std::shared_ptr< monty::ndarray< long long,1 > > _4599 = ::mosek::fusion::Utils::Tools::range(mosek::fusion::p_Set::_get_impl(_4597->shape())->size); std::shared_ptr< monty::ndarray< double,1 > > _4600 = ([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _9026; for (long long _4601=(int)0, _9027=mosek::fusion::p_Set::_get_impl(_4597->shape())->size; _4601 < _9027;++_4601)_9026.push_back((- 1.0)); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9026.size()),_9026.begin(),_9026.end())); })(); return ::mosek::fusion::p_Expr::_new_Expr(_4598,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{_4597}),_4599,_4600,nullptr,_4597->shape(),nullptr,(int)1); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::neg  ( monty::rc_ptr< ::mosek::fusion::Expression > _4602) { return mosek::fusion::p_Expr::neg(_4602); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::neg( monty::rc_ptr< ::mosek::fusion::Expression > _4602){ if (! _4602){ throw monty::NullPointerException(std::string ("Arguments for neg may not be null"));}else {}monty::rc_ptr< ::mosek::fusion::FlatExpr > _4603 = _4602->eval(); std::shared_ptr< monty::ndarray< double,1 > > _4604 = ([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _9028; for (int _4605=(int)0, _9029=(int)((mosek::fusion::p_FlatExpr::_get_impl(_4603)->cof)->size(0)); _4605 < _9029;++_4605)_9028.push_back((- ((*mosek::fusion::p_FlatExpr::_get_impl(_4603)->cof)(_4605)))); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9028.size()),_9028.begin(),_9028.end())); })(); std::shared_ptr< monty::ndarray< double,1 > > _4606 = ([&]() -> std::shared_ptr< monty::ndarray< double,1 > > { if ( ! mosek::fusion::p_FlatExpr::_get_impl(_4603)->bfix) return (nullptr); else return (([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _9030; for (int _4607=(int)0, _9031=(int)((mosek::fusion::p_FlatExpr::_get_impl(_4603)->bfix)->size(0)); _4607 < _9031;++_4607)_9030.push_back((- ((*mosek::fusion::p_FlatExpr::_get_impl(_4603)->bfix)(_4607)))); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9030.size()),_9030.begin(),_9030.end())); })()); })(); return ::mosek::fusion::p_Expr::_new_Expr(mosek::fusion::p_FlatExpr::_get_impl(_4603)->ptrb,mosek::fusion::p_FlatExpr::_get_impl(_4603)->x,mosek::fusion::p_FlatExpr::_get_impl(_4603)->subj,_4604,_4606,mosek::fusion::p_FlatExpr::_get_impl(_4603)->shape,mosek::fusion::p_FlatExpr::_get_impl(_4603)->inst,(int)1); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul__( monty::rc_ptr< ::mosek::fusion::Matrix > _4608,monty::rc_ptr< ::mosek::fusion::Expression > _4609){ monty::rc_ptr< ::mosek::fusion::Matrix > _4610 = _4608; monty::rc_ptr< ::mosek::fusion::Expression > _4611 = _4609; if ((mosek::fusion::p_Set::_get_impl(_4609->shape())->nd > (int)2)){ throw ::mosek::fusion::DimensionError(std::string ("Expression operand must have 1 or 2 dimensions"));}else {}if ((_4609->shape()->dim((int)0) != mosek::fusion::p_Matrix::_get_impl(_4610)->dimj)){ throw ::mosek::fusion::DimensionError(std::string ("Dimensions of operands do not match"));}else {}monty::rc_ptr< ::mosek::fusion::FlatExpr > _4612 = _4609->eval(); monty::rc_ptr< ::mosek::fusion::Set > _4613; int _4614 = mosek::fusion::p_FlatExpr::_get_impl(_4612)->shape->dim((int)0); int _4615 = (int)1; int _4616 = (int)1; if ((mosek::fusion::p_Set::_get_impl(mosek::fusion::p_FlatExpr::_get_impl(_4612)->shape)->nd == (int)2)){ (_4615 = mosek::fusion::p_FlatExpr::_get_impl(_4612)->shape->dim((int)1)); (_4616 = (int)2); (_4613 = ::mosek::fusion::p_NDSet::_new_NDSet(mosek::fusion::p_Matrix::_get_impl(_4610)->dimi,_4615)); }else { (_4613 = ::mosek::fusion::p_IntSet::_new_IntSet(mosek::fusion::p_Matrix::_get_impl(_4610)->dimi)); }monty::rc_ptr< ::mosek::fusion::Expression > _4617; monty::rc_ptr< ::mosek::fusion::Matrix > _9032 = _4610; if (nullptr != dynamic_cast< ::mosek::fusion::DenseMatrix* >(_9032.get())) {::mosek::fusion::DenseMatrix::t _4618(dynamic_cast< ::mosek::fusion::DenseMatrix* >(_9032.get()));{ if (! mosek::fusion::p_FlatExpr::_get_impl(_4612)->inst){ int _4620 = (mosek::fusion::p_Matrix::_get_impl(_4618)->dimi * _4615); std::shared_ptr< monty::ndarray< long long,1 > > _4621 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((_4620 + (int)1)))); std::shared_ptr< monty::ndarray< long long,1 > > _4622 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((mosek::fusion::p_FlatExpr::_get_impl(_4612)->nnz * mosek::fusion::p_Matrix::_get_impl(_4618)->dimi)))); std::shared_ptr< monty::ndarray< double,1 > > _4623 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((mosek::fusion::p_FlatExpr::_get_impl(_4612)->nnz * mosek::fusion::p_Matrix::_get_impl(_4618)->dimi)))); std::shared_ptr< monty::ndarray< double,1 > > _4624 = ([&]() -> std::shared_ptr< monty::ndarray< double,1 > > { if ( ! mosek::fusion::p_FlatExpr::_get_impl(_4612)->bfix) return (nullptr); else return (std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_4620)))); })(); int _4625 = (int)1; { int _4626 = (int)0; for (;(_4626 < mosek::fusion::p_Matrix::_get_impl(_4618)->dimi);( ++ _4626 )){ { int _4627 = (int)0; for (;(_4627 < _4615);( ++ _4627 )){ long long _4628 = ((*_4621)((_4625 - (int)1))); { int _4629 = (int)0; for (;(_4629 < _4614);( ++ _4629 )){ int _4630 = ((_4629 * _4615) + _4627); long long _4631 = (((*mosek::fusion::p_FlatExpr::_get_impl(_4612)->ptrb)((_4630 + (int)1))) - ((*mosek::fusion::p_FlatExpr::_get_impl(_4612)->ptrb)(_4630))); double _4632 = ((*mosek::fusion::p_DenseMatrix::_get_impl(_4618)->data)(((_4626 * mosek::fusion::p_Matrix::_get_impl(_4618)->dimj) + _4629))); { int _4633 = (int)0; for (;(_4633 < _4631);( ++ _4633 )){ (((*_4623)((_4628 + _4633))) = (((*mosek::fusion::p_FlatExpr::_get_impl(_4612)->cof)((((*mosek::fusion::p_FlatExpr::_get_impl(_4612)->ptrb)(_4630)) + _4633))) * _4632)); (((*_4622)((_4628 + _4633))) = ((*mosek::fusion::p_FlatExpr::_get_impl(_4612)->subj)((((*mosek::fusion::p_FlatExpr::_get_impl(_4612)->ptrb)(_4630)) + _4633)))); }}(_4628 = (_4628 + _4631)); if (mosek::fusion::p_FlatExpr::_get_impl(_4612)->bfix){ (((*_4624)((_4625 - (int)1))) = (((*_4624)((_4625 - (int)1))) + (((*mosek::fusion::p_FlatExpr::_get_impl(_4612)->bfix)(_4630)) * _4632))); }else {}}}(((*_4621)(_4625)) = _4628); ( ++ _4625 ); }}}}(_4617 = ::mosek::fusion::p_Expr::_new_Expr(_4621,mosek::fusion::p_FlatExpr::_get_impl(_4612)->x,_4622,_4623,_4624,_4613,nullptr)); }else { int _4634 = (int)((mosek::fusion::p_FlatExpr::_get_impl(_4612)->inst)->size(0)); std::shared_ptr< monty::ndarray< int,1 > > _4635 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4634))); std::shared_ptr< monty::ndarray< int,1 > > _4636 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4634))); std::shared_ptr< monty::ndarray< long long,1 > > _4637 = ::mosek::fusion::Utils::Tools::range((long long)((mosek::fusion::p_FlatExpr::_get_impl(_4612)->inst)->size(0))); { int _4638 = (int)0; for (;(_4638 < _4634);( ++ _4638 )){ (((*_4635)(_4638)) = (int)(((*mosek::fusion::p_FlatExpr::_get_impl(_4612)->inst)(_4638)) / _4615)); (((*_4636)(_4638)) = (int)(((*mosek::fusion::p_FlatExpr::_get_impl(_4612)->inst)(_4638)) - ((*_4635)(_4638)))); }}::mosek::fusion::Utils::Tools::argsort(_4637,_4636,_4635,(long long)((int)0),(long long)(_4634)); int _4639 = (int)0; if (((int)((_4636)->size(0)) > (int)0)){ (_4639 = (int)1); { int _4640 = (int)1; for (;(_4640 < _4634);( ++ _4640 )){ if ((((*_4636)(((*_4637)(_4640)))) > ((*_4636)(((*_4637)((_4640 - (int)1))))))){ ( ++ _4639 ); }else {}}}}else {}int _4641 = (_4639 * mosek::fusion::p_Matrix::_get_impl(_4618)->dimi); std::shared_ptr< monty::ndarray< long long,1 > > _4642 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((_4641 + (int)1)))); std::shared_ptr< monty::ndarray< long long,1 > > _4643 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((mosek::fusion::p_FlatExpr::_get_impl(_4612)->nnz * mosek::fusion::p_Matrix::_get_impl(_4618)->dimi)))); std::shared_ptr< monty::ndarray< double,1 > > _4644 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((mosek::fusion::p_FlatExpr::_get_impl(_4612)->nnz * mosek::fusion::p_Matrix::_get_impl(_4618)->dimi)))); std::shared_ptr< monty::ndarray< double,1 > > _4645 = ([&]() -> std::shared_ptr< monty::ndarray< double,1 > > { if ( ! mosek::fusion::p_FlatExpr::_get_impl(_4612)->bfix) return (nullptr); else return (std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_4641)))); })(); std::shared_ptr< monty::ndarray< long long,1 > > _4646 = ([&]() -> std::shared_ptr< monty::ndarray< long long,1 > > { if ( (_4639 >= _4615)) return (nullptr); else return (std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_4641)))); })(); int _4647 = (int)0; { int _4648 = (int)0; for (;(_4648 < mosek::fusion::p_Matrix::_get_impl(_4618)->dimi);( ++ _4648 )){ long long _4649 = (long long)(mosek::fusion::p_Matrix::_get_impl(_4618)->dimj * _4648); { int _4650 = (int)0; for (;(_4650 < _4634);( ++ _4650 )){ if (((_4650 == (int)0) || (((*_4636)(((*_4637)(_4650)))) > ((*_4636)(((*_4637)((_4650 - (int)1)))))))){ ( ++ _4647 ); (((*_4642)(_4647)) = ((*_4642)((_4647 - (int)1)))); if (_4646){ (((*_4646)((_4647 - (int)1))) = (((long long)_4648 * _4615) + ((*_4636)(((*_4637)(_4650)))))); }else {}}else {}long long _4651 = ((*mosek::fusion::p_FlatExpr::_get_impl(_4612)->ptrb)(((*_4637)(_4650)))); long long _4652 = (((*mosek::fusion::p_FlatExpr::_get_impl(_4612)->ptrb)((((*_4637)(_4650)) + (int)1))) - _4651); double _4653 = ((*mosek::fusion::p_DenseMatrix::_get_impl(_4618)->data)((_4649 + ((*_4635)(((*_4637)(_4650))))))); { int _4654 = (int)0; for (;(_4654 < _4652);( ++ _4654 )){ (((*_4643)((((*_4642)(_4647)) + _4654))) = ((*mosek::fusion::p_FlatExpr::_get_impl(_4612)->subj)((_4651 + _4654)))); (((*_4644)((((*_4642)(_4647)) + _4654))) = (((*mosek::fusion::p_FlatExpr::_get_impl(_4612)->cof)((_4651 + _4654))) * _4653)); }}if (_4645){ (((*_4645)((_4647 - (int)1))) = (((*_4645)((_4647 - (int)1))) + (((*mosek::fusion::p_FlatExpr::_get_impl(_4612)->bfix)(((*_4637)(_4650)))) * _4653))); }else {}if (_4646){ (((*_4646)((_4647 - (int)1))) = (long long)((*_4636)(((*_4637)(_4650))))); }else {}(((*_4642)(_4647)) = (((*_4642)(_4647)) + _4652)); }}}}(_4617 = ::mosek::fusion::p_Expr::_new_Expr(_4642,mosek::fusion::p_FlatExpr::_get_impl(_4612)->x,_4643,_4644,_4645,_4613,_4646)); }}}else {mosek::fusion::Matrix::t _4619 = _9032;{ long long _4655 = _4619->numNonzeros(); std::shared_ptr< monty::ndarray< int,1 > > _4656 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4655))); std::shared_ptr< monty::ndarray< int,1 > > _4657 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4655))); std::shared_ptr< monty::ndarray< double,1 > > _4658 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_4655))); _4619->getDataAsTriplets(_4656,_4657,_4658); if (! mosek::fusion::p_FlatExpr::_get_impl(_4612)->inst){ long long _4659 = (long long)1; long long _9033 = (long long)1; long long _9034 = _4655; for (long long _4660 = _9033;_4660<_9034;++_4660){ if ((((*_4656)(_4660)) > ((*_4656)((_4660 - (int)1))))){ ( ++ _4659 ); }else {}}long long _4661 = (_4659 * _4615); std::shared_ptr< monty::ndarray< long long,1 > > _4662 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((_4661 + (int)1)))); long long _4663 = (long long)0; { int _4664 = ((*_4656)((int)0)); long long _4665 = (long long)0; long long _9035 = (long long)0; long long _9036 = _4655; for (long long _4666 = _9035;_4666<_9036;++_4666){ if ((_4664 < ((*_4656)(_4666)))){ (_4665 = (_4665 + _4615)); (_4664 = ((*_4656)(_4666))); }else {}int _9037 = (int)0; int _9038 = _4615; for (int _4667 = _9037;_4667<_9038;++_4667){ int _4668 = ((((*_4657)(_4666)) * _4615) + _4667); long long _4669 = (((*mosek::fusion::p_FlatExpr::_get_impl(_4612)->ptrb)((_4668 + (int)1))) - ((*mosek::fusion::p_FlatExpr::_get_impl(_4612)->ptrb)(_4668))); (_4663 = (_4663 + _4669)); (((*_4662)(((_4665 + _4667) + (int)1))) = (((*_4662)(((_4665 + _4667) + (int)1))) + _4669)); }}}std::shared_ptr< monty::ndarray< long long,1 > > _4670 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_4663))); std::shared_ptr< monty::ndarray< double,1 > > _4671 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_4663))); std::shared_ptr< monty::ndarray< double,1 > > _4672 = ([&]() -> std::shared_ptr< monty::ndarray< double,1 > > { if ( ! mosek::fusion::p_FlatExpr::_get_impl(_4612)->bfix) return (nullptr); else return (std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_4661)))); })(); { int _4673 = (int)0; for (;(_4673 < _4661);( ++ _4673 )){ (((*_4662)((_4673 + (int)1))) = (((*_4662)(_4673)) + ((*_4662)((_4673 + (int)1))))); }}std::shared_ptr< monty::ndarray< long long,1 > > _4674 = ([&]() -> std::shared_ptr< monty::ndarray< long long,1 > > { if ( (_4659 >= mosek::fusion::p_Matrix::_get_impl(_4619)->dimi)) return (nullptr); else return (std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_4661)))); })(); { long long _4675 = (long long)0; int _4676 = ((*_4656)((int)0)); { int _4677 = (int)0; for (;(_4677 < _4655);( ++ _4677 )){ double _4678 = ((*_4658)(_4677)); if ((_4676 < ((*_4656)(_4677)))){ (_4675 = (_4675 + _4615)); (_4676 = ((*_4656)(_4677))); }else {}{ int _4679 = (int)0; for (;(_4679 < _4615);( ++ _4679 )){ int _4680 = ((((*_4657)(_4677)) * _4615) + _4679); long long _4681 = (((*mosek::fusion::p_FlatExpr::_get_impl(_4612)->ptrb)((_4680 + (int)1))) - ((*mosek::fusion::p_FlatExpr::_get_impl(_4612)->ptrb)(_4680))); { int _4682 = (int)0; for (;(_4682 < _4681);( ++ _4682 )){ (((*_4671)((((*_4662)((_4675 + _4679))) + _4682))) = (((*mosek::fusion::p_FlatExpr::_get_impl(_4612)->cof)((((*mosek::fusion::p_FlatExpr::_get_impl(_4612)->ptrb)(_4680)) + _4682))) * _4678)); (((*_4670)((((*_4662)((_4675 + _4679))) + _4682))) = ((*mosek::fusion::p_FlatExpr::_get_impl(_4612)->subj)((((*mosek::fusion::p_FlatExpr::_get_impl(_4612)->ptrb)(_4680)) + _4682)))); }}if (_4672){ (((*_4672)((_4675 + _4679))) = (((*_4672)((_4675 + _4679))) + (((*mosek::fusion::p_FlatExpr::_get_impl(_4612)->bfix)(_4680)) * _4678))); }else {}(((*_4662)((_4675 + _4679))) = (((*_4662)((_4675 + _4679))) + _4681)); if (_4674){ (((*_4674)((_4675 + _4679))) = (long long)((((*_4656)(_4677)) * _4615) + _4679)); }else {}}}}}}{ int _4683 = ((int)((_4662)->size(0)) - (int)1); for (;(_4683 > (int)0);( -- _4683 )){ (((*_4662)(_4683)) = ((*_4662)((_4683 - (int)1)))); }}(((*_4662)((int)0)) = (long long)0); (_4617 = ::mosek::fusion::p_Expr::_new_Expr(_4662,mosek::fusion::p_FlatExpr::_get_impl(_4612)->x,_4670,_4671,_4672,_4613,_4674)); }else { long long _4684 = _4610->numNonzeros(); int _4685 = (int)((mosek::fusion::p_FlatExpr::_get_impl(_4612)->inst)->size(0)); std::shared_ptr< monty::ndarray< int,1 > > _4686 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4685))); std::shared_ptr< monty::ndarray< int,1 > > _4687 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4685))); std::shared_ptr< monty::ndarray< long long,1 > > _4688 = ::mosek::fusion::Utils::Tools::range((long long)((mosek::fusion::p_FlatExpr::_get_impl(_4612)->inst)->size(0))); { int _4689 = (int)0; for (;(_4689 < _4685);( ++ _4689 )){ (((*_4686)(_4689)) = (int)(((*mosek::fusion::p_FlatExpr::_get_impl(_4612)->inst)(_4689)) / _4615)); (((*_4687)(_4689)) = (int)(((*mosek::fusion::p_FlatExpr::_get_impl(_4612)->inst)(_4689)) - ((*_4686)(_4689)))); }}::mosek::fusion::Utils::Tools::argsort(_4688,_4687,_4686,(long long)((int)0),(long long)(_4685)); long long _4690 = (long long)0; long long _4691 = (long long)0; { { int _4692 = (int)0; for (;(_4692 < _4684);){ int _4693 = _4692; { for (;((_4693 < _4684) && (((*_4656)(_4693)) == ((*_4656)(_4692))));( ++ _4693 )){ }}int _4694 = ((*_4656)(_4692)); int _4695 = ((*_4687)(((*_4688)((int)0)))); { { int _4696 = (int)0; for (;(_4696 < _4685);){ int _4697; { (_4697 = (_4696 + (int)1)); for (;((_4697 < _4685) && (((*_4687)(((*_4688)(_4697)))) == ((*_4687)(((*_4688)((_4697 - (int)1)))))));( ++ _4697 )){ }}int _4698 = _4692; int _4699 = _4696; long long _4700 = _4691; while (((_4698 < _4693) && (_4699 < _4697))) { if ((((*_4657)(_4698)) < ((*_4686)(((*_4688)(_4699)))))){ ( ++ _4698 ); }else if ((((*_4657)(_4698)) > ((*_4686)(((*_4688)(_4699)))))){ ( ++ _4699 ); }else { (_4691 = (_4691 + (((*mosek::fusion::p_FlatExpr::_get_impl(_4612)->ptrb)((((*_4688)(_4699)) + (int)1))) - ((*mosek::fusion::p_FlatExpr::_get_impl(_4612)->ptrb)(((*_4688)(_4699))))))); ( ++ _4699 ); ( ++ _4698 ); }}if ((_4700 < _4691)){ ( ++ _4690 ); }else {}(_4696 = _4697); }}}(_4692 = _4693); }}}std::shared_ptr< monty::ndarray< long long,1 > > _4701 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((_4690 + (int)1)))); std::shared_ptr< monty::ndarray< long long,1 > > _4702 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_4691))); std::shared_ptr< monty::ndarray< double,1 > > _4703 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_4691))); std::shared_ptr< monty::ndarray< long long,1 > > _4704 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_4690))); std::shared_ptr< monty::ndarray< double,1 > > _4705 = ([&]() -> std::shared_ptr< monty::ndarray< double,1 > > { if ( ! mosek::fusion::p_FlatExpr::_get_impl(_4612)->bfix) return (nullptr); else return (std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_4690)))); })(); { int _4706 = (int)0; long long _4707 = (long long)0; int _4708 = (int)0; { int _4709 = (int)0; for (;(_4709 < _4684);){ int _4710 = _4709; { for (;((_4710 < _4684) && (((*_4656)(_4710)) == ((*_4656)(_4709))));( ++ _4710 )){ }}int _4711 = ((*_4656)(_4709)); int _4712 = ((*_4687)(((*_4688)((int)0)))); { { int _4713 = (int)0; for (;(_4713 < _4685);){ int _4714; { (_4714 = (_4713 + (int)1)); for (;((_4714 < _4685) && (((*_4687)(((*_4688)(_4714)))) == ((*_4687)(((*_4688)((_4714 - (int)1)))))));( ++ _4714 )){ }}int _4715 = _4709; int _4716 = _4713; long long _4717 = _4707; while (((_4715 < _4710) && (_4716 < _4714))) { if ((((*_4657)(_4715)) < ((*_4686)(((*_4688)(_4716)))))){ ( ++ _4715 ); }else if ((((*_4657)(_4715)) > ((*_4686)(((*_4688)(_4716)))))){ ( ++ _4716 ); }else { long long _4718 = ((*mosek::fusion::p_FlatExpr::_get_impl(_4612)->ptrb)(((*_4688)(_4716)))); long long _4719 = (((*mosek::fusion::p_FlatExpr::_get_impl(_4612)->ptrb)((((*_4688)(_4716)) + (int)1))) - _4718); ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_FlatExpr::_get_impl(_4612)->subj,((*mosek::fusion::p_FlatExpr::_get_impl(_4612)->ptrb)(((*_4688)(_4716)))),_4702,_4707,_4719); { int _4720 = (int)0; for (;(_4720 < _4719);( ++ _4720 )){ (((*_4703)((_4707 + _4720))) = (((*mosek::fusion::p_FlatExpr::_get_impl(_4612)->cof)((_4718 + _4720))) * ((*_4658)(_4715)))); }}if (_4705){ (((*_4705)(_4708)) = (((*_4705)(_4708)) + (((*mosek::fusion::p_FlatExpr::_get_impl(_4612)->bfix)(((*_4688)(_4716)))) * ((*_4658)(_4715))))); }else {}(_4707 = (_4707 + _4719)); ( ++ _4716 ); ( ++ _4715 ); }}if ((_4717 < _4707)){ (((*_4704)(_4708)) = ((long long)(((*_4656)(_4709)) * _4615) + ((*_4687)(((*_4688)(_4713)))))); ( ++ _4708 ); (((*_4701)(_4708)) = _4707); }else {}(_4713 = _4714); }}}(_4709 = _4710); }}}(_4617 = ::mosek::fusion::p_Expr::_new_Expr(_4701,mosek::fusion::p_FlatExpr::_get_impl(_4612)->x,_4702,_4703,_4705,_4613,_4704)); }}}return _4617; }void mosek::fusion::p_Expr::sparseMatrixVector( std::shared_ptr< monty::ndarray< long long,1 > > _4721,std::shared_ptr< monty::ndarray< int,1 > > _4722,std::shared_ptr< monty::ndarray< double,1 > > _4723,std::shared_ptr< monty::ndarray< double,1 > > _4724,std::shared_ptr< monty::ndarray< double,1 > > _4725,int _4726){ { int _4727 = (int)0; for (;(_4727 < _4726);( ++ _4727 )){ (((*_4725)(_4727)) = 0.0); }}{ int _4728 = (int)0; for (;(_4728 < _4726);( ++ _4728 )){ { long long _4729 = ((*_4721)(_4728)); for (;(_4729 < ((*_4721)((_4728 + (int)1))));( ++ _4729 )){ int _4730 = ((*_4722)(_4729)); (((*_4725)(_4728)) = (((*_4725)(_4728)) + (((*_4724)(_4730)) * ((*_4723)(_4730))))); }}}}}void mosek::fusion::p_Expr::sparseMatmul( std::shared_ptr< monty::ndarray< long long,1 > > _4731,std::shared_ptr< monty::ndarray< int,1 > > _4732,std::shared_ptr< monty::ndarray< double,1 > > _4733,std::shared_ptr< monty::ndarray< long long,1 > > _4734,std::shared_ptr< monty::ndarray< int,1 > > _4735,std::shared_ptr< monty::ndarray< double,1 > > _4736,std::shared_ptr< monty::ndarray< long long,1 > > _4737,std::shared_ptr< monty::ndarray< int,1 > > _4738,std::shared_ptr< monty::ndarray< double,1 > > _4739,int _4740,int _4741,std::shared_ptr< monty::ndarray< int,1 > > _4742){ int _4743 = (int)0; int _4744 = (int)0; std::shared_ptr< monty::ndarray< double,1 > > _4745 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_4741))); { int _4746 = (int)0; for (;(_4746 < _4741);( ++ _4746 )){ (((*_4742)(_4746)) = (- (int)1)); (((*_4745)(_4746)) = 0.0); }}{ int _4747 = (int)0; for (;(_4747 < _4740);( ++ _4747 )){ (_4744 = _4743); { long long _4748 = ((*_4734)(_4747)); for (;(_4748 < ((*_4734)((_4747 + (int)1))));( ++ _4748 )){ int _4749 = ((*_4735)(_4748)); double _4750 = ((*_4736)(_4748)); { long long _4751 = ((*_4737)(_4749)); for (;(_4751 < ((*_4737)((_4749 + (int)1))));( ++ _4751 )){ int _4752 = ((*_4738)(_4751)); if ((((*_4742)(_4752)) < _4744)){ (((*_4742)(_4752)) = _4743); (((*_4745)(_4752)) = (_4750 * ((*_4739)(_4751)))); (((*_4732)(_4743)) = _4752); ( ++ _4743 ); }else { (((*_4745)(_4752)) = (((*_4745)(_4752)) + (_4750 * ((*_4739)(_4751))))); }}}}}::mosek::fusion::Utils::Tools::sort(_4732,_4744,_4743); { int _4753 = _4744; for (;(_4753 < _4743);( ++ _4753 )){ (((*_4733)(_4753)) = ((*_4745)(((*_4732)(_4753))))); (((*_4745)(((*_4732)(_4753)))) = 0.0); }}}}}long long mosek::fusion::p_Expr::computeNz( std::shared_ptr< monty::ndarray< long long,1 > > _4754,std::shared_ptr< monty::ndarray< int,1 > > _4755,std::shared_ptr< monty::ndarray< long long,1 > > _4756,std::shared_ptr< monty::ndarray< int,1 > > _4757,int _4758,int _4759,std::shared_ptr< monty::ndarray< int,1 > > _4760,std::shared_ptr< monty::ndarray< long long,1 > > _4761){ long long _4762 = (long long)0; int _4763 = (int)0; { int _4764 = (int)0; for (;(_4764 < _4759);( ++ _4764 )){ (((*_4760)(_4764)) = (int)0); }}{ int _4765 = (int)0; for (;(_4765 < _4758);( ++ _4765 )){ ( ++ _4763 ); (((*_4761)(_4765)) = _4762); { long long _4766 = ((*_4754)(_4765)); for (;(_4766 < ((*_4754)((_4765 + (int)1))));( ++ _4766 )){ int _4767 = ((*_4755)(_4766)); { long long _4768 = ((*_4756)(_4767)); for (;(_4768 < ((*_4756)((_4767 + (int)1))));( ++ _4768 )){ int _4769 = ((*_4757)(_4768)); if ((((*_4760)(_4769)) != _4763)){ ( ++ _4762 ); (((*_4760)(_4769)) = _4763); }else {}}}}}}}(((*_4761)(_4758)) = _4762); return _4762; }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulDiag  ( monty::rc_ptr< ::mosek::fusion::Variable > _4770,    monty::rc_ptr< ::mosek::fusion::Matrix > _4771) { return mosek::fusion::p_Expr::mulDiag(_4770,_4771); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulDiag( monty::rc_ptr< ::mosek::fusion::Variable > _4770,monty::rc_ptr< ::mosek::fusion::Matrix > _4771){ if ((! _4770 || ! _4771)){ throw monty::NullPointerException(std::string ("Arguments for mulDiag may not be null"));}else {}monty::rc_ptr< ::mosek::fusion::Variable > _4772 = _4770; monty::rc_ptr< ::mosek::fusion::Matrix > _4773 = _4771; if (((mosek::fusion::p_Set::_get_impl(_4772->shape())->nd != (int)2) || ((mosek::fusion::p_Matrix::_get_impl(_4773)->dimj != _4772->shape()->dim((int)0)) || (mosek::fusion::p_Matrix::_get_impl(_4773)->dimi != _4772->shape()->dim((int)1))))){ throw ::mosek::fusion::DimensionError(std::string ("Mismatching dimensions of operands"));}else {}long long _4774 = (long long)mosek::fusion::p_Matrix::_get_impl(_4773)->dimj; monty::rc_ptr< ::mosek::fusion::Matrix > _9039 = _4773; if (nullptr != dynamic_cast< ::mosek::fusion::DenseMatrix* >(_9039.get())) {::mosek::fusion::DenseMatrix::t _4775(dynamic_cast< ::mosek::fusion::DenseMatrix* >(_9039.get()));{ long long _4777 = (_4774 * mosek::fusion::p_Matrix::_get_impl(_4775)->dimi); std::shared_ptr< monty::ndarray< long long,1 > > _4778 = ::mosek::fusion::Utils::Tools::range((long long)0,(_4774 * ((long long)1 + _4774)),_4774); std::shared_ptr< monty::ndarray< long long,1 > > _4779 = ::mosek::fusion::Utils::Tools::range((long long)0,_4777); std::shared_ptr< monty::ndarray< double,1 > > _4780 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_4777))); int _4781 = (int)0; { long long _4782 = (long long)0; for (;(_4782 < mosek::fusion::p_Matrix::_get_impl(_4775)->dimj);( ++ _4782 )){ { long long _4783 = (long long)0; for (;(_4783 < mosek::fusion::p_Matrix::_get_impl(_4775)->dimi);( ++ _4783 )){ (((*_4780)(_4781)) = ((*mosek::fusion::p_DenseMatrix::_get_impl(_4775)->data)(((_4783 * _4774) + _4782)))); ( ++ _4781 ); }}}}return ::mosek::fusion::p_Expr::_new_Expr(_4778,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{_4770}),_4779,_4780,nullptr,::mosek::fusion::Set::t(nullptr),nullptr,(int)1); }}else {mosek::fusion::Matrix::t _4776 = _9039;{ long long _4784 = _4776->numNonzeros(); std::shared_ptr< monty::ndarray< long long,1 > > _4785 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((_4774 + (int)1)))); std::shared_ptr< monty::ndarray< long long,1 > > _4786 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_4784))); std::shared_ptr< monty::ndarray< double,1 > > _4787 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_4784))); std::shared_ptr< monty::ndarray< int,1 > > _4788 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4784))); std::shared_ptr< monty::ndarray< int,1 > > _4789 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4784))); std::shared_ptr< monty::ndarray< double,1 > > _4790 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_4784))); _4776->getDataAsTriplets(_4788,_4789,_4790); { int _4791 = (int)0; for (;(_4791 < _4784);( ++ _4791 )){ ( ++ ((*_4785)((((*_4789)(_4791)) + (int)1))) ); }}{ int _4792 = (int)0; for (;(_4792 < _4774);( ++ _4792 )){ (((*_4785)((_4792 + (int)1))) = (((*_4785)(_4792)) + ((*_4785)((_4792 + (int)1))))); }}{ int _4793 = (int)0; for (;(_4793 < _4784);( ++ _4793 )){ long long _4794 = ((*_4785)(((*_4789)(_4793)))); (((*_4787)(_4794)) = ((*_4790)(_4793))); (((*_4786)(_4794)) = (long long)((((*_4789)(_4793)) * mosek::fusion::p_Matrix::_get_impl(_4776)->dimi) + ((*_4788)(_4793)))); ( ++ ((*_4785)(((*_4789)(_4793)))) ); }}{ long long _4795 = _4774; for (;(_4795 > (int)0);( -- _4795 )){ (((*_4785)(_4795)) = ((*_4785)((_4795 - (int)1)))); }}(((*_4785)((int)0)) = (long long)0); return ::mosek::fusion::p_Expr::_new_Expr(_4785,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{_4770}),_4786,_4787,nullptr,::mosek::fusion::Set::t(nullptr),nullptr,(int)1); }}}monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulDiag  ( monty::rc_ptr< ::mosek::fusion::Matrix > _4796,    monty::rc_ptr< ::mosek::fusion::Variable > _4797) { return mosek::fusion::p_Expr::mulDiag(_4796,_4797); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulDiag( monty::rc_ptr< ::mosek::fusion::Matrix > _4796,monty::rc_ptr< ::mosek::fusion::Variable > _4797){ if ((! _4797 || ! _4796)){ throw monty::NullPointerException(std::string ("Arguments for mulDiag may not be null"));}else {}monty::rc_ptr< ::mosek::fusion::Matrix > _4798 = _4796; monty::rc_ptr< ::mosek::fusion::Variable > _4799 = _4797; if (((mosek::fusion::p_Set::_get_impl(_4799->shape())->nd != (int)2) || ((mosek::fusion::p_Matrix::_get_impl(_4798)->dimj != _4799->shape()->dim((int)0)) || (mosek::fusion::p_Matrix::_get_impl(_4798)->dimi != _4799->shape()->dim((int)1))))){ throw ::mosek::fusion::DimensionError(std::string ("Mismatching dimensions of operands"));}else {}monty::rc_ptr< ::mosek::fusion::Matrix > _9040 = _4798; if (nullptr != dynamic_cast< ::mosek::fusion::DenseMatrix* >(_9040.get())) {::mosek::fusion::DenseMatrix::t _4800(dynamic_cast< ::mosek::fusion::DenseMatrix* >(_9040.get()));{ std::shared_ptr< monty::ndarray< long long,1 > > _4803 = ::mosek::fusion::Utils::Tools::range((long long)0,(long long)(mosek::fusion::p_Matrix::_get_impl(_4800)->dimj * ((int)1 + mosek::fusion::p_Matrix::_get_impl(_4800)->dimi)),(long long)mosek::fusion::p_Matrix::_get_impl(_4800)->dimj); std::shared_ptr< monty::ndarray< long long,1 > > _4804 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((mosek::fusion::p_Matrix::_get_impl(_4800)->dimi * mosek::fusion::p_Matrix::_get_impl(_4800)->dimj)))); std::shared_ptr< monty::ndarray< long long,1 > > _4805 = ([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _9041; for (int _4806=(int)0, _9042=mosek::fusion::p_Matrix::_get_impl(_4800)->dimi; _4806 < _9042;++_4806) for (int _4807=(int)0, _9043=mosek::fusion::p_Matrix::_get_impl(_4800)->dimj; _4807 < _9043;++_4807)_9041.push_back(((long long)_4806 + (mosek::fusion::p_Matrix::_get_impl(_4800)->dimi * _4807))); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9041.size()),_9041.begin(),_9041.end())); })(); std::shared_ptr< monty::ndarray< double,1 > > _4808 = mosek::fusion::p_DenseMatrix::_get_impl(_4800)->data; return ::mosek::fusion::p_Expr::_new_Expr(_4803,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{_4797}),_4805,_4808,nullptr,::mosek::fusion::Set::t(nullptr),nullptr,(int)1); }}else if (nullptr != dynamic_cast< ::mosek::fusion::SparseMatrix* >(_9040.get())) {::mosek::fusion::SparseMatrix::t _4801(dynamic_cast< ::mosek::fusion::SparseMatrix* >(_9040.get()));{ std::shared_ptr< monty::ndarray< long long,1 > > _4809 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((mosek::fusion::p_Matrix::_get_impl(_4801)->dimi + (int)1)))); std::shared_ptr< monty::ndarray< long long,1 > > _4810 = ([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _9044; for (long long _4811=(int)0, _9045=mosek::fusion::p_SparseMatrix::_get_impl(_4801)->nnz; _4811 < _9045;++_4811)_9044.push_back((long long)((((*mosek::fusion::p_SparseMatrix::_get_impl(_4801)->subj)(_4811)) * mosek::fusion::p_Matrix::_get_impl(_4801)->dimi) + ((*mosek::fusion::p_SparseMatrix::_get_impl(_4801)->subi)(_4811)))); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9044.size()),_9044.begin(),_9044.end())); })(); std::shared_ptr< monty::ndarray< double,1 > > _4812 = mosek::fusion::p_SparseMatrix::_get_impl(_4801)->val; long long _4813 = mosek::fusion::p_SparseMatrix::_get_impl(_4801)->nnz; int _9046 = (int)0; long long _9047 = _4813; for (long long _4814 = _9046;_4814<_9047;++_4814){ ( ++ ((*_4809)((((*mosek::fusion::p_SparseMatrix::_get_impl(_4801)->subi)(_4814)) + (int)1))) ); }int _9048 = (int)0; int _9049 = mosek::fusion::p_Matrix::_get_impl(_4801)->dimi; for (int _4815 = _9048;_4815<_9049;++_4815){ (((*_4809)((_4815 + (int)1))) = (((*_4809)(_4815)) + ((*_4809)((_4815 + (int)1))))); }return ::mosek::fusion::p_Expr::_new_Expr(_4809,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{_4797}),_4810,_4812,nullptr,::mosek::fusion::Set::t(nullptr),nullptr,(int)1); }}else {mosek::fusion::Matrix::t _4802 = _9040;{ throw ::mosek::fusion::MatrixError(std::string ("Unknown matrix type used."));}}}monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulDiag  ( monty::rc_ptr< ::mosek::fusion::Expression > _4816,    monty::rc_ptr< ::mosek::fusion::Matrix > _4817) { return mosek::fusion::p_Expr::mulDiag(_4816,_4817); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulDiag( monty::rc_ptr< ::mosek::fusion::Expression > _4816,monty::rc_ptr< ::mosek::fusion::Matrix > _4817){ if ((! _4817 || ! _4816)){ throw monty::NullPointerException(std::string ("Arguments for mulDiag may not be null"));}else {}monty::rc_ptr< ::mosek::fusion::Expression > _4818 = _4816; monty::rc_ptr< ::mosek::fusion::Matrix > _4819 = _4817; monty::rc_ptr< ::mosek::fusion::Expression > _4820; monty::rc_ptr< ::mosek::fusion::FlatExpr > _4821 = _4818->eval(); if ((mosek::fusion::p_Set::_get_impl(mosek::fusion::p_FlatExpr::_get_impl(_4821)->shape)->nd != (int)2)){ throw ::mosek::fusion::DimensionError(std::string ("Expression operand must have 2 dimensions"));}else {}if (((mosek::fusion::p_FlatExpr::_get_impl(_4821)->shape->dim((int)0) != mosek::fusion::p_Matrix::_get_impl(_4819)->dimj) || (mosek::fusion::p_FlatExpr::_get_impl(_4821)->shape->dim((int)1) != mosek::fusion::p_Matrix::_get_impl(_4819)->dimi))){ throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand dimensions"));}else {}int _4822 = mosek::fusion::p_FlatExpr::_get_impl(_4821)->shape->dim((int)0); int _4823 = mosek::fusion::p_FlatExpr::_get_impl(_4821)->shape->dim((int)1); monty::rc_ptr< ::mosek::fusion::Matrix > _9050 = _4819; if (nullptr != dynamic_cast< ::mosek::fusion::DenseMatrix* >(_9050.get())) {::mosek::fusion::DenseMatrix::t _4824(dynamic_cast< ::mosek::fusion::DenseMatrix* >(_9050.get()));{ if (! mosek::fusion::p_FlatExpr::_get_impl(_4821)->inst){ std::shared_ptr< monty::ndarray< long long,1 > > _4826 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((_4822 + (int)1)))); std::shared_ptr< monty::ndarray< long long,1 > > _4827 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(mosek::fusion::p_FlatExpr::_get_impl(_4821)->nnz))); std::shared_ptr< monty::ndarray< double,1 > > _4828 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(mosek::fusion::p_FlatExpr::_get_impl(_4821)->nnz))); std::shared_ptr< monty::ndarray< double,1 > > _4829 = ([&]() -> std::shared_ptr< monty::ndarray< double,1 > > { if ( ! mosek::fusion::p_FlatExpr::_get_impl(_4821)->bfix) return (nullptr); else return (std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_4822)))); })(); std::shared_ptr< monty::ndarray< long long,1 > > _4830 = nullptr; monty::rc_ptr< ::mosek::fusion::Set > _4831 = nullptr; int _4832 = (int)0; int _9051 = (int)0; int _9052 = _4822; for (int _4833 = _9051;_4833<_9052;++_4833){ (((*_4826)((_4833 + (int)1))) = ((*_4826)(_4833))); int _9053 = (int)0; int _9054 = _4823; for (int _4834 = _9053;_4834<_9054;++_4834){ long long _4835 = (((*mosek::fusion::p_FlatExpr::_get_impl(_4821)->ptrb)((_4832 + (int)1))) - ((*mosek::fusion::p_FlatExpr::_get_impl(_4821)->ptrb)(_4832))); double _4836 = ((*mosek::fusion::p_DenseMatrix::_get_impl(_4824)->data)(((_4834 * _4822) + _4833))); ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_FlatExpr::_get_impl(_4821)->subj,((*mosek::fusion::p_FlatExpr::_get_impl(_4821)->ptrb)(_4832)),_4827,((*_4826)((_4833 + (int)1))),_4835); int _9055 = (int)0; long long _9056 = _4835; for (long long _4837 = _9055;_4837<_9056;++_4837){ (((*_4828)((((*_4826)((_4833 + (int)1))) + _4837))) = (_4836 * ((*mosek::fusion::p_FlatExpr::_get_impl(_4821)->cof)((((*mosek::fusion::p_FlatExpr::_get_impl(_4821)->ptrb)(_4832)) + _4837))))); }if (_4829){ (((*_4829)(_4833)) += (_4836 * ((*mosek::fusion::p_FlatExpr::_get_impl(_4821)->bfix)(_4832)))); }else {}(((*_4826)((_4833 + (int)1))) = (((*_4826)((_4833 + (int)1))) + _4835)); ( ++ _4832 ); }}(_4820 = ::mosek::fusion::p_Expr::_new_Expr(_4826,mosek::fusion::p_FlatExpr::_get_impl(_4821)->x,_4827,_4828,_4829,_4831,_4830)); }else { int _4838 = (int)0; { long long _4839 = (- (long long)1); int _9057 = (int)0; int _9058 = (int)((mosek::fusion::p_FlatExpr::_get_impl(_4821)->inst)->size(0)); for (int _4840 = _9057;_4840<_9058;++_4840){ long long _4841 = (((*mosek::fusion::p_FlatExpr::_get_impl(_4821)->inst)(_4840)) / (long long)_4823); if ((_4839 < _4841)){ (_4839 = _4841); ( ++ _4838 ); }else {}}}std::shared_ptr< monty::ndarray< long long,1 > > _4842 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((_4838 + (int)1)))); std::shared_ptr< monty::ndarray< long long,1 > > _4843 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(mosek::fusion::p_FlatExpr::_get_impl(_4821)->nnz))); std::shared_ptr< monty::ndarray< double,1 > > _4844 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(mosek::fusion::p_FlatExpr::_get_impl(_4821)->nnz))); std::shared_ptr< monty::ndarray< double,1 > > _4845 = ([&]() -> std::shared_ptr< monty::ndarray< double,1 > > { if ( ! mosek::fusion::p_FlatExpr::_get_impl(_4821)->bfix) return (nullptr); else return (std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_4838)))); })(); std::shared_ptr< monty::ndarray< long long,1 > > _4846 = ([&]() -> std::shared_ptr< monty::ndarray< long long,1 > > { if ( (_4838 >= _4822)) return (nullptr); else return (std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_4838)))); })(); monty::rc_ptr< ::mosek::fusion::IntSet > _4847 = ::mosek::fusion::p_IntSet::_new_IntSet(_4822); { long long _4848 = (- (long long)1); int _4849 = (int)0; { int _4850 = (int)0; for (;(_4850 < (int)((mosek::fusion::p_FlatExpr::_get_impl(_4821)->inst)->size(0)));( ++ _4850 )){ long long _4851 = (((*mosek::fusion::p_FlatExpr::_get_impl(_4821)->inst)(_4850)) / (long long)_4823); long long _4852 = (((*mosek::fusion::p_FlatExpr::_get_impl(_4821)->inst)(_4850)) - (_4851 * (long long)_4823)); if ((_4848 < _4851)){ (_4848 = _4851); if (_4846){ (((*_4846)(_4849)) = _4851); }else {}( ++ _4849 ); (((*_4842)(_4849)) = ((*_4842)((_4849 - (int)1)))); }else {}long long _4853 = (((*mosek::fusion::p_FlatExpr::_get_impl(_4821)->ptrb)((_4850 + (int)1))) - ((*mosek::fusion::p_FlatExpr::_get_impl(_4821)->ptrb)(_4850))); ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_FlatExpr::_get_impl(_4821)->subj,((*mosek::fusion::p_FlatExpr::_get_impl(_4821)->ptrb)(_4850)),_4843,((*_4842)(_4849)),_4853); double _4854 = ((*mosek::fusion::p_DenseMatrix::_get_impl(_4824)->data)(((_4852 * _4822) + _4851))); int _9059 = (int)0; long long _9060 = _4853; for (long long _4855 = _9059;_4855<_9060;++_4855){ (((*_4844)((((*_4842)(_4849)) + _4855))) = (_4854 * ((*mosek::fusion::p_FlatExpr::_get_impl(_4821)->cof)((((*mosek::fusion::p_FlatExpr::_get_impl(_4821)->ptrb)(_4850)) + _4855))))); }if (_4845){ (((*_4845)((_4849 - (int)1))) += (_4854 * ((*mosek::fusion::p_FlatExpr::_get_impl(_4821)->bfix)(_4850)))); }else {}(((*_4842)(_4849)) = (((*_4842)(_4849)) + _4853)); }}}(_4820 = ::mosek::fusion::p_Expr::_new_Expr(_4842,mosek::fusion::p_FlatExpr::_get_impl(_4821)->x,_4843,_4844,_4845,::mosek::fusion::Set::t(_4847),_4846)); }}}else {mosek::fusion::Matrix::t _4825 = _9050;{ long long _4856 = _4825->numNonzeros(); std::shared_ptr< monty::ndarray< int,1 > > _4857 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4856))); std::shared_ptr< monty::ndarray< int,1 > > _4858 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4856))); std::shared_ptr< monty::ndarray< double,1 > > _4859 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_4856))); std::shared_ptr< monty::ndarray< long long,1 > > _4860 = ::mosek::fusion::Utils::Tools::range((long long)_4856); _4825->getDataAsTriplets(_4857,_4858,_4859); ::mosek::fusion::Utils::Tools::argsort(_4860,_4858,_4857,(long long)((int)0),_4856); if (! mosek::fusion::p_FlatExpr::_get_impl(_4821)->inst){ int _4861 = (int)0; long long _4862 = (long long)0; { int _4863 = (- (int)1); { int _4864 = (int)0; for (;(_4864 < _4856);( ++ _4864 )){ if ((_4863 < ((*_4858)(((*_4860)(_4864)))))){ ( ++ _4861 ); (_4863 = ((*_4858)(((*_4860)(_4864))))); }else {}int _4865 = ((((*_4858)(((*_4860)(_4864)))) * mosek::fusion::p_Matrix::_get_impl(_4825)->dimi) + ((*_4857)(((*_4860)(_4864))))); (_4862 = (_4862 + (((*mosek::fusion::p_FlatExpr::_get_impl(_4821)->ptrb)((_4865 + (int)1))) - ((*mosek::fusion::p_FlatExpr::_get_impl(_4821)->ptrb)(_4865))))); }}}std::shared_ptr< monty::ndarray< long long,1 > > _4866 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((_4861 + (int)1)))); std::shared_ptr< monty::ndarray< long long,1 > > _4867 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_4862))); std::shared_ptr< monty::ndarray< double,1 > > _4868 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_4862))); std::shared_ptr< monty::ndarray< double,1 > > _4869 = ([&]() -> std::shared_ptr< monty::ndarray< double,1 > > { if ( ! mosek::fusion::p_FlatExpr::_get_impl(_4821)->bfix) return (nullptr); else return (std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_4861)))); })(); std::shared_ptr< monty::ndarray< long long,1 > > _4870 = ([&]() -> std::shared_ptr< monty::ndarray< long long,1 > > { if ( (_4861 >= mosek::fusion::p_Matrix::_get_impl(_4825)->dimj)) return (nullptr); else return (std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_4861)))); })(); monty::rc_ptr< ::mosek::fusion::IntSet > _4871 = ::mosek::fusion::p_IntSet::_new_IntSet(mosek::fusion::p_Matrix::_get_impl(_4825)->dimj); { long long _4872 = (- (long long)1); int _4873 = (int)0; int _9061 = (int)0; long long _9062 = _4856; for (long long _4874 = _9061;_4874<_9062;++_4874){ if ((_4872 < ((*_4858)(((*_4860)(_4874)))))){ (_4872 = ((*_4858)(((*_4860)(_4874))))); if (_4870){ (((*_4870)(_4873)) = _4872); }else {}( ++ _4873 ); (((*_4866)(_4873)) = ((*_4866)((_4873 - (int)1)))); }else {}int _4875 = ((((*_4858)(((*_4860)(_4874)))) * mosek::fusion::p_Matrix::_get_impl(_4825)->dimi) + ((*_4857)(((*_4860)(_4874))))); long long _4876 = (((*mosek::fusion::p_FlatExpr::_get_impl(_4821)->ptrb)((_4875 + (int)1))) - ((*mosek::fusion::p_FlatExpr::_get_impl(_4821)->ptrb)(_4875))); ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_FlatExpr::_get_impl(_4821)->subj,((*mosek::fusion::p_FlatExpr::_get_impl(_4821)->ptrb)(_4875)),_4867,((*_4866)(_4873)),_4876); int _9063 = (int)0; long long _9064 = _4876; for (long long _4877 = _9063;_4877<_9064;++_4877){ (((*_4868)((((*_4866)(_4873)) + _4877))) = (((*mosek::fusion::p_FlatExpr::_get_impl(_4821)->cof)((((*mosek::fusion::p_FlatExpr::_get_impl(_4821)->ptrb)(_4875)) + _4877))) * ((*_4859)(((*_4860)(_4874)))))); }if (_4869){ (((*_4869)(_4872)) += (((*mosek::fusion::p_FlatExpr::_get_impl(_4821)->bfix)(_4875)) * ((*_4859)(((*_4860)(_4874)))))); }else {}(((*_4866)(_4873)) = (((*_4866)(_4873)) + _4876)); }}(_4820 = ::mosek::fusion::p_Expr::_new_Expr(_4866,mosek::fusion::p_FlatExpr::_get_impl(_4821)->x,_4867,_4868,_4869,::mosek::fusion::Set::t(_4871),_4870)); }else { int _4878 = (int)0; long long _4879 = (long long)0; { int _4880 = (int)0; int _4881 = (int)0; long long _4882 = (- (long long)1); while (((_4880 < (int)((mosek::fusion::p_FlatExpr::_get_impl(_4821)->inst)->size(0))) && (_4881 < _4856))) { long long _4883 = (((*mosek::fusion::p_FlatExpr::_get_impl(_4821)->inst)(_4880)) / _4823); long long _4884 = (((*mosek::fusion::p_FlatExpr::_get_impl(_4821)->inst)(_4880)) - (_4883 * _4823)); if ((_4883 < ((*_4858)(((*_4860)(_4881)))))){ ( ++ _4880 ); }else if ((_4883 > ((*_4858)(((*_4860)(_4881)))))){ ( ++ _4881 ); }else if ((_4884 < ((*_4857)(((*_4860)(_4881)))))){ ( ++ _4880 ); }else if ((_4884 > ((*_4857)(((*_4860)(_4881)))))){ ( ++ _4881 ); }else { if ((_4882 < _4883)){ ( ++ _4878 ); (_4882 = _4883); }else {}(_4879 = (_4879 + (((*mosek::fusion::p_FlatExpr::_get_impl(_4821)->ptrb)((_4880 + (int)1))) - ((*mosek::fusion::p_FlatExpr::_get_impl(_4821)->ptrb)(_4880))))); ( ++ _4880 ); ( ++ _4881 ); }}}std::shared_ptr< monty::ndarray< long long,1 > > _4885 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((_4878 + (int)1)))); std::shared_ptr< monty::ndarray< long long,1 > > _4886 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_4879))); std::shared_ptr< monty::ndarray< double,1 > > _4887 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_4879))); std::shared_ptr< monty::ndarray< double,1 > > _4888 = ([&]() -> std::shared_ptr< monty::ndarray< double,1 > > { if ( ! mosek::fusion::p_FlatExpr::_get_impl(_4821)->bfix) return (nullptr); else return (std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_4878)))); })(); std::shared_ptr< monty::ndarray< long long,1 > > _4889 = ([&]() -> std::shared_ptr< monty::ndarray< long long,1 > > { if ( (_4878 >= _4822)) return (nullptr); else return (std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_4878)))); })(); monty::rc_ptr< ::mosek::fusion::IntSet > _4890 = ::mosek::fusion::p_IntSet::_new_IntSet(_4822); { int _4891 = (int)0; int _4892 = (int)0; long long _4893 = (- (long long)1); int _4894 = (int)0; while (((_4891 < (int)((mosek::fusion::p_FlatExpr::_get_impl(_4821)->inst)->size(0))) && (_4892 < _4856))) { long long _4895 = (((*mosek::fusion::p_FlatExpr::_get_impl(_4821)->inst)(_4891)) / (long long)_4823); long long _4896 = (((*mosek::fusion::p_FlatExpr::_get_impl(_4821)->inst)(_4891)) - (_4895 * (long long)_4823)); if ((_4895 < ((*_4858)(((*_4860)(_4892)))))){ ( ++ _4891 ); }else if ((_4895 > ((*_4858)(((*_4860)(_4892)))))){ ( ++ _4892 ); }else if ((_4896 < ((*_4857)(((*_4860)(_4892)))))){ ( ++ _4891 ); }else if ((_4896 > ((*_4857)(((*_4860)(_4892)))))){ ( ++ _4892 ); }else { if ((_4893 < _4895)){ if (_4889){ (((*_4889)(_4894)) = _4895); }else {}( ++ _4894 ); (((*_4885)(_4894)) = ((*_4885)((_4894 - (int)1)))); (_4893 = _4895); }else {}long long _4897 = (((*mosek::fusion::p_FlatExpr::_get_impl(_4821)->ptrb)((_4891 + (int)1))) - ((*mosek::fusion::p_FlatExpr::_get_impl(_4821)->ptrb)(_4891))); double _4898 = ((*_4859)(((*_4860)(_4892)))); ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_FlatExpr::_get_impl(_4821)->subj,((*mosek::fusion::p_FlatExpr::_get_impl(_4821)->ptrb)(_4891)),_4886,((*_4885)(_4894)),_4897); { int _4899 = (int)0; for (;(_4899 < _4897);( ++ _4899 )){ (((*_4887)((((*_4885)(_4894)) + _4899))) = (_4898 * ((*mosek::fusion::p_FlatExpr::_get_impl(_4821)->cof)((((*mosek::fusion::p_FlatExpr::_get_impl(_4821)->ptrb)(_4891)) + _4899))))); }}if (_4888){ (((*_4888)((_4894 - (int)1))) = (((*_4888)((_4894 - (int)1))) + (_4898 * ((*mosek::fusion::p_FlatExpr::_get_impl(_4821)->bfix)(_4891))))); }else {}(((*_4885)(_4894)) = (((*_4885)(_4894)) + _4897)); ( ++ _4891 ); ( ++ _4892 ); }}}(_4820 = ::mosek::fusion::p_Expr::_new_Expr(_4885,mosek::fusion::p_FlatExpr::_get_impl(_4821)->x,_4886,_4887,_4888,::mosek::fusion::Set::t(_4890),_4889)); }}}return _4820; }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulDiag  ( monty::rc_ptr< ::mosek::fusion::Matrix > _4900,    monty::rc_ptr< ::mosek::fusion::Expression > _4901) { return mosek::fusion::p_Expr::mulDiag(_4900,_4901); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulDiag( monty::rc_ptr< ::mosek::fusion::Matrix > _4900,monty::rc_ptr< ::mosek::fusion::Expression > _4901){ if ((! _4900 || ! _4901)){ throw monty::NullPointerException(std::string ("Arguments for mulDiag may not be null"));}else {}monty::rc_ptr< ::mosek::fusion::Matrix > _4902 = _4900; monty::rc_ptr< ::mosek::fusion::Expression > _4903 = _4901; monty::rc_ptr< ::mosek::fusion::Expression > _4904; monty::rc_ptr< ::mosek::fusion::FlatExpr > _4905 = _4903->eval(); if ((mosek::fusion::p_Set::_get_impl(mosek::fusion::p_FlatExpr::_get_impl(_4905)->shape)->nd != (int)2)){ throw ::mosek::fusion::DimensionError(std::string ("Expression operand must have 2 dimensions"));}else {}if (((mosek::fusion::p_FlatExpr::_get_impl(_4905)->shape->dim((int)0) != mosek::fusion::p_Matrix::_get_impl(_4902)->dimj) || (mosek::fusion::p_FlatExpr::_get_impl(_4905)->shape->dim((int)1) != mosek::fusion::p_Matrix::_get_impl(_4902)->dimi))){ throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand dimensions"));}else {}int _4906 = mosek::fusion::p_FlatExpr::_get_impl(_4905)->shape->dim((int)0); int _4907 = mosek::fusion::p_FlatExpr::_get_impl(_4905)->shape->dim((int)1); std::shared_ptr< monty::ndarray< long long,1 > > _4908; std::shared_ptr< monty::ndarray< long long,1 > > _4909; if (mosek::fusion::p_FlatExpr::_get_impl(_4905)->inst){ (_4908 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(((long long)((mosek::fusion::p_FlatExpr::_get_impl(_4905)->ptrb)->size(0)) - (int)1))))); (_4909 = ::mosek::fusion::Utils::Tools::range((long long)((_4908)->size(0)))); int _9065 = (int)0; int _9066 = (int)((_4908)->size(0)); for (int _4910 = _9065;_4910<_9066;++_4910){ long long _4911 = (((*mosek::fusion::p_FlatExpr::_get_impl(_4905)->inst)(_4910)) / (long long)_4907); long long _4912 = (((*mosek::fusion::p_FlatExpr::_get_impl(_4905)->inst)(_4910)) % (long long)_4907); (((*_4908)(_4910)) = ((_4912 * _4906) + _4911)); }::mosek::fusion::p_CommonTools::argQsort(_4909,_4908,std::shared_ptr< monty::ndarray< long long,1 > >(nullptr),(long long)0,(long long)((_4909)->size(0))); }else { (_4908 = ([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _9067; for (int _4913=(int)0, _9068=((int)((mosek::fusion::p_FlatExpr::_get_impl(_4905)->ptrb)->size(0)) - (int)1); _4913 < _9068;++_4913)_9067.push_back((((long long)(_4913 % _4907) * _4906) + (_4913 / _4907))); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9067.size()),_9067.begin(),_9067.end())); })()); (_4909 = ([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _9069; for (int _4914=(int)0, _9070=((int)((mosek::fusion::p_FlatExpr::_get_impl(_4905)->ptrb)->size(0)) - (int)1); _4914 < _9070;++_4914)_9069.push_back((((long long)(_4914 % _4906) * _4907) + (_4914 / _4906))); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9069.size()),_9069.begin(),_9069.end())); })()); }monty::rc_ptr< ::mosek::fusion::Matrix > _9071 = _4902; if (nullptr != dynamic_cast< ::mosek::fusion::DenseMatrix* >(_9071.get())) {::mosek::fusion::DenseMatrix::t _4915(dynamic_cast< ::mosek::fusion::DenseMatrix* >(_9071.get()));{ long long _4917 = (long long)0; if (! mosek::fusion::p_FlatExpr::_get_impl(_4905)->inst){ (_4917 = (long long)_4907); }else { int _4918 = (- (int)1); int _9072 = (int)0; int _9073 = (int)((_4908)->size(0)); for (int _4919 = _9072;_4919<_9073;++_4919){ int _4920 = (int)(((*_4908)(((*_4909)(_4919)))) / (long long)mosek::fusion::p_Matrix::_get_impl(_4915)->dimj); if ((_4920 > _4918)){ ( ++ _4917 ); (_4918 = _4920); }else {}}}long long _4921 = (long long)((mosek::fusion::p_FlatExpr::_get_impl(_4905)->subj)->size(0)); std::shared_ptr< monty::ndarray< long long,1 > > _4922 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((_4917 + (int)1)))); std::shared_ptr< monty::ndarray< long long,1 > > _4923 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_4921))); std::shared_ptr< monty::ndarray< double,1 > > _4924 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_4921))); std::shared_ptr< monty::ndarray< double,1 > > _4925 = nullptr; std::shared_ptr< monty::ndarray< long long,1 > > _4926 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_4917))); { int _4927 = (- (int)1); long long _4928 = (long long)0; int _9074 = (int)0; int _9075 = (int)((_4908)->size(0)); for (int _4929 = _9074;_4929<_9075;++_4929){ int _4930 = (int)(((*_4908)(((*_4909)(_4929)))) / (long long)_4906); if ((_4930 > _4927)){ ( ++ _4928 ); (_4927 = _4930); (((*_4922)(_4928)) = ((*_4922)((_4928 - (long long)1)))); (((*_4926)((_4928 - (long long)1))) = (long long)_4930); }else {}long long _4931 = (((*mosek::fusion::p_FlatExpr::_get_impl(_4905)->ptrb)((((*_4909)(_4929)) + (int)1))) - ((*mosek::fusion::p_FlatExpr::_get_impl(_4905)->ptrb)(((*_4909)(_4929))))); long long _9076 = (long long)0; long long _9077 = _4931; for (long long _4932 = _9076;_4932<_9077;++_4932){ (((*_4923)((((*_4922)(_4928)) + _4932))) = ((*mosek::fusion::p_FlatExpr::_get_impl(_4905)->subj)((((*mosek::fusion::p_FlatExpr::_get_impl(_4905)->ptrb)(((*_4909)(_4929)))) + _4932)))); (((*_4924)((((*_4922)(_4928)) + _4932))) = (((*mosek::fusion::p_FlatExpr::_get_impl(_4905)->cof)((((*mosek::fusion::p_FlatExpr::_get_impl(_4905)->ptrb)(((*_4909)(_4929)))) + _4932))) * ((*mosek::fusion::p_DenseMatrix::_get_impl(_4915)->data)(((*_4908)(((*_4909)(_4929)))))))); }(((*_4922)(_4928)) = (((*_4922)(_4928)) + _4931)); }}if (mosek::fusion::p_FlatExpr::_get_impl(_4905)->bfix){ int _4933 = (- (int)1); int _4934 = (int)0; (_4925 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_4917)))); int _9078 = (int)0; int _9079 = (int)((_4908)->size(0)); for (int _4935 = _9078;_4935<_9079;++_4935){ int _4936 = (int)(((*_4908)(((*_4909)(_4935)))) / (long long)mosek::fusion::p_Matrix::_get_impl(_4915)->dimj); if ((_4936 > _4933)){ ( ++ _4934 ); (_4933 = _4936); }else {}(((*_4925)((_4934 - (int)1))) += (((*mosek::fusion::p_DenseMatrix::_get_impl(_4915)->data)(((*_4908)(((*_4909)(_4935)))))) * ((*mosek::fusion::p_FlatExpr::_get_impl(_4905)->bfix)(((*_4909)(_4935)))))); }}else {}(_4904 = ::mosek::fusion::p_Expr::_new_Expr(_4922,mosek::fusion::p_FlatExpr::_get_impl(_4905)->x,_4923,_4924,_4925,::mosek::fusion::Set::t(nullptr),([&]() -> std::shared_ptr< monty::ndarray< long long,1 > > { if ( ((int)((_4926)->size(0)) < mosek::fusion::p_Matrix::_get_impl(_4915)->dimi)) return (_4926); else return (nullptr); })())); }}else {mosek::fusion::Matrix::t _4916 = _9071;{ std::shared_ptr< monty::ndarray< int,1 > > _4937 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4916->numNonzeros()))); std::shared_ptr< monty::ndarray< int,1 > > _4938 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4916->numNonzeros()))); std::shared_ptr< monty::ndarray< double,1 > > _4939 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_4916->numNonzeros()))); long long _4940 = _4916->numNonzeros(); int _4941 = _4916->numRows(); int _4942 = _4916->numColumns(); _4916->getDataAsTriplets(_4937,_4938,_4939); int _4943 = (int)0; long long _4944 = (long long)0; { int _4945 = (- (int)1); int _4946 = (int)0; int _4947 = (int)0; while (((_4946 < _4940) && (_4947 < (int)((_4908)->size(0))))) { int _4948 = ((((*_4937)(_4946)) * _4942) + ((*_4938)(_4946))); if ((_4948 < ((*_4908)(((*_4909)(_4947)))))){ ( ++ _4946 ); }else if ((_4948 > ((*_4908)(((*_4909)(_4947)))))){ ( ++ _4947 ); }else { if ((_4945 < ((*_4937)(_4946)))){ (_4945 = ((*_4937)(_4946))); ( ++ _4943 ); }else {}(_4944 = (_4944 + (((*mosek::fusion::p_FlatExpr::_get_impl(_4905)->ptrb)((((*_4909)(_4947)) + (int)1))) - ((*mosek::fusion::p_FlatExpr::_get_impl(_4905)->ptrb)(((*_4909)(_4947))))))); ( ++ _4947 ); ( ++ _4946 ); }}}std::shared_ptr< monty::ndarray< long long,1 > > _4949 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((_4943 + (int)1)))); std::shared_ptr< monty::ndarray< long long,1 > > _4950 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_4944))); std::shared_ptr< monty::ndarray< double,1 > > _4951 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_4944))); std::shared_ptr< monty::ndarray< double,1 > > _4952 = nullptr; std::shared_ptr< monty::ndarray< long long,1 > > _4953 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_4943))); { int _4954 = (- (int)1); int _4955 = (int)0; int _4956 = (int)0; long long _4957 = (long long)0; while (((_4955 < _4940) && (_4956 < (int)((_4908)->size(0))))) { int _4958 = ((((*_4937)(_4955)) * _4942) + ((*_4938)(_4955))); if ((_4958 < ((*_4908)(((*_4909)(_4956)))))){ ( ++ _4955 ); }else if ((_4958 > ((*_4908)(((*_4909)(_4956)))))){ ( ++ _4956 ); }else { if ((_4954 < ((*_4937)(_4955)))){ (_4954 = ((*_4937)(_4955))); ( ++ _4957 ); (((*_4953)((_4957 - (int)1))) = (long long)_4954); (((*_4949)(_4957)) = ((*_4949)((_4957 - (long long)1)))); }else {}long long _4959 = (((*mosek::fusion::p_FlatExpr::_get_impl(_4905)->ptrb)((((*_4909)(_4956)) + (int)1))) - ((*mosek::fusion::p_FlatExpr::_get_impl(_4905)->ptrb)(((*_4909)(_4956))))); long long _9080 = (long long)0; long long _9081 = _4959; for (long long _4960 = _9080;_4960<_9081;++_4960){ (((*_4950)((((*_4949)(_4957)) + _4960))) = ((*mosek::fusion::p_FlatExpr::_get_impl(_4905)->subj)((((*mosek::fusion::p_FlatExpr::_get_impl(_4905)->ptrb)(((*_4909)(_4956)))) + _4960)))); (((*_4951)(((*_4949)((_4957 + _4960))))) = (((*mosek::fusion::p_FlatExpr::_get_impl(_4905)->cof)((((*mosek::fusion::p_FlatExpr::_get_impl(_4905)->ptrb)(((*_4909)(_4956)))) + _4960))) * ((*_4939)(_4955)))); }(((*_4949)(_4957)) = (((*_4949)(_4957)) + _4959)); ( ++ _4956 ); ( ++ _4955 ); }}}if (mosek::fusion::p_FlatExpr::_get_impl(_4905)->bfix){ int _4961 = (- (int)1); int _4962 = (int)0; int _4963 = (int)0; long long _4964 = (long long)0; (_4952 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_4943)))); while (((_4962 < _4940) && (_4963 < (int)((_4908)->size(0))))) { int _4965 = ((((*_4937)(_4962)) * _4942) + ((*_4938)(_4962))); if ((_4965 < ((*_4908)(((*_4909)(_4963)))))){ ( ++ _4962 ); }else if ((_4965 > ((*_4908)(((*_4909)(_4963)))))){ ( ++ _4963 ); }else { if ((_4961 < ((*_4937)(_4962)))){ (_4961 = ((*_4937)(_4962))); ( ++ _4964 ); }else {}(((*_4952)((_4964 - (int)1))) = (((*_4952)((_4964 - (int)1))) + (((*mosek::fusion::p_FlatExpr::_get_impl(_4905)->bfix)(((*_4909)(_4963)))) * ((*_4939)(_4962))))); ( ++ _4963 ); ( ++ _4962 ); }}}else {}if (((int)((_4953)->size(0)) == mosek::fusion::p_Matrix::_get_impl(_4916)->dimi)){ (_4953 = nullptr); }else {}(_4904 = ::mosek::fusion::p_Expr::_new_Expr(_4949,mosek::fusion::p_FlatExpr::_get_impl(_4905)->x,_4950,_4951,_4952,::mosek::fusion::p_Set::make(mosek::fusion::p_Matrix::_get_impl(_4916)->dimi),_4953)); }}return _4904; }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulDiag  ( monty::rc_ptr< ::mosek::fusion::Variable > _4966,    std::shared_ptr< monty::ndarray< double,2 > > _4967) { return mosek::fusion::p_Expr::mulDiag(_4966,_4967); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulDiag( monty::rc_ptr< ::mosek::fusion::Variable > _4966,std::shared_ptr< monty::ndarray< double,2 > > _4967){ return ::mosek::fusion::p_Expr::mulDiag(_4966,::mosek::fusion::p_Matrix::dense(_4967)); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulDiag  ( std::shared_ptr< monty::ndarray< double,2 > > _4968,    monty::rc_ptr< ::mosek::fusion::Variable > _4969) { return mosek::fusion::p_Expr::mulDiag(_4968,_4969); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulDiag( std::shared_ptr< monty::ndarray< double,2 > > _4968,monty::rc_ptr< ::mosek::fusion::Variable > _4969){ return ::mosek::fusion::p_Expr::mulDiag(::mosek::fusion::p_Matrix::dense(_4968),_4969); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulDiag  ( monty::rc_ptr< ::mosek::fusion::Expression > _4970,    std::shared_ptr< monty::ndarray< double,2 > > _4971) { return mosek::fusion::p_Expr::mulDiag(_4970,_4971); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulDiag( monty::rc_ptr< ::mosek::fusion::Expression > _4970,std::shared_ptr< monty::ndarray< double,2 > > _4971){ return ::mosek::fusion::p_Expr::mulDiag(_4970,::mosek::fusion::p_Matrix::dense(_4971)); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulDiag  ( std::shared_ptr< monty::ndarray< double,2 > > _4972,    monty::rc_ptr< ::mosek::fusion::Expression > _4973) { return mosek::fusion::p_Expr::mulDiag(_4972,_4973); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulDiag( std::shared_ptr< monty::ndarray< double,2 > > _4972,monty::rc_ptr< ::mosek::fusion::Expression > _4973){ return ::mosek::fusion::p_Expr::mulDiag(::mosek::fusion::p_Matrix::dense(_4972),_4973); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm_( monty::rc_ptr< ::mosek::fusion::Matrix > _4974,monty::rc_ptr< ::mosek::fusion::Expression > _4975){ if (((_4974->numRows() != _4975->shape()->dim((int)0)) || ((_4974->numColumns() != _4975->shape()->dim((int)1)) || ((_4974->numRows() * _4974->numColumns()) != _4975->shape()->getSize())))){ throw ::mosek::fusion::DimensionError(std::string ("Dimensions of operands do not match"));}else {}long long _4976 = _4974->numNonzeros(); std::shared_ptr< monty::ndarray< int,1 > > _4977 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4976))); std::shared_ptr< monty::ndarray< int,1 > > _4978 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4976))); std::shared_ptr< monty::ndarray< double,1 > > _4979 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_4976))); _4974->getDataAsTriplets(_4977,_4978,_4979); std::shared_ptr< monty::ndarray< long long,1 > > _4980 = ([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _9082; for (long long _4981=(int)0, _9083=_4976; _4981 < _9083;++_4981)_9082.push_back(((((*_4977)(_4981)) * _4974->numColumns()) + ((*_4978)(_4981)))); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9082.size()),_9082.begin(),_9082.end())); })(); monty::rc_ptr< ::mosek::fusion::FlatExpr > _4982 = _4975->eval(); return ::mosek::fusion::p_Expr::dotmul_(_4980,_4979,mosek::fusion::p_FlatExpr::_get_impl(_4982)->ptrb,mosek::fusion::p_FlatExpr::_get_impl(_4982)->subj,mosek::fusion::p_FlatExpr::_get_impl(_4982)->cof,mosek::fusion::p_FlatExpr::_get_impl(_4982)->bfix,mosek::fusion::p_FlatExpr::_get_impl(_4982)->inst,mosek::fusion::p_FlatExpr::_get_impl(_4982)->x,mosek::fusion::p_FlatExpr::_get_impl(_4982)->shape); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm_( monty::rc_ptr< ::mosek::fusion::Matrix > _4983,monty::rc_ptr< ::mosek::fusion::Variable > _4984){ if (((_4983->numRows() != _4984->shape()->dim((int)0)) || ((_4983->numColumns() != _4984->shape()->dim((int)1)) || ((_4983->numRows() * _4983->numColumns()) != _4984->shape()->getSize())))){ throw ::mosek::fusion::DimensionError(std::string ("Dimensions of operands do not match"));}else {}long long _4985 = _4983->numNonzeros(); std::shared_ptr< monty::ndarray< int,1 > > _4986 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4985))); std::shared_ptr< monty::ndarray< int,1 > > _4987 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4985))); std::shared_ptr< monty::ndarray< double,1 > > _4988 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_4985))); _4983->getDataAsTriplets(_4986,_4987,_4988); std::shared_ptr< monty::ndarray< long long,1 > > _4989 = ([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _9084; for (long long _4990=(int)0, _9085=_4985; _4990 < _9085;++_4990)_9084.push_back(((((*_4986)(_4990)) * _4983->numColumns()) + ((*_4987)(_4990)))); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9084.size()),_9084.begin(),_9084.end())); })(); return ::mosek::fusion::p_Expr::dotmul_(_4989,_4988,_4984,_4984->shape()); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm_( std::shared_ptr< monty::ndarray< double,1 > > _4991,monty::rc_ptr< ::mosek::fusion::Variable > _4992){ if ((! _4992 || ! _4991)){ throw monty::NullPointerException(std::string ("Arguments for mulElm may not be null"));}else {}if (((_4992->shape()->dim((int)0) != (int)((_4991)->size(0))) || (_4992->shape()->getSize() != (long long)((_4991)->size(0))))){ throw ::mosek::fusion::DimensionError(std::string ("Dimensions of operands do not match"));}else {}return ::mosek::fusion::p_Expr::dotmul_(::mosek::fusion::Utils::Tools::range((long long)0,(long long)((_4991)->size(0))),_4991,_4992,_4992->shape()); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm_( std::shared_ptr< monty::ndarray< double,1 > > _4993,monty::rc_ptr< ::mosek::fusion::Expression > _4994){ if ((! _4993 || ! _4994)){ throw monty::NullPointerException(std::string ("Arguments for mulElm may not be null"));}else {}if (((_4994->shape()->dim((int)0) != (int)((_4993)->size(0))) || (_4994->shape()->getSize() != (long long)((_4993)->size(0))))){ throw ::mosek::fusion::DimensionError(std::string ("Dimensions of operands do not match"));}else {}monty::rc_ptr< ::mosek::fusion::FlatExpr > _4995 = _4994->eval(); return ::mosek::fusion::p_Expr::dotmul_(::mosek::fusion::Utils::Tools::range((long long)0,(long long)((_4993)->size(0))),_4993,mosek::fusion::p_FlatExpr::_get_impl(_4995)->ptrb,mosek::fusion::p_FlatExpr::_get_impl(_4995)->subj,mosek::fusion::p_FlatExpr::_get_impl(_4995)->cof,mosek::fusion::p_FlatExpr::_get_impl(_4995)->bfix,mosek::fusion::p_FlatExpr::_get_impl(_4995)->inst,mosek::fusion::p_FlatExpr::_get_impl(_4995)->x,mosek::fusion::p_FlatExpr::_get_impl(_4995)->shape); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm_( monty::rc_ptr< ::mosek::fusion::NDSparseArray > _4996,monty::rc_ptr< ::mosek::fusion::Expression > _4997){ if ((! _4996 || ! _4997)){ throw monty::NullPointerException(std::string ("Arguments for mulElm may not be null"));}else {}int _9086 = (int)0; int _9087 = (int)((mosek::fusion::p_NDSparseArray::_get_impl(_4996)->dims)->size(0)); for (int _4998 = _9086;_4998<_9087;++_4998){ if ((((*mosek::fusion::p_NDSparseArray::_get_impl(_4996)->dims)(_4998)) != _4997->shape()->dim(_4998))){ throw ::mosek::fusion::DimensionError(std::string ("Dimensions of operands do not match"));}else {}}int _9088 = (int)((mosek::fusion::p_NDSparseArray::_get_impl(_4996)->dims)->size(0)); int _9089 = mosek::fusion::p_Set::_get_impl(_4997->shape())->nd; for (int _4999 = _9088;_4999<_9089;++_4999){ if (((int)1 != _4997->shape()->dim(_4999))){ throw ::mosek::fusion::DimensionError(std::string ("Dimensions of operands do not match"));}else {}}int _9090 = (int)0; int _9091 = (int)((mosek::fusion::p_NDSparseArray::_get_impl(_4996)->dims)->size(0)); for (int _5000 = _9090;_5000<_9091;++_5000){ if ((((*mosek::fusion::p_NDSparseArray::_get_impl(_4996)->dims)(_5000)) != _4997->shape()->dim(_5000))){ throw ::mosek::fusion::LengthError(std::string ("Dimension mismatch"));}else {}}monty::rc_ptr< ::mosek::fusion::FlatExpr > _5001 = _4997->eval(); return ::mosek::fusion::p_Expr::dotmul_(mosek::fusion::p_NDSparseArray::_get_impl(_4996)->inst,mosek::fusion::p_NDSparseArray::_get_impl(_4996)->cof,mosek::fusion::p_FlatExpr::_get_impl(_5001)->ptrb,mosek::fusion::p_FlatExpr::_get_impl(_5001)->subj,mosek::fusion::p_FlatExpr::_get_impl(_5001)->cof,mosek::fusion::p_FlatExpr::_get_impl(_5001)->bfix,mosek::fusion::p_FlatExpr::_get_impl(_5001)->inst,mosek::fusion::p_FlatExpr::_get_impl(_5001)->x,mosek::fusion::p_FlatExpr::_get_impl(_5001)->shape); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm_( monty::rc_ptr< ::mosek::fusion::NDSparseArray > _5002,monty::rc_ptr< ::mosek::fusion::Variable > _5003){ if ((mosek::fusion::p_Set::_get_impl(_5003->shape())->nd != (int)((mosek::fusion::p_NDSparseArray::_get_impl(_5002)->dims)->size(0)))){ throw ::mosek::fusion::LengthError(std::string ("Dimension mismatch"));}else {}int _9092 = (int)0; int _9093 = (int)((mosek::fusion::p_NDSparseArray::_get_impl(_5002)->dims)->size(0)); for (int _5004 = _9092;_5004<_9093;++_5004){ if ((((*mosek::fusion::p_NDSparseArray::_get_impl(_5002)->dims)(_5004)) != _5003->shape()->dim(_5004))){ throw ::mosek::fusion::LengthError(std::string ("Dimension mismatch"));}else {}}return ::mosek::fusion::p_Expr::dotmul_(mosek::fusion::p_NDSparseArray::_get_impl(_5002)->inst,mosek::fusion::p_NDSparseArray::_get_impl(_5002)->cof,_5003,_5003->shape()); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dotmul_( std::shared_ptr< monty::ndarray< long long,1 > > _5005,std::shared_ptr< monty::ndarray< double,1 > > _5006,monty::rc_ptr< ::mosek::fusion::Variable > _5007,monty::rc_ptr< ::mosek::fusion::Set > _5008){ int _5009 = (int)((_5005)->size(0)); std::shared_ptr< monty::ndarray< long long,1 > > _5010 = ::mosek::fusion::Utils::Tools::range(((long long)((_5005)->size(0)) + (int)1)); std::shared_ptr< monty::ndarray< long long,1 > > _5011 = ::mosek::fusion::Utils::Tools::arraycopy(_5005); std::shared_ptr< monty::ndarray< double,1 > > _5012 = ::mosek::fusion::Utils::Tools::arraycopy(_5006); std::shared_ptr< monty::ndarray< double,1 > > _5013 = nullptr; return ::mosek::fusion::p_Expr::_new_Expr(_5010,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{_5007}),_5011,_5012,_5013,_5008,_5005); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dotmul_( std::shared_ptr< monty::ndarray< long long,1 > > _5014,std::shared_ptr< monty::ndarray< double,1 > > _5015,std::shared_ptr< monty::ndarray< long long,1 > > _5016,std::shared_ptr< monty::ndarray< long long,1 > > _5017,std::shared_ptr< monty::ndarray< double,1 > > _5018,std::shared_ptr< monty::ndarray< double,1 > > _5019,std::shared_ptr< monty::ndarray< long long,1 > > _5020,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _5021,monty::rc_ptr< ::mosek::fusion::Set > _5022){ int _5023 = (int)((_5014)->size(0)); std::shared_ptr< monty::ndarray< long long,1 > > _5024 = ([&]() -> std::shared_ptr< monty::ndarray< long long,1 > > { if ( _5020) return (_5020); else return (::mosek::fusion::Utils::Tools::range((long long)((int)0),((long long)((_5016)->size(0)) - (int)1))); })(); int _5025 = (int)((_5024)->size(0)); long long _5026 = (long long)0; int _5027 = (int)0; { int _5028 = (int)0; int _5029 = (int)0; while (((_5028 < _5023) && (_5029 < _5025))) { if ((((*_5014)(_5028)) < ((*_5024)(_5029)))){ ( ++ _5028 ); }else if ((((*_5014)(_5028)) > ((*_5024)(_5029)))){ ( ++ _5029 ); }else { (_5026 += (((*_5016)((_5029 + (int)1))) - ((*_5016)(_5029)))); ( ++ _5027 ); ( ++ _5028 ); ( ++ _5029 ); }}}std::shared_ptr< monty::ndarray< long long,1 > > _5030 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_5026))); std::shared_ptr< monty::ndarray< double,1 > > _5031 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5026))); std::shared_ptr< monty::ndarray< long long,1 > > _5032 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((_5027 + (int)1)))); std::shared_ptr< monty::ndarray< long long,1 > > _5033 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_5027))); std::shared_ptr< monty::ndarray< double,1 > > _5034 = ([&]() -> std::shared_ptr< monty::ndarray< double,1 > > { if ( ! _5019) return (nullptr); else return (std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5027)))); })(); { { int _5035 = (int)0; int _5036 = (int)0; int _5037 = (int)0; int _5038 = (int)0; while (((_5035 < _5023) && (_5036 < _5025))) { if ((((*_5014)(_5035)) < ((*_5024)(_5036)))){ ( ++ _5035 ); }else if ((((*_5014)(_5035)) > ((*_5024)(_5036)))){ ( ++ _5036 ); }else { long long _9094 = ((*_5016)(_5036)); long long _9095 = ((*_5016)((_5036 + (int)1))); for (long long _5039 = _9094;_5039<_9095;++_5039){ (((*_5030)(_5037)) = ((*_5017)(_5039))); (((*_5031)(_5037)) = (((*_5018)(_5039)) * ((*_5015)(_5035)))); ( ++ _5037 ); }(((*_5032)((_5038 + (int)1))) = ((((*_5032)(_5038)) + ((*_5016)((_5036 + (int)1)))) - ((*_5016)(_5036)))); (((*_5033)(_5038)) = ((*_5024)(_5036))); ( ++ _5038 ); ( ++ _5035 ); ( ++ _5036 ); }}}if (_5019){ int _5040 = (int)0; int _5041 = (int)0; int _5042 = (int)0; while (((_5040 < _5023) && (_5041 < _5025))) { if ((((*_5014)(_5040)) < ((*_5024)(_5041)))){ ( ++ _5040 ); }else if ((((*_5014)(_5040)) > ((*_5024)(_5041)))){ ( ++ _5041 ); }else { (((*_5034)(_5042)) += (((*_5015)(_5040)) * ((*_5019)(_5041)))); ( ++ _5040 ); ( ++ _5041 ); ( ++ _5042 ); }}}else {}}return ::mosek::fusion::p_Expr::_new_Expr(_5032,_5021,_5030,_5031,_5034,_5022,([&]() -> std::shared_ptr< monty::ndarray< long long,1 > > { if ( ((int)((_5033)->size(0)) < mosek::fusion::p_Set::_get_impl(_5022)->size)) return (_5033); else return (nullptr); })()); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul  ( monty::rc_ptr< ::mosek::fusion::Matrix > _5043,    monty::rc_ptr< ::mosek::fusion::Expression > _5044) { return mosek::fusion::p_Expr::mul(_5043,_5044); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul( monty::rc_ptr< ::mosek::fusion::Matrix > _5043,monty::rc_ptr< ::mosek::fusion::Expression > _5044){ if ((! _5043 || ! _5044)){ throw monty::NullPointerException(std::string ("Arguments for mul may not be null"));}else {}monty::rc_ptr< ::mosek::fusion::Expression > _5045 = nullptr; monty::rc_ptr< ::mosek::fusion::FlatExpr > _5046 = _5044->eval(); int _5047 = _5043->numRows(); int _5048 = _5043->numColumns(); monty::rc_ptr< ::mosek::fusion::Set > _5049 = nullptr; if (((mosek::fusion::p_Set::_get_impl(mosek::fusion::p_FlatExpr::_get_impl(_5046)->shape)->nd == (int)1) && (mosek::fusion::p_FlatExpr::_get_impl(_5046)->shape->dim((int)0) == (int)1))){ (_5045 = ::mosek::fusion::p_Expr::mul_0DExpr_Matrix(mosek::fusion::p_FlatExpr::_get_impl(_5046)->subj,mosek::fusion::p_FlatExpr::_get_impl(_5046)->cof,mosek::fusion::p_FlatExpr::_get_impl(_5046)->bfix,mosek::fusion::p_FlatExpr::_get_impl(_5046)->x,_5043)); }else { int _5050; int _5051; if (((mosek::fusion::p_Set::_get_impl(mosek::fusion::p_FlatExpr::_get_impl(_5046)->shape)->nd == (int)1) && (mosek::fusion::p_FlatExpr::_get_impl(_5046)->shape->dim((int)0) == _5048))){ (_5051 = (int)1); (_5050 = mosek::fusion::p_FlatExpr::_get_impl(_5046)->shape->dim((int)0)); (_5049 = ::mosek::fusion::p_IntSet::_new_IntSet(_5047)); }else if (((mosek::fusion::p_Set::_get_impl(mosek::fusion::p_FlatExpr::_get_impl(_5046)->shape)->nd == (int)2) && (mosek::fusion::p_FlatExpr::_get_impl(_5046)->shape->dim((int)0) == _5048))){ (_5050 = mosek::fusion::p_FlatExpr::_get_impl(_5046)->shape->dim((int)0)); (_5051 = mosek::fusion::p_FlatExpr::_get_impl(_5046)->shape->dim((int)1)); (_5049 = ::mosek::fusion::p_NDSet::_new_NDSet(_5047,_5051)); }else { throw ::mosek::fusion::DimensionError(std::string ("Expression operand must be one- or two-dimensional, and dimensions must match for multiplication"));}if ((! mosek::fusion::p_FlatExpr::_get_impl(_5046)->inst && (! _5043->isSparse()))){ (_5045 = ::mosek::fusion::p_Expr::mul_DMatrix_2DDExpr(mosek::fusion::p_FlatExpr::_get_impl(_5046)->ptrb,mosek::fusion::p_FlatExpr::_get_impl(_5046)->subj,mosek::fusion::p_FlatExpr::_get_impl(_5046)->cof,mosek::fusion::p_FlatExpr::_get_impl(_5046)->bfix,mosek::fusion::p_FlatExpr::_get_impl(_5046)->x,_5049,_5050,_5051,_5043->getDataAsArray(),_5047,_5048)); }else { long long _5052 = _5043->numNonzeros(); std::shared_ptr< monty::ndarray< int,1 > > _5053 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5052))); std::shared_ptr< monty::ndarray< int,1 > > _5054 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5052))); std::shared_ptr< monty::ndarray< double,1 > > _5055 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5052))); _5043->getDataAsTriplets(_5053,_5054,_5055); std::shared_ptr< monty::ndarray< long long,1 > > _5056 = mosek::fusion::p_FlatExpr::_get_impl(_5046)->inst; if (! _5056){ (_5056 = ::mosek::fusion::Utils::Tools::range((long long)0,((long long)((mosek::fusion::p_FlatExpr::_get_impl(_5046)->ptrb)->size(0)) - (int)1))); }else {}(_5045 = ::mosek::fusion::p_Expr::mul_SMatrix_2DSExpr(mosek::fusion::p_FlatExpr::_get_impl(_5046)->ptrb,mosek::fusion::p_FlatExpr::_get_impl(_5046)->subj,mosek::fusion::p_FlatExpr::_get_impl(_5046)->cof,mosek::fusion::p_FlatExpr::_get_impl(_5046)->bfix,_5056,mosek::fusion::p_FlatExpr::_get_impl(_5046)->x,_5049,_5050,_5051,_5053,_5054,_5055,_5047,_5048)); }}return _5045; }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul  ( monty::rc_ptr< ::mosek::fusion::Expression > _5057,    monty::rc_ptr< ::mosek::fusion::Matrix > _5058) { return mosek::fusion::p_Expr::mul(_5057,_5058); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul( monty::rc_ptr< ::mosek::fusion::Expression > _5057,monty::rc_ptr< ::mosek::fusion::Matrix > _5058){ if ((! _5058 || ! _5057)){ throw monty::NullPointerException(std::string ("Arguments for mul may not be null"));}else {}monty::rc_ptr< ::mosek::fusion::Expression > _5059 = nullptr; monty::rc_ptr< ::mosek::fusion::FlatExpr > _5060 = _5057->eval(); int _5061 = _5058->numRows(); int _5062 = _5058->numColumns(); if (((mosek::fusion::p_Set::_get_impl(mosek::fusion::p_FlatExpr::_get_impl(_5060)->shape)->nd == (int)1) && (mosek::fusion::p_FlatExpr::_get_impl(_5060)->shape->dim((int)0) == (int)1))){ (_5059 = ::mosek::fusion::p_Expr::mul_0DExpr_Matrix(mosek::fusion::p_FlatExpr::_get_impl(_5060)->subj,mosek::fusion::p_FlatExpr::_get_impl(_5060)->cof,mosek::fusion::p_FlatExpr::_get_impl(_5060)->bfix,mosek::fusion::p_FlatExpr::_get_impl(_5060)->x,_5058)); }else { monty::rc_ptr< ::mosek::fusion::Set > _5063 = nullptr; int _5064; int _5065; if (((mosek::fusion::p_Set::_get_impl(mosek::fusion::p_FlatExpr::_get_impl(_5060)->shape)->nd == (int)1) && (mosek::fusion::p_FlatExpr::_get_impl(_5060)->shape->dim((int)0) == _5061))){ (_5064 = (int)1); (_5065 = mosek::fusion::p_FlatExpr::_get_impl(_5060)->shape->dim((int)0)); (_5063 = ::mosek::fusion::p_IntSet::_new_IntSet(_5062)); }else if (((mosek::fusion::p_Set::_get_impl(mosek::fusion::p_FlatExpr::_get_impl(_5060)->shape)->nd == (int)2) && (mosek::fusion::p_FlatExpr::_get_impl(_5060)->shape->dim((int)1) == _5061))){ (_5064 = mosek::fusion::p_FlatExpr::_get_impl(_5060)->shape->dim((int)0)); (_5065 = mosek::fusion::p_FlatExpr::_get_impl(_5060)->shape->dim((int)1)); (_5063 = ::mosek::fusion::p_NDSet::_new_NDSet(_5064,_5062)); }else { throw ::mosek::fusion::DimensionError(std::string ("Expression operand must be one- or two-dimensional, and dimensions must match for multiplication"));}if ((! mosek::fusion::p_FlatExpr::_get_impl(_5060)->inst && (! _5058->isSparse()))){ (_5059 = ::mosek::fusion::p_Expr::mul_2DDExpr_DMatrix(mosek::fusion::p_FlatExpr::_get_impl(_5060)->ptrb,mosek::fusion::p_FlatExpr::_get_impl(_5060)->subj,mosek::fusion::p_FlatExpr::_get_impl(_5060)->cof,mosek::fusion::p_FlatExpr::_get_impl(_5060)->bfix,mosek::fusion::p_FlatExpr::_get_impl(_5060)->x,_5063,_5064,_5065,_5058->getDataAsArray(),_5061,_5062)); }else { long long _5066 = _5058->numNonzeros(); std::shared_ptr< monty::ndarray< int,1 > > _5067 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5066))); std::shared_ptr< monty::ndarray< int,1 > > _5068 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5066))); std::shared_ptr< monty::ndarray< double,1 > > _5069 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5066))); _5058->getDataAsTriplets(_5067,_5068,_5069); std::shared_ptr< monty::ndarray< long long,1 > > _5070 = mosek::fusion::p_FlatExpr::_get_impl(_5060)->inst; if (! _5070){ (_5070 = ::mosek::fusion::Utils::Tools::range((long long)0,((long long)((mosek::fusion::p_FlatExpr::_get_impl(_5060)->ptrb)->size(0)) - (int)1))); }else {}(_5059 = ::mosek::fusion::p_Expr::mul_2DSExpr_SMatrix(mosek::fusion::p_FlatExpr::_get_impl(_5060)->ptrb,mosek::fusion::p_FlatExpr::_get_impl(_5060)->subj,mosek::fusion::p_FlatExpr::_get_impl(_5060)->cof,mosek::fusion::p_FlatExpr::_get_impl(_5060)->bfix,mosek::fusion::p_FlatExpr::_get_impl(_5060)->inst,mosek::fusion::p_FlatExpr::_get_impl(_5060)->x,_5063,_5064,_5065,_5067,_5068,_5069,_5061,_5062)); }}return _5059; }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul  ( monty::rc_ptr< ::mosek::fusion::Expression > _5071,    std::shared_ptr< monty::ndarray< double,1 > > _5072) { return mosek::fusion::p_Expr::mul(_5071,_5072); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul( monty::rc_ptr< ::mosek::fusion::Expression > _5071,std::shared_ptr< monty::ndarray< double,1 > > _5072){ if ((! _5072 || ! _5071)){ throw monty::NullPointerException(std::string ("Arguments for mul may not be null"));}else {}monty::rc_ptr< ::mosek::fusion::Expression > _5073 = nullptr; int _5074 = (int)((_5072)->size(0)); int _5075 = (int)1; monty::rc_ptr< ::mosek::fusion::FlatExpr > _5076 = _5071->eval(); int _5077; int _5078; if (((mosek::fusion::p_Set::_get_impl(mosek::fusion::p_FlatExpr::_get_impl(_5076)->shape)->nd == (int)1) && (mosek::fusion::p_FlatExpr::_get_impl(_5076)->shape->dim((int)0) == (int)1))){ (_5073 = ::mosek::fusion::p_Expr::mul_0DExpr_Matrix(mosek::fusion::p_FlatExpr::_get_impl(_5076)->subj,mosek::fusion::p_FlatExpr::_get_impl(_5076)->cof,mosek::fusion::p_FlatExpr::_get_impl(_5076)->bfix,mosek::fusion::p_FlatExpr::_get_impl(_5076)->x,::mosek::fusion::Matrix::t(::mosek::fusion::p_DenseMatrix::_new_DenseMatrix((int)((_5072)->size(0)),(int)1,_5072)))); }else { monty::rc_ptr< ::mosek::fusion::Set > _5079 = nullptr; if ((mosek::fusion::p_Set::_get_impl(mosek::fusion::p_FlatExpr::_get_impl(_5076)->shape)->nd == (int)1)){ (_5079 = ::mosek::fusion::p_IntSet::_new_IntSet((int)1)); (_5078 = mosek::fusion::p_FlatExpr::_get_impl(_5076)->shape->dim((int)0)); (_5077 = (int)1); }else if ((mosek::fusion::p_FlatExpr::_get_impl(_5076)->shape->realnd() == (int)2)){ (_5079 = ::mosek::fusion::p_IntSet::_new_IntSet(mosek::fusion::p_FlatExpr::_get_impl(_5076)->shape->dim((int)0))); (_5077 = mosek::fusion::p_FlatExpr::_get_impl(_5076)->shape->dim((int)0)); (_5078 = mosek::fusion::p_FlatExpr::_get_impl(_5076)->shape->dim((int)1)); }else { throw ::mosek::fusion::DimensionError(std::string ("Expression operand must be one- or two-dimensional"));}if ((_5078 != _5074)){ throw ::mosek::fusion::DimensionError(std::string ("Mismatching dimensions of operands"));}else {}if (! mosek::fusion::p_FlatExpr::_get_impl(_5076)->inst){ (_5073 = ::mosek::fusion::p_Expr::mul_2DDExpr_DMatrix(mosek::fusion::p_FlatExpr::_get_impl(_5076)->ptrb,mosek::fusion::p_FlatExpr::_get_impl(_5076)->subj,mosek::fusion::p_FlatExpr::_get_impl(_5076)->cof,mosek::fusion::p_FlatExpr::_get_impl(_5076)->bfix,mosek::fusion::p_FlatExpr::_get_impl(_5076)->x,_5079,_5077,_5078,_5072,_5074,_5075)); }else { (_5073 = ::mosek::fusion::p_Expr::mul_2DSExpr_SMatrix(mosek::fusion::p_FlatExpr::_get_impl(_5076)->ptrb,mosek::fusion::p_FlatExpr::_get_impl(_5076)->subj,mosek::fusion::p_FlatExpr::_get_impl(_5076)->cof,mosek::fusion::p_FlatExpr::_get_impl(_5076)->bfix,mosek::fusion::p_FlatExpr::_get_impl(_5076)->inst,mosek::fusion::p_FlatExpr::_get_impl(_5076)->x,_5079,_5077,_5078,::mosek::fusion::Utils::Tools::range((int)0,_5074),::mosek::fusion::Utils::Tools::makevector((int)0,_5074),_5072,_5074,_5075)); }}return _5073; }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul  ( std::shared_ptr< monty::ndarray< double,1 > > _5080,    monty::rc_ptr< ::mosek::fusion::Expression > _5081) { return mosek::fusion::p_Expr::mul(_5080,_5081); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul( std::shared_ptr< monty::ndarray< double,1 > > _5080,monty::rc_ptr< ::mosek::fusion::Expression > _5081){ if ((! _5080 || ! _5081)){ throw monty::NullPointerException(std::string ("Arguments for mul may not be null"));}else {}int _5082 = (int)1; int _5083 = (int)((_5080)->size(0)); monty::rc_ptr< ::mosek::fusion::Expression > _5084 = nullptr; monty::rc_ptr< ::mosek::fusion::FlatExpr > _5085 = _5081->eval(); int _5086; int _5087; if (((mosek::fusion::p_Set::_get_impl(mosek::fusion::p_FlatExpr::_get_impl(_5085)->shape)->nd == (int)1) && (mosek::fusion::p_FlatExpr::_get_impl(_5085)->shape->dim((int)0) == (int)1))){ (_5084 = ::mosek::fusion::p_Expr::mul_0DExpr_Matrix(mosek::fusion::p_FlatExpr::_get_impl(_5085)->subj,mosek::fusion::p_FlatExpr::_get_impl(_5085)->cof,mosek::fusion::p_FlatExpr::_get_impl(_5085)->bfix,mosek::fusion::p_FlatExpr::_get_impl(_5085)->x,::mosek::fusion::Matrix::t(::mosek::fusion::p_DenseMatrix::_new_DenseMatrix((int)1,(int)((_5080)->size(0)),_5080)))); }else { monty::rc_ptr< ::mosek::fusion::Set > _5088 = nullptr; if ((mosek::fusion::p_Set::_get_impl(mosek::fusion::p_FlatExpr::_get_impl(_5085)->shape)->nd == (int)1)){ (_5087 = (int)1); (_5086 = mosek::fusion::p_FlatExpr::_get_impl(_5085)->shape->dim((int)0)); (_5088 = ::mosek::fusion::p_IntSet::_new_IntSet((int)1)); }else if ((mosek::fusion::p_Set::_get_impl(mosek::fusion::p_FlatExpr::_get_impl(_5085)->shape)->nd == (int)2)){ (_5088 = ::mosek::fusion::p_IntSet::_new_IntSet(mosek::fusion::p_FlatExpr::_get_impl(_5085)->shape->dim((int)1))); (_5086 = mosek::fusion::p_FlatExpr::_get_impl(_5085)->shape->dim((int)0)); (_5087 = mosek::fusion::p_FlatExpr::_get_impl(_5085)->shape->dim((int)1)); }else { throw ::mosek::fusion::DimensionError(std::string ("Mismatching dimensions of operands"));}if ((_5086 != _5083)){ throw ::mosek::fusion::DimensionError(std::string ("Mismatching dimensions of operands"));}else {}if (! mosek::fusion::p_FlatExpr::_get_impl(_5085)->inst){ (_5084 = ::mosek::fusion::p_Expr::mul_DMatrix_2DDExpr(mosek::fusion::p_FlatExpr::_get_impl(_5085)->ptrb,mosek::fusion::p_FlatExpr::_get_impl(_5085)->subj,mosek::fusion::p_FlatExpr::_get_impl(_5085)->cof,mosek::fusion::p_FlatExpr::_get_impl(_5085)->bfix,mosek::fusion::p_FlatExpr::_get_impl(_5085)->x,_5088,_5086,_5087,_5080,_5082,_5083)); }else { (_5084 = ::mosek::fusion::p_Expr::mul_SMatrix_2DSExpr(mosek::fusion::p_FlatExpr::_get_impl(_5085)->ptrb,mosek::fusion::p_FlatExpr::_get_impl(_5085)->subj,mosek::fusion::p_FlatExpr::_get_impl(_5085)->cof,mosek::fusion::p_FlatExpr::_get_impl(_5085)->bfix,mosek::fusion::p_FlatExpr::_get_impl(_5085)->inst,mosek::fusion::p_FlatExpr::_get_impl(_5085)->x,_5088,_5086,_5087,::mosek::fusion::Utils::Tools::makevector((int)0,_5083),::mosek::fusion::Utils::Tools::range((int)0,_5083),_5080,_5082,_5083)); }}return _5084; }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul  ( double _5089,    monty::rc_ptr< ::mosek::fusion::Expression > _5090) { return mosek::fusion::p_Expr::mul(_5089,_5090); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul( double _5089,monty::rc_ptr< ::mosek::fusion::Expression > _5090){ if (! _5090){ throw monty::NullPointerException(std::string ("Arguments for mul may not be null"));}else {}monty::rc_ptr< ::mosek::fusion::FlatExpr > _5091 = _5090->eval(); int _9096 = (int)0; int _9097 = (int)((mosek::fusion::p_FlatExpr::_get_impl(_5091)->cof)->size(0)); for (int _5092 = _9096;_5092<_9097;++_5092){ (((*mosek::fusion::p_FlatExpr::_get_impl(_5091)->cof)(_5092)) = (((*mosek::fusion::p_FlatExpr::_get_impl(_5091)->cof)(_5092)) * _5089)); }if (mosek::fusion::p_FlatExpr::_get_impl(_5091)->bfix){ int _9098 = (int)0; int _9099 = (int)((mosek::fusion::p_FlatExpr::_get_impl(_5091)->bfix)->size(0)); for (int _5093 = _9098;_5093<_9099;++_5093){ (((*mosek::fusion::p_FlatExpr::_get_impl(_5091)->bfix)(_5093)) = (((*mosek::fusion::p_FlatExpr::_get_impl(_5091)->bfix)(_5093)) * _5089)); }}else {}return ::mosek::fusion::p_Expr::_new_Expr(mosek::fusion::p_FlatExpr::_get_impl(_5091)->ptrb,mosek::fusion::p_FlatExpr::_get_impl(_5091)->x,mosek::fusion::p_FlatExpr::_get_impl(_5091)->subj,mosek::fusion::p_FlatExpr::_get_impl(_5091)->cof,mosek::fusion::p_FlatExpr::_get_impl(_5091)->bfix,mosek::fusion::p_FlatExpr::_get_impl(_5091)->shape,mosek::fusion::p_FlatExpr::_get_impl(_5091)->inst,(int)1); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul  ( monty::rc_ptr< ::mosek::fusion::Expression > _5094,    double _5095) { return mosek::fusion::p_Expr::mul(_5094,_5095); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul( monty::rc_ptr< ::mosek::fusion::Expression > _5094,double _5095){ if (! _5094){ throw monty::NullPointerException(std::string ("Arguments for mul may not be null"));}else {}return ::mosek::fusion::p_Expr::mul(_5095,_5094); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul_SMatrix_2DSExpr( std::shared_ptr< monty::ndarray< long long,1 > > _5096,std::shared_ptr< monty::ndarray< long long,1 > > _5097,std::shared_ptr< monty::ndarray< double,1 > > _5098,std::shared_ptr< monty::ndarray< double,1 > > _5099,std::shared_ptr< monty::ndarray< long long,1 > > _5100,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _5101,monty::rc_ptr< ::mosek::fusion::Set > _5102,int _5103,int _5104,std::shared_ptr< monty::ndarray< int,1 > > _5105,std::shared_ptr< monty::ndarray< int,1 > > _5106,std::shared_ptr< monty::ndarray< double,1 > > _5107,int _5108,int _5109){ monty::rc_ptr< ::mosek::fusion::Expression > _5110 = nullptr; std::shared_ptr< monty::ndarray< int,1 > > _5111 = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _9100; for (int _5114=(int)0, _9101=(int)((_5100)->size(0)); _5114 < _9101;++_5114)_9100.push_back((int)(((*_5100)(_5114)) / _5104)); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9100.size()),_9100.begin(),_9100.end())); })(); std::shared_ptr< monty::ndarray< int,1 > > _5112 = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _9102; for (int _5115=(int)0, _9103=(int)((_5100)->size(0)); _5115 < _9103;++_5115)_9102.push_back((int)(((*_5100)(_5115)) % _5104)); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9102.size()),_9102.begin(),_9102.end())); })(); std::shared_ptr< monty::ndarray< long long,1 > > _5113 = ::mosek::fusion::Utils::Tools::range((long long)0,(long long)((_5100)->size(0))); int _5116 = (int)((_5105)->size(0)); int _5117 = (int)((_5100)->size(0)); int _5118 = _5108; int _5119 = _5104; ::mosek::fusion::p_CommonTools::argQsort(_5113,_5112,_5111,(long long)0,(long long)((_5100)->size(0))); int _5120 = (int)0; long long _5121 = (long long)0; { { int _5122 = (int)0; for (;(_5122 < _5116);){ int _5123 = ((*_5105)(_5122)); int _5124 = (_5122 + (int)1); while (((_5124 < _5116) && (_5123 == ((*_5105)(_5124))))) { ( ++ _5124 ); }{ int _5125 = (int)0; for (;(_5125 < _5117);){ int _5126 = ((*_5112)(((*_5113)(_5125)))); int _5127 = (_5125 + (int)1); while (((_5127 < _5117) && (((*_5112)(((*_5113)(_5127)))) == _5126))) { ( ++ _5127 ); }long long _5128 = _5121; int _5129 = (int)0; int _5130 = _5122; int _5131 = _5125; while (((_5130 < _5124) && (_5131 < _5127))) { if ((((*_5106)(_5130)) < ((*_5111)(((*_5113)(_5131)))))){ ( ++ _5130 ); }else if ((((*_5106)(_5130)) > ((*_5111)(((*_5113)(_5131)))))){ ( ++ _5131 ); }else { (_5128 = (_5128 + (((*_5096)((((*_5113)(_5131)) + (int)1))) - ((*_5096)(((*_5113)(_5131))))))); ( ++ _5130 ); ( ++ _5131 ); ( ++ _5129 ); }}if ((_5129 > (int)0)){ ( ++ _5120 ); (_5121 = _5128); }else {}(_5125 = _5127); }}(_5122 = _5124); }}}std::shared_ptr< monty::ndarray< long long,1 > > _5132 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_5120))); std::shared_ptr< monty::ndarray< long long,1 > > _5133 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((_5120 + (int)1)))); std::shared_ptr< monty::ndarray< long long,1 > > _5134 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_5121))); std::shared_ptr< monty::ndarray< double,1 > > _5135 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5121))); std::shared_ptr< monty::ndarray< double,1 > > _5136 = nullptr; { int _5137 = (int)0; long long _5138 = (long long)0; { int _5139 = (int)0; for (;(_5139 < _5116);){ int _5140 = ((*_5105)(_5139)); int _5141 = (_5139 + (int)1); while (((_5141 < _5116) && (_5140 == ((*_5105)(_5141))))) { ( ++ _5141 ); }{ int _5142 = (int)0; for (;(_5142 < _5117);){ int _5143 = ((*_5112)(((*_5113)(_5142)))); int _5144 = (_5142 + (int)1); while (((_5144 < _5117) && (((*_5112)(((*_5113)(_5144)))) == _5143))) { ( ++ _5144 ); }long long _5145 = _5138; int _5146 = (int)0; int _5147 = _5139; int _5148 = _5142; while (((_5147 < _5141) && (_5148 < _5144))) { if ((((*_5106)(_5147)) < ((*_5111)(((*_5113)(_5148)))))){ ( ++ _5147 ); }else if ((((*_5106)(_5147)) > ((*_5111)(((*_5113)(_5148)))))){ ( ++ _5148 ); }else { ( ++ _5146 ); long long _9104 = ((*_5096)(((*_5113)(_5148)))); long long _9105 = ((*_5096)((((*_5113)(_5148)) + (int)1))); for (long long _5149 = _9104;_5149<_9105;++_5149){ (((*_5134)(_5145)) = ((*_5097)(_5149))); (((*_5135)(_5145)) = (((*_5098)(_5149)) * ((*_5107)(_5147)))); ( ++ _5145 ); }( ++ _5147 ); ( ++ _5148 ); }}if ((_5146 > (int)0)){ (((*_5132)(_5137)) = (((long long)_5140 * _5104) + (long long)_5143)); (((*_5133)((_5137 + (int)1))) = _5145); ( ++ _5137 ); (_5138 = _5145); }else {}(_5142 = _5144); }}(_5139 = _5141); }}}if (_5099){ (_5136 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5120)))); int _5150 = (int)0; { int _5151 = (int)0; for (;(_5151 < _5116);){ int _5152 = ((*_5105)(_5151)); int _5153 = (_5151 + (int)1); while (((_5153 < _5116) && (_5152 == ((*_5105)(_5153))))) { ( ++ _5153 ); }{ int _5154 = (int)0; for (;(_5154 < _5117);){ int _5155 = ((*_5112)(((*_5113)(_5154)))); int _5156 = (_5154 + (int)1); while (((_5156 < _5117) && (((*_5112)(((*_5113)(_5156)))) == _5155))) { ( ++ _5156 ); }int _5157 = (int)0; double _5158 = 0.0; int _5159 = _5151; int _5160 = _5154; while (((_5159 < _5153) && (_5160 < _5156))) { if ((((*_5106)(_5159)) < ((*_5111)(((*_5113)(_5160)))))){ ( ++ _5159 ); }else if ((((*_5106)(_5159)) > ((*_5111)(((*_5113)(_5160)))))){ ( ++ _5160 ); }else { (_5158 = (_5158 + (((*_5099)(((*_5113)(_5160)))) * ((*_5107)(_5159))))); ( ++ _5157 ); ( ++ _5159 ); ( ++ _5160 ); }}if ((_5157 > (int)0)){ (((*_5136)(_5150)) = _5158); ( ++ _5150 ); }else {}(_5154 = _5156); }}(_5151 = _5153); }}}else {}if (((int)((_5132)->size(0)) == (_5118 * _5119))){ (_5132 = nullptr); }else {}(_5110 = ::mosek::fusion::p_Expr::_new_Expr(_5133,_5101,_5134,_5135,_5136,_5102,_5132)); return _5110; }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul_2DSExpr_SMatrix( std::shared_ptr< monty::ndarray< long long,1 > > _5161,std::shared_ptr< monty::ndarray< long long,1 > > _5162,std::shared_ptr< monty::ndarray< double,1 > > _5163,std::shared_ptr< monty::ndarray< double,1 > > _5164,std::shared_ptr< monty::ndarray< long long,1 > > _5165,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _5166,monty::rc_ptr< ::mosek::fusion::Set > _5167,int _5168,int _5169,std::shared_ptr< monty::ndarray< int,1 > > _5170,std::shared_ptr< monty::ndarray< int,1 > > _5171,std::shared_ptr< monty::ndarray< double,1 > > _5172,int _5173,int _5174){ monty::rc_ptr< ::mosek::fusion::Expression > _5175 = nullptr; int _5176 = _5168; int _5177 = _5174; long long _5178 = (long long)((_5172)->size(0)); long long _5179 = (long long)((_5165)->size(0)); std::shared_ptr< monty::ndarray< long long,1 > > _5180 = ::mosek::fusion::Utils::Tools::range((long long)0,(long long)((_5170)->size(0))); ::mosek::fusion::p_CommonTools::argQsort(_5180,_5171,_5170,(long long)0,(long long)((_5170)->size(0))); int _5181 = (int)0; long long _5182 = (long long)0; { { int _5183 = (int)0; for (;(_5183 < _5179);){ int _5184 = _5183; long long _5185 = (((*_5165)(_5183)) / _5169); while (((_5184 < (int)((_5165)->size(0))) && (_5185 == (((*_5165)(_5184)) / _5169)))) { ( ++ _5184 ); }{ int _5186 = (int)0; for (;(_5186 < _5178);){ int _5187 = _5186; int _5188 = ((*_5171)(((*_5180)(_5186)))); while (((_5187 < _5178) && (((*_5171)(((*_5180)(_5187)))) == _5188))) { ( ++ _5187 ); }int _5189 = _5183; int _5190 = _5186; long long _5191 = _5182; while (((_5189 < _5184) && (_5190 < _5187))) { if (((((*_5165)(_5189)) % _5169) < ((*_5170)(((*_5180)(_5190)))))){ ( ++ _5189 ); }else if (((((*_5165)(_5189)) % _5169) > ((*_5170)(((*_5180)(_5190)))))){ ( ++ _5190 ); }else { (_5191 = (_5191 + (((*_5161)((_5189 + (int)1))) - ((*_5161)(_5189))))); ( ++ _5189 ); ( ++ _5190 ); }}if ((_5191 > _5182)){ (_5182 = _5191); ( ++ _5181 ); }else {}(_5186 = _5187); }}(_5183 = _5184); }}}std::shared_ptr< monty::ndarray< long long,1 > > _5192 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((_5181 + (int)1)))); std::shared_ptr< monty::ndarray< long long,1 > > _5193 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_5181))); std::shared_ptr< monty::ndarray< long long,1 > > _5194 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_5182))); std::shared_ptr< monty::ndarray< double,1 > > _5195 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5182))); std::shared_ptr< monty::ndarray< double,1 > > _5196 = nullptr; { int _5197 = (int)0; long long _5198 = (long long)0; { int _5199 = (int)0; for (;(_5199 < _5179);){ int _5200 = _5199; long long _5201 = (((*_5165)(_5199)) / _5169); while (((_5200 < (int)((_5165)->size(0))) && (_5201 == (((*_5165)(_5200)) / _5169)))) { ( ++ _5200 ); }{ int _5202 = (int)0; for (;(_5202 < _5178);){ int _5203 = _5202; int _5204 = ((*_5171)(((*_5180)(_5202)))); while (((_5203 < _5178) && (((*_5171)(((*_5180)(_5203)))) == _5204))) { ( ++ _5203 ); }int _5205 = _5199; int _5206 = _5202; long long _5207 = _5198; int _5208 = (int)0; while (((_5205 < _5200) && (_5206 < _5203))) { if (((((*_5165)(_5205)) % _5169) < ((*_5170)(((*_5180)(_5206)))))){ ( ++ _5205 ); }else if (((((*_5165)(_5205)) % _5169) > ((*_5170)(((*_5180)(_5206)))))){ ( ++ _5206 ); }else { double _5209 = ((*_5172)(((*_5180)(_5206)))); long long _9106 = ((*_5161)(_5205)); long long _9107 = ((*_5161)((_5205 + (int)1))); for (long long _5210 = _9106;_5210<_9107;++_5210){ (((*_5194)(_5207)) = ((*_5162)(_5210))); (((*_5195)(_5207)) = (_5209 * ((*_5163)(_5210)))); ( ++ _5207 ); ( ++ _5208 ); }( ++ _5205 ); ( ++ _5206 ); }}if ((_5208 > (int)0)){ (_5198 = _5207); (((*_5192)((_5197 + (int)1))) = _5207); (((*_5193)(_5197)) = (((long long)_5201 * _5177) + _5204)); ( ++ _5197 ); }else {}(_5202 = _5203); }}(_5199 = _5200); }}}if (_5164){ (_5196 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5181)))); int _5211 = (int)0; { int _5212 = (int)0; for (;(_5212 < _5179);){ int _5213 = _5212; long long _5214 = (((*_5165)(_5212)) / _5169); while (((_5213 < (int)((_5165)->size(0))) && (_5214 == (((*_5165)(_5213)) / _5169)))) { ( ++ _5213 ); }{ int _5215 = (int)0; for (;(_5215 < _5178);){ int _5216 = _5215; int _5217 = ((*_5171)(((*_5180)(_5215)))); while (((_5216 < _5178) && (((*_5171)(((*_5180)(_5216)))) == _5217))) { ( ++ _5216 ); }int _5218 = _5212; int _5219 = _5215; int _5220 = (int)0; double _5221 = 0.0; while (((_5218 < _5213) && (_5219 < _5216))) { if (((((*_5165)(_5218)) % _5169) < ((*_5170)(((*_5180)(_5219)))))){ ( ++ _5218 ); }else if (((((*_5165)(_5218)) % _5169) > ((*_5170)(((*_5180)(_5219)))))){ ( ++ _5219 ); }else { (_5221 = (_5221 + (((*_5164)(_5218)) * ((*_5172)(((*_5180)(_5219))))))); ( ++ _5220 ); ( ++ _5218 ); ( ++ _5219 ); }}if ((_5220 > (int)0)){ (((*_5196)(_5211)) = _5221); ( ++ _5211 ); }else {}(_5215 = _5216); }}(_5212 = _5213); }}}else {}if (((int)((_5193)->size(0)) == (_5176 * _5177))){ (_5193 = nullptr); }else {}(_5175 = ::mosek::fusion::p_Expr::_new_Expr(_5192,_5166,_5194,_5195,_5196,_5167,_5193)); return _5175; }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul_DMatrix_2DDExpr( std::shared_ptr< monty::ndarray< long long,1 > > _5222,std::shared_ptr< monty::ndarray< long long,1 > > _5223,std::shared_ptr< monty::ndarray< double,1 > > _5224,std::shared_ptr< monty::ndarray< double,1 > > _5225,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _5226,monty::rc_ptr< ::mosek::fusion::Set > _5227,int _5228,int _5229,std::shared_ptr< monty::ndarray< double,1 > > _5230,int _5231,int _5232){ monty::rc_ptr< ::mosek::fusion::Expression > _5233; int _5234 = _5231; int _5235 = _5229; long long _5236 = ((long long)_5234 * (long long)_5235); std::shared_ptr< monty::ndarray< long long,1 > > _5237 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((_5236 + (int)1)))); std::shared_ptr< monty::ndarray< long long,1 > > _5238 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(((int)((_5223)->size(0)) * _5231)))); std::shared_ptr< monty::ndarray< double,1 > > _5239 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(((int)((_5223)->size(0)) * _5231)))); std::shared_ptr< monty::ndarray< double,1 > > _5240 = nullptr; { long long _5241 = (long long)0; int _5242 = (int)0; int _9108 = (int)0; int _9109 = _5231; for (int _5243 = _9108;_5243<_9109;++_5243){ int _9110 = (int)0; int _9111 = _5229; for (int _5244 = _9110;_5244<_9111;++_5244){ int _9112 = (int)0; int _9113 = _5228; for (int _5245 = _9112;_5245<_9113;++_5245){ double _5246 = ((*_5230)(((_5232 * _5243) + _5245))); long long _9114 = ((*_5222)(((_5245 * _5229) + _5244))); long long _9115 = ((*_5222)((((_5245 * _5229) + _5244) + (int)1))); for (long long _5247 = _9114;_5247<_9115;++_5247){ (((*_5239)(_5241)) = (_5246 * ((*_5224)(_5247)))); (((*_5238)(_5241)) = ((*_5223)(_5247))); ( ++ _5241 ); }}(((*_5237)((_5242 + (int)1))) = _5241); ( ++ _5242 ); }}}if (_5225){ int _5248 = (int)0; (_5240 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5236)))); int _9116 = (int)0; int _9117 = _5231; for (int _5249 = _9116;_5249<_9117;++_5249){ int _9118 = (int)0; int _9119 = _5229; for (int _5250 = _9118;_5250<_9119;++_5250){ int _9120 = (int)0; int _9121 = _5228; for (int _5251 = _9120;_5251<_9121;++_5251){ (((*_5240)(_5248)) = (((*_5240)(_5248)) + (((*_5225)(((_5251 * _5229) + _5250))) * ((*_5230)(((_5232 * _5249) + _5251)))))); }( ++ _5248 ); }}}else {}(_5233 = ::mosek::fusion::p_Expr::_new_Expr(_5237,_5226,_5238,_5239,_5240,_5227,nullptr)); return _5233; }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul_2DDExpr_DMatrix( std::shared_ptr< monty::ndarray< long long,1 > > _5252,std::shared_ptr< monty::ndarray< long long,1 > > _5253,std::shared_ptr< monty::ndarray< double,1 > > _5254,std::shared_ptr< monty::ndarray< double,1 > > _5255,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _5256,monty::rc_ptr< ::mosek::fusion::Set > _5257,int _5258,int _5259,std::shared_ptr< monty::ndarray< double,1 > > _5260,int _5261,int _5262){ monty::rc_ptr< ::mosek::fusion::Expression > _5263; int _5264 = _5258; int _5265 = _5262; std::shared_ptr< monty::ndarray< long long,1 > > _5266 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(((_5258 * _5262) + (int)1)))); std::shared_ptr< monty::ndarray< long long,1 > > _5267 = nullptr; std::shared_ptr< monty::ndarray< long long,1 > > _5268 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(((int)((_5253)->size(0)) * _5262)))); std::shared_ptr< monty::ndarray< double,1 > > _5269 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(((int)((_5253)->size(0)) * _5262)))); std::shared_ptr< monty::ndarray< double,1 > > _5270 = nullptr; { int _5271 = (int)0; int _5272 = (int)0; int _9122 = (int)0; int _9123 = _5264; for (int _5273 = _9122;_5273<_9123;++_5273){ int _9124 = (int)0; int _9125 = _5265; for (int _5274 = _9124;_5274<_9125;++_5274){ int _5275 = (_5273 * _5259); (((*_5266)((_5272 + (int)1))) = ((*_5266)(_5272))); int _9126 = (int)0; int _9127 = _5261; for (int _5276 = _9126;_5276<_9127;++_5276){ (((*_5266)((_5272 + (int)1))) = (((*_5266)((_5272 + (int)1))) + (((*_5252)(((_5275 + _5276) + (int)1))) - ((*_5252)((_5275 + _5276)))))); double _5277 = ((*_5260)(((_5262 * _5276) + _5274))); long long _9128 = ((*_5252)((_5275 + _5276))); long long _9129 = ((*_5252)(((_5275 + _5276) + (int)1))); for (long long _5278 = _9128;_5278<_9129;++_5278){ (((*_5268)(_5271)) = ((*_5253)(_5278))); (((*_5269)(_5271)) = (((*_5254)(_5278)) * _5277)); ( ++ _5271 ); }}( ++ _5272 ); }}}if (_5255){ (_5270 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((_5264 * _5265))))); int _5279 = (int)0; int _9130 = (int)0; int _9131 = _5264; for (int _5280 = _9130;_5280<_9131;++_5280){ int _9132 = (int)0; int _9133 = _5265; for (int _5281 = _9132;_5281<_9133;++_5281){ int _5282 = (_5280 * _5259); int _9134 = (int)0; int _9135 = _5261; for (int _5283 = _9134;_5283<_9135;++_5283){ (((*_5270)(_5279)) += (((*_5255)((_5282 + _5283))) * ((*_5260)(((_5262 * _5283) + _5281))))); }( ++ _5279 ); }}}else {}(_5263 = ::mosek::fusion::p_Expr::_new_Expr(_5266,_5256,_5268,_5269,_5270,_5257,_5267)); return _5263; }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul_0DExpr_Matrix( std::shared_ptr< monty::ndarray< long long,1 > > _5284,std::shared_ptr< monty::ndarray< double,1 > > _5285,std::shared_ptr< monty::ndarray< double,1 > > _5286,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _5287,monty::rc_ptr< ::mosek::fusion::Matrix > _5288){ monty::rc_ptr< ::mosek::fusion::Expression > _5289 = nullptr; int _5290 = _5288->numRows(); int _5291 = _5288->numColumns(); long long _5292 = _5288->numNonzeros(); std::shared_ptr< monty::ndarray< double,1 > > _5293; std::shared_ptr< monty::ndarray< int,1 > > _5294 = nullptr; std::shared_ptr< monty::ndarray< int,1 > > _5295 = nullptr; std::shared_ptr< monty::ndarray< long long,1 > > _5296 = ::mosek::fusion::Utils::Tools::range((long long)0,((_5292 * (long long)((_5284)->size(0))) + (int)1),(long long)((_5284)->size(0))); std::shared_ptr< monty::ndarray< long long,1 > > _5297 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((_5292 * (int)((_5284)->size(0)))))); std::shared_ptr< monty::ndarray< double,1 > > _5298 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((_5292 * (int)((_5284)->size(0)))))); std::shared_ptr< monty::ndarray< double,1 > > _5299 = nullptr; std::shared_ptr< monty::ndarray< long long,1 > > _5300 = nullptr; if ((! _5288->isSparse())){ (_5293 = _5288->getDataAsArray()); }else { (_5294 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5292)))); (_5295 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5292)))); (_5293 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5292)))); (_5300 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_5292)))); _5288->getDataAsTriplets(_5294,_5295,_5293); int _9136 = (int)0; int _9137 = (int)((_5294)->size(0)); for (int _5301 = _9136;_5301<_9137;++_5301){ (((*_5300)(_5301)) = (((long long)((*_5294)(_5301)) * _5291) + ((*_5295)(_5301)))); }}{ int _5302 = (int)0; long long _9138 = (long long)0; long long _9139 = _5292; for (long long _5303 = _9138;_5303<_9139;++_5303){ int _9140 = (int)0; int _9141 = (int)((_5284)->size(0)); for (int _5304 = _9140;_5304<_9141;++_5304){ (((*_5297)(_5302)) = ((*_5284)(_5304))); (((*_5298)(_5302)) = (((*_5293)(_5303)) * ((*_5293)(_5303)))); ( ++ _5302 ); }}}if (_5286){ (_5299 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5292)))); long long _9142 = (long long)0; long long _9143 = _5292; for (long long _5305 = _9142;_5305<_9143;++_5305){ (((*_5299)(_5305)) = (((*_5293)(_5305)) * ((*_5286)((int)0)))); }}else {}(_5289 = ::mosek::fusion::p_Expr::_new_Expr(_5296,_5287,_5297,_5298,_5299,::mosek::fusion::Set::t(::mosek::fusion::p_NDSet::_new_NDSet(_5290,_5291)),nullptr)); return _5289; }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul  ( monty::rc_ptr< ::mosek::fusion::Variable > _5306,    std::shared_ptr< monty::ndarray< double,2 > > _5307) { return mosek::fusion::p_Expr::mul(_5306,_5307); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul( monty::rc_ptr< ::mosek::fusion::Variable > _5306,std::shared_ptr< monty::ndarray< double,2 > > _5307){ if ((! _5307 || ! _5306)){ throw monty::NullPointerException(std::string ("Arguments for mul may not be null"));}else {}if (((int)((_5307)->size(0)) == (int)0)){ std::shared_ptr< monty::ndarray< long long,1 > > _5308 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >{(long long)0,(long long)0}); std::shared_ptr< monty::ndarray< long long,1 > > _5309 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)0))); std::shared_ptr< monty::ndarray< double,1 > > _5310 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)0))); return ::mosek::fusion::p_Expr::_new_Expr(_5308,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{_5306}),_5309,_5310,nullptr,::mosek::fusion::Set::t(nullptr),nullptr,(int)1); }else { return ::mosek::fusion::p_Expr::mul(_5306,::mosek::fusion::Matrix::t(::mosek::fusion::p_DenseMatrix::_new_DenseMatrix(_5307))); }}monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul  ( std::shared_ptr< monty::ndarray< double,2 > > _5311,    monty::rc_ptr< ::mosek::fusion::Variable > _5312) { return mosek::fusion::p_Expr::mul(_5311,_5312); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul( std::shared_ptr< monty::ndarray< double,2 > > _5311,monty::rc_ptr< ::mosek::fusion::Variable > _5312){ if ((! _5311 || ! _5312)){ throw monty::NullPointerException(std::string ("Arguments for mul may not be null"));}else {}return ::mosek::fusion::p_Expr::mul(::mosek::fusion::Matrix::t(::mosek::fusion::p_DenseMatrix::_new_DenseMatrix(_5311)),_5312); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul  ( monty::rc_ptr< ::mosek::fusion::Variable > _5313,    double _5314) { return mosek::fusion::p_Expr::mul(_5313,_5314); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul( monty::rc_ptr< ::mosek::fusion::Variable > _5313,double _5314){ if (! _5313){ throw monty::NullPointerException(std::string ("Arguments for mul may not be null"));}else {}return ::mosek::fusion::p_Expr::mul(_5314,_5313); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul  ( double _5315,    monty::rc_ptr< ::mosek::fusion::Variable > _5316) { return mosek::fusion::p_Expr::mul(_5315,_5316); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul( double _5315,monty::rc_ptr< ::mosek::fusion::Variable > _5316){ if (! _5316){ throw monty::NullPointerException(std::string ("Arguments for mul may not be null"));}else {}double _5317 = _5315; monty::rc_ptr< ::mosek::fusion::Variable > _5318 = _5316; std::shared_ptr< monty::ndarray< long long,1 > > _5319 = ::mosek::fusion::Utils::Tools::range((long long)0,(mosek::fusion::p_Set::_get_impl(_5318->shape())->size + (long long)1)); std::shared_ptr< monty::ndarray< double,1 > > _5320 = ::mosek::fusion::Utils::Tools::makevector(_5317,(int)mosek::fusion::p_Set::_get_impl(_5318->shape())->size); std::shared_ptr< monty::ndarray< long long,1 > > _5321 = ::mosek::fusion::Utils::Tools::range((long long)0,mosek::fusion::p_Set::_get_impl(_5318->shape())->size); std::shared_ptr< monty::ndarray< double,1 > > _5322 = nullptr; return ::mosek::fusion::p_Expr::_new_Expr(_5319,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{_5316}),_5321,_5320,_5322,_5318->shape(),nullptr); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul  ( std::shared_ptr< monty::ndarray< double,1 > > _5323,    monty::rc_ptr< ::mosek::fusion::Variable > _5324) { return mosek::fusion::p_Expr::mul(_5323,_5324); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul( std::shared_ptr< monty::ndarray< double,1 > > _5323,monty::rc_ptr< ::mosek::fusion::Variable > _5324){ if ((! _5324 || ! _5323)){ throw monty::NullPointerException(std::string ("Arguments for mul may not be null"));}else {}std::shared_ptr< monty::ndarray< double,1 > > _5325 = _5323; monty::rc_ptr< ::mosek::fusion::Variable > _5326 = _5324; if (((mosek::fusion::p_Set::_get_impl(_5326->shape())->size == (int)1) || (mosek::fusion::p_Set::_get_impl(_5326->shape())->nd == (int)1))){ return ::mosek::fusion::p_Expr::mul(_5326,_5325); }else if (((mosek::fusion::p_Set::_get_impl(_5324->shape())->nd == (int)1) && (_5324->shape()->dim((int)0) == (int)((_5323)->size(0))))){ return ::mosek::fusion::p_Expr::dot(_5324,_5323); }else if ((mosek::fusion::p_Set::_get_impl(_5326->shape())->nd == (int)2)){ if ((_5326->shape()->dim((int)0) != (int)((_5325)->size(0)))){ throw ::mosek::fusion::DimensionError(std::string ("Dimensions of operands do not match"));}else {}long long _5327 = _5326->shape()->dim((int)0); long long _5328 = _5326->shape()->dim((int)1); std::shared_ptr< monty::ndarray< long long,1 > > _5329 = ([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _9144; for (long long _5330=(long long)0, _9145=((_5328 + (int)1) * _5327), _9146=_5327; _5330 < _9145;_5330 += _9146)_9144.push_back(_5330); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9144.size()),_9144.begin(),_9144.end())); })(); std::shared_ptr< monty::ndarray< double,1 > > _5331 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(mosek::fusion::p_Set::_get_impl(_5326->shape())->size))); long long _9147 = (long long)0; long long _9148 = _5328; for (long long _5332 = _9147;_5332<_9148;++_5332){ ::mosek::fusion::Utils::Tools::arraycopy(_5325,(long long)0,_5331,(_5332 * _5327),_5327); }std::shared_ptr< monty::ndarray< long long,1 > > _5333 = ([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _9149; for (long long _5334=(int)0, _9150=_5328; _5334 < _9150;++_5334) for (long long _5335=(int)0, _9151=_5327; _5335 < _9151;++_5335)_9149.push_back(((_5335 * _5328) + _5334)); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9149.size()),_9149.begin(),_9149.end())); })(); return ::mosek::fusion::p_Expr::_new_Expr(_5329,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{_5326}),_5333,_5331,nullptr,::mosek::fusion::Set::t(nullptr),nullptr,(int)1); }else { throw ::mosek::fusion::DimensionError(std::string ("Dimensions of operands do not match"));}}monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul  ( monty::rc_ptr< ::mosek::fusion::Variable > _5336,    std::shared_ptr< monty::ndarray< double,1 > > _5337) { return mosek::fusion::p_Expr::mul(_5336,_5337); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul( monty::rc_ptr< ::mosek::fusion::Variable > _5336,std::shared_ptr< monty::ndarray< double,1 > > _5337){ if ((! _5336 || ! _5337)){ throw monty::NullPointerException(std::string ("Arguments for mul may not be null"));}else {}monty::rc_ptr< ::mosek::fusion::Variable > _5338 = _5336; std::shared_ptr< monty::ndarray< double,1 > > _5339 = _5337; if ((mosek::fusion::p_Set::_get_impl(_5338->shape())->size == (int)0)){ std::shared_ptr< monty::ndarray< long long,1 > > _5340 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >{(long long)0,(long long)0}); std::shared_ptr< monty::ndarray< long long,1 > > _5341 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)0))); std::shared_ptr< monty::ndarray< double,1 > > _5342 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)0))); return ::mosek::fusion::p_Expr::_new_Expr(_5340,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{_5336}),_5341,_5342,nullptr,::mosek::fusion::Set::t(nullptr),nullptr,(int)1); }else if ((mosek::fusion::p_Set::_get_impl(_5338->shape())->size == (int)1)){ std::shared_ptr< monty::ndarray< long long,1 > > _5343 = ::mosek::fusion::Utils::Tools::range((long long)0,((long long)((_5339)->size(0)) + (int)1)); std::shared_ptr< monty::ndarray< long long,1 > > _5344 = ::mosek::fusion::Utils::Tools::makevector((long long)0,(int)((_5339)->size(0))); std::shared_ptr< monty::ndarray< double,1 > > _5345 = ::mosek::fusion::Utils::Tools::arraycopy(_5339); std::shared_ptr< monty::ndarray< double,1 > > _5346 = nullptr; return ::mosek::fusion::p_Expr::_new_Expr(_5343,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{_5336}),_5344,_5345,_5346,::mosek::fusion::Set::t(nullptr),nullptr,(int)1); }else if (((mosek::fusion::p_Set::_get_impl(_5336->shape())->nd == (int)1) && (_5336->shape()->dim((int)0) == (int)((_5337)->size(0))))){ return ::mosek::fusion::p_Expr::dot(_5336,_5337); }else if ((mosek::fusion::p_Set::_get_impl(_5338->shape())->nd == (int)2)){ if ((_5338->shape()->dim((int)1) != (int)((_5339)->size(0)))){ throw ::mosek::fusion::DimensionError(std::string ("Dimensions of operands do not match"));}else {}std::shared_ptr< monty::ndarray< long long,1 > > _5347 = ([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _9152; for (long long _5348=(int)0, _9153=(mosek::fusion::p_Set::_get_impl(_5338->shape())->size + _5338->shape()->dim((int)1)), _9154=_5338->shape()->dim((int)1); _5348 < _9153;_5348 += _9154)_9152.push_back(_5348); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9152.size()),_9152.begin(),_9152.end())); })(); std::shared_ptr< monty::ndarray< long long,1 > > _5349 = ([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _9155; for (long long _5350=(int)0, _9156=mosek::fusion::p_Set::_get_impl(_5338->shape())->size; _5350 < _9156;++_5350)_9155.push_back(_5350); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9155.size()),_9155.begin(),_9155.end())); })(); std::shared_ptr< monty::ndarray< double,1 > > _5351 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(mosek::fusion::p_Set::_get_impl(_5338->shape())->size))); long long _5352 = (long long)_5338->shape()->dim((int)1); long long _9157 = (long long)0; int _9158 = _5338->shape()->dim((int)0); for (long long _5353 = _9157;_5353<_9158;++_5353){ ::mosek::fusion::Utils::Tools::arraycopy(_5339,(long long)0,_5351,(_5353 * _5352),_5352); }std::shared_ptr< monty::ndarray< double,1 > > _5354 = nullptr; return ::mosek::fusion::p_Expr::_new_Expr(_5347,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{_5336}),_5349,_5351,_5354,::mosek::fusion::Set::t(nullptr),nullptr,(int)1); }else { throw ::mosek::fusion::DimensionError(std::string ("Dimensions of operands do not match"));}}monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul  ( monty::rc_ptr< ::mosek::fusion::Variable > _5355,    monty::rc_ptr< ::mosek::fusion::Matrix > _5356) { return mosek::fusion::p_Expr::mul(_5355,_5356); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul( monty::rc_ptr< ::mosek::fusion::Variable > _5355,monty::rc_ptr< ::mosek::fusion::Matrix > _5356){ if ((! _5355 || ! _5356)){ throw monty::NullPointerException(std::string ("Arguments for mul may not be null"));}else {}monty::rc_ptr< ::mosek::fusion::Variable > _5357 = _5355; monty::rc_ptr< ::mosek::fusion::Matrix > _5358 = _5356; int _5359 = _5356->numRows(); int _5360 = _5356->numColumns(); int _5361; int _5362; long long _5363 = _5356->numNonzeros(); if (((mosek::fusion::p_Set::_get_impl(_5355->shape())->nd == (int)1) && (_5355->shape()->dim((int)0) == (int)1))){ return ::mosek::fusion::p_Expr::mul(_5356,_5355); }else { if ((mosek::fusion::p_Set::_get_impl(_5357->shape())->nd == (int)1)){ if ((mosek::fusion::p_Matrix::_get_impl(_5358)->dimi != mosek::fusion::p_Set::_get_impl(_5357->shape())->size)){ throw ::mosek::fusion::LengthError(std::string ("Operand shapes do not match."));}else {}(_5362 = (int)1); (_5361 = _5357->shape()->dim((int)0)); }else if ((mosek::fusion::p_Set::_get_impl(_5357->shape())->nd == (int)2)){ if ((mosek::fusion::p_Matrix::_get_impl(_5356)->dimi != _5355->shape()->dim((int)1))){ throw ::mosek::fusion::LengthError(std::string ("Operand shapes do not match."));}else {}(_5362 = _5357->shape()->dim((int)0)); (_5361 = _5357->shape()->dim((int)1)); }else { throw ::mosek::fusion::LengthError(std::string ("Variable must be one- or two-dimensional."));}int _5364 = _5362; int _5365 = _5360; monty::rc_ptr< ::mosek::fusion::Set > _5366 = nullptr; if ((mosek::fusion::p_Set::_get_impl(_5355->shape())->nd == (int)1)){ (_5366 = ::mosek::fusion::p_IntSet::_new_IntSet(_5365)); }else { (_5366 = ::mosek::fusion::p_NDSet::_new_NDSet(_5364,_5365)); }if ((! _5356->isSparse())){ long long _5367 = ((long long)_5364 * (long long)_5365); std::shared_ptr< monty::ndarray< double,1 > > _5368 = _5356->getDataAsArray(); std::shared_ptr< monty::ndarray< long long,1 > > _5369 = ([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _9159; for (long long _5370=(long long)0, _9160=((((long long)_5364 * _5365) * _5361) + (int)1), _9161=_5361; _5370 < _9160;_5370 += _9161)_9159.push_back(_5370); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9159.size()),_9159.begin(),_9159.end())); })(); std::shared_ptr< monty::ndarray< long long,1 > > _5371 = ([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _9162; for (int _5372=(int)0, _9163=_5364; _5372 < _9163;++_5372) for (int _5373=(int)0, _9164=_5365; _5373 < _9164;++_5373) for (int _5374=(int)0, _9165=_5361; _5374 < _9165;++_5374)_9162.push_back((((long long)_5372 * _5361) + _5374)); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9162.size()),_9162.begin(),_9162.end())); })(); std::shared_ptr< monty::ndarray< double,1 > > _5375 = ([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _9166; for (int _5376=(int)0, _9167=_5364; _5376 < _9167;++_5376) for (int _5377=(int)0, _9168=_5365; _5377 < _9168;++_5377) for (int _5378=(int)0, _9169=_5361; _5378 < _9169;++_5378)_9166.push_back(((*_5368)(((_5378 * _5360) + _5377)))); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9166.size()),_9166.begin(),_9166.end())); })(); return ::mosek::fusion::p_Expr::_new_Expr(_5369,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{_5355}),_5371,_5375,nullptr,_5366,nullptr); }else if ((_5363 > (int)0)){ std::shared_ptr< monty::ndarray< int,1 > > _5379 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5363))); std::shared_ptr< monty::ndarray< int,1 > > _5380 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5363))); std::shared_ptr< monty::ndarray< double,1 > > _5381 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5363))); std::shared_ptr< monty::ndarray< long long,1 > > _5382 = ([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _9170; for (long long _5383=(long long)0, _9171=_5363; _5383 < _9171;++_5383)_9170.push_back(_5383); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9170.size()),_9170.begin(),_9170.end())); })(); _5356->getDataAsTriplets(_5379,_5380,_5381); if ((_5363 > _5360)){ ::mosek::fusion::p_Sort::argbucketsort(_5382,_5380,(long long)((int)0),_5363,(int)0,_5360); }else { ::mosek::fusion::p_Sort::argsort(_5382,_5380,(long long)0,_5363,false); }long long _5384 = (long long)0; if ((_5363 > (int)0)){ (_5384 = (long long)1); { long long _5385 = (long long)1; for (;(_5385 < _5363);( ++ _5385 )){ if ((((*_5380)(((*_5382)(_5385)))) > ((*_5380)(((*_5382)((_5385 - (int)1))))))){ ( ++ _5384 ); }else {}}}}else {}long long _5386 = (_5384 * (long long)_5362); std::shared_ptr< monty::ndarray< long long,1 > > _5387 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((_5386 + (int)1)))); std::shared_ptr< monty::ndarray< long long,1 > > _5388 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_5386))); std::shared_ptr< monty::ndarray< long long,1 > > _5389 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((_5363 * _5362)))); std::shared_ptr< monty::ndarray< double,1 > > _5390 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((_5363 * _5362)))); { int _5391 = (int)0; long long _5392 = (long long)0; int _9172 = (int)0; int _9173 = _5364; for (int _5393 = _9172;_5393<_9173;++_5393){ { long long _5394 = (long long)0; for (;(_5394 < _5363);){ int _5395 = ((*_5380)(((*_5382)(_5394)))); long long _5396 = _5394; long long _5397 = _5394; while (((_5397 < _5363) && (((*_5380)(((*_5382)(_5397)))) == ((*_5380)(((*_5382)(_5394))))))) { ( ++ _5397 ); }long long _9174 = _5396; long long _9175 = _5397; for (long long _5398 = _9174;_5398<_9175;++_5398){ (((*_5389)(_5392)) = (((long long)_5393 * _5361) + ((*_5379)(((*_5382)(_5398)))))); (((*_5390)(_5392)) = ((*_5381)(((*_5382)(_5398))))); ( ++ _5392 ); }(((*_5387)((_5391 + (int)1))) = _5392); (((*_5388)(_5391)) = (((long long)_5393 * _5365) + _5395)); ( ++ _5391 ); (_5394 = _5397); }}}}return ::mosek::fusion::p_Expr::_new_Expr(_5387,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{_5355}),_5389,_5390,nullptr,_5366,_5388); }else { return ::mosek::fusion::p_Expr::_new_Expr(std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >{(long long)0}),std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{_5355}),std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)0))),nullptr,_5366,std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)0)))); }}}monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul  ( monty::rc_ptr< ::mosek::fusion::Matrix > _5399,    monty::rc_ptr< ::mosek::fusion::Variable > _5400) { return mosek::fusion::p_Expr::mul(_5399,_5400); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul( monty::rc_ptr< ::mosek::fusion::Matrix > _5399,monty::rc_ptr< ::mosek::fusion::Variable > _5400){ if ((! _5400 || ! _5399)){ throw monty::NullPointerException(std::string ("Arguments for mul may not be null"));}else {}monty::rc_ptr< ::mosek::fusion::Set > _5401 = _5400->shape(); int _5402 = _5399->numRows(); int _5403 = _5399->numColumns(); int _5404; int _5405; if ((mosek::fusion::p_Set::_get_impl(_5401)->nd == (int)1)){ (_5404 = _5401->dim((int)0)); (_5405 = (int)1); }else if ((mosek::fusion::p_Set::_get_impl(_5401)->nd == (int)2)){ (_5404 = _5401->dim((int)0)); (_5405 = _5401->dim((int)1)); }else { throw ::mosek::fusion::LengthError(std::string ("Operand shapes do not match."));}int _5406 = _5402; int _5407 = _5405; monty::rc_ptr< ::mosek::fusion::Expression > _5408; monty::rc_ptr< ::mosek::fusion::Set > _5409 = nullptr; if (((mosek::fusion::p_Set::_get_impl(_5400->shape())->nd == (int)1) && (_5400->shape()->dim((int)0) == (int)1))){ (_5409 = ::mosek::fusion::p_NDSet::_new_NDSet(_5402,_5403)); }else if ((mosek::fusion::p_Set::_get_impl(_5400->shape())->nd == (int)1)){ (_5409 = ::mosek::fusion::p_IntSet::_new_IntSet(_5406)); }else { (_5409 = ::mosek::fusion::p_NDSet::_new_NDSet(_5406,_5407)); }if (((mosek::fusion::p_Set::_get_impl(_5401)->nd == (int)1) && (_5401->dim((int)0) == (int)1))){ if (_5399->isSparse()){ std::shared_ptr< monty::ndarray< int,1 > > _5410 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5399->numNonzeros()))); std::shared_ptr< monty::ndarray< int,1 > > _5411 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5399->numNonzeros()))); std::shared_ptr< monty::ndarray< double,1 > > _5412 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5399->numNonzeros()))); _5399->getDataAsTriplets(_5410,_5411,_5412); std::shared_ptr< monty::ndarray< long long,1 > > _5413 = ([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _9176; for (int _5414=(int)0, _9177=(int)((_5411)->size(0)); _5414 < _9177;++_5414)_9176.push_back((((long long)((*_5410)(_5414)) * _5403) + ((*_5411)(_5414)))); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9176.size()),_9176.begin(),_9176.end())); })(); (_5408 = ::mosek::fusion::p_Expr::_new_Expr(::mosek::fusion::Utils::Tools::range((long long)0,(_5399->numNonzeros() + (int)1)),std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{_5400}),::mosek::fusion::Utils::Tools::makevector((long long)0,(int)_5399->numNonzeros()),_5412,nullptr,_5409,_5413)); }else { (_5408 = ::mosek::fusion::p_Expr::_new_Expr(::mosek::fusion::Utils::Tools::range((long long)0,(_5399->numNonzeros() + (int)1)),std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{_5400}),([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _9178; for (long long _5415=(int)0, _9179=_5399->numNonzeros(); _5415 < _9179;++_5415)_9178.push_back((long long)0); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9178.size()),_9178.begin(),_9178.end())); })(),_5399->getDataAsArray(),nullptr,_5409,nullptr)); }}else if ((_5403 == _5404)){ if (_5399->isSparse()){ if ((_5399->numNonzeros() > (int)0)){ std::shared_ptr< monty::ndarray< int,1 > > _5416 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5399->numNonzeros()))); std::shared_ptr< monty::ndarray< int,1 > > _5417 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5399->numNonzeros()))); std::shared_ptr< monty::ndarray< double,1 > > _5418 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5399->numNonzeros()))); int _5419 = (int)((_5418)->size(0)); _5399->getDataAsTriplets(_5416,_5417,_5418); int _5420 = ((int)((_5418)->size(0)) * _5405); int _5421 = (int)0; { int _5422 = (int)0; for (;(_5422 < _5419);){ int _5423 = ((*_5416)(_5422)); int _5424 = (_5422 + (int)1); while (((_5424 < _5419) && (_5423 == ((*_5416)(_5424))))) { ( ++ _5424 ); }( ++ _5421 ); (_5422 = _5424); }}int _5425 = (_5421 * _5405); std::shared_ptr< monty::ndarray< long long,1 > > _5426 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((_5425 + (int)1)))); std::shared_ptr< monty::ndarray< long long,1 > > _5427 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_5425))); std::shared_ptr< monty::ndarray< long long,1 > > _5428 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_5420))); std::shared_ptr< monty::ndarray< double,1 > > _5429 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5420))); if ((_5421 > (int)0)){ int _5430 = (int)0; int _5431 = (int)0; { int _5432 = (int)0; for (;(_5432 < _5419);){ int _5433 = ((*_5416)(_5432)); int _5434 = (_5432 + (int)1); while (((_5434 < _5419) && (_5433 == ((*_5416)(_5434))))) { ( ++ _5434 ); }int _9180 = (int)0; int _9181 = _5405; for (int _5435 = _9180;_5435<_9181;++_5435){ (((*_5426)((_5430 + (int)1))) = (((*_5426)(_5430)) + (_5434 - _5432))); (((*_5427)(_5430)) = (((long long)_5433 * _5405) + _5435)); int _9182 = _5432; int _9183 = _5434; for (int _5436 = _9182;_5436<_9183;++_5436){ (((*_5428)(_5431)) = (((long long)((*_5417)(_5436)) * _5405) + _5435)); (((*_5429)(_5431)) = ((*_5418)(_5436))); ( ++ _5431 ); }( ++ _5430 ); }(_5432 = _5434); }}}else {}if (((int)((_5427)->size(0)) == (_5406 * _5407))){ (_5427 = nullptr); }else {}(_5408 = ::mosek::fusion::p_Expr::_new_Expr(_5426,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{_5400}),_5428,_5429,nullptr,_5409,_5427)); }else { (_5408 = ::mosek::fusion::p_Expr::_new_Expr(std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >{(long long)0}),std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{_5400}),std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)0))),nullptr,_5409,std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)0))))); }}else { int _5437 = ((_5402 * _5403) * _5405); std::shared_ptr< monty::ndarray< double,1 > > _5438 = _5399->getDataAsArray(); std::shared_ptr< monty::ndarray< long long,1 > > _5439 = ::mosek::fusion::Utils::Tools::range((long long)0,(long long)((_5437 + (int)1)),(long long)(([&]() -> int { if ( (_5403 > (int)0)) return (_5403); else return ((int)1); })())); std::shared_ptr< monty::ndarray< long long,1 > > _5440 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_5437))); std::shared_ptr< monty::ndarray< double,1 > > _5441 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5437))); { int _5442 = (int)0; int _9184 = (int)0; int _9185 = _5406; for (int _5443 = _9184;_5443<_9185;++_5443){ int _9186 = (int)0; int _9187 = _5407; for (int _5444 = _9186;_5444<_9187;++_5444){ int _9188 = (int)0; int _9189 = _5403; for (int _5445 = _9188;_5445<_9189;++_5445){ (((*_5440)(_5442)) = (long long)((_5445 * _5405) + _5444)); (((*_5441)(_5442)) = ((*_5438)(((_5443 * _5403) + _5445)))); ( ++ _5442 ); }}}}(_5408 = ::mosek::fusion::p_Expr::_new_Expr(_5439,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{_5400}),_5440,_5441,nullptr,_5409,nullptr)); }}else { throw ::mosek::fusion::LengthError(std::string ("Operand shapes do not match."));}return _5408; }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot_( monty::rc_ptr< ::mosek::fusion::Matrix > _5446,monty::rc_ptr< ::mosek::fusion::Expression > _5447){ if (((_5446->numRows() != _5447->shape()->dim((int)0)) || ((_5446->numColumns() != _5447->shape()->dim((int)1)) || ((_5446->numRows() * _5446->numColumns()) != _5447->shape()->getSize())))){ throw ::mosek::fusion::DimensionError(std::string ("Dimensions of operands do not match"));}else {}long long _5448 = _5446->numNonzeros(); std::shared_ptr< monty::ndarray< int,1 > > _5449 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5448))); std::shared_ptr< monty::ndarray< int,1 > > _5450 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5448))); std::shared_ptr< monty::ndarray< double,1 > > _5451 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5448))); _5446->getDataAsTriplets(_5449,_5450,_5451); std::shared_ptr< monty::ndarray< long long,1 > > _5452 = ([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _9190; for (long long _5453=(int)0, _9191=_5448; _5453 < _9191;++_5453)_9190.push_back(((((*_5449)(_5453)) * _5446->numColumns()) + ((*_5450)(_5453)))); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9190.size()),_9190.begin(),_9190.end())); })(); monty::rc_ptr< ::mosek::fusion::FlatExpr > _5454 = _5447->eval(); return ::mosek::fusion::p_Expr::inner_(_5452,_5451,mosek::fusion::p_FlatExpr::_get_impl(_5454)->ptrb,mosek::fusion::p_FlatExpr::_get_impl(_5454)->subj,mosek::fusion::p_FlatExpr::_get_impl(_5454)->cof,mosek::fusion::p_FlatExpr::_get_impl(_5454)->bfix,mosek::fusion::p_FlatExpr::_get_impl(_5454)->inst,mosek::fusion::p_FlatExpr::_get_impl(_5454)->x); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot_( monty::rc_ptr< ::mosek::fusion::Matrix > _5455,monty::rc_ptr< ::mosek::fusion::Variable > _5456){ if (((_5455->numRows() != _5456->shape()->dim((int)0)) || ((_5455->numColumns() != _5456->shape()->dim((int)1)) || ((_5455->numRows() * _5455->numColumns()) != _5456->shape()->getSize())))){ throw ::mosek::fusion::DimensionError(std::string ("Dimensions of operands do not match"));}else {}long long _5457 = _5455->numNonzeros(); std::shared_ptr< monty::ndarray< int,1 > > _5458 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5457))); std::shared_ptr< monty::ndarray< int,1 > > _5459 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5457))); std::shared_ptr< monty::ndarray< double,1 > > _5460 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5457))); _5455->getDataAsTriplets(_5458,_5459,_5460); std::shared_ptr< monty::ndarray< long long,1 > > _5461 = ([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _9192; for (long long _5462=(int)0, _9193=_5457; _5462 < _9193;++_5462)_9192.push_back(((((*_5458)(_5462)) * _5455->numColumns()) + ((*_5459)(_5462)))); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9192.size()),_9192.begin(),_9192.end())); })(); return ::mosek::fusion::p_Expr::inner_(_5461,_5460,_5456); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot_( std::shared_ptr< monty::ndarray< double,1 > > _5463,monty::rc_ptr< ::mosek::fusion::Variable > _5464){ if ((! _5464 || ! _5463)){ throw monty::NullPointerException(std::string ("Arguments for dot may not be null"));}else {}if (((_5464->shape()->dim((int)0) != (int)((_5463)->size(0))) || (mosek::fusion::p_Set::_get_impl(_5464->shape())->size != (long long)((_5463)->size(0))))){ throw ::mosek::fusion::DimensionError(std::string ("Dimensions of operands do not match"));}else {}return ::mosek::fusion::p_Expr::inner_(::mosek::fusion::Utils::Tools::range((long long)0,(long long)((_5463)->size(0))),_5463,_5464); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot_( std::shared_ptr< monty::ndarray< double,1 > > _5465,monty::rc_ptr< ::mosek::fusion::Expression > _5466){ if ((! _5465 || ! _5466)){ throw monty::NullPointerException(std::string ("Arguments for dot may not be null"));}else {}if (((_5466->shape()->dim((int)0) != (int)((_5465)->size(0))) || (mosek::fusion::p_Set::_get_impl(_5466->shape())->size != (long long)((_5465)->size(0))))){ throw ::mosek::fusion::DimensionError(std::string ("Dimensions of operands do not match"));}else {}monty::rc_ptr< ::mosek::fusion::FlatExpr > _5467 = _5466->eval(); return ::mosek::fusion::p_Expr::inner_(::mosek::fusion::Utils::Tools::range((long long)0,(long long)((_5465)->size(0))),_5465,mosek::fusion::p_FlatExpr::_get_impl(_5467)->ptrb,mosek::fusion::p_FlatExpr::_get_impl(_5467)->subj,mosek::fusion::p_FlatExpr::_get_impl(_5467)->cof,mosek::fusion::p_FlatExpr::_get_impl(_5467)->bfix,mosek::fusion::p_FlatExpr::_get_impl(_5467)->inst,mosek::fusion::p_FlatExpr::_get_impl(_5467)->x); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot_( monty::rc_ptr< ::mosek::fusion::NDSparseArray > _5468,monty::rc_ptr< ::mosek::fusion::Expression > _5469){ if ((! _5468 || ! _5469)){ throw monty::NullPointerException(std::string ("Arguments for dot may not be null"));}else {}int _9194 = (int)0; int _9195 = (int)((mosek::fusion::p_NDSparseArray::_get_impl(_5468)->dims)->size(0)); for (int _5470 = _9194;_5470<_9195;++_5470){ if ((((*mosek::fusion::p_NDSparseArray::_get_impl(_5468)->dims)(_5470)) != _5469->shape()->dim(_5470))){ throw ::mosek::fusion::DimensionError(std::string ("Dimensions of operands do not match"));}else {}}int _9196 = (int)((mosek::fusion::p_NDSparseArray::_get_impl(_5468)->dims)->size(0)); int _9197 = mosek::fusion::p_Set::_get_impl(_5469->shape())->nd; for (int _5471 = _9196;_5471<_9197;++_5471){ if (((int)1 != _5469->shape()->dim(_5471))){ throw ::mosek::fusion::DimensionError(std::string ("Dimensions of operands do not match"));}else {}}int _9198 = (int)0; int _9199 = (int)((mosek::fusion::p_NDSparseArray::_get_impl(_5468)->dims)->size(0)); for (int _5472 = _9198;_5472<_9199;++_5472){ if ((((*mosek::fusion::p_NDSparseArray::_get_impl(_5468)->dims)(_5472)) != _5469->shape()->dim(_5472))){ throw ::mosek::fusion::LengthError(std::string ("Dimension mismatch"));}else {}}monty::rc_ptr< ::mosek::fusion::FlatExpr > _5473 = _5469->eval(); return ::mosek::fusion::p_Expr::inner_(mosek::fusion::p_NDSparseArray::_get_impl(_5468)->inst,mosek::fusion::p_NDSparseArray::_get_impl(_5468)->cof,mosek::fusion::p_FlatExpr::_get_impl(_5473)->ptrb,mosek::fusion::p_FlatExpr::_get_impl(_5473)->subj,mosek::fusion::p_FlatExpr::_get_impl(_5473)->cof,mosek::fusion::p_FlatExpr::_get_impl(_5473)->bfix,mosek::fusion::p_FlatExpr::_get_impl(_5473)->inst,mosek::fusion::p_FlatExpr::_get_impl(_5473)->x); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot_( monty::rc_ptr< ::mosek::fusion::NDSparseArray > _5474,monty::rc_ptr< ::mosek::fusion::Variable > _5475){ if ((mosek::fusion::p_Set::_get_impl(_5475->shape())->nd != (int)((mosek::fusion::p_NDSparseArray::_get_impl(_5474)->dims)->size(0)))){ throw ::mosek::fusion::LengthError(std::string ("Dimension mismatch"));}else {}int _9200 = (int)0; int _9201 = (int)((mosek::fusion::p_NDSparseArray::_get_impl(_5474)->dims)->size(0)); for (int _5476 = _9200;_5476<_9201;++_5476){ if ((((*mosek::fusion::p_NDSparseArray::_get_impl(_5474)->dims)(_5476)) != _5475->shape()->dim(_5476))){ throw ::mosek::fusion::LengthError(std::string ("Dimension mismatch"));}else {}}return ::mosek::fusion::p_Expr::inner_(mosek::fusion::p_NDSparseArray::_get_impl(_5474)->inst,mosek::fusion::p_NDSparseArray::_get_impl(_5474)->cof,_5475); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::inner_( std::shared_ptr< monty::ndarray< long long,1 > > _5477,std::shared_ptr< monty::ndarray< double,1 > > _5478,monty::rc_ptr< ::mosek::fusion::Variable > _5479){ int _5480 = (int)((_5477)->size(0)); std::shared_ptr< monty::ndarray< long long,1 > > _5481 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >{(int)0,(long long)((_5478)->size(0))}); std::shared_ptr< monty::ndarray< long long,1 > > _5482 = ::mosek::fusion::Utils::Tools::arraycopy(_5477); std::shared_ptr< monty::ndarray< double,1 > > _5483 = ::mosek::fusion::Utils::Tools::arraycopy(_5478); std::shared_ptr< monty::ndarray< double,1 > > _5484 = nullptr; return ::mosek::fusion::p_Expr::_new_Expr(_5481,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{_5479}),_5482,_5483,_5484,::mosek::fusion::p_Set::scalar(),nullptr); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::inner_( std::shared_ptr< monty::ndarray< long long,1 > > _5485,std::shared_ptr< monty::ndarray< double,1 > > _5486,std::shared_ptr< monty::ndarray< long long,1 > > _5487,std::shared_ptr< monty::ndarray< long long,1 > > _5488,std::shared_ptr< monty::ndarray< double,1 > > _5489,std::shared_ptr< monty::ndarray< double,1 > > _5490,std::shared_ptr< monty::ndarray< long long,1 > > _5491,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _5492){ int _5493 = (int)((_5485)->size(0)); std::shared_ptr< monty::ndarray< long long,1 > > _5494 = ([&]() -> std::shared_ptr< monty::ndarray< long long,1 > > { if ( _5491) return (_5491); else return (::mosek::fusion::Utils::Tools::range((long long)((int)0),((long long)((_5487)->size(0)) - (int)1))); })(); int _5495 = (int)((_5494)->size(0)); long long _5496 = (long long)0; { int _5497 = (int)0; int _5498 = (int)0; while (((_5497 < _5493) && (_5498 < _5495))) { if ((((*_5485)(_5497)) < ((*_5494)(_5498)))){ ( ++ _5497 ); }else if ((((*_5485)(_5497)) > ((*_5494)(_5498)))){ ( ++ _5498 ); }else { (_5496 += (((*_5487)((_5498 + (int)1))) - ((*_5487)(_5498)))); ( ++ _5497 ); ( ++ _5498 ); }}}std::shared_ptr< monty::ndarray< long long,1 > > _5499 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_5496))); std::shared_ptr< monty::ndarray< double,1 > > _5500 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5496))); std::shared_ptr< monty::ndarray< double,1 > > _5501 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)1))); std::shared_ptr< monty::ndarray< long long,1 > > _5502 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >{(long long)0,_5496}); { int _5503 = (int)0; int _5504 = (int)0; int _5505 = (int)0; while (((_5503 < _5493) && (_5504 < _5495))) { if ((((*_5485)(_5503)) < ((*_5494)(_5504)))){ ( ++ _5503 ); }else if ((((*_5485)(_5503)) > ((*_5494)(_5504)))){ ( ++ _5504 ); }else { long long _9202 = ((*_5487)(_5504)); long long _9203 = ((*_5487)((_5504 + (int)1))); for (long long _5506 = _9202;_5506<_9203;++_5506){ (((*_5499)(_5505)) = ((*_5488)(_5506))); (((*_5500)(_5505)) = (((*_5489)(_5506)) * ((*_5486)(_5503)))); ( ++ _5505 ); }( ++ _5503 ); ( ++ _5504 ); }}}if (_5490){ int _5507 = (int)0; int _5508 = (int)0; while (((_5507 < _5493) && (_5508 < _5495))) { if ((((*_5485)(_5507)) < ((*_5494)(_5508)))){ ( ++ _5507 ); }else if ((((*_5485)(_5507)) > ((*_5494)(_5508)))){ ( ++ _5508 ); }else { (((*_5501)((int)0)) += (((*_5486)(_5507)) * ((*_5490)(_5508)))); ( ++ _5507 ); ( ++ _5508 ); }}}else {}return ::mosek::fusion::p_Expr::_new_Expr(_5502,_5492,_5499,_5500,_5501,::mosek::fusion::p_Set::scalar(),nullptr); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::outer  ( std::shared_ptr< monty::ndarray< double,1 > > _5509,    monty::rc_ptr< ::mosek::fusion::Expression > _5510) { return mosek::fusion::p_Expr::outer(_5509,_5510); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::outer( std::shared_ptr< monty::ndarray< double,1 > > _5509,monty::rc_ptr< ::mosek::fusion::Expression > _5510){ if (((mosek::fusion::p_Set::_get_impl(_5510->shape())->nd != (int)1) || (mosek::fusion::p_Set::_get_impl(_5510->shape())->nd != (int)1))){ throw ::mosek::fusion::DimensionError(std::string ("Arguments must be one-dimensional"));}else {}if ((_5510->shape()->dim((int)0) != (int)((_5509)->size(0)))){ throw ::mosek::fusion::DimensionError(std::string ("Argument lengths do not match"));}else {}monty::rc_ptr< ::mosek::fusion::FlatExpr > _5511 = _5510->eval(); return ::mosek::fusion::p_Expr::outer_(mosek::fusion::p_FlatExpr::_get_impl(_5511)->shape->dim((int)0),mosek::fusion::p_FlatExpr::_get_impl(_5511)->ptrb,mosek::fusion::p_FlatExpr::_get_impl(_5511)->subj,mosek::fusion::p_FlatExpr::_get_impl(_5511)->cof,mosek::fusion::p_FlatExpr::_get_impl(_5511)->bfix,mosek::fusion::p_FlatExpr::_get_impl(_5511)->inst,mosek::fusion::p_FlatExpr::_get_impl(_5511)->x,_5509,([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _9204; for (int _5512=(int)0, _9205=(int)((_5509)->size(0)); _5512 < _9205;++_5512)_9204.push_back(_5512); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9204.size()),_9204.begin(),_9204.end())); })(),(int)((_5509)->size(0)),true); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::outer  ( monty::rc_ptr< ::mosek::fusion::Expression > _5513,    std::shared_ptr< monty::ndarray< double,1 > > _5514) { return mosek::fusion::p_Expr::outer(_5513,_5514); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::outer( monty::rc_ptr< ::mosek::fusion::Expression > _5513,std::shared_ptr< monty::ndarray< double,1 > > _5514){ if (((mosek::fusion::p_Set::_get_impl(_5513->shape())->nd != (int)1) || (mosek::fusion::p_Set::_get_impl(_5513->shape())->nd != (int)1))){ throw ::mosek::fusion::DimensionError(std::string ("Arguments must be one-dimensional"));}else {}monty::rc_ptr< ::mosek::fusion::FlatExpr > _5515 = _5513->eval(); return ::mosek::fusion::p_Expr::outer_(mosek::fusion::p_FlatExpr::_get_impl(_5515)->shape->dim((int)0),mosek::fusion::p_FlatExpr::_get_impl(_5515)->ptrb,mosek::fusion::p_FlatExpr::_get_impl(_5515)->subj,mosek::fusion::p_FlatExpr::_get_impl(_5515)->cof,mosek::fusion::p_FlatExpr::_get_impl(_5515)->bfix,mosek::fusion::p_FlatExpr::_get_impl(_5515)->inst,mosek::fusion::p_FlatExpr::_get_impl(_5515)->x,_5514,([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _9206; for (int _5516=(int)0, _9207=(int)((_5514)->size(0)); _5516 < _9207;++_5516)_9206.push_back(_5516); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9206.size()),_9206.begin(),_9206.end())); })(),(int)((_5514)->size(0)),false); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::outer  ( monty::rc_ptr< ::mosek::fusion::Matrix > _5517,    monty::rc_ptr< ::mosek::fusion::Variable > _5518) { return mosek::fusion::p_Expr::outer(_5517,_5518); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::outer( monty::rc_ptr< ::mosek::fusion::Matrix > _5517,monty::rc_ptr< ::mosek::fusion::Variable > _5518){ if ((! ((mosek::fusion::p_Set::_get_impl(_5518->shape())->nd == (int)1) || ((mosek::fusion::p_Set::_get_impl(_5518->shape())->nd == (int)2) && (_5518->shape()->dim((int)1) == (int)1))))){ throw ::mosek::fusion::DimensionError(std::string ("Variable argument must be one-dimensional"));}else {}if ((mosek::fusion::p_Matrix::_get_impl(_5517)->dimj != (int)1)){ throw ::mosek::fusion::DimensionError(std::string ("Constant matrix must be a column-vector"));}else {}monty::rc_ptr< ::mosek::fusion::Matrix > _9208 = _5517; if (nullptr != dynamic_cast< ::mosek::fusion::DenseMatrix* >(_9208.get())) {::mosek::fusion::DenseMatrix::t _5519(dynamic_cast< ::mosek::fusion::DenseMatrix* >(_9208.get()));{ return ::mosek::fusion::p_Expr::outer_(_5518,_5518->shape()->dim((int)0),mosek::fusion::p_DenseMatrix::_get_impl(_5519)->data,nullptr,(int)((mosek::fusion::p_DenseMatrix::_get_impl(_5519)->data)->size(0)),true); }}else {mosek::fusion::Matrix::t _5520 = _9208;{ std::shared_ptr< monty::ndarray< int,1 > > _5521 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5520->numNonzeros()))); std::shared_ptr< monty::ndarray< int,1 > > _5522 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5520->numNonzeros()))); std::shared_ptr< monty::ndarray< double,1 > > _5523 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5520->numNonzeros()))); _5520->getDataAsTriplets(_5521,_5522,_5523); return ::mosek::fusion::p_Expr::outer_(_5518,_5518->shape()->dim((int)0),_5523,_5521,mosek::fusion::p_Matrix::_get_impl(_5520)->dimi,true); }}}monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::outer  ( monty::rc_ptr< ::mosek::fusion::Variable > _5524,    monty::rc_ptr< ::mosek::fusion::Matrix > _5525) { return mosek::fusion::p_Expr::outer(_5524,_5525); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::outer( monty::rc_ptr< ::mosek::fusion::Variable > _5524,monty::rc_ptr< ::mosek::fusion::Matrix > _5525){ if ((! ((mosek::fusion::p_Set::_get_impl(_5524->shape())->nd == (int)1) || ((mosek::fusion::p_Set::_get_impl(_5524->shape())->nd == (int)2) && (_5524->shape()->dim((int)1) == (int)1))))){ throw ::mosek::fusion::DimensionError(std::string ("Variable argument must be one-dimensional"));}else {}if ((mosek::fusion::p_Matrix::_get_impl(_5525)->dimj != (int)1)){ throw ::mosek::fusion::DimensionError(std::string ("Constant matrix must be a column-vector"));}else {}monty::rc_ptr< ::mosek::fusion::Matrix > _9209 = _5525; if (nullptr != dynamic_cast< ::mosek::fusion::DenseMatrix* >(_9209.get())) {::mosek::fusion::DenseMatrix::t _5526(dynamic_cast< ::mosek::fusion::DenseMatrix* >(_9209.get()));{ return ::mosek::fusion::p_Expr::outer_(_5524,_5524->shape()->dim((int)0),mosek::fusion::p_DenseMatrix::_get_impl(_5526)->data,nullptr,(int)((mosek::fusion::p_DenseMatrix::_get_impl(_5526)->data)->size(0)),false); }}else {mosek::fusion::Matrix::t _5527 = _9209;{ std::shared_ptr< monty::ndarray< int,1 > > _5528 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5525->numNonzeros()))); std::shared_ptr< monty::ndarray< int,1 > > _5529 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5527->numNonzeros()))); std::shared_ptr< monty::ndarray< double,1 > > _5530 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5527->numNonzeros()))); _5527->getDataAsTriplets(_5528,_5529,_5530); return ::mosek::fusion::p_Expr::outer_(_5524,_5524->shape()->dim((int)0),_5530,_5528,mosek::fusion::p_Matrix::_get_impl(_5527)->dimi,false); }}}monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::outer  ( std::shared_ptr< monty::ndarray< double,1 > > _5531,    monty::rc_ptr< ::mosek::fusion::Variable > _5532) { return mosek::fusion::p_Expr::outer(_5531,_5532); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::outer( std::shared_ptr< monty::ndarray< double,1 > > _5531,monty::rc_ptr< ::mosek::fusion::Variable > _5532){ if ((! ((mosek::fusion::p_Set::_get_impl(_5532->shape())->nd == (int)1) || ((mosek::fusion::p_Set::_get_impl(_5532->shape())->nd == (int)2) && (_5532->shape()->dim((int)1) == (int)1))))){ throw ::mosek::fusion::DimensionError(std::string ("Variable argument must be one-dimensional"));}else {}return ::mosek::fusion::p_Expr::outer_(_5532,_5532->shape()->dim((int)0),_5531,nullptr,(int)((_5531)->size(0)),true); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::outer  ( monty::rc_ptr< ::mosek::fusion::Variable > _5533,    std::shared_ptr< monty::ndarray< double,1 > > _5534) { return mosek::fusion::p_Expr::outer(_5533,_5534); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::outer( monty::rc_ptr< ::mosek::fusion::Variable > _5533,std::shared_ptr< monty::ndarray< double,1 > > _5534){ if ((! ((mosek::fusion::p_Set::_get_impl(_5533->shape())->nd == (int)1) || ((mosek::fusion::p_Set::_get_impl(_5533->shape())->nd == (int)2) && (_5533->shape()->dim((int)1) == (int)1))))){ throw ::mosek::fusion::DimensionError(std::string ("Variable argument must be one-dimensional"));}else {}return ::mosek::fusion::p_Expr::outer_(_5533,_5533->shape()->dim((int)0),_5534,nullptr,(int)((_5534)->size(0)),false); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::outer_( int _5535,std::shared_ptr< monty::ndarray< long long,1 > > _5536,std::shared_ptr< monty::ndarray< long long,1 > > _5537,std::shared_ptr< monty::ndarray< double,1 > > _5538,std::shared_ptr< monty::ndarray< double,1 > > _5539,std::shared_ptr< monty::ndarray< long long,1 > > _5540,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _5541,std::shared_ptr< monty::ndarray< double,1 > > _5542,std::shared_ptr< monty::ndarray< int,1 > > _5543,int _5544,bool _5545){ monty::rc_ptr< ::mosek::fusion::Set > _5546 = ([&]() -> monty::rc_ptr< ::mosek::fusion::Set > { if ( (! _5545)) return (::mosek::fusion::p_Set::make(_5535,_5544)); else return (::mosek::fusion::p_Set::make(_5544,_5535)); })(); int _5547 = ((int)((_5542)->size(0)) * (int)((_5540)->size(0))); int _5548 = ((int)((_5542)->size(0)) * (int)((_5537)->size(0))); std::shared_ptr< monty::ndarray< long long,1 > > _5549 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((_5547 + (int)1)))); std::shared_ptr< monty::ndarray< long long,1 > > _5550 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_5548))); std::shared_ptr< monty::ndarray< double,1 > > _5551 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5548))); std::shared_ptr< monty::ndarray< double,1 > > _5552 = ([&]() -> std::shared_ptr< monty::ndarray< double,1 > > { if ( _5539) return (std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5547)))); else return (nullptr); })(); std::shared_ptr< monty::ndarray< long long,1 > > _5553 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_5547))); int _5554 = (int)((*_5549)(((int)((_5549)->size(0)) - (int)1))); if ((! _5545)){ long long _5555 = (long long)0; long long _5556 = (long long)0; int _9210 = (int)0; int _9211 = (int)((_5540)->size(0)); for (int _5557 = _9210;_5557<_9211;++_5557){ long long _5558 = (((*_5536)((_5557 + (int)1))) - ((*_5536)(_5557))); int _9212 = (int)0; int _9213 = (int)((_5542)->size(0)); for (int _5559 = _9212;_5559<_9213;++_5559){ (((*_5540)(_5555)) = ((((*_5540)(_5557)) * _5544) + ((*_5543)(_5559)))); (((*_5549)((_5555 + (int)1))) = (((*_5549)(_5555)) + _5558)); ( ++ _5555 ); long long _9214 = ((*_5536)(_5557)); long long _9215 = ((*_5536)((_5557 + (int)1))); for (long long _5560 = _9214;_5560<_9215;++_5560){ (((*_5550)(_5556)) = ((*_5537)(_5560))); (((*_5551)(_5556)) = (((*_5538)(_5560)) * ((*_5542)(_5559)))); ( ++ _5556 ); }}}if (_5552){ int _5561 = (int)0; int _9216 = (int)0; int _9217 = (int)((_5540)->size(0)); for (int _5562 = _9216;_5562<_9217;++_5562){ int _9218 = (int)0; int _9219 = (int)((_5542)->size(0)); for (int _5563 = _9218;_5563<_9219;++_5563){ (((*_5552)(_5561)) = (((*_5542)(_5563)) * ((*_5539)(_5562)))); ( ++ _5561 ); }}}else {}}else { long long _5564 = (long long)0; long long _5565 = (long long)0; int _9220 = (int)0; int _9221 = (int)((_5542)->size(0)); for (int _5566 = _9220;_5566<_9221;++_5566){ double _5567 = ((*_5542)(_5566)); ::mosek::fusion::Utils::Tools::arraycopy(_5537,(long long)((int)0),_5550,_5565,(long long)(_5554)); int _9222 = (int)0; int _9223 = _5554; for (int _5568 = _9222;_5568<_9223;++_5568){ (((*_5551)((_5565 + _5568))) = (((*_5538)(_5568)) * ((*_5542)(_5566)))); }int _9224 = (int)0; int _9225 = (int)((_5540)->size(0)); for (int _5569 = _9224;_5569<_9225;++_5569){ long long _5570 = (((*_5536)((_5569 + (int)1))) - ((*_5536)(_5569))); (((*_5540)(_5564)) = ((((*_5540)(_5569)) * _5544) + ((*_5543)(_5566)))); (((*_5549)((_5564 + (int)1))) = (((*_5549)(_5564)) + _5570)); ( ++ _5564 ); }(_5565 += _5554); }if (_5552){ int _5571 = (int)0; int _9226 = (int)0; int _9227 = (int)((_5542)->size(0)); for (int _5572 = _9226;_5572<_9227;++_5572){ double _5573 = ((*_5542)(_5572)); int _9228 = (int)0; int _9229 = (int)((_5540)->size(0)); for (int _5574 = _9228;_5574<_9229;++_5574){ (((*_5552)(_5571)) = (((*_5539)(_5574)) * _5573)); ( ++ _5571 ); }}}else {}}return ::mosek::fusion::p_Expr::_new_Expr(_5549,_5541,_5550,_5551,_5552,_5546,_5553); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::outer_( monty::rc_ptr< ::mosek::fusion::Variable > _5575,int _5576,std::shared_ptr< monty::ndarray< double,1 > > _5577,std::shared_ptr< monty::ndarray< int,1 > > _5578,int _5579,bool _5580){ monty::rc_ptr< ::mosek::fusion::Set > _5581 = ([&]() -> monty::rc_ptr< ::mosek::fusion::Set > { if ( (! _5580)) return (::mosek::fusion::p_Set::make(_5576,_5579)); else return (::mosek::fusion::p_Set::make(_5579,_5576)); })(); std::shared_ptr< monty::ndarray< long long,1 > > _5582 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((((int)((_5577)->size(0)) * _5576) + (int)1)))); std::shared_ptr< monty::ndarray< long long,1 > > _5583 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(((int)((_5577)->size(0)) * _5576)))); std::shared_ptr< monty::ndarray< double,1 > > _5584 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(((int)((_5577)->size(0)) * _5576)))); std::shared_ptr< monty::ndarray< double,1 > > _5585 = nullptr; std::shared_ptr< monty::ndarray< long long,1 > > _5586 = ([&]() -> std::shared_ptr< monty::ndarray< long long,1 > > { if ( (_5579 == (int)((_5577)->size(0)))) return (nullptr); else return (std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(((int)((_5577)->size(0)) * _5576))))); })(); if ((_5579 == (int)((_5577)->size(0)))){ long long _5587 = (long long)0; if ((! _5580)){ int _9230 = (int)0; int _9231 = _5576; for (int _5588 = _9230;_5588<_9231;++_5588){ int _9232 = (int)0; int _9233 = _5579; for (int _5589 = _9232;_5589<_9233;++_5589){ (((*_5582)((_5587 + (int)1))) = (_5587 + (int)1)); (((*_5583)(_5587)) = (long long)_5588); (((*_5584)(_5587)) = ((*_5577)(_5589))); ( ++ _5587 ); }}}else { int _9234 = (int)0; int _9235 = _5579; for (int _5590 = _9234;_5590<_9235;++_5590){ int _9236 = (int)0; int _9237 = _5576; for (int _5591 = _9236;_5591<_9237;++_5591){ (((*_5582)((_5587 + (int)1))) = (_5587 + (int)1)); (((*_5583)(_5587)) = (long long)_5591); (((*_5584)(_5587)) = ((*_5577)(_5590))); ( ++ _5587 ); }}}}else { long long _5592 = (long long)0; if ((! _5580)){ int _9238 = (int)0; int _9239 = _5576; for (int _5593 = _9238;_5593<_9239;++_5593){ int _9240 = (int)0; int _9241 = (int)((_5577)->size(0)); for (int _5594 = _9240;_5594<_9241;++_5594){ (((*_5582)((_5592 + (int)1))) = (_5592 + (int)1)); (((*_5583)(_5592)) = (long long)_5593); (((*_5584)(_5592)) = ((*_5577)(_5594))); (((*_5586)(_5592)) = ((_5593 * _5579) + ((*_5578)(_5594)))); ( ++ _5592 ); }}}else { int _9242 = (int)0; int _9243 = (int)((_5577)->size(0)); for (int _5595 = _9242;_5595<_9243;++_5595){ int _9244 = (int)0; int _9245 = _5576; for (int _5596 = _9244;_5596<_9245;++_5596){ (((*_5582)((_5592 + (int)1))) = (_5592 + (int)1)); (((*_5583)(_5592)) = (long long)_5596); (((*_5584)(_5592)) = ((*_5577)(_5595))); (((*_5586)(_5592)) = ((((*_5578)(_5595)) * _5576) + _5596)); ( ++ _5592 ); }}}}return ::mosek::fusion::p_Expr::_new_Expr(_5582,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{_5575}),_5583,_5584,_5585,_5581,_5586); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::pick  ( std::shared_ptr< monty::ndarray< int,2 > > _5597) { return mosek::fusion::p_Expr::_get_impl(this)->pick(_5597); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::pick( std::shared_ptr< monty::ndarray< int,2 > > _5597){ std::shared_ptr< monty::ndarray< int,2 > > _5598 = _5597; if ((mosek::fusion::p_Set::_get_impl(shape_p)->nd != (int)((_5598)->size(1)))){ throw ::mosek::fusion::DimensionError(std::string ("Invalid index size"));}else {}int _9246 = (int)0; int _9247 = (int)((_5598)->size(0)); for (int _5599 = _9246;_5599<_9247;++_5599){ int _9248 = (int)0; int _9249 = (int)((_5598)->size(1)); for (int _5600 = _9248;_5600<_9249;++_5600){ if (((((*_5598)(_5599,_5600)) < (int)0) || (((*_5598)(_5599,_5600)) >= shape_p->dim(_5600)))){ throw ::mosek::fusion::IndexError(std::string ("Index is out of bounds"));}else {}}}return pick_(([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _9250; for (int _5601=(int)0, _9251=(int)((_5598)->size(0)); _5601 < _9251;++_5601)_9250.push_back(mosek::fusion::p_Set::_get_impl(shape_p.get())->linearidx(([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _9252; for (int _5602=(int)0, _9253=(int)((_5598)->size(1)); _5602 < _9253;++_5602)_9252.push_back(((*_5598)(_5601,_5602))); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9252.size()),_9252.begin(),_9252.end())); })())); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9250.size()),_9250.begin(),_9250.end())); })()); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::pick  ( std::shared_ptr< monty::ndarray< int,1 > > _5603) { return mosek::fusion::p_Expr::_get_impl(this)->pick(_5603); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::pick( std::shared_ptr< monty::ndarray< int,1 > > _5603){ if ((mosek::fusion::p_Set::_get_impl(shape_p)->nd != (int)1)){ throw ::mosek::fusion::DimensionError(std::string ("Method is only valid for one-dimensional expressions"));}else {}int _9254 = (int)0; int _9255 = (int)((_5603)->size(0)); for (int _5604 = _9254;_5604<_9255;++_5604){ if (((((*_5603)(_5604)) < (int)0) || (((*_5603)(_5604)) >= shape_p->dim((int)0)))){ throw ::mosek::fusion::IndexError(std::string ("Index is out of bounds"));}else {}}return pick_(([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _9256; for (int _5605=(int)0, _9257=(int)((_5603)->size(0)); _5605 < _9257;++_5605)_9256.push_back(((*_5603)(_5605))); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9256.size()),_9256.begin(),_9256.end())); })()); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::pick_( std::shared_ptr< monty::ndarray< long long,1 > > _5606){ if (((int)((_5606)->size(0)) == (int)0)){ return ::mosek::fusion::p_Expr::_new_Expr(std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >{(int)0}),x,std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)0))),nullptr,::mosek::fusion::p_Set::make((int)0),nullptr); }else {}if (! inst){ long long _5607 = (long long)0; std::shared_ptr< monty::ndarray< long long,1 > > _5608 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(((int)((_5606)->size(0)) + (int)1)))); int _9258 = (int)0; int _9259 = (int)((_5606)->size(0)); for (int _5609 = _9258;_5609<_9259;++_5609){ (_5607 += (((*ptrb)((((*_5606)(_5609)) + (int)1))) - ((*ptrb)(((*_5606)(_5609)))))); (((*_5608)((_5609 + (int)1))) = (((*_5608)(_5609)) + (((*ptrb)((((*_5606)(_5609)) + (int)1))) - ((*ptrb)(((*_5606)(_5609))))))); }std::shared_ptr< monty::ndarray< long long,1 > > _5610 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_5607))); std::shared_ptr< monty::ndarray< double,1 > > _5611 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5607))); std::shared_ptr< monty::ndarray< double,1 > > _5612 = nullptr; int _9260 = (int)0; int _9261 = (int)((_5606)->size(0)); for (int _5613 = _9260;_5613<_9261;++_5613){ long long _5614 = ((*_5608)(_5613)); long long _5615 = (((*_5608)((_5613 + (int)1))) - _5614); ::mosek::fusion::Utils::Tools::arraycopy(subj,((*ptrb)(((*_5606)(_5613)))),_5610,_5614,_5615); ::mosek::fusion::Utils::Tools::arraycopy(cof_v,((*ptrb)(((*_5606)(_5613)))),_5611,_5614,_5615); }if (bfix){ (_5612 = ([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _9262; for (int _5616=(int)0, _9263=(int)((_5606)->size(0)); _5616 < _9263;++_5616)_9262.push_back(((*bfix)(((*_5606)(_5616))))); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9262.size()),_9262.begin(),_9262.end())); })()); }else {}std::shared_ptr< monty::ndarray< long long,1 > > _5617 = nullptr; monty::rc_ptr< ::mosek::fusion::Set > _5618 = ::mosek::fusion::p_Set::make((int)((_5606)->size(0))); return ::mosek::fusion::p_Expr::_new_Expr(_5608,x,_5610,_5611,_5612,_5618,_5617); }else { std::shared_ptr< monty::ndarray< long long,1 > > _5619 = ([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _9264; for (int _5620=(int)0, _9265=(int)((_5606)->size(0)); _5620 < _9265;++_5620)_9264.push_back(_5620); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9264.size()),_9264.begin(),_9264.end())); })(); ::mosek::fusion::p_Sort::argsort(_5619,_5606); int _5621 = (int)0; long long _5622 = (long long)0; { int _5623 = (int)0; int _5624 = (int)0; int _5625 = (int)((_5606)->size(0)); int _5626 = (int)((inst)->size(0)); while (((_5623 < _5625) && (_5624 < _5626))) { if ((((*_5606)(((*_5619)(_5623)))) < ((*inst)(_5624)))){ ( ++ _5623 ); }else if ((((*_5606)(((*_5619)(_5623)))) > ((*inst)(_5624)))){ ( ++ _5624 ); }else { ( ++ _5621 ); (_5622 += (((*ptrb)((_5624 + (int)1))) - ((*ptrb)(_5624)))); }}}std::shared_ptr< monty::ndarray< long long,1 > > _5627 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_5621))); std::shared_ptr< monty::ndarray< long long,1 > > _5628 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((_5621 + (int)1)))); std::shared_ptr< monty::ndarray< long long,1 > > _5629 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_5622))); std::shared_ptr< monty::ndarray< double,1 > > _5630 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5622))); std::shared_ptr< monty::ndarray< double,1 > > _5631 = nullptr; monty::rc_ptr< ::mosek::fusion::Set > _5632 = ::mosek::fusion::p_Set::make((int)((_5606)->size(0))); std::shared_ptr< monty::ndarray< int,1 > > _5633 = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _9266; for (int _5634=(int)0, _9267=(int)((_5606)->size(0)); _5634 < _9267;++_5634)_9266.push_back((- (int)1)); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9266.size()),_9266.begin(),_9266.end())); })(); { int _5635 = (int)0; int _5636 = (int)0; int _5637 = (int)((_5606)->size(0)); int _5638 = (int)((inst)->size(0)); while (((_5635 < _5637) && (_5636 < _5638))) { if ((((*_5606)(((*_5619)(_5635)))) < ((*inst)(_5636)))){ ( ++ _5635 ); }else if ((((*_5606)(((*_5619)(_5635)))) > ((*inst)(_5636)))){ ( ++ _5636 ); }else { (((*_5633)(((*_5619)(_5635)))) = _5636); }}}{ int _5639 = (int)0; int _9268 = (int)0; int _9269 = (int)((_5633)->size(0)); for (int _5640 = _9268;_5640<_9269;++_5640){ if ((((*_5633)(_5639)) >= (int)0)){ long long _5641 = (((*ptrb)((((*_5633)(_5639)) + (int)1))) - ((*ptrb)(((*_5633)(_5640))))); (((*_5628)((_5639 + (int)1))) += (((*_5628)(_5639)) + _5641)); (((*_5627)(_5639)) = _5640); ::mosek::fusion::Utils::Tools::arraycopy(subj,((*ptrb)(((*_5633)(_5640)))),_5629,((*_5628)(_5639)),_5641); ::mosek::fusion::Utils::Tools::arraycopy(cof_v,((*ptrb)(((*_5633)(_5640)))),_5630,((*_5628)(_5639)),_5641); ( ++ _5639 ); }else {}}}if (bfix){ (_5631 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5621)))); int _5642 = (int)0; int _9270 = (int)0; int _9271 = (int)((_5633)->size(0)); for (int _5643 = _9270;_5643<_9271;++_5643){ if ((((*_5633)(_5642)) >= (int)0)){ (((*_5631)(_5642)) = ((*bfix)(((*_5633)(_5643))))); ( ++ _5642 ); }else {}}}else {}return ::mosek::fusion::p_Expr::_new_Expr(_5628,x,_5629,_5630,_5631,_5632,_5627); }}monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >,1 > > _5644) { return mosek::fusion::p_Expr::stack(_5644); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack( std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >,1 > > _5644){ if (! _5644){ throw monty::NullPointerException(std::string ("Argument exprs may not be null"));}else {}int _9272 = (int)0; int _9273 = (int)((_5644)->size(0)); for (int _5645 = _9272;_5645<_9273;++_5645){ std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _5646 = ((*_5644)(_5645)); if (! _5646){ throw monty::NullPointerException(std::string ("Arguments for stack may not be null"));}else {}int _9274 = (int)0; int _9275 = (int)((_5646)->size(0)); for (int _5647 = _9274;_5647<_9275;++_5647){ if (! ((*_5646)(_5647))){ throw monty::NullPointerException(std::string ("Arguments for stack may not be null"));}else {}}}std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _5648 = ([=]()->std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > { std::vector< monty::rc_ptr< ::mosek::fusion::Expression > > _9276; for (int _5649=(int)0, _9277=(int)((_5644)->size(0)); _5649 < _9277;++_5649)_9276.push_back(::mosek::fusion::p_Expr::stack_(((*_5644)(_5649)),(int)1)); return std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >(monty::shape(_9276.size()),_9276.begin(),_9276.end())); })(); return ::mosek::fusion::p_Expr::stack_(_5648,(int)0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( double _5650,    double _5651,    double _5652) { return mosek::fusion::p_Expr::vstack(_5650,_5651,_5652); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack( double _5650,double _5651,double _5652){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::mosek::fusion::p_Expr::constTerm(_5650),::mosek::fusion::p_Expr::constTerm(_5651),::mosek::fusion::p_Expr::constTerm(_5652)}),(int)0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( double _5653,    double _5654,    monty::rc_ptr< ::mosek::fusion::Variable > _5655) { return mosek::fusion::p_Expr::vstack(_5653,_5654,_5655); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack( double _5653,double _5654,monty::rc_ptr< ::mosek::fusion::Variable > _5655){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::mosek::fusion::p_Expr::constTerm(_5653),::mosek::fusion::p_Expr::constTerm(_5654),_5655->asExpr()}),(int)0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( double _5656,    double _5657,    monty::rc_ptr< ::mosek::fusion::Expression > _5658) { return mosek::fusion::p_Expr::vstack(_5656,_5657,_5658); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack( double _5656,double _5657,monty::rc_ptr< ::mosek::fusion::Expression > _5658){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::mosek::fusion::p_Expr::constTerm(_5656),::mosek::fusion::p_Expr::constTerm(_5657),_5658}),(int)0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( double _5659,    monty::rc_ptr< ::mosek::fusion::Variable > _5660,    double _5661) { return mosek::fusion::p_Expr::vstack(_5659,_5660,_5661); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack( double _5659,monty::rc_ptr< ::mosek::fusion::Variable > _5660,double _5661){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::mosek::fusion::p_Expr::constTerm(_5659),_5660->asExpr(),::mosek::fusion::p_Expr::constTerm(_5661)}),(int)0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( double _5662,    monty::rc_ptr< ::mosek::fusion::Variable > _5663,    monty::rc_ptr< ::mosek::fusion::Variable > _5664) { return mosek::fusion::p_Expr::vstack(_5662,_5663,_5664); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack( double _5662,monty::rc_ptr< ::mosek::fusion::Variable > _5663,monty::rc_ptr< ::mosek::fusion::Variable > _5664){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::mosek::fusion::p_Expr::constTerm(_5662),_5663->asExpr(),_5664->asExpr()}),(int)0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( double _5665,    monty::rc_ptr< ::mosek::fusion::Variable > _5666,    monty::rc_ptr< ::mosek::fusion::Expression > _5667) { return mosek::fusion::p_Expr::vstack(_5665,_5666,_5667); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack( double _5665,monty::rc_ptr< ::mosek::fusion::Variable > _5666,monty::rc_ptr< ::mosek::fusion::Expression > _5667){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::mosek::fusion::p_Expr::constTerm(_5665),_5666->asExpr(),_5667}),(int)0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( double _5668,    monty::rc_ptr< ::mosek::fusion::Expression > _5669,    double _5670) { return mosek::fusion::p_Expr::vstack(_5668,_5669,_5670); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack( double _5668,monty::rc_ptr< ::mosek::fusion::Expression > _5669,double _5670){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::mosek::fusion::p_Expr::constTerm(_5668),_5669,::mosek::fusion::p_Expr::constTerm(_5670)}),(int)0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( double _5671,    monty::rc_ptr< ::mosek::fusion::Expression > _5672,    monty::rc_ptr< ::mosek::fusion::Variable > _5673) { return mosek::fusion::p_Expr::vstack(_5671,_5672,_5673); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack( double _5671,monty::rc_ptr< ::mosek::fusion::Expression > _5672,monty::rc_ptr< ::mosek::fusion::Variable > _5673){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::mosek::fusion::p_Expr::constTerm(_5671),_5672,_5673->asExpr()}),(int)0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( double _5674,    monty::rc_ptr< ::mosek::fusion::Expression > _5675,    monty::rc_ptr< ::mosek::fusion::Expression > _5676) { return mosek::fusion::p_Expr::vstack(_5674,_5675,_5676); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack( double _5674,monty::rc_ptr< ::mosek::fusion::Expression > _5675,monty::rc_ptr< ::mosek::fusion::Expression > _5676){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::mosek::fusion::p_Expr::constTerm(_5674),_5675,_5676}),(int)0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( monty::rc_ptr< ::mosek::fusion::Variable > _5677,    double _5678,    double _5679) { return mosek::fusion::p_Expr::vstack(_5677,_5678,_5679); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack( monty::rc_ptr< ::mosek::fusion::Variable > _5677,double _5678,double _5679){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5677->asExpr(),::mosek::fusion::p_Expr::constTerm(_5678),::mosek::fusion::p_Expr::constTerm(_5679)}),(int)0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( monty::rc_ptr< ::mosek::fusion::Variable > _5680,    double _5681,    monty::rc_ptr< ::mosek::fusion::Variable > _5682) { return mosek::fusion::p_Expr::vstack(_5680,_5681,_5682); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack( monty::rc_ptr< ::mosek::fusion::Variable > _5680,double _5681,monty::rc_ptr< ::mosek::fusion::Variable > _5682){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5680->asExpr(),::mosek::fusion::p_Expr::constTerm(_5681),_5682->asExpr()}),(int)0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( monty::rc_ptr< ::mosek::fusion::Variable > _5683,    double _5684,    monty::rc_ptr< ::mosek::fusion::Expression > _5685) { return mosek::fusion::p_Expr::vstack(_5683,_5684,_5685); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack( monty::rc_ptr< ::mosek::fusion::Variable > _5683,double _5684,monty::rc_ptr< ::mosek::fusion::Expression > _5685){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5683->asExpr(),::mosek::fusion::p_Expr::constTerm(_5684),_5685}),(int)0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( monty::rc_ptr< ::mosek::fusion::Variable > _5686,    monty::rc_ptr< ::mosek::fusion::Variable > _5687,    double _5688) { return mosek::fusion::p_Expr::vstack(_5686,_5687,_5688); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack( monty::rc_ptr< ::mosek::fusion::Variable > _5686,monty::rc_ptr< ::mosek::fusion::Variable > _5687,double _5688){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5686->asExpr(),_5687->asExpr(),::mosek::fusion::p_Expr::constTerm(_5688)}),(int)0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( monty::rc_ptr< ::mosek::fusion::Variable > _5689,    monty::rc_ptr< ::mosek::fusion::Variable > _5690,    monty::rc_ptr< ::mosek::fusion::Variable > _5691) { return mosek::fusion::p_Expr::vstack(_5689,_5690,_5691); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack( monty::rc_ptr< ::mosek::fusion::Variable > _5689,monty::rc_ptr< ::mosek::fusion::Variable > _5690,monty::rc_ptr< ::mosek::fusion::Variable > _5691){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5689->asExpr(),_5690->asExpr(),_5691->asExpr()}),(int)0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( monty::rc_ptr< ::mosek::fusion::Variable > _5692,    monty::rc_ptr< ::mosek::fusion::Variable > _5693,    monty::rc_ptr< ::mosek::fusion::Expression > _5694) { return mosek::fusion::p_Expr::vstack(_5692,_5693,_5694); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack( monty::rc_ptr< ::mosek::fusion::Variable > _5692,monty::rc_ptr< ::mosek::fusion::Variable > _5693,monty::rc_ptr< ::mosek::fusion::Expression > _5694){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5692->asExpr(),_5693->asExpr(),_5694}),(int)0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( monty::rc_ptr< ::mosek::fusion::Variable > _5695,    monty::rc_ptr< ::mosek::fusion::Expression > _5696,    double _5697) { return mosek::fusion::p_Expr::vstack(_5695,_5696,_5697); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack( monty::rc_ptr< ::mosek::fusion::Variable > _5695,monty::rc_ptr< ::mosek::fusion::Expression > _5696,double _5697){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5695->asExpr(),_5696,::mosek::fusion::p_Expr::constTerm(_5697)}),(int)0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( monty::rc_ptr< ::mosek::fusion::Variable > _5698,    monty::rc_ptr< ::mosek::fusion::Expression > _5699,    monty::rc_ptr< ::mosek::fusion::Variable > _5700) { return mosek::fusion::p_Expr::vstack(_5698,_5699,_5700); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack( monty::rc_ptr< ::mosek::fusion::Variable > _5698,monty::rc_ptr< ::mosek::fusion::Expression > _5699,monty::rc_ptr< ::mosek::fusion::Variable > _5700){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5698->asExpr(),_5699,_5700->asExpr()}),(int)0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( monty::rc_ptr< ::mosek::fusion::Variable > _5701,    monty::rc_ptr< ::mosek::fusion::Expression > _5702,    monty::rc_ptr< ::mosek::fusion::Expression > _5703) { return mosek::fusion::p_Expr::vstack(_5701,_5702,_5703); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack( monty::rc_ptr< ::mosek::fusion::Variable > _5701,monty::rc_ptr< ::mosek::fusion::Expression > _5702,monty::rc_ptr< ::mosek::fusion::Expression > _5703){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5701->asExpr(),_5702,_5703}),(int)0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _5704,    double _5705,    double _5706) { return mosek::fusion::p_Expr::vstack(_5704,_5705,_5706); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack( monty::rc_ptr< ::mosek::fusion::Expression > _5704,double _5705,double _5706){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5704,::mosek::fusion::p_Expr::constTerm(_5705),::mosek::fusion::p_Expr::constTerm(_5706)}),(int)0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _5707,    double _5708,    monty::rc_ptr< ::mosek::fusion::Variable > _5709) { return mosek::fusion::p_Expr::vstack(_5707,_5708,_5709); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack( monty::rc_ptr< ::mosek::fusion::Expression > _5707,double _5708,monty::rc_ptr< ::mosek::fusion::Variable > _5709){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5707,::mosek::fusion::p_Expr::constTerm(_5708),_5709->asExpr()}),(int)0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _5710,    double _5711,    monty::rc_ptr< ::mosek::fusion::Expression > _5712) { return mosek::fusion::p_Expr::vstack(_5710,_5711,_5712); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack( monty::rc_ptr< ::mosek::fusion::Expression > _5710,double _5711,monty::rc_ptr< ::mosek::fusion::Expression > _5712){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5710,::mosek::fusion::p_Expr::constTerm(_5711),_5712}),(int)0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _5713,    monty::rc_ptr< ::mosek::fusion::Variable > _5714,    double _5715) { return mosek::fusion::p_Expr::vstack(_5713,_5714,_5715); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack( monty::rc_ptr< ::mosek::fusion::Expression > _5713,monty::rc_ptr< ::mosek::fusion::Variable > _5714,double _5715){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5713,_5714->asExpr(),::mosek::fusion::p_Expr::constTerm(_5715)}),(int)0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _5716,    monty::rc_ptr< ::mosek::fusion::Variable > _5717,    monty::rc_ptr< ::mosek::fusion::Variable > _5718) { return mosek::fusion::p_Expr::vstack(_5716,_5717,_5718); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack( monty::rc_ptr< ::mosek::fusion::Expression > _5716,monty::rc_ptr< ::mosek::fusion::Variable > _5717,monty::rc_ptr< ::mosek::fusion::Variable > _5718){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5716,_5717->asExpr(),_5718->asExpr()}),(int)0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _5719,    monty::rc_ptr< ::mosek::fusion::Variable > _5720,    monty::rc_ptr< ::mosek::fusion::Expression > _5721) { return mosek::fusion::p_Expr::vstack(_5719,_5720,_5721); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack( monty::rc_ptr< ::mosek::fusion::Expression > _5719,monty::rc_ptr< ::mosek::fusion::Variable > _5720,monty::rc_ptr< ::mosek::fusion::Expression > _5721){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5719,_5720->asExpr(),_5721}),(int)0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _5722,    monty::rc_ptr< ::mosek::fusion::Expression > _5723,    double _5724) { return mosek::fusion::p_Expr::vstack(_5722,_5723,_5724); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack( monty::rc_ptr< ::mosek::fusion::Expression > _5722,monty::rc_ptr< ::mosek::fusion::Expression > _5723,double _5724){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5722,_5723,::mosek::fusion::p_Expr::constTerm(_5724)}),(int)0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _5725,    monty::rc_ptr< ::mosek::fusion::Expression > _5726,    monty::rc_ptr< ::mosek::fusion::Variable > _5727) { return mosek::fusion::p_Expr::vstack(_5725,_5726,_5727); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack( monty::rc_ptr< ::mosek::fusion::Expression > _5725,monty::rc_ptr< ::mosek::fusion::Expression > _5726,monty::rc_ptr< ::mosek::fusion::Variable > _5727){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5725,_5726,_5727->asExpr()}),(int)0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _5728,    monty::rc_ptr< ::mosek::fusion::Expression > _5729,    monty::rc_ptr< ::mosek::fusion::Expression > _5730) { return mosek::fusion::p_Expr::vstack(_5728,_5729,_5730); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack( monty::rc_ptr< ::mosek::fusion::Expression > _5728,monty::rc_ptr< ::mosek::fusion::Expression > _5729,monty::rc_ptr< ::mosek::fusion::Expression > _5730){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5728,_5729,_5730}),(int)0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( double _5731,    monty::rc_ptr< ::mosek::fusion::Variable > _5732) { return mosek::fusion::p_Expr::vstack(_5731,_5732); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack( double _5731,monty::rc_ptr< ::mosek::fusion::Variable > _5732){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::mosek::fusion::p_Expr::constTerm(_5731),_5732->asExpr()}),(int)0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( double _5733,    monty::rc_ptr< ::mosek::fusion::Expression > _5734) { return mosek::fusion::p_Expr::vstack(_5733,_5734); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack( double _5733,monty::rc_ptr< ::mosek::fusion::Expression > _5734){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::mosek::fusion::p_Expr::constTerm(_5733),_5734}),(int)0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( monty::rc_ptr< ::mosek::fusion::Variable > _5735,    double _5736) { return mosek::fusion::p_Expr::vstack(_5735,_5736); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack( monty::rc_ptr< ::mosek::fusion::Variable > _5735,double _5736){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5735->asExpr(),::mosek::fusion::p_Expr::constTerm(_5736)}),(int)0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( monty::rc_ptr< ::mosek::fusion::Variable > _5737,    monty::rc_ptr< ::mosek::fusion::Variable > _5738) { return mosek::fusion::p_Expr::vstack(_5737,_5738); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack( monty::rc_ptr< ::mosek::fusion::Variable > _5737,monty::rc_ptr< ::mosek::fusion::Variable > _5738){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5737->asExpr(),_5738->asExpr()}),(int)0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( monty::rc_ptr< ::mosek::fusion::Variable > _5739,    monty::rc_ptr< ::mosek::fusion::Expression > _5740) { return mosek::fusion::p_Expr::vstack(_5739,_5740); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack( monty::rc_ptr< ::mosek::fusion::Variable > _5739,monty::rc_ptr< ::mosek::fusion::Expression > _5740){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5739->asExpr(),_5740}),(int)0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _5741,    double _5742) { return mosek::fusion::p_Expr::vstack(_5741,_5742); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack( monty::rc_ptr< ::mosek::fusion::Expression > _5741,double _5742){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5741,::mosek::fusion::p_Expr::constTerm(_5742)}),(int)0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _5743,    monty::rc_ptr< ::mosek::fusion::Variable > _5744) { return mosek::fusion::p_Expr::vstack(_5743,_5744); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack( monty::rc_ptr< ::mosek::fusion::Expression > _5743,monty::rc_ptr< ::mosek::fusion::Variable > _5744){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5743,_5744->asExpr()}),(int)0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _5745,    monty::rc_ptr< ::mosek::fusion::Expression > _5746) { return mosek::fusion::p_Expr::vstack(_5745,_5746); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack( monty::rc_ptr< ::mosek::fusion::Expression > _5745,monty::rc_ptr< ::mosek::fusion::Expression > _5746){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5745,_5746}),(int)0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _5747) { return mosek::fusion::p_Expr::vstack(_5747); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _5747){ if (! _5747){ throw monty::NullPointerException(std::string ("Argument exprs may not be null"));}else {}int _9278 = (int)0; int _9279 = (int)((_5747)->size(0)); for (int _5748 = _9278;_5748<_9279;++_5748){ if (! ((*_5747)(_5748))){ throw monty::NullPointerException(std::string ("Arguments for vstack may not be null"));}else {}}return ::mosek::fusion::p_Expr::stack_(_5747,(int)0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _5749,    monty::rc_ptr< ::mosek::fusion::Expression > _5750,    monty::rc_ptr< ::mosek::fusion::Expression > _5751) { return mosek::fusion::p_Expr::hstack(_5749,_5750,_5751); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack( monty::rc_ptr< ::mosek::fusion::Expression > _5749,monty::rc_ptr< ::mosek::fusion::Expression > _5750,monty::rc_ptr< ::mosek::fusion::Expression > _5751){ if ((! _5749 || (! _5750 || ! _5751))){ throw monty::NullPointerException(std::string ("Arguments e1, e2 and e3 may not be null"));}else {}return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5749,_5750,_5751}),(int)1); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _5752,    monty::rc_ptr< ::mosek::fusion::Expression > _5753,    monty::rc_ptr< ::mosek::fusion::Variable > _5754) { return mosek::fusion::p_Expr::hstack(_5752,_5753,_5754); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack( monty::rc_ptr< ::mosek::fusion::Expression > _5752,monty::rc_ptr< ::mosek::fusion::Expression > _5753,monty::rc_ptr< ::mosek::fusion::Variable > _5754){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5752,_5753,_5754->asExpr()}),(int)1); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _5755,    monty::rc_ptr< ::mosek::fusion::Expression > _5756,    double _5757) { return mosek::fusion::p_Expr::hstack(_5755,_5756,_5757); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack( monty::rc_ptr< ::mosek::fusion::Expression > _5755,monty::rc_ptr< ::mosek::fusion::Expression > _5756,double _5757){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5755,_5756,::mosek::fusion::p_Expr::constTerm(_5757)}),(int)1); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _5758,    monty::rc_ptr< ::mosek::fusion::Variable > _5759,    monty::rc_ptr< ::mosek::fusion::Expression > _5760) { return mosek::fusion::p_Expr::hstack(_5758,_5759,_5760); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack( monty::rc_ptr< ::mosek::fusion::Expression > _5758,monty::rc_ptr< ::mosek::fusion::Variable > _5759,monty::rc_ptr< ::mosek::fusion::Expression > _5760){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5758,_5759->asExpr(),_5760}),(int)1); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _5761,    monty::rc_ptr< ::mosek::fusion::Variable > _5762,    monty::rc_ptr< ::mosek::fusion::Variable > _5763) { return mosek::fusion::p_Expr::hstack(_5761,_5762,_5763); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack( monty::rc_ptr< ::mosek::fusion::Expression > _5761,monty::rc_ptr< ::mosek::fusion::Variable > _5762,monty::rc_ptr< ::mosek::fusion::Variable > _5763){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5761,_5762->asExpr(),_5763->asExpr()}),(int)1); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _5764,    monty::rc_ptr< ::mosek::fusion::Variable > _5765,    double _5766) { return mosek::fusion::p_Expr::hstack(_5764,_5765,_5766); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack( monty::rc_ptr< ::mosek::fusion::Expression > _5764,monty::rc_ptr< ::mosek::fusion::Variable > _5765,double _5766){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5764,_5765->asExpr(),::mosek::fusion::p_Expr::constTerm(_5766)}),(int)1); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _5767,    double _5768,    monty::rc_ptr< ::mosek::fusion::Expression > _5769) { return mosek::fusion::p_Expr::hstack(_5767,_5768,_5769); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack( monty::rc_ptr< ::mosek::fusion::Expression > _5767,double _5768,monty::rc_ptr< ::mosek::fusion::Expression > _5769){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5767,::mosek::fusion::p_Expr::constTerm(_5768),_5769}),(int)1); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _5770,    double _5771,    monty::rc_ptr< ::mosek::fusion::Variable > _5772) { return mosek::fusion::p_Expr::hstack(_5770,_5771,_5772); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack( monty::rc_ptr< ::mosek::fusion::Expression > _5770,double _5771,monty::rc_ptr< ::mosek::fusion::Variable > _5772){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5770,::mosek::fusion::p_Expr::constTerm(_5771),_5772->asExpr()}),(int)1); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _5773,    double _5774,    double _5775) { return mosek::fusion::p_Expr::hstack(_5773,_5774,_5775); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack( monty::rc_ptr< ::mosek::fusion::Expression > _5773,double _5774,double _5775){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5773,::mosek::fusion::p_Expr::constTerm(_5774),::mosek::fusion::p_Expr::constTerm(_5775)}),(int)1); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( monty::rc_ptr< ::mosek::fusion::Variable > _5776,    monty::rc_ptr< ::mosek::fusion::Expression > _5777,    monty::rc_ptr< ::mosek::fusion::Expression > _5778) { return mosek::fusion::p_Expr::hstack(_5776,_5777,_5778); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack( monty::rc_ptr< ::mosek::fusion::Variable > _5776,monty::rc_ptr< ::mosek::fusion::Expression > _5777,monty::rc_ptr< ::mosek::fusion::Expression > _5778){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5776->asExpr(),_5777,_5778}),(int)1); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( monty::rc_ptr< ::mosek::fusion::Variable > _5779,    monty::rc_ptr< ::mosek::fusion::Expression > _5780,    monty::rc_ptr< ::mosek::fusion::Variable > _5781) { return mosek::fusion::p_Expr::hstack(_5779,_5780,_5781); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack( monty::rc_ptr< ::mosek::fusion::Variable > _5779,monty::rc_ptr< ::mosek::fusion::Expression > _5780,monty::rc_ptr< ::mosek::fusion::Variable > _5781){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5779->asExpr(),_5780,_5781->asExpr()}),(int)1); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( monty::rc_ptr< ::mosek::fusion::Variable > _5782,    monty::rc_ptr< ::mosek::fusion::Expression > _5783,    double _5784) { return mosek::fusion::p_Expr::hstack(_5782,_5783,_5784); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack( monty::rc_ptr< ::mosek::fusion::Variable > _5782,monty::rc_ptr< ::mosek::fusion::Expression > _5783,double _5784){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5782->asExpr(),_5783,::mosek::fusion::p_Expr::constTerm(_5784)}),(int)1); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( monty::rc_ptr< ::mosek::fusion::Variable > _5785,    monty::rc_ptr< ::mosek::fusion::Variable > _5786,    monty::rc_ptr< ::mosek::fusion::Expression > _5787) { return mosek::fusion::p_Expr::hstack(_5785,_5786,_5787); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack( monty::rc_ptr< ::mosek::fusion::Variable > _5785,monty::rc_ptr< ::mosek::fusion::Variable > _5786,monty::rc_ptr< ::mosek::fusion::Expression > _5787){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5785->asExpr(),_5786->asExpr(),_5787}),(int)1); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( monty::rc_ptr< ::mosek::fusion::Variable > _5788,    monty::rc_ptr< ::mosek::fusion::Variable > _5789,    monty::rc_ptr< ::mosek::fusion::Variable > _5790) { return mosek::fusion::p_Expr::hstack(_5788,_5789,_5790); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack( monty::rc_ptr< ::mosek::fusion::Variable > _5788,monty::rc_ptr< ::mosek::fusion::Variable > _5789,monty::rc_ptr< ::mosek::fusion::Variable > _5790){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5788->asExpr(),_5789->asExpr(),_5790->asExpr()}),(int)1); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( monty::rc_ptr< ::mosek::fusion::Variable > _5791,    monty::rc_ptr< ::mosek::fusion::Variable > _5792,    double _5793) { return mosek::fusion::p_Expr::hstack(_5791,_5792,_5793); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack( monty::rc_ptr< ::mosek::fusion::Variable > _5791,monty::rc_ptr< ::mosek::fusion::Variable > _5792,double _5793){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5791->asExpr(),_5792->asExpr(),::mosek::fusion::p_Expr::constTerm(_5793)}),(int)1); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( monty::rc_ptr< ::mosek::fusion::Variable > _5794,    double _5795,    monty::rc_ptr< ::mosek::fusion::Expression > _5796) { return mosek::fusion::p_Expr::hstack(_5794,_5795,_5796); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack( monty::rc_ptr< ::mosek::fusion::Variable > _5794,double _5795,monty::rc_ptr< ::mosek::fusion::Expression > _5796){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5794->asExpr(),::mosek::fusion::p_Expr::constTerm(_5795),_5796}),(int)1); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( monty::rc_ptr< ::mosek::fusion::Variable > _5797,    double _5798,    monty::rc_ptr< ::mosek::fusion::Variable > _5799) { return mosek::fusion::p_Expr::hstack(_5797,_5798,_5799); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack( monty::rc_ptr< ::mosek::fusion::Variable > _5797,double _5798,monty::rc_ptr< ::mosek::fusion::Variable > _5799){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5797->asExpr(),::mosek::fusion::p_Expr::constTerm(_5798),_5799->asExpr()}),(int)1); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( monty::rc_ptr< ::mosek::fusion::Variable > _5800,    double _5801,    double _5802) { return mosek::fusion::p_Expr::hstack(_5800,_5801,_5802); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack( monty::rc_ptr< ::mosek::fusion::Variable > _5800,double _5801,double _5802){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5800->asExpr(),::mosek::fusion::p_Expr::constTerm(_5801),::mosek::fusion::p_Expr::constTerm(_5802)}),(int)1); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( double _5803,    monty::rc_ptr< ::mosek::fusion::Expression > _5804,    monty::rc_ptr< ::mosek::fusion::Expression > _5805) { return mosek::fusion::p_Expr::hstack(_5803,_5804,_5805); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack( double _5803,monty::rc_ptr< ::mosek::fusion::Expression > _5804,monty::rc_ptr< ::mosek::fusion::Expression > _5805){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::mosek::fusion::p_Expr::constTerm(_5803),_5804,_5805}),(int)1); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( double _5806,    monty::rc_ptr< ::mosek::fusion::Expression > _5807,    monty::rc_ptr< ::mosek::fusion::Variable > _5808) { return mosek::fusion::p_Expr::hstack(_5806,_5807,_5808); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack( double _5806,monty::rc_ptr< ::mosek::fusion::Expression > _5807,monty::rc_ptr< ::mosek::fusion::Variable > _5808){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::mosek::fusion::p_Expr::constTerm(_5806),_5807,_5808->asExpr()}),(int)1); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( double _5809,    monty::rc_ptr< ::mosek::fusion::Expression > _5810,    double _5811) { return mosek::fusion::p_Expr::hstack(_5809,_5810,_5811); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack( double _5809,monty::rc_ptr< ::mosek::fusion::Expression > _5810,double _5811){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::mosek::fusion::p_Expr::constTerm(_5809),_5810,::mosek::fusion::p_Expr::constTerm(_5811)}),(int)1); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( double _5812,    monty::rc_ptr< ::mosek::fusion::Variable > _5813,    monty::rc_ptr< ::mosek::fusion::Expression > _5814) { return mosek::fusion::p_Expr::hstack(_5812,_5813,_5814); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack( double _5812,monty::rc_ptr< ::mosek::fusion::Variable > _5813,monty::rc_ptr< ::mosek::fusion::Expression > _5814){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::mosek::fusion::p_Expr::constTerm(_5812),_5813->asExpr(),_5814}),(int)1); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( double _5815,    monty::rc_ptr< ::mosek::fusion::Variable > _5816,    monty::rc_ptr< ::mosek::fusion::Variable > _5817) { return mosek::fusion::p_Expr::hstack(_5815,_5816,_5817); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack( double _5815,monty::rc_ptr< ::mosek::fusion::Variable > _5816,monty::rc_ptr< ::mosek::fusion::Variable > _5817){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::mosek::fusion::p_Expr::constTerm(_5815),_5816->asExpr(),_5817->asExpr()}),(int)1); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( double _5818,    monty::rc_ptr< ::mosek::fusion::Variable > _5819,    double _5820) { return mosek::fusion::p_Expr::hstack(_5818,_5819,_5820); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack( double _5818,monty::rc_ptr< ::mosek::fusion::Variable > _5819,double _5820){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::mosek::fusion::p_Expr::constTerm(_5818),_5819->asExpr(),::mosek::fusion::p_Expr::constTerm(_5820)}),(int)1); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( double _5821,    double _5822,    monty::rc_ptr< ::mosek::fusion::Expression > _5823) { return mosek::fusion::p_Expr::hstack(_5821,_5822,_5823); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack( double _5821,double _5822,monty::rc_ptr< ::mosek::fusion::Expression > _5823){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::mosek::fusion::p_Expr::constTerm(_5821),::mosek::fusion::p_Expr::constTerm(_5822),_5823}),(int)1); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( double _5824,    double _5825,    monty::rc_ptr< ::mosek::fusion::Variable > _5826) { return mosek::fusion::p_Expr::hstack(_5824,_5825,_5826); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack( double _5824,double _5825,monty::rc_ptr< ::mosek::fusion::Variable > _5826){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::mosek::fusion::p_Expr::constTerm(_5824),::mosek::fusion::p_Expr::constTerm(_5825),_5826->asExpr()}),(int)1); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( monty::rc_ptr< ::mosek::fusion::Variable > _5827,    monty::rc_ptr< ::mosek::fusion::Expression > _5828) { return mosek::fusion::p_Expr::hstack(_5827,_5828); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack( monty::rc_ptr< ::mosek::fusion::Variable > _5827,monty::rc_ptr< ::mosek::fusion::Expression > _5828){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5827->asExpr(),_5828}),(int)1); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( monty::rc_ptr< ::mosek::fusion::Variable > _5829,    monty::rc_ptr< ::mosek::fusion::Variable > _5830) { return mosek::fusion::p_Expr::hstack(_5829,_5830); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack( monty::rc_ptr< ::mosek::fusion::Variable > _5829,monty::rc_ptr< ::mosek::fusion::Variable > _5830){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5829->asExpr(),_5830->asExpr()}),(int)1); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( monty::rc_ptr< ::mosek::fusion::Variable > _5831,    double _5832) { return mosek::fusion::p_Expr::hstack(_5831,_5832); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack( monty::rc_ptr< ::mosek::fusion::Variable > _5831,double _5832){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5831->asExpr(),::mosek::fusion::p_Expr::constTerm(_5832)}),(int)1); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( double _5833,    monty::rc_ptr< ::mosek::fusion::Expression > _5834) { return mosek::fusion::p_Expr::hstack(_5833,_5834); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack( double _5833,monty::rc_ptr< ::mosek::fusion::Expression > _5834){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::mosek::fusion::p_Expr::constTerm(_5833),_5834}),(int)1); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( double _5835,    monty::rc_ptr< ::mosek::fusion::Variable > _5836) { return mosek::fusion::p_Expr::hstack(_5835,_5836); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack( double _5835,monty::rc_ptr< ::mosek::fusion::Variable > _5836){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::mosek::fusion::p_Expr::constTerm(_5835),_5836->asExpr()}),(int)1); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _5837,    monty::rc_ptr< ::mosek::fusion::Variable > _5838) { return mosek::fusion::p_Expr::hstack(_5837,_5838); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack( monty::rc_ptr< ::mosek::fusion::Expression > _5837,monty::rc_ptr< ::mosek::fusion::Variable > _5838){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5837,_5838->asExpr()}),(int)1); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _5839,    double _5840) { return mosek::fusion::p_Expr::hstack(_5839,_5840); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack( monty::rc_ptr< ::mosek::fusion::Expression > _5839,double _5840){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5839,::mosek::fusion::p_Expr::constTerm(_5840)}),(int)1); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _5841,    monty::rc_ptr< ::mosek::fusion::Expression > _5842) { return mosek::fusion::p_Expr::hstack(_5841,_5842); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack( monty::rc_ptr< ::mosek::fusion::Expression > _5841,monty::rc_ptr< ::mosek::fusion::Expression > _5842){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5841,_5842}),(int)1); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _5843) { return mosek::fusion::p_Expr::hstack(_5843); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _5843){ if (! _5843){ throw monty::NullPointerException(std::string ("Argument exprs may not be null"));}else {}int _9280 = (int)0; int _9281 = (int)((_5843)->size(0)); for (int _5844 = _9280;_5844<_9281;++_5844){ if (! ((*_5843)(_5844))){ throw monty::NullPointerException(std::string ("Arguments for hstack may not be null"));}else {}}return ::mosek::fusion::p_Expr::stack_(_5843,(int)1); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _5845,    monty::rc_ptr< ::mosek::fusion::Expression > _5846,    monty::rc_ptr< ::mosek::fusion::Expression > _5847,    monty::rc_ptr< ::mosek::fusion::Expression > _5848) { return mosek::fusion::p_Expr::stack(_5845,_5846,_5847,_5848); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack( int _5845,monty::rc_ptr< ::mosek::fusion::Expression > _5846,monty::rc_ptr< ::mosek::fusion::Expression > _5847,monty::rc_ptr< ::mosek::fusion::Expression > _5848){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5846,_5847,_5848}),_5845); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _5849,    monty::rc_ptr< ::mosek::fusion::Expression > _5850,    monty::rc_ptr< ::mosek::fusion::Expression > _5851,    monty::rc_ptr< ::mosek::fusion::Variable > _5852) { return mosek::fusion::p_Expr::stack(_5849,_5850,_5851,_5852); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack( int _5849,monty::rc_ptr< ::mosek::fusion::Expression > _5850,monty::rc_ptr< ::mosek::fusion::Expression > _5851,monty::rc_ptr< ::mosek::fusion::Variable > _5852){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5850,_5851,_5852->asExpr()}),_5849); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _5853,    monty::rc_ptr< ::mosek::fusion::Expression > _5854,    monty::rc_ptr< ::mosek::fusion::Expression > _5855,    double _5856) { return mosek::fusion::p_Expr::stack(_5853,_5854,_5855,_5856); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack( int _5853,monty::rc_ptr< ::mosek::fusion::Expression > _5854,monty::rc_ptr< ::mosek::fusion::Expression > _5855,double _5856){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5854,_5855,::mosek::fusion::p_Expr::constTerm(_5856)}),_5853); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _5857,    monty::rc_ptr< ::mosek::fusion::Expression > _5858,    monty::rc_ptr< ::mosek::fusion::Variable > _5859,    monty::rc_ptr< ::mosek::fusion::Expression > _5860) { return mosek::fusion::p_Expr::stack(_5857,_5858,_5859,_5860); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack( int _5857,monty::rc_ptr< ::mosek::fusion::Expression > _5858,monty::rc_ptr< ::mosek::fusion::Variable > _5859,monty::rc_ptr< ::mosek::fusion::Expression > _5860){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5858,_5859->asExpr(),_5860}),_5857); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _5861,    monty::rc_ptr< ::mosek::fusion::Expression > _5862,    monty::rc_ptr< ::mosek::fusion::Variable > _5863,    monty::rc_ptr< ::mosek::fusion::Variable > _5864) { return mosek::fusion::p_Expr::stack(_5861,_5862,_5863,_5864); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack( int _5861,monty::rc_ptr< ::mosek::fusion::Expression > _5862,monty::rc_ptr< ::mosek::fusion::Variable > _5863,monty::rc_ptr< ::mosek::fusion::Variable > _5864){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5862,_5863->asExpr(),_5864->asExpr()}),_5861); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _5865,    monty::rc_ptr< ::mosek::fusion::Expression > _5866,    monty::rc_ptr< ::mosek::fusion::Variable > _5867,    double _5868) { return mosek::fusion::p_Expr::stack(_5865,_5866,_5867,_5868); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack( int _5865,monty::rc_ptr< ::mosek::fusion::Expression > _5866,monty::rc_ptr< ::mosek::fusion::Variable > _5867,double _5868){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5866,_5867->asExpr(),::mosek::fusion::p_Expr::constTerm(_5868)}),_5865); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _5869,    monty::rc_ptr< ::mosek::fusion::Expression > _5870,    double _5871,    monty::rc_ptr< ::mosek::fusion::Expression > _5872) { return mosek::fusion::p_Expr::stack(_5869,_5870,_5871,_5872); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack( int _5869,monty::rc_ptr< ::mosek::fusion::Expression > _5870,double _5871,monty::rc_ptr< ::mosek::fusion::Expression > _5872){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5870,::mosek::fusion::p_Expr::constTerm(_5871),_5872}),_5869); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _5873,    monty::rc_ptr< ::mosek::fusion::Expression > _5874,    double _5875,    monty::rc_ptr< ::mosek::fusion::Variable > _5876) { return mosek::fusion::p_Expr::stack(_5873,_5874,_5875,_5876); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack( int _5873,monty::rc_ptr< ::mosek::fusion::Expression > _5874,double _5875,monty::rc_ptr< ::mosek::fusion::Variable > _5876){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5874,::mosek::fusion::p_Expr::constTerm(_5875),_5876->asExpr()}),_5873); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _5877,    monty::rc_ptr< ::mosek::fusion::Expression > _5878,    double _5879,    double _5880) { return mosek::fusion::p_Expr::stack(_5877,_5878,_5879,_5880); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack( int _5877,monty::rc_ptr< ::mosek::fusion::Expression > _5878,double _5879,double _5880){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5878,::mosek::fusion::p_Expr::constTerm(_5879),::mosek::fusion::p_Expr::constTerm(_5880)}),_5877); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _5881,    monty::rc_ptr< ::mosek::fusion::Variable > _5882,    monty::rc_ptr< ::mosek::fusion::Expression > _5883,    monty::rc_ptr< ::mosek::fusion::Expression > _5884) { return mosek::fusion::p_Expr::stack(_5881,_5882,_5883,_5884); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack( int _5881,monty::rc_ptr< ::mosek::fusion::Variable > _5882,monty::rc_ptr< ::mosek::fusion::Expression > _5883,monty::rc_ptr< ::mosek::fusion::Expression > _5884){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5882->asExpr(),_5883,_5884}),_5881); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _5885,    monty::rc_ptr< ::mosek::fusion::Variable > _5886,    monty::rc_ptr< ::mosek::fusion::Expression > _5887,    monty::rc_ptr< ::mosek::fusion::Variable > _5888) { return mosek::fusion::p_Expr::stack(_5885,_5886,_5887,_5888); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack( int _5885,monty::rc_ptr< ::mosek::fusion::Variable > _5886,monty::rc_ptr< ::mosek::fusion::Expression > _5887,monty::rc_ptr< ::mosek::fusion::Variable > _5888){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5886->asExpr(),_5887,_5888->asExpr()}),_5885); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _5889,    monty::rc_ptr< ::mosek::fusion::Variable > _5890,    monty::rc_ptr< ::mosek::fusion::Expression > _5891,    double _5892) { return mosek::fusion::p_Expr::stack(_5889,_5890,_5891,_5892); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack( int _5889,monty::rc_ptr< ::mosek::fusion::Variable > _5890,monty::rc_ptr< ::mosek::fusion::Expression > _5891,double _5892){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5890->asExpr(),_5891,::mosek::fusion::p_Expr::constTerm(_5892)}),_5889); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _5893,    monty::rc_ptr< ::mosek::fusion::Variable > _5894,    monty::rc_ptr< ::mosek::fusion::Variable > _5895,    monty::rc_ptr< ::mosek::fusion::Expression > _5896) { return mosek::fusion::p_Expr::stack(_5893,_5894,_5895,_5896); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack( int _5893,monty::rc_ptr< ::mosek::fusion::Variable > _5894,monty::rc_ptr< ::mosek::fusion::Variable > _5895,monty::rc_ptr< ::mosek::fusion::Expression > _5896){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5894->asExpr(),_5895->asExpr(),_5896}),_5893); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _5897,    monty::rc_ptr< ::mosek::fusion::Variable > _5898,    monty::rc_ptr< ::mosek::fusion::Variable > _5899,    monty::rc_ptr< ::mosek::fusion::Variable > _5900) { return mosek::fusion::p_Expr::stack(_5897,_5898,_5899,_5900); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack( int _5897,monty::rc_ptr< ::mosek::fusion::Variable > _5898,monty::rc_ptr< ::mosek::fusion::Variable > _5899,monty::rc_ptr< ::mosek::fusion::Variable > _5900){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5898->asExpr(),_5899->asExpr(),_5900->asExpr()}),_5897); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _5901,    monty::rc_ptr< ::mosek::fusion::Variable > _5902,    monty::rc_ptr< ::mosek::fusion::Variable > _5903,    double _5904) { return mosek::fusion::p_Expr::stack(_5901,_5902,_5903,_5904); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack( int _5901,monty::rc_ptr< ::mosek::fusion::Variable > _5902,monty::rc_ptr< ::mosek::fusion::Variable > _5903,double _5904){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5902->asExpr(),_5903->asExpr(),::mosek::fusion::p_Expr::constTerm(_5904)}),_5901); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _5905,    monty::rc_ptr< ::mosek::fusion::Variable > _5906,    double _5907,    monty::rc_ptr< ::mosek::fusion::Expression > _5908) { return mosek::fusion::p_Expr::stack(_5905,_5906,_5907,_5908); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack( int _5905,monty::rc_ptr< ::mosek::fusion::Variable > _5906,double _5907,monty::rc_ptr< ::mosek::fusion::Expression > _5908){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5906->asExpr(),::mosek::fusion::p_Expr::constTerm(_5907),_5908}),_5905); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _5909,    monty::rc_ptr< ::mosek::fusion::Variable > _5910,    double _5911,    monty::rc_ptr< ::mosek::fusion::Variable > _5912) { return mosek::fusion::p_Expr::stack(_5909,_5910,_5911,_5912); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack( int _5909,monty::rc_ptr< ::mosek::fusion::Variable > _5910,double _5911,monty::rc_ptr< ::mosek::fusion::Variable > _5912){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5910->asExpr(),::mosek::fusion::p_Expr::constTerm(_5911),_5912->asExpr()}),_5909); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _5913,    monty::rc_ptr< ::mosek::fusion::Variable > _5914,    double _5915,    double _5916) { return mosek::fusion::p_Expr::stack(_5913,_5914,_5915,_5916); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack( int _5913,monty::rc_ptr< ::mosek::fusion::Variable > _5914,double _5915,double _5916){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5914->asExpr(),::mosek::fusion::p_Expr::constTerm(_5915),::mosek::fusion::p_Expr::constTerm(_5916)}),_5913); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _5917,    double _5918,    monty::rc_ptr< ::mosek::fusion::Expression > _5919,    monty::rc_ptr< ::mosek::fusion::Expression > _5920) { return mosek::fusion::p_Expr::stack(_5917,_5918,_5919,_5920); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack( int _5917,double _5918,monty::rc_ptr< ::mosek::fusion::Expression > _5919,monty::rc_ptr< ::mosek::fusion::Expression > _5920){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::mosek::fusion::p_Expr::constTerm(_5918),_5919,_5920}),_5917); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _5921,    double _5922,    monty::rc_ptr< ::mosek::fusion::Expression > _5923,    monty::rc_ptr< ::mosek::fusion::Variable > _5924) { return mosek::fusion::p_Expr::stack(_5921,_5922,_5923,_5924); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack( int _5921,double _5922,monty::rc_ptr< ::mosek::fusion::Expression > _5923,monty::rc_ptr< ::mosek::fusion::Variable > _5924){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::mosek::fusion::p_Expr::constTerm(_5922),_5923,_5924->asExpr()}),_5921); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _5925,    double _5926,    monty::rc_ptr< ::mosek::fusion::Expression > _5927,    double _5928) { return mosek::fusion::p_Expr::stack(_5925,_5926,_5927,_5928); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack( int _5925,double _5926,monty::rc_ptr< ::mosek::fusion::Expression > _5927,double _5928){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::mosek::fusion::p_Expr::constTerm(_5926),_5927,::mosek::fusion::p_Expr::constTerm(_5928)}),_5925); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _5929,    double _5930,    monty::rc_ptr< ::mosek::fusion::Variable > _5931,    monty::rc_ptr< ::mosek::fusion::Expression > _5932) { return mosek::fusion::p_Expr::stack(_5929,_5930,_5931,_5932); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack( int _5929,double _5930,monty::rc_ptr< ::mosek::fusion::Variable > _5931,monty::rc_ptr< ::mosek::fusion::Expression > _5932){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::mosek::fusion::p_Expr::constTerm(_5930),_5931->asExpr(),_5932}),_5929); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _5933,    double _5934,    monty::rc_ptr< ::mosek::fusion::Variable > _5935,    monty::rc_ptr< ::mosek::fusion::Variable > _5936) { return mosek::fusion::p_Expr::stack(_5933,_5934,_5935,_5936); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack( int _5933,double _5934,monty::rc_ptr< ::mosek::fusion::Variable > _5935,monty::rc_ptr< ::mosek::fusion::Variable > _5936){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::mosek::fusion::p_Expr::constTerm(_5934),_5935->asExpr(),_5936->asExpr()}),_5933); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _5937,    double _5938,    monty::rc_ptr< ::mosek::fusion::Variable > _5939,    double _5940) { return mosek::fusion::p_Expr::stack(_5937,_5938,_5939,_5940); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack( int _5937,double _5938,monty::rc_ptr< ::mosek::fusion::Variable > _5939,double _5940){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::mosek::fusion::p_Expr::constTerm(_5938),_5939->asExpr(),::mosek::fusion::p_Expr::constTerm(_5940)}),_5937); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _5941,    double _5942,    double _5943,    monty::rc_ptr< ::mosek::fusion::Expression > _5944) { return mosek::fusion::p_Expr::stack(_5941,_5942,_5943,_5944); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack( int _5941,double _5942,double _5943,monty::rc_ptr< ::mosek::fusion::Expression > _5944){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::mosek::fusion::p_Expr::constTerm(_5942),::mosek::fusion::p_Expr::constTerm(_5943),_5944}),_5941); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _5945,    double _5946,    double _5947,    monty::rc_ptr< ::mosek::fusion::Variable > _5948) { return mosek::fusion::p_Expr::stack(_5945,_5946,_5947,_5948); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack( int _5945,double _5946,double _5947,monty::rc_ptr< ::mosek::fusion::Variable > _5948){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::mosek::fusion::p_Expr::constTerm(_5946),::mosek::fusion::p_Expr::constTerm(_5947),_5948->asExpr()}),_5945); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _5949,    monty::rc_ptr< ::mosek::fusion::Variable > _5950,    monty::rc_ptr< ::mosek::fusion::Expression > _5951) { return mosek::fusion::p_Expr::stack(_5949,_5950,_5951); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack( int _5949,monty::rc_ptr< ::mosek::fusion::Variable > _5950,monty::rc_ptr< ::mosek::fusion::Expression > _5951){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5950->asExpr(),_5951}),_5949); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _5952,    monty::rc_ptr< ::mosek::fusion::Variable > _5953,    monty::rc_ptr< ::mosek::fusion::Variable > _5954) { return mosek::fusion::p_Expr::stack(_5952,_5953,_5954); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack( int _5952,monty::rc_ptr< ::mosek::fusion::Variable > _5953,monty::rc_ptr< ::mosek::fusion::Variable > _5954){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5953->asExpr(),_5954->asExpr()}),_5952); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _5955,    monty::rc_ptr< ::mosek::fusion::Variable > _5956,    double _5957) { return mosek::fusion::p_Expr::stack(_5955,_5956,_5957); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack( int _5955,monty::rc_ptr< ::mosek::fusion::Variable > _5956,double _5957){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5956->asExpr(),::mosek::fusion::p_Expr::constTerm(_5957)}),_5955); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _5958,    double _5959,    monty::rc_ptr< ::mosek::fusion::Expression > _5960) { return mosek::fusion::p_Expr::stack(_5958,_5959,_5960); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack( int _5958,double _5959,monty::rc_ptr< ::mosek::fusion::Expression > _5960){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::mosek::fusion::p_Expr::constTerm(_5959),_5960}),_5958); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _5961,    double _5962,    monty::rc_ptr< ::mosek::fusion::Variable > _5963) { return mosek::fusion::p_Expr::stack(_5961,_5962,_5963); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack( int _5961,double _5962,monty::rc_ptr< ::mosek::fusion::Variable > _5963){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::mosek::fusion::p_Expr::constTerm(_5962),_5963->asExpr()}),_5961); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _5964,    monty::rc_ptr< ::mosek::fusion::Expression > _5965,    monty::rc_ptr< ::mosek::fusion::Variable > _5966) { return mosek::fusion::p_Expr::stack(_5964,_5965,_5966); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack( int _5964,monty::rc_ptr< ::mosek::fusion::Expression > _5965,monty::rc_ptr< ::mosek::fusion::Variable > _5966){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5965,_5966->asExpr()}),_5964); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _5967,    monty::rc_ptr< ::mosek::fusion::Expression > _5968,    double _5969) { return mosek::fusion::p_Expr::stack(_5967,_5968,_5969); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack( int _5967,monty::rc_ptr< ::mosek::fusion::Expression > _5968,double _5969){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5968,::mosek::fusion::p_Expr::constTerm(_5969)}),_5967); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _5970,    monty::rc_ptr< ::mosek::fusion::Expression > _5971,    monty::rc_ptr< ::mosek::fusion::Expression > _5972) { return mosek::fusion::p_Expr::stack(_5970,_5971,_5972); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack( int _5970,monty::rc_ptr< ::mosek::fusion::Expression > _5971,monty::rc_ptr< ::mosek::fusion::Expression > _5972){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5971,_5972}),_5970); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _5973,    std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _5974) { return mosek::fusion::p_Expr::stack(_5973,_5974); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack( int _5973,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _5974){ return ::mosek::fusion::p_Expr::stack_(_5974,_5973); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack_( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _5975,int _5976){ if (((int)((_5975)->size(0)) == (int)0)){ return ::mosek::fusion::p_Expr::_new_Expr(std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >{(int)0}),std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)0))),nullptr,::mosek::fusion::p_Set::make((int)0),std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)0))),(int)1); }else {}if (((int)((_5975)->size(0)) == (int)1)){ return ((*_5975)((int)0)); }else {}int _5977 = (_5976 + (int)1); int _9282 = (int)0; int _9283 = (int)((_5975)->size(0)); for (int _5978 = _9282;_5978<_9283;++_5978){ if ((mosek::fusion::p_Set::_get_impl(((*_5975)(_5978))->shape())->nd > _5977)){ (_5977 = mosek::fusion::p_Set::_get_impl(((*_5975)(_5978))->shape())->nd); }else {}}std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::FlatExpr >,1 > > _5979 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::FlatExpr >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::FlatExpr >,1 >(monty::shape((int)((_5975)->size(0))))); monty::rc_ptr< ::mosek::fusion::Expression > _5980 = ((*_5975)((int)0)); std::shared_ptr< monty::ndarray< int,1 > > _5981 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5977))); bool _5982 = true; bool _5983 = false; monty::rc_ptr< ::mosek::fusion::Expression > _5984 = nullptr; int _5985 = (int)0; std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _5986 = nullptr; if ((mosek::fusion::p_Set::_get_impl(_5980->shape())->nd < _5976)){ throw ::mosek::fusion::LengthError(std::string ("Invalid stack dimension"));}else {}int _9284 = (int)0; int _9285 = (int)((_5979)->size(0)); for (int _5987 = _9284;_5987<_9285;++_5987){ monty::rc_ptr< ::mosek::fusion::Expression > _5988 = ((*_5975)(_5987)); int _9286 = (int)0; int _9287 = mosek::fusion::p_Set::_get_impl(_5988->shape())->nd; for (int _5989 = _9286;_5989<_9287;++_5989){ if (((_5976 != _5989) && (_5980->shape()->dim(_5989) != _5988->shape()->dim(_5989)))){ throw ::mosek::fusion::DimensionError(std::string ("Mismatching dimensions"));}else {}}(((*_5981)(_5976)) = (((*_5981)(_5976)) + _5988->shape()->dim(_5976))); (((*_5979)(_5987)) = ((*_5975)(_5987))->eval()); (_5985 = (_5985 + (int)((mosek::fusion::p_FlatExpr::_get_impl(((*_5979)(_5987)))->x)->size(0)))); (_5982 = (_5982 && ! mosek::fusion::p_FlatExpr::_get_impl(((*_5979)(_5987)))->inst)); (_5983 = (_5983 || mosek::fusion::p_FlatExpr::_get_impl(((*_5979)(_5987)))->bfix)); }std::shared_ptr< monty::ndarray< long long,1 > > _5990 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((_5979)->size(0))))); { (_5986 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >(monty::shape(_5985)))); int _5991 = (int)0; int _9288 = (int)0; int _9289 = (int)((_5979)->size(0)); for (int _5992 = _9288;_5992<_9289;++_5992){ int _9290 = (int)0; int _9291 = (int)((mosek::fusion::p_FlatExpr::_get_impl(((*_5979)(_5992)))->x)->size(0)); for (int _5993 = _9290;_5993<_9291;++_5993){ (((*_5986)(_5991)) = ((*mosek::fusion::p_FlatExpr::_get_impl(((*_5979)(_5992)))->x)(_5993))); ( ++ _5991 ); }}int _9292 = (int)1; int _9293 = (int)((_5979)->size(0)); for (int _5994 = _9292;_5994<_9293;++_5994){ (((*_5990)(_5994)) = ((*_5990)((_5994 - (int)1)))); int _9294 = (int)0; int _9295 = (int)((mosek::fusion::p_FlatExpr::_get_impl(((*_5979)((_5994 - (int)1))))->x)->size(0)); for (int _5995 = _9294;_5995<_9295;++_5995){ (((*_5990)(_5994)) = (((*_5990)(_5994)) + ((*mosek::fusion::p_FlatExpr::_get_impl(((*_5979)((_5994 - (int)1))))->x)(_5995))->size())); }}}int _9296 = (int)0; int _9297 = _5977; for (int _5996 = _9296;_5996<_9297;++_5996){ if ((_5996 != _5976)){ (((*_5981)(_5996)) = _5980->shape()->dim(_5996)); }else {}}monty::rc_ptr< ::mosek::fusion::NDSet > _5997 = ::mosek::fusion::p_NDSet::_new_NDSet(_5981); long long _5998 = mosek::fusion::p_FlatExpr::_get_impl(((*_5979)((int)0)))->nnz; int _5999 = ((int)((mosek::fusion::p_FlatExpr::_get_impl(((*_5979)((int)0)))->ptrb)->size(0)) - (int)1); int _9298 = (int)1; int _9299 = (int)((_5975)->size(0)); for (int _6000 = _9298;_6000<_9299;++_6000){ (_5998 = (_5998 + mosek::fusion::p_FlatExpr::_get_impl(((*_5979)(_6000)))->nnz)); (_5999 = ((_5999 + (int)((mosek::fusion::p_FlatExpr::_get_impl(((*_5979)(_6000)))->ptrb)->size(0))) - (int)1)); }std::shared_ptr< monty::ndarray< double,1 > > _6001 = ([&]() -> std::shared_ptr< monty::ndarray< double,1 > > { if ( (! _5983)) return (nullptr); else return (std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5999)))); })(); std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< long long,1 > >,1 > > _6002 = ([=]()->std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< long long,1 > >,1 > > { std::vector< std::shared_ptr< monty::ndarray< long long,1 > > > _9300; for (int _6003=(int)0, _9301=(int)((_5979)->size(0)); _6003 < _9301;++_6003)_9300.push_back(mosek::fusion::p_FlatExpr::_get_impl(((*_5979)(_6003)))->ptrb); return std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< long long,1 > >,1 > >(new monty::ndarray< std::shared_ptr< monty::ndarray< long long,1 > >,1 >(monty::shape(_9300.size()),_9300.begin(),_9300.end())); })(); std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< long long,1 > >,1 > > _6004 = ([=]()->std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< long long,1 > >,1 > > { std::vector< std::shared_ptr< monty::ndarray< long long,1 > > > _9302; for (int _6005=(int)0, _9303=(int)((_5979)->size(0)); _6005 < _9303;++_6005)_9302.push_back(mosek::fusion::p_FlatExpr::_get_impl(((*_5979)(_6005)))->subj); return std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< long long,1 > >,1 > >(new monty::ndarray< std::shared_ptr< monty::ndarray< long long,1 > >,1 >(monty::shape(_9302.size()),_9302.begin(),_9302.end())); })(); std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > _6006 = ([=]()->std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > { std::vector< std::shared_ptr< monty::ndarray< double,1 > > > _9304; for (int _6007=(int)0, _9305=(int)((_5979)->size(0)); _6007 < _9305;++_6007)_9304.push_back(mosek::fusion::p_FlatExpr::_get_impl(((*_5979)(_6007)))->cof); return std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > >(new monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 >(monty::shape(_9304.size()),_9304.begin(),_9304.end())); })(); std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > _6008 = ([=]()->std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > { std::vector< std::shared_ptr< monty::ndarray< double,1 > > > _9306; for (int _6009=(int)0, _9307=(int)((_5979)->size(0)); _6009 < _9307;++_6009)_9306.push_back(mosek::fusion::p_FlatExpr::_get_impl(((*_5979)(_6009)))->bfix); return std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > >(new monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 >(monty::shape(_9306.size()),_9306.begin(),_9306.end())); })(); std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< long long,1 > >,1 > > _6010 = ([=]()->std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< long long,1 > >,1 > > { std::vector< std::shared_ptr< monty::ndarray< long long,1 > > > _9308; for (int _6011=(int)0, _9309=(int)((_5979)->size(0)); _6011 < _9309;++_6011)_9308.push_back(mosek::fusion::p_FlatExpr::_get_impl(((*_5979)(_6011)))->inst); return std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< long long,1 > >,1 > >(new monty::ndarray< std::shared_ptr< monty::ndarray< long long,1 > >,1 >(monty::shape(_9308.size()),_9308.begin(),_9308.end())); })(); std::shared_ptr< monty::ndarray< long long,1 > > _6012 = ([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _9310; for (int _6013=(int)0, _9311=(int)((_5979)->size(0)); _6013 < _9311;++_6013)_9310.push_back(mosek::fusion::p_FlatExpr::_get_impl(((*_5979)(_6013)))->nnz); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9310.size()),_9310.begin(),_9310.end())); })(); std::shared_ptr< monty::ndarray< long long,1 > > _6014 = ([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _9312; for (int _6015=(int)0, _9313=(int)((_5979)->size(0)); _6015 < _9313;++_6015)_9312.push_back(mosek::fusion::p_Set::_get_impl(mosek::fusion::p_FlatExpr::_get_impl(((*_5979)(_6015)))->shape)->size); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9312.size()),_9312.begin(),_9312.end())); })(); if ((_5976 == (int)0)){ std::shared_ptr< monty::ndarray< long long,1 > > _6016 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((_5999 + (int)1)))); std::shared_ptr< monty::ndarray< long long,1 > > _6017 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_5998))); std::shared_ptr< monty::ndarray< double,1 > > _6018 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5998))); std::shared_ptr< monty::ndarray< long long,1 > > _6019 = ([&]() -> std::shared_ptr< monty::ndarray< long long,1 > > { if ( _5982) return (nullptr); else return (std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_5999)))); })(); long long _6020 = (long long)0; long long _6021 = (long long)0; long long _6022 = (long long)0; int _9314 = (int)0; int _9315 = (int)((_6002)->size(0)); for (int _6023 = _9314;_6023<_9315;++_6023){ ::mosek::fusion::Utils::Tools::arraycopy(((*_6006)(_6023)),(long long)0,_6018,_6021,((*_6012)(_6023))); if (((*_6008)(_6023))){ ::mosek::fusion::Utils::Tools::arraycopy(((*_6008)(_6023)),(long long)0,_6001,_6020,(long long)((((*_6008)(_6023)))->size(0))); }else {}int _9316 = (int)0; int _9317 = ((int)((((*_6002)(_6023)))->size(0)) - (int)1); for (int _6024 = _9316;_6024<_9317;++_6024){ (((*_6016)(((_6020 + _6024) + (int)1))) = (((*((*_6002)(_6023)))((_6024 + (int)1))) + _6021)); }long long _9318 = (long long)0; long long _9319 = ((*_6012)(_6023)); for (long long _6025 = _9318;_6025<_9319;++_6025){ (((*_6017)((_6021 + _6025))) = (((*_5990)(_6023)) + ((*((*_6004)(_6023)))(_6025)))); }if ((! _5982)){ if (! ((*_6010)(_6023))){ int _9320 = (int)0; int _9321 = ((int)((((*_6002)(_6023)))->size(0)) - (int)1); for (int _6026 = _9320;_6026<_9321;++_6026){ (((*_6019)((_6020 + _6026))) = (_6022 + _6026)); }(_6020 += ((int)((((*_6002)(_6023)))->size(0)) - (int)1)); }else { int _9322 = (int)0; int _9323 = (int)((((*_6010)(_6023)))->size(0)); for (int _6027 = _9322;_6027<_9323;++_6027){ (((*_6019)((_6020 + _6027))) = (_6022 + ((*((*_6010)(_6023)))(_6027)))); }(_6020 += (int)((((*_6010)(_6023)))->size(0))); }}else { (_6020 += ((int)((((*_6002)(_6023)))->size(0)) - (int)1)); }(_6022 += ((*_6014)(_6023))); (_6021 += ((*_6012)(_6023))); }(_5984 = ::mosek::fusion::p_Expr::_new_Expr(_6016,_5986,_6017,_6018,_6001,::mosek::fusion::Set::t(_5997),_6019)); }else { std::shared_ptr< monty::ndarray< long long,1 > > _6028 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((_5999 + (int)1)))); std::shared_ptr< monty::ndarray< long long,1 > > _6029 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_5998))); std::shared_ptr< monty::ndarray< double,1 > > _6030 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5998))); std::shared_ptr< monty::ndarray< long long,1 > > _6031 = nullptr; long long _6032 = (long long)0; long long _6033 = (long long)0; long long _6034 = (long long)0; int _6035 = (int)1; int _9324 = (int)0; int _9325 = _5976; for (int _6036 = _9324;_6036<_9325;++_6036){ (_6035 = (_6035 * ((*_5981)(_6036)))); }int _6037 = (int)1; int _9326 = (_5976 + (int)1); int _9327 = (int)((_5981)->size(0)); for (int _6038 = _9326;_6038<_9327;++_6038){ (_6037 = (_6037 * ((*_5981)(_6038)))); }int _6039 = _6037; (_6037 = (_6037 * ((*_5981)(_5976)))); std::shared_ptr< monty::ndarray< int,1 > > _6040 = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _9328; for (int _6041=(int)0, _9329=(int)((_5979)->size(0)); _6041 < _9329;++_6041)_9328.push_back((_6039 * mosek::fusion::p_FlatExpr::_get_impl(((*_5979)(_6041)))->shape->dim(_5976))); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9328.size()),_9328.begin(),_9328.end())); })(); std::shared_ptr< monty::ndarray< long long,1 > > _6042 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((_5979)->size(0))))); if (_5982){ int _9330 = (int)0; int _9331 = _6035; for (int _6043 = _9330;_6043<_9331;++_6043){ int _9332 = (int)0; int _9333 = (int)((_5979)->size(0)); for (int _6044 = _9332;_6044<_9333;++_6044){ long long _6045 = (((*mosek::fusion::p_FlatExpr::_get_impl(((*_5979)(_6044)))->ptrb)((((*_6042)(_6044)) + ((*_6040)(_6044))))) - ((*mosek::fusion::p_FlatExpr::_get_impl(((*_5979)(_6044)))->ptrb)(((*_6042)(_6044))))); ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_FlatExpr::_get_impl(((*_5979)(_6044)))->cof,((*mosek::fusion::p_FlatExpr::_get_impl(((*_5979)(_6044)))->ptrb)(((*_6042)(_6044)))),_6030,_6033,_6045); if (mosek::fusion::p_FlatExpr::_get_impl(((*_5979)(_6044)))->bfix){ ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_FlatExpr::_get_impl(((*_5979)(_6044)))->bfix,((*_6042)(_6044)),_6001,_6032,(long long)((*_6040)(_6044))); }else {}long long _6046 = ((*mosek::fusion::p_FlatExpr::_get_impl(((*_5979)(_6044)))->ptrb)(((*_6042)(_6044)))); long long _9334 = (long long)0; long long _9335 = _6045; for (long long _6047 = _9334;_6047<_9335;++_6047){ (((*_6029)((_6033 + _6047))) = (((*mosek::fusion::p_FlatExpr::_get_impl(((*_5979)(_6044)))->subj)((_6046 + _6047))) + ((*_5990)(_6044)))); }int _9336 = (int)0; int _9337 = ((*_6040)(_6044)); for (int _6048 = _9336;_6048<_9337;++_6048){ (((*_6028)(((_6032 + _6048) + (int)1))) = ((((*mosek::fusion::p_FlatExpr::_get_impl(((*_5979)(_6044)))->ptrb)(((((*_6042)(_6044)) + _6048) + (int)1))) - ((*mosek::fusion::p_FlatExpr::_get_impl(((*_5979)(_6044)))->ptrb)((((*_6042)(_6044)) + _6048)))) + ((*_6028)((_6032 + _6048))))); }(_6033 = (_6033 + _6045)); (_6032 = (_6032 + ((*_6040)(_6044)))); (_6034 = (_6034 + mosek::fusion::p_Set::_get_impl(mosek::fusion::p_FlatExpr::_get_impl(((*_5979)(_6044)))->shape)->size)); (((*_6042)(_6044)) = (((*_6042)(_6044)) + ((*_6040)(_6044)))); }}(_5984 = ::mosek::fusion::p_Expr::_new_Expr(_6028,_5986,_6029,_6030,_6001,::mosek::fusion::Set::t(_5997),_6031)); }else { std::shared_ptr< monty::ndarray< long long,1 > > _6049 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((_5979)->size(0))))); (_6031 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_5999)))); int _9338 = (int)0; int _9339 = _6035; for (int _6050 = _9338;_6050<_9339;++_6050){ int _9340 = (int)0; int _9341 = (int)((_5979)->size(0)); for (int _6051 = _9340;_6051<_9341;++_6051){ if ((! mosek::fusion::p_FlatExpr::_get_impl(((*_5979)(_6051)))->inst || ((mosek::fusion::p_Set::_get_impl(mosek::fusion::p_FlatExpr::_get_impl(((*_5979)(_6051)))->shape)->size == (int)((mosek::fusion::p_FlatExpr::_get_impl(((*_5979)(_6051)))->inst)->size(0))) && ((int)((mosek::fusion::p_FlatExpr::_get_impl(((*_5979)(_6051)))->inst)->size(0)) > (int)0)))){ long long _6052 = (((*mosek::fusion::p_FlatExpr::_get_impl(((*_5979)(_6051)))->ptrb)((((*_6042)(_6051)) + ((*_6040)(_6051))))) - ((*mosek::fusion::p_FlatExpr::_get_impl(((*_5979)(_6051)))->ptrb)(((*_6042)(_6051))))); ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_FlatExpr::_get_impl(((*_5979)(_6051)))->cof,((*mosek::fusion::p_FlatExpr::_get_impl(((*_5979)(_6051)))->ptrb)(((*_6042)(_6051)))),_6030,_6033,_6052); if (mosek::fusion::p_FlatExpr::_get_impl(((*_5979)(_6051)))->bfix){ ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_FlatExpr::_get_impl(((*_5979)(_6051)))->bfix,((*_6042)(_6051)),_6001,_6032,(long long)((*_6040)(_6051))); }else {}long long _6053 = ((*mosek::fusion::p_FlatExpr::_get_impl(((*_5979)(_6051)))->ptrb)(((*_6042)(_6051)))); long long _9342 = (long long)0; long long _9343 = _6052; for (long long _6054 = _9342;_6054<_9343;++_6054){ (((*_6029)((_6033 + _6054))) = (((*mosek::fusion::p_FlatExpr::_get_impl(((*_5979)(_6051)))->subj)((_6053 + _6054))) + ((*_5990)(_6051)))); }int _9344 = (int)0; int _9345 = ((*_6040)(_6051)); for (int _6055 = _9344;_6055<_9345;++_6055){ (((*_6028)(((_6032 + _6055) + (int)1))) = ((((*mosek::fusion::p_FlatExpr::_get_impl(((*_5979)(_6051)))->ptrb)(((((*_6042)(_6051)) + _6055) + (int)1))) - ((*mosek::fusion::p_FlatExpr::_get_impl(((*_5979)(_6051)))->ptrb)((((*_6042)(_6051)) + _6055)))) + ((*_6028)(_6032)))); }int _9346 = (int)0; int _9347 = ((*_6040)(_6051)); for (int _6056 = _9346;_6056<_9347;++_6056){ (((*_6031)((_6032 + _6056))) = (_6034 + _6056)); }(_6033 = (_6033 + _6052)); (_6032 = (_6032 + ((*_6040)(_6051)))); (_6034 = (_6034 + mosek::fusion::p_Set::_get_impl(mosek::fusion::p_FlatExpr::_get_impl(((*_5979)(_6051)))->shape)->size)); (((*_6042)(_6051)) = (((*_6042)(_6051)) + ((*_6040)(_6051)))); }else if (((int)((mosek::fusion::p_FlatExpr::_get_impl(((*_5979)(_6051)))->inst)->size(0)) > (int)0)){ long long _6057 = (long long)0; { long long _6058 = (long long)0; while ((((*mosek::fusion::p_FlatExpr::_get_impl(((*_5979)(_6051)))->inst)((((*_6042)(_6051)) + _6058))) < (((*_6049)(_6051)) + ((*_6040)(_6051))))) { ( ++ _6058 ); }(_6057 = _6058); }long long _6059 = (((*mosek::fusion::p_FlatExpr::_get_impl(((*_5979)(_6051)))->ptrb)((((*_6042)(_6051)) + _6057))) - ((*mosek::fusion::p_FlatExpr::_get_impl(((*_5979)(_6051)))->ptrb)(((*_6042)(_6051))))); ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_FlatExpr::_get_impl(((*_5979)(_6051)))->cof,((*mosek::fusion::p_FlatExpr::_get_impl(((*_5979)(_6051)))->ptrb)(((*_6042)(_6051)))),_6030,_6033,_6059); if (mosek::fusion::p_FlatExpr::_get_impl(((*_5979)(_6051)))->bfix){ ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_FlatExpr::_get_impl(((*_5979)(_6051)))->bfix,((*_6042)(_6051)),_6001,_6032,_6057); }else {}long long _6060 = ((*mosek::fusion::p_FlatExpr::_get_impl(((*_5979)(_6051)))->ptrb)(((*_6042)(_6051)))); long long _9348 = (long long)0; long long _9349 = _6059; for (long long _6061 = _9348;_6061<_9349;++_6061){ (((*_6029)((_6033 + _6061))) = (((*mosek::fusion::p_FlatExpr::_get_impl(((*_5979)(_6051)))->subj)((_6060 + _6061))) + ((*_5990)(_6051)))); }long long _9350 = (long long)0; long long _9351 = _6057; for (long long _6062 = _9350;_6062<_9351;++_6062){ (((*_6028)(((_6032 + _6062) + (int)1))) = ((((*mosek::fusion::p_FlatExpr::_get_impl(((*_5979)(_6051)))->ptrb)(((((*_6042)(_6051)) + _6062) + (int)1))) - ((*mosek::fusion::p_FlatExpr::_get_impl(((*_5979)(_6051)))->ptrb)((((*_6042)(_6051)) + _6062)))) + ((*_6028)((_6032 + _6062))))); }long long _9352 = (long long)0; long long _9353 = _6057; for (long long _6063 = _9352;_6063<_9353;++_6063){ (((*_6031)((_6032 + _6063))) = (((*mosek::fusion::p_FlatExpr::_get_impl(((*_5979)(_6051)))->inst)(_6063)) + _6034)); }(_6033 += _6059); (_6032 += _6057); (_6034 += mosek::fusion::p_Set::_get_impl(mosek::fusion::p_FlatExpr::_get_impl(((*_5979)(_6051)))->shape)->size); (((*_6042)(_6051)) += _6057); (((*_6049)(_6051)) += ((*_6040)(_6051))); }else { }}}(_5984 = ::mosek::fusion::p_Expr::_new_Expr(_6028,_5986,_6029,_6030,_6001,::mosek::fusion::Set::t(_5997),_6031)); }}return _5984; }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::repeat  ( monty::rc_ptr< ::mosek::fusion::Expression > _6064,    int _6065,    int _6066) { return mosek::fusion::p_Expr::repeat(_6064,_6065,_6066); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::repeat( monty::rc_ptr< ::mosek::fusion::Expression > _6064,int _6065,int _6066){ if ((_6065 <= (int)0)){ throw ::mosek::fusion::DimensionError(std::string ("Cannot repeat Expression 0 or less times"));}else {}return ::mosek::fusion::p_Expr::stack_(([=]()->std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > { std::vector< monty::rc_ptr< ::mosek::fusion::Expression > > _9354; for (int _6067=(int)0, _9355=_6065; _6067 < _9355;++_6067)_9354.push_back(_6064); return std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >(monty::shape(_9354.size()),_9354.begin(),_9354.end())); })(),_6066); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _6068) { return mosek::fusion::p_Expr::add(_6068); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _6068){ if (((int)((_6068)->size(0)) == (int)0)){ return ::mosek::fusion::p_Expr::_new_Expr(std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >{(int)0}),std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)0))),nullptr,::mosek::fusion::p_Set::make((int)0),std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)0))),(int)1); }else {}monty::rc_ptr< ::mosek::fusion::Expression > _6069 = nullptr; if (! _6068){ throw monty::NullPointerException(std::string ("Argument exps may not be null"));}else {}if ((((int)((_6068)->size(0)) > (int)0) && ! ((*_6068)((int)0)))){ throw monty::NullPointerException(std::string ("Argument exps may not contain null"));}else {}long long _6070 = mosek::fusion::p_Set::_get_impl(((*_6068)((int)0))->shape())->size; monty::rc_ptr< ::mosek::fusion::Set > _6071 = ([&]() -> monty::rc_ptr< ::mosek::fusion::Set > { if ( ((*_6068)((int)0))->shape()) return (((*_6068)((int)0))->shape()); else return (::mosek::fusion::p_Set::make((int)_6070)); })(); std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::FlatExpr >,1 > > _6072 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::FlatExpr >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::FlatExpr >,1 >(monty::shape((int)((_6068)->size(0))))); long long _6073 = (long long)0; bool _6074 = true; bool _6075 = false; std::shared_ptr< monty::ndarray< long long,1 > > _6076 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((_6068)->size(0))))); std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _6077; int _6078 = (int)0; int _9356 = (int)0; int _9357 = (int)((_6068)->size(0)); for (int _6079 = _9356;_6079<_9357;++_6079){ if (! ((*_6068)(_6079))){ throw monty::NullPointerException(std::string ("Argument exps may not contain null"));}else {}(((*_6072)(_6079)) = ((*_6068)(_6079))->eval()); if ((! mosek::fusion::p_FlatExpr::_get_impl(((*_6072)(_6079)))->shape->compare(_6071))){ throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand dimensions"));}else {}if (mosek::fusion::p_FlatExpr::_get_impl(((*_6072)(_6079)))->bfix){ (_6075 = true); }else {}(_6073 = (_6073 + mosek::fusion::p_FlatExpr::_get_impl(((*_6072)(_6079)))->nnz)); (_6074 = (_6074 && ! mosek::fusion::p_FlatExpr::_get_impl(((*_6072)(_6079)))->inst)); (_6078 = (_6078 + (int)((mosek::fusion::p_FlatExpr::_get_impl(((*_6072)(_6079)))->x)->size(0)))); }(_6077 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >(monty::shape(_6078)))); { int _6080 = (int)0; int _9358 = (int)0; int _9359 = (int)((_6072)->size(0)); for (int _6081 = _9358;_6081<_9359;++_6081){ int _9360 = (int)0; int _9361 = (int)((mosek::fusion::p_FlatExpr::_get_impl(((*_6072)(_6081)))->x)->size(0)); for (int _6082 = _9360;_6082<_9361;++_6082){ (((*_6077)(_6080)) = ((*mosek::fusion::p_FlatExpr::_get_impl(((*_6072)(_6081)))->x)(_6082))); ( ++ _6080 ); }}}int _9362 = (int)1; int _9363 = (int)((_6068)->size(0)); for (int _6083 = _9362;_6083<_9363;++_6083){ (((*_6076)(_6083)) = ((*_6076)((_6083 - (int)1)))); int _9364 = (int)0; int _9365 = (int)((mosek::fusion::p_FlatExpr::_get_impl(((*_6072)((_6083 - (int)1))))->x)->size(0)); for (int _6084 = _9364;_6084<_9365;++_6084){ (((*_6076)(_6083)) = (((*_6076)(_6083)) + ((*mosek::fusion::p_FlatExpr::_get_impl(((*_6072)((_6083 - (int)1))))->x)(_6084))->size())); }}if (_6074){ std::shared_ptr< monty::ndarray< long long,1 > > _6085 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((_6070 + (int)1)))); std::shared_ptr< monty::ndarray< long long,1 > > _6086 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_6073))); std::shared_ptr< monty::ndarray< double,1 > > _6087 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_6073))); std::shared_ptr< monty::ndarray< double,1 > > _6088 = nullptr; std::shared_ptr< monty::ndarray< long long,1 > > _6089 = nullptr; long long _9366 = (long long)0; long long _9367 = _6070; for (long long _6090 = _9366;_6090<_9367;++_6090){ (((*_6085)((_6090 + (int)1))) = ((*_6085)(_6090))); int _9368 = (int)0; int _9369 = (int)((_6072)->size(0)); for (int _6091 = _9368;_6091<_9369;++_6091){ long long _6092 = (((*mosek::fusion::p_FlatExpr::_get_impl(((*_6072)(_6091)))->ptrb)((_6090 + (int)1))) - ((*mosek::fusion::p_FlatExpr::_get_impl(((*_6072)(_6091)))->ptrb)(_6090))); ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_FlatExpr::_get_impl(((*_6072)(_6091)))->cof,((*mosek::fusion::p_FlatExpr::_get_impl(((*_6072)(_6091)))->ptrb)(_6090)),_6087,((*_6085)((_6090 + (int)1))),_6092); long long _9370 = (long long)0; long long _9371 = _6092; for (long long _6093 = _9370;_6093<_9371;++_6093){ (((*_6086)((((*_6085)((_6090 + (int)1))) + _6093))) = (((*mosek::fusion::p_FlatExpr::_get_impl(((*_6072)(_6091)))->subj)((((*mosek::fusion::p_FlatExpr::_get_impl(((*_6072)(_6091)))->ptrb)(_6090)) + _6093))) + ((*_6076)(_6091)))); }(((*_6085)((_6090 + (int)1))) += _6092); }}if (_6075){ (_6088 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_6070)))); long long _9372 = (long long)0; long long _9373 = _6070; for (long long _6094 = _9372;_6094<_9373;++_6094){ int _9374 = (int)0; int _9375 = (int)((_6072)->size(0)); for (int _6095 = _9374;_6095<_9375;++_6095){ if (mosek::fusion::p_FlatExpr::_get_impl(((*_6072)(_6095)))->bfix){ (((*_6088)(_6094)) += ((*mosek::fusion::p_FlatExpr::_get_impl(((*_6072)(_6095)))->bfix)(_6094))); }else {}}}}else {}(_6069 = ::mosek::fusion::p_Expr::_new_Expr(_6085,_6077,_6086,_6087,_6088,_6071,_6089)); }else { std::shared_ptr< monty::ndarray< int,1 > > _6096 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)((_6072)->size(0))))); std::shared_ptr< monty::ndarray< int,1 > > _6097 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)((_6072)->size(0))))); std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< long long,1 > >,1 > > _6098 = std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< long long,1 > >,1 > >(new monty::ndarray< std::shared_ptr< monty::ndarray< long long,1 > >,1 >(monty::shape((int)((_6072)->size(0))))); int _9376 = (int)0; int _9377 = (int)((_6072)->size(0)); for (int _6099 = _9376;_6099<_9377;++_6099){ if (mosek::fusion::p_FlatExpr::_get_impl(((*_6072)(_6099)))->inst){ (((*_6098)(_6099)) = mosek::fusion::p_FlatExpr::_get_impl(((*_6072)(_6099)))->inst); }else { (((*_6098)(_6099)) = ::mosek::fusion::Utils::Tools::range(((long long)((mosek::fusion::p_FlatExpr::_get_impl(((*_6072)(_6099)))->ptrb)->size(0)) - (long long)1))); }(((*_6097)(_6099)) = (int)((((*_6098)(_6099)))->size(0))); }int _6100 = (int)0; { std::shared_ptr< monty::ndarray< int,1 > > _6101 = ::mosek::fusion::Utils::Tools::range((int)((_6072)->size(0))); int _6102 = (int)((_6072)->size(0)); while ((_6102 > (int)0)) { long long _6103 = ((*((*_6098)(((*_6101)((int)0)))))(((*_6096)(((*_6101)((int)0)))))); int _9378 = (int)1; int _9379 = _6102; for (int _6104 = _9378;_6104<_9379;++_6104){ if ((((*((*_6098)(((*_6101)(_6104)))))(((*_6096)(((*_6101)(_6104)))))) < _6103)){ (_6103 = ((*((*_6098)(((*_6101)(_6104)))))(((*_6096)(((*_6101)(_6104))))))); }else {}}( ++ _6100 ); int _9380 = (int)0; int _9381 = _6102; for (int _6105 = _9380;_6105<_9381;++_6105){ if ((((*((*_6098)(((*_6101)(_6105)))))(((*_6096)(((*_6101)(_6105)))))) == _6103)){ ( ++ ((*_6096)(((*_6101)(_6105)))) ); }else {}}{ int _6106 = (int)0; for (;(_6106 < _6102);){ if ((((*_6096)(((*_6101)(_6106)))) >= ((*_6097)(((*_6101)(_6106)))))){ int _6107 = ((*_6101)(_6106)); (((*_6101)(_6106)) = ((*_6101)((_6102 - (int)1)))); (((*_6101)((_6102 - (int)1))) = _6107); ( -- _6102 ); }else { ( ++ _6106 ); }}}}}std::shared_ptr< monty::ndarray< long long,1 > > _6108 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_6100))); std::shared_ptr< monty::ndarray< long long,1 > > _6109 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((_6100 + (int)1)))); std::shared_ptr< monty::ndarray< double,1 > > _6110 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_6073))); std::shared_ptr< monty::ndarray< long long,1 > > _6111 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_6073))); std::shared_ptr< monty::ndarray< double,1 > > _6112 = nullptr; { int _9382 = (int)0; int _9383 = (int)((_6096)->size(0)); for (int _6113 = _9382;_6113<_9383;++_6113){ (((*_6096)(_6113)) = (int)0); }int _6114 = (int)0; std::shared_ptr< monty::ndarray< int,1 > > _6115 = ::mosek::fusion::Utils::Tools::range((int)((_6072)->size(0))); int _6116 = (int)((_6072)->size(0)); while ((_6116 > (int)0)) { long long _6117 = ((*((*_6098)(((*_6115)((int)0)))))(((*_6096)(((*_6115)((int)0)))))); int _9384 = (int)1; int _9385 = _6116; for (int _6118 = _9384;_6118<_9385;++_6118){ if ((((*((*_6098)(((*_6115)(_6118)))))(((*_6096)(((*_6115)(_6118)))))) < _6117)){ (_6117 = ((*((*_6098)(((*_6115)(_6118)))))(((*_6096)(((*_6115)(_6118))))))); }else {}}(((*_6108)(_6114)) = _6117); (((*_6109)((_6114 + (int)1))) = ((*_6109)(_6114))); int _9386 = (int)0; int _9387 = _6116; for (int _6119 = _9386;_6119<_9387;++_6119){ if ((((*((*_6098)(((*_6115)(_6119)))))(((*_6096)(((*_6115)(_6119)))))) == _6117)){ int _6120 = ((*_6115)(_6119)); long long _6121 = ((*mosek::fusion::p_FlatExpr::_get_impl(((*_6072)(_6120)))->ptrb)(((*_6096)(_6120)))); long long _6122 = (((*mosek::fusion::p_FlatExpr::_get_impl(((*_6072)(_6120)))->ptrb)((((*_6096)(_6120)) + (int)1))) - _6121); ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_FlatExpr::_get_impl(((*_6072)(_6120)))->cof,_6121,_6110,((*_6109)((_6114 + (int)1))),_6122); long long _9388 = (long long)0; long long _9389 = _6122; for (long long _6123 = _9388;_6123<_9389;++_6123){ (((*_6111)((((*_6109)((_6114 + (int)1))) + _6123))) = (((*mosek::fusion::p_FlatExpr::_get_impl(((*_6072)(_6120)))->subj)((_6121 + _6123))) + ((*_6076)(_6120)))); }(((*_6109)((_6114 + (int)1))) = (((*_6109)((_6114 + (int)1))) + _6122)); ( ++ ((*_6096)(_6120)) ); }else {}}{ int _6124 = (int)0; for (;(_6124 < _6116);){ if ((((*_6096)(((*_6115)(_6124)))) >= ((*_6097)(((*_6115)(_6124)))))){ int _6125 = ((*_6115)(_6124)); (((*_6115)(_6124)) = ((*_6115)((_6116 - (int)1)))); (((*_6115)((_6116 - (int)1))) = _6125); ( -- _6116 ); }else { ( ++ _6124 ); }}}( ++ _6114 ); }}if (_6075){ int _9390 = (int)0; int _9391 = (int)((_6096)->size(0)); for (int _6126 = _9390;_6126<_9391;++_6126){ (((*_6096)(_6126)) = (int)0); }int _6127 = (int)0; int _6128 = (int)0; int _9392 = (int)0; int _9393 = (int)((_6072)->size(0)); for (int _6129 = _9392;_6129<_9393;++_6129){ if (mosek::fusion::p_FlatExpr::_get_impl(((*_6072)(_6129)))->bfix){ ( ++ _6128 ); }else {}}std::shared_ptr< monty::ndarray< long long,1 > > _6130 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_6128))); { int _6131 = (int)0; int _6132 = (int)0; for (;(_6132 < _6128);( ++ _6131 )){ if (mosek::fusion::p_FlatExpr::_get_impl(((*_6072)(_6131)))->bfix){ (((*_6130)(_6132)) = _6131); ( ++ _6132 ); }else {}}}(_6112 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_6100)))); while ((_6128 > (int)0)) { long long _6133 = ((*((*_6098)(((*_6130)((int)0)))))(((*_6096)(((*_6130)((int)0)))))); int _9394 = (int)1; int _9395 = _6128; for (int _6134 = _9394;_6134<_9395;++_6134){ if ((((*((*_6098)(((*_6130)(_6134)))))(((*_6096)(((*_6130)(_6134)))))) < _6133)){ (_6133 = ((*((*_6098)(((*_6130)(_6134)))))(((*_6096)(((*_6130)(_6134))))))); }else {}}int _9396 = (int)0; int _9397 = _6128; for (int _6135 = _9396;_6135<_9397;++_6135){ if ((((*((*_6098)(((*_6130)(_6135)))))(((*_6096)(((*_6130)(_6135)))))) == _6133)){ (((*_6112)(_6127)) = (((*_6112)(_6127)) + ((*mosek::fusion::p_FlatExpr::_get_impl(((*_6072)(((*_6130)(_6135)))))->bfix)(((*_6096)(((*_6130)(_6135)))))))); ( ++ ((*_6096)(((*_6130)(_6135)))) ); }else {}}{ int _6136 = (int)0; for (;(_6136 < _6128);){ if ((((*_6096)(((*_6130)(_6136)))) >= ((*_6097)(((*_6130)(_6136)))))){ long long _6137 = ((*_6130)(_6136)); (((*_6130)(_6136)) = ((*_6130)((_6128 - (int)1)))); (((*_6130)((_6128 - (int)1))) = _6137); ( -- _6128 ); }else { ( ++ _6136 ); }}}( ++ _6127 ); }}else {}if ((_6100 == mosek::fusion::p_Set::_get_impl(_6071)->size)){ (_6108 = nullptr); }else {}(_6069 = ::mosek::fusion::p_Expr::_new_Expr(_6109,_6077,_6111,_6110,_6112,_6071,_6108)); }return _6069; }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _6138) { return mosek::fusion::p_Expr::add(_6138); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _6138){ if (! _6138){ throw monty::NullPointerException(std::string ("Argument vs may not be null"));}else {}if (((int)((_6138)->size(0)) == (int)0)){ return ::mosek::fusion::p_Expr::_new_Expr(std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >{(int)0}),nullptr,std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)0))),nullptr,::mosek::fusion::p_Set::make((int)0),std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)0))),(int)1); }else {}if ((((int)((_6138)->size(0)) > (int)0) && ! ((*_6138)((int)0)))){ throw monty::NullPointerException(std::string ("Argument vs may contain null"));}else {}monty::rc_ptr< ::mosek::fusion::Set > _6139 = ((*_6138)((int)0))->shape(); int _6140 = mosek::fusion::p_Set::_get_impl(_6139)->nd; long long _6141 = mosek::fusion::p_Set::_get_impl(_6139)->size; long long _6142 = mosek::fusion::p_Set::_get_impl(_6139)->size; int _9398 = (int)1; int _9399 = (int)((_6138)->size(0)); for (int _6143 = _9398;_6143<_9399;++_6143){ if (! ((*_6138)(_6143))){ throw monty::NullPointerException(std::string ("Argument vs may not contain null"));}else if ((! _6139->compare(((*_6138)(_6143))->shape()))){ throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand dimensions"));}else {}}long long _6144 = (_6141 * (int)((_6138)->size(0))); std::shared_ptr< monty::ndarray< long long,1 > > _6145 = ::mosek::fusion::Utils::Tools::range((long long)0,(_6144 + (int)((_6138)->size(0))),(long long)((int)((_6138)->size(0)))); std::shared_ptr< monty::ndarray< long long,1 > > _6146 = ([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _9400; for (long long _6147=(int)0, _9401=_6141; _6147 < _9401;++_6147) for (int _6148=(int)0, _9402=(int)((_6138)->size(0)); _6148 < _9402;++_6148)_9400.push_back((_6147 + (_6148 * _6141))); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9400.size()),_9400.begin(),_9400.end())); })(); std::shared_ptr< monty::ndarray< double,1 > > _6149 = ([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _9403; for (long long _6150=(int)0, _9404=_6144; _6150 < _9404;++_6150)_9403.push_back((int)1); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9403.size()),_9403.begin(),_9403.end())); })(); return ::mosek::fusion::p_Expr::_new_Expr(_6145,_6138,_6146,_6149,nullptr,_6139,nullptr,(int)1); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add_( monty::rc_ptr< ::mosek::fusion::Expression > _6151,double _6152,monty::rc_ptr< ::mosek::fusion::Expression > _6153,double _6154){ if ((_6151->getModel() && (_6153->getModel() && (_6151->getModel() != _6153->getModel())))){ monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _6155 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer(); std::string _6156 = ([&]() -> std::string { if ( ((int)((mosek::fusion::p_Model::_get_impl(_6151->getModel().get())->getName()).size()) > (int)0)) return (mosek::fusion::p_Model::_get_impl(_6151->getModel().get())->getName()); else return (std::string ("?")); })(); std::string _6157 = ([&]() -> std::string { if ( ((int)((mosek::fusion::p_Model::_get_impl(_6153->getModel().get())->getName()).size()) > (int)0)) return (mosek::fusion::p_Model::_get_impl(_6153->getModel().get())->getName()); else return (std::string ("?")); })(); mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_6155.get())->a(std::string ("Operands belong to different models: '")).get())->a(_6156).get())->a(std::string ("' and '")).get())->a(_6157).get())->a(std::string ("'")); throw ::mosek::fusion::ModelError(mosek::fusion::Utils::p_StringBuffer::_get_impl(_6155.get())->toString());}else {}{ int _6158 = ([&]() -> int { if ( (mosek::fusion::p_Set::_get_impl(_6151->shape())->nd >= mosek::fusion::p_Set::_get_impl(_6153->shape())->nd)) return (mosek::fusion::p_Set::_get_impl(_6151->shape())->nd); else return (mosek::fusion::p_Set::_get_impl(_6153->shape())->nd); })(); int _9405 = (int)0; int _9406 = _6158; for (int _6159 = _9405;_6159<_9406;++_6159){ if ((_6151->shape()->dim(_6159) != _6153->shape()->dim(_6159))){ throw ::mosek::fusion::DimensionError(std::string ("Dimensions mismatch"));}else {}}}monty::rc_ptr< ::mosek::fusion::FlatExpr > _6160 = _6151->eval(); monty::rc_ptr< ::mosek::fusion::FlatExpr > _6161 = _6153->eval(); bool _6162 = (mosek::fusion::p_FlatExpr::_get_impl(_6160)->inst && mosek::fusion::p_FlatExpr::_get_impl(_6161)->inst); monty::rc_ptr< ::mosek::fusion::Set > _6163 = mosek::fusion::p_FlatExpr::_get_impl(_6160)->shape; std::shared_ptr< monty::ndarray< long long,1 > > _6164 = mosek::fusion::p_FlatExpr::_get_impl(_6160)->inst; std::shared_ptr< monty::ndarray< long long,1 > > _6165 = mosek::fusion::p_FlatExpr::_get_impl(_6161)->inst; if (! _6164){ (_6164 = ::mosek::fusion::Utils::Tools::range(mosek::fusion::p_Set::_get_impl(_6163)->size)); }else {}if (! _6165){ (_6165 = ::mosek::fusion::Utils::Tools::range(mosek::fusion::p_Set::_get_impl(_6163)->size)); }else {}int _6166 = (int)0; { int _6167 = (int)0; int _6168 = (int)0; while (((_6167 < (int)((_6164)->size(0))) && (_6168 < (int)((_6165)->size(0))))) { if ((((*_6164)(_6167)) < ((*_6165)(_6168)))){ ( ++ _6167 ); ( ++ _6166 ); }else if ((((*_6164)(_6167)) > ((*_6165)(_6168)))){ ( ++ _6168 ); ( ++ _6166 ); }else { ( ++ _6167 ); ( ++ _6168 ); ( ++ _6166 ); }}(_6166 = ((_6166 + (int)((_6164)->size(0))) - _6167)); (_6166 = ((_6166 + (int)((_6165)->size(0))) - _6168)); }std::shared_ptr< monty::ndarray< long long,1 > > _6169 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_6166))); long long _6170 = (long long)0; int _9407 = (int)0; int _9408 = (int)((mosek::fusion::p_FlatExpr::_get_impl(_6160)->x)->size(0)); for (int _6171 = _9407;_6171<_9408;++_6171){ (_6170 = (_6170 + ((*mosek::fusion::p_FlatExpr::_get_impl(_6160)->x)(_6171))->size())); }std::shared_ptr< monty::ndarray< long long,1 > > _6172 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((_6166 + (int)1)))); std::shared_ptr< monty::ndarray< long long,1 > > _6173 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(((int)((mosek::fusion::p_FlatExpr::_get_impl(_6160)->subj)->size(0)) + (int)((mosek::fusion::p_FlatExpr::_get_impl(_6161)->subj)->size(0)))))); std::shared_ptr< monty::ndarray< double,1 > > _6174 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(((int)((mosek::fusion::p_FlatExpr::_get_impl(_6160)->subj)->size(0)) + (int)((mosek::fusion::p_FlatExpr::_get_impl(_6161)->subj)->size(0)))))); std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _6175 = ::mosek::fusion::p_Expr::varstack(mosek::fusion::p_FlatExpr::_get_impl(_6160)->x,mosek::fusion::p_FlatExpr::_get_impl(_6161)->x); std::shared_ptr< monty::ndarray< double,1 > > _6176 = ([&]() -> std::shared_ptr< monty::ndarray< double,1 > > { if ( (! mosek::fusion::p_FlatExpr::_get_impl(_6160)->bfix && ! mosek::fusion::p_FlatExpr::_get_impl(_6161)->bfix)) return (nullptr); else return (std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_6166)))); })(); { std::shared_ptr< monty::ndarray< long long,1 > > _6177 = mosek::fusion::p_FlatExpr::_get_impl(_6160)->ptrb; std::shared_ptr< monty::ndarray< long long,1 > > _6178 = mosek::fusion::p_FlatExpr::_get_impl(_6160)->subj; std::shared_ptr< monty::ndarray< double,1 > > _6179 = mosek::fusion::p_FlatExpr::_get_impl(_6160)->cof; std::shared_ptr< monty::ndarray< double,1 > > _6180 = mosek::fusion::p_FlatExpr::_get_impl(_6160)->bfix; std::shared_ptr< monty::ndarray< long long,1 > > _6181 = mosek::fusion::p_FlatExpr::_get_impl(_6161)->ptrb; std::shared_ptr< monty::ndarray< long long,1 > > _6182 = mosek::fusion::p_FlatExpr::_get_impl(_6161)->subj; std::shared_ptr< monty::ndarray< double,1 > > _6183 = mosek::fusion::p_FlatExpr::_get_impl(_6161)->cof; std::shared_ptr< monty::ndarray< double,1 > > _6184 = mosek::fusion::p_FlatExpr::_get_impl(_6161)->bfix; { int _6185 = (int)0; int _6186 = (int)0; int _6187 = (int)0; long long _6188 = (long long)0; while (((_6185 < (int)((_6164)->size(0))) && (_6186 < (int)((_6165)->size(0))))) { if ((((*_6164)(_6185)) < ((*_6165)(_6186)))){ long long _6189 = (((*_6177)((_6185 + (int)1))) - ((*_6177)(_6185))); ::mosek::fusion::Utils::Tools::arraycopy(_6178,((*_6177)(_6185)),_6173,_6188,_6189); long long _9409 = (long long)0; long long _9410 = _6189; for (long long _6190 = _9409;_6190<_9410;++_6190){ (((*_6174)((_6188 + _6190))) = (((*_6179)((((*_6177)(_6185)) + _6190))) * _6152)); }(_6188 = (_6188 + _6189)); (((*_6169)(_6187)) = ((*_6164)(_6185))); (((*_6172)((_6187 + (int)1))) = (((*_6172)(_6187)) + _6189)); ( ++ _6185 ); ( ++ _6187 ); }else if ((((*_6164)(_6185)) > ((*_6165)(_6186)))){ long long _6191 = (((*_6181)((_6186 + (int)1))) - ((*_6181)(_6186))); long long _9411 = (long long)0; long long _9412 = _6191; for (long long _6192 = _9411;_6192<_9412;++_6192){ (((*_6173)((_6188 + _6192))) = (((*_6182)((((*_6181)(_6186)) + _6192))) + _6170)); }long long _9413 = (long long)0; long long _9414 = _6191; for (long long _6193 = _9413;_6193<_9414;++_6193){ (((*_6174)((_6188 + _6193))) = (((*_6183)((((*_6181)(_6186)) + _6193))) * _6154)); }(_6188 = (_6188 + _6191)); (((*_6169)(_6187)) = ((*_6165)(_6186))); (((*_6172)((_6187 + (int)1))) = (((*_6172)(_6187)) + _6191)); ( ++ _6186 ); ( ++ _6187 ); }else { long long _6194 = (((*_6177)((_6185 + (int)1))) - ((*_6177)(_6185))); ::mosek::fusion::Utils::Tools::arraycopy(_6178,((*_6177)(_6185)),_6173,_6188,_6194); long long _9415 = (long long)0; long long _9416 = _6194; for (long long _6195 = _9415;_6195<_9416;++_6195){ (((*_6174)((_6188 + _6195))) = (((*_6179)((((*_6177)(_6185)) + _6195))) * _6152)); }(_6188 = (_6188 + _6194)); long long _6196 = (((*_6181)((_6186 + (int)1))) - ((*_6181)(_6186))); long long _9417 = (long long)0; long long _9418 = _6196; for (long long _6197 = _9417;_6197<_9418;++_6197){ (((*_6173)((_6188 + _6197))) = (((*_6182)((((*_6181)(_6186)) + _6197))) + _6170)); }long long _9419 = (long long)0; long long _9420 = _6196; for (long long _6198 = _9419;_6198<_9420;++_6198){ (((*_6174)((_6188 + _6198))) = (((*_6183)((((*_6181)(_6186)) + _6198))) * _6154)); }(_6188 = (_6188 + _6196)); (((*_6169)(_6187)) = ((*_6164)(_6185))); (((*_6172)((_6187 + (int)1))) = ((((*_6172)(_6187)) + _6194) + _6196)); ( ++ _6185 ); ( ++ _6186 ); ( ++ _6187 ); }}while ((_6185 < (int)((_6164)->size(0)))) { long long _6199 = (((*_6177)((_6185 + (int)1))) - ((*_6177)(_6185))); ::mosek::fusion::Utils::Tools::arraycopy(_6178,((*_6177)(_6185)),_6173,_6188,_6199); long long _9421 = (long long)0; long long _9422 = _6199; for (long long _6200 = _9421;_6200<_9422;++_6200){ (((*_6174)((_6188 + _6200))) = (((*_6179)((((*_6177)(_6185)) + _6200))) * _6152)); }(_6188 = (_6188 + _6199)); (((*_6169)(_6187)) = ((*_6164)(_6185))); (((*_6172)((_6187 + (int)1))) = (((*_6172)(_6187)) + _6199)); ( ++ _6185 ); ( ++ _6187 ); }while ((_6186 < (int)((_6165)->size(0)))) { long long _6201 = (((*_6181)((_6186 + (int)1))) - ((*_6181)(_6186))); long long _9423 = (long long)0; long long _9424 = _6201; for (long long _6202 = _9423;_6202<_9424;++_6202){ (((*_6173)((_6188 + _6202))) = (((*_6182)((((*_6181)(_6186)) + _6202))) + _6170)); }long long _9425 = (long long)0; long long _9426 = _6201; for (long long _6203 = _9425;_6203<_9426;++_6203){ (((*_6174)((_6188 + _6203))) = (((*_6183)((((*_6181)(_6186)) + _6203))) * _6154)); }(_6188 = (_6188 + _6201)); (((*_6169)(_6187)) = ((*_6165)(_6186))); (((*_6172)((_6187 + (int)1))) = (((*_6172)(_6187)) + _6201)); ( ++ _6186 ); ( ++ _6187 ); }if ((_6180 || _6184)){ int _6204 = (int)0; int _6205 = (int)0; int _6206 = (int)0; long long _6207 = (long long)0; while (((_6204 < (int)((_6164)->size(0))) && (_6205 < (int)((_6165)->size(0))))) { if ((((*_6164)(_6204)) < ((*_6165)(_6205)))){ if (_6180){ (((*_6176)(_6206)) = (((*_6180)(_6204)) * _6152)); }else {}( ++ _6204 ); ( ++ _6206 ); }else if ((((*_6164)(_6204)) > ((*_6165)(_6205)))){ if (_6184){ (((*_6176)(_6206)) = (((*_6184)(_6205)) * _6154)); }else {}( ++ _6205 ); ( ++ _6206 ); }else { if (_6180){ (((*_6176)(_6206)) = (((*_6180)(_6204)) * _6152)); }else {}if (_6184){ (((*_6176)(_6206)) = (((*_6176)(_6206)) + (((*_6184)(_6205)) * _6154))); }else {}( ++ _6204 ); ( ++ _6205 ); ( ++ _6206 ); }}while ((_6204 < (int)((_6164)->size(0)))) { if (_6180){ (((*_6176)(_6206)) = (((*_6180)(_6204)) * _6152)); }else {}( ++ _6204 ); ( ++ _6206 ); }while ((_6205 < (int)((_6165)->size(0)))) { if (_6184){ (((*_6176)(_6206)) = (((*_6184)(_6205)) * _6154)); }else {}( ++ _6205 ); ( ++ _6206 ); }}else {}}}return ::mosek::fusion::p_Expr::_new_Expr(_6172,_6175,_6173,_6174,_6176,_6163,([&]() -> std::shared_ptr< monty::ndarray< long long,1 > > { if ( ((int)((_6169)->size(0)) == mosek::fusion::p_Set::_get_impl(_6163)->size)) return (nullptr); else return (_6169); })()); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::transpose  ( ) { return mosek::fusion::p_Expr::_get_impl(this)->transpose(); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::transpose( ){ monty::rc_ptr< ::mosek::fusion::Expr > _6208 = _pubthis; if ((mosek::fusion::p_Set::_get_impl(mosek::fusion::p_Expr::_get_impl(_6208.get())->shape())->nd > (int)2)){ throw ::mosek::fusion::DimensionError(std::string ("Wrong dimensions for transpose"));}else {}if ((mosek::fusion::p_Set::_get_impl(mosek::fusion::p_Expr::_get_impl(_6208.get())->shape())->nd == (int)1)){ return ::mosek::fusion::p_Expr::reshape(::mosek::fusion::Expression::t(_6208),::mosek::fusion::p_Set::make((int)1,mosek::fusion::p_Expr::_get_impl(_6208.get())->shape()->dim((int)0))); }else if ((mosek::fusion::p_Expr::_get_impl(_6208.get())->shape()->dim((int)0) == (int)1)){ return ::mosek::fusion::p_Expr::reshape(::mosek::fusion::Expression::t(_6208),::mosek::fusion::p_Set::make((int)1,mosek::fusion::p_Expr::_get_impl(_6208.get())->shape()->dim((int)1))); }else if ((mosek::fusion::p_Expr::_get_impl(_6208.get())->shape()->dim((int)1) == (int)1)){ return ::mosek::fusion::p_Expr::reshape(::mosek::fusion::Expression::t(_6208),::mosek::fusion::p_Set::make(mosek::fusion::p_Expr::_get_impl(_6208.get())->shape()->dim((int)0))); }else {}monty::rc_ptr< ::mosek::fusion::FlatExpr > _6209 = mosek::fusion::p_Expr::_get_impl(_6208.get())->eval(); std::shared_ptr< monty::ndarray< long long,1 > > _6210 = mosek::fusion::p_FlatExpr::_get_impl(_6209)->inst; std::shared_ptr< monty::ndarray< double,1 > > _6211 = mosek::fusion::p_FlatExpr::_get_impl(_6209)->bfix; std::shared_ptr< monty::ndarray< long long,1 > > _6212 = mosek::fusion::p_FlatExpr::_get_impl(_6209)->ptrb; std::shared_ptr< monty::ndarray< long long,1 > > _6213 = mosek::fusion::p_FlatExpr::_get_impl(_6209)->subj; std::shared_ptr< monty::ndarray< double,1 > > _6214 = mosek::fusion::p_FlatExpr::_get_impl(_6209)->cof; if (mosek::fusion::p_FlatExpr::_get_impl(_6209)->inst){ int _6215 = mosek::fusion::p_FlatExpr::_get_impl(_6209)->shape->dim((int)0); int _6216 = mosek::fusion::p_FlatExpr::_get_impl(_6209)->shape->dim((int)1); int _6217 = (int)((mosek::fusion::p_FlatExpr::_get_impl(_6209)->inst)->size(0)); int _6218 = (int)((mosek::fusion::p_FlatExpr::_get_impl(_6209)->subj)->size(0)); std::shared_ptr< monty::ndarray< double,1 > > _6219 = ([&]() -> std::shared_ptr< monty::ndarray< double,1 > > { if ( ! mosek::fusion::p_FlatExpr::_get_impl(_6209)->bfix) return (nullptr); else return (std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_6217)))); })(); std::shared_ptr< monty::ndarray< long long,1 > > _6220 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_6217))); std::shared_ptr< monty::ndarray< long long,1 > > _6221 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((_6217 + (int)1)))); std::shared_ptr< monty::ndarray< long long,1 > > _6222 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_6218))); std::shared_ptr< monty::ndarray< double,1 > > _6223 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_6218))); monty::rc_ptr< ::mosek::fusion::Set > _6224 = ::mosek::fusion::p_Set::make(_6216,_6215); std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _6225 = mosek::fusion::p_FlatExpr::_get_impl(_6209)->x; { std::shared_ptr< monty::ndarray< long long,1 > > _6226 = ([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _9427; for (int _6227=(int)0, _9428=_6217; _6227 < _9428;++_6227)_9427.push_back((((*_6210)(_6227)) / _6216)); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9427.size()),_9427.begin(),_9427.end())); })(); std::shared_ptr< monty::ndarray< long long,1 > > _6228 = ([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _9429; for (int _6229=(int)0, _9430=_6217; _6229 < _9430;++_6229)_9429.push_back((((*_6210)(_6229)) % _6216)); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9429.size()),_9429.begin(),_9429.end())); })(); std::shared_ptr< monty::ndarray< long long,1 > > _6230 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_6217))); std::shared_ptr< monty::ndarray< long long,1 > > _6231 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((_6217 + (int)1)))); int _9431 = (int)0; int _9432 = _6217; for (int _6232 = _9431;_6232<_9432;++_6232){ ( ++ ((*_6231)((((*_6228)(_6232)) + (int)1))) ); }int _9433 = (int)0; int _9434 = _6217; for (int _6233 = _9433;_6233<_9434;++_6233){ (((*_6231)((_6233 + (int)1))) += ((*_6231)(_6233))); }int _9435 = (int)0; int _9436 = _6217; for (int _6234 = _9435;_6234<_9436;++_6234){ (((*_6230)(((*_6231)(((*_6228)(_6234)))))) = _6234); ( ++ ((*_6231)(((*_6228)(_6234)))) ); }if (_6219){ int _9437 = (int)0; int _9438 = _6217; for (int _6235 = _9437;_6235<_9438;++_6235){ (((*_6219)(_6235)) = ((*_6211)(((*_6230)(_6235))))); }}else {}int _9439 = (int)0; int _9440 = _6217; for (int _6236 = _9439;_6236<_9440;++_6236){ (((*_6220)(_6236)) = ((((*_6228)(((*_6230)(_6236)))) * _6215) + ((*_6226)(((*_6230)(_6236)))))); }int _9441 = (int)0; int _9442 = _6217; for (int _6237 = _9441;_6237<_9442;++_6237){ (((*_6221)((_6237 + (int)1))) = (((*_6221)(_6237)) + (((*_6212)((((*_6230)(_6237)) + (int)1))) - ((*_6212)(((*_6230)(_6237))))))); }int _9443 = (int)0; int _9444 = _6217; for (int _6238 = _9443;_6238<_9444;++_6238){ ::mosek::fusion::Utils::Tools::arraycopy(_6213,((*_6212)(((*_6230)(_6238)))),_6222,((*_6221)(_6238)),(((*_6221)((_6238 + (int)1))) - ((*_6221)(_6238)))); ::mosek::fusion::Utils::Tools::arraycopy(_6214,((*_6212)(((*_6230)(_6238)))),_6223,((*_6221)(_6238)),(((*_6221)((_6238 + (int)1))) - ((*_6221)(_6238)))); }}return ::mosek::fusion::p_Expr::_new_Expr(_6221,_6225,_6222,_6223,_6219,_6224,_6220,(int)1); }else { int _6239 = mosek::fusion::p_FlatExpr::_get_impl(_6209)->shape->dim((int)0); int _6240 = mosek::fusion::p_FlatExpr::_get_impl(_6209)->shape->dim((int)1); std::shared_ptr< monty::ndarray< long long,1 > > _6241 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((mosek::fusion::p_FlatExpr::_get_impl(_6209)->ptrb)->size(0))))); std::shared_ptr< monty::ndarray< long long,1 > > _6242 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((mosek::fusion::p_FlatExpr::_get_impl(_6209)->subj)->size(0))))); std::shared_ptr< monty::ndarray< double,1 > > _6243 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)((mosek::fusion::p_FlatExpr::_get_impl(_6209)->cof)->size(0))))); std::shared_ptr< monty::ndarray< double,1 > > _6244 = ([&]() -> std::shared_ptr< monty::ndarray< double,1 > > { if ( _6211) return (std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((_6239 * _6240))))); else return (nullptr); })(); monty::rc_ptr< ::mosek::fusion::Set > _6245 = ::mosek::fusion::p_Set::make(_6240,_6239); { int _9445 = (int)0; int _9446 = _6240; for (int _6246 = _9445;_6246<_9446;++_6246){ int _9447 = (int)0; int _9448 = _6239; for (int _6247 = _9447;_6247<_9448;++_6247){ int _6248 = ((_6247 * _6240) + _6246); int _6249 = ((_6246 * _6239) + _6247); (((*_6241)((_6249 + (int)1))) = (((*_6241)(_6249)) + (((*_6212)((_6248 + (int)1))) - ((*_6212)(_6248))))); ::mosek::fusion::Utils::Tools::arraycopy(_6213,((*_6212)(_6248)),_6242,((*_6241)(_6249)),(((*_6212)((_6248 + (int)1))) - ((*_6212)(_6248)))); ::mosek::fusion::Utils::Tools::arraycopy(_6214,((*_6212)(_6248)),_6243,((*_6241)(_6249)),(((*_6212)((_6248 + (int)1))) - ((*_6212)(_6248)))); }}if (_6211){ int _9449 = (int)0; int _9450 = _6240; for (int _6250 = _9449;_6250<_9450;++_6250){ int _9451 = (int)0; int _9452 = _6239; for (int _6251 = _9451;_6251<_9452;++_6251){ int _6252 = ((_6251 * _6240) + _6250); int _6253 = ((_6250 * _6239) + _6251); (((*_6244)(_6253)) = ((*_6211)(_6252))); }}}else {}}return ::mosek::fusion::p_Expr::_new_Expr(_6241,mosek::fusion::p_FlatExpr::_get_impl(_6209)->x,_6242,_6243,_6244,_6245,nullptr,(int)1); }}monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::slice  ( std::shared_ptr< monty::ndarray< int,1 > > _6254,    std::shared_ptr< monty::ndarray< int,1 > > _6255) { return mosek::fusion::p_Expr::_get_impl(this)->slice(_6254,_6255); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::slice( std::shared_ptr< monty::ndarray< int,1 > > _6254,std::shared_ptr< monty::ndarray< int,1 > > _6255){ if (((int)((_6254)->size(0)) != (int)((_6255)->size(0)))){ throw ::mosek::fusion::LengthError(std::string ("Length firsta and lasta do not match"));}else {}if (((int)((_6254)->size(0)) != mosek::fusion::p_Set::_get_impl(shape_p)->nd)){ throw ::mosek::fusion::LengthError(std::string ("Length firsta and lasta do not match shape"));}else {}int _9453 = (int)0; int _9454 = (int)((_6254)->size(0)); for (int _6256 = _9453;_6256<_9454;++_6256){ if (((((*_6254)(_6256)) < (int)0) || ((((*_6254)(_6256)) > ((*_6255)(_6256))) || (((*_6255)(_6256)) > shape_p->dim(_6256))))){ throw ::mosek::fusion::IndexError(std::string ("Index is invalid or out of bounds"));}else {}}std::shared_ptr< monty::ndarray< int,1 > > _6257 = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _9455; for (int _6258=(int)0, _9456=(int)((_6254)->size(0)); _6258 < _9456;++_6258)_9455.push_back((((*_6255)(_6258)) - ((*_6254)(_6258)))); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9455.size()),_9455.begin(),_9455.end())); })(); monty::rc_ptr< ::mosek::fusion::NDSet > _6259 = ::mosek::fusion::p_NDSet::_new_NDSet(_6257); if (! inst){ long long _6260 = (long long)1; int _9457 = (int)0; int _9458 = (int)((_6254)->size(0)); for (int _6261 = _9457;_6261<_9458;++_6261){ (_6260 = (_6260 * (((*_6255)(_6261)) - ((*_6254)(_6261))))); }long long _6262 = mosek::fusion::p_Set::_get_impl(shape_p.get())->linearidx(_6254); monty::rc_ptr< ::mosek::fusion::IndexCounter > _6263 = ::mosek::fusion::p_IndexCounter::_new_IndexCounter(_6262,_6257,shape_p); long long _6264 = (long long)0; long long _9459 = (long long)0; long long _9460 = _6260; for (long long _6265 = _9459;_6265<_9460;++_6265){ long long _6266 = _6263->get(); (_6264 = (_6264 + (((*ptrb)((_6266 + (int)1))) - ((*ptrb)(_6266))))); _6263->inc(); }std::shared_ptr< monty::ndarray< long long,1 > > _6267 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((_6260 + (int)1)))); std::shared_ptr< monty::ndarray< long long,1 > > _6268 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_6264))); std::shared_ptr< monty::ndarray< double,1 > > _6269 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_6264))); _6263->reset(); long long _9461 = (long long)0; long long _9462 = _6260; for (long long _6270 = _9461;_6270<_9462;++_6270){ long long _6271 = _6263->get(); ::mosek::fusion::Utils::Tools::arraycopy(subj,((*ptrb)(_6271)),_6268,((*_6267)(_6270)),(((*ptrb)((_6271 + (int)1))) - ((*ptrb)(_6271)))); ::mosek::fusion::Utils::Tools::arraycopy(cof_v,((*ptrb)(_6271)),_6269,((*_6267)(_6270)),(((*ptrb)((_6271 + (int)1))) - ((*ptrb)(_6271)))); (((*_6267)((_6270 + (int)1))) = (((*_6267)(_6270)) + (((*ptrb)((_6271 + (int)1))) - ((*ptrb)(_6271))))); _6263->inc(); }std::shared_ptr< monty::ndarray< double,1 > > _6272 = nullptr; if (bfix){ _6263->reset(); long long _9463 = (long long)0; long long _9464 = _6260; for (long long _6273 = _9463;_6273<_9464;++_6273){ (((*_6272)(_6273)) = ((*bfix)(_6263->get()))); _6263->inc(); }}else {}return ::mosek::fusion::p_Expr::_new_Expr(_6267,x,_6268,_6269,_6272,::mosek::fusion::Set::t(_6259),nullptr); }else { long long _6274 = (long long)0; long long _6275 = (long long)0; int _9465 = (int)0; int _9466 = (int)((inst)->size(0)); for (int _6276 = _9465;_6276<_9466;++_6276){ std::shared_ptr< monty::ndarray< int,1 > > _6277 = mosek::fusion::p_Set::_get_impl(shape_p.get())->idxtokey(((*inst)(_6276))); bool _6278 = true; int _9467 = (int)0; int _9468 = mosek::fusion::p_Set::_get_impl(shape_p)->nd; for (int _6279 = _9467;_6279<_9468;++_6279){ (_6278 = (_6278 && ((((*_6254)(_6279)) <= ((*_6277)(_6279))) && (((*_6277)(_6279)) < ((*_6255)(_6279)))))); }if (_6278){ ( ++ _6274 ); (_6275 = (_6275 + (((*ptrb)((_6276 + (int)1))) - ((*ptrb)(_6276))))); }else {}}std::shared_ptr< monty::ndarray< long long,1 > > _6280 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((_6274 + (int)1)))); std::shared_ptr< monty::ndarray< long long,1 > > _6281 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_6275))); std::shared_ptr< monty::ndarray< double,1 > > _6282 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_6275))); std::shared_ptr< monty::ndarray< double,1 > > _6283 = nullptr; std::shared_ptr< monty::ndarray< long long,1 > > _6284 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_6274))); { int _6285 = (int)0; int _9469 = (int)0; int _9470 = (int)((inst)->size(0)); for (int _6286 = _9469;_6286<_9470;++_6286){ std::shared_ptr< monty::ndarray< int,1 > > _6287 = mosek::fusion::p_Set::_get_impl(shape_p.get())->idxtokey(((*inst)(_6286))); bool _6288 = true; int _9471 = (int)0; int _9472 = mosek::fusion::p_Set::_get_impl(shape_p)->nd; for (int _6289 = _9471;_6289<_9472;++_6289){ (_6288 = (_6288 && ((((*_6254)(_6289)) <= ((*_6287)(_6289))) && (((*_6287)(_6289)) < ((*_6255)(_6289)))))); }if (_6288){ ::mosek::fusion::Utils::Tools::arraycopy(subj,((*ptrb)(_6286)),_6281,((*_6280)(_6285)),(((*ptrb)((_6286 + (int)1))) - ((*ptrb)(_6286)))); ::mosek::fusion::Utils::Tools::arraycopy(cof_v,((*ptrb)(_6286)),_6282,((*_6280)(_6285)),(((*ptrb)((_6286 + (int)1))) - ((*ptrb)(_6286)))); (((*_6280)((_6285 + (int)1))) = ((((*_6280)(_6285)) + ((*ptrb)((_6286 + (int)1)))) - ((*ptrb)(_6286)))); (((*_6284)(_6285)) = mosek::fusion::p_NDSet::_get_impl(_6259.get())->linearidx(([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _9473; for (int _6290=(int)0, _9474=(int)((_6287)->size(0)); _6290 < _9474;++_6290)_9473.push_back((((*_6287)(_6290)) - ((*_6254)(_6290)))); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9473.size()),_9473.begin(),_9473.end())); })())); ( ++ _6285 ); }else {}}}if (bfix){ (_6283 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_6274)))); int _6291 = (int)0; int _9475 = (int)0; int _9476 = (int)((inst)->size(0)); for (int _6292 = _9475;_6292<_9476;++_6292){ std::shared_ptr< monty::ndarray< int,1 > > _6293 = mosek::fusion::p_Set::_get_impl(shape_p.get())->idxtokey(((*inst)(_6292))); bool _6294 = true; int _9477 = (int)0; int _9478 = mosek::fusion::p_Set::_get_impl(shape_p)->nd; for (int _6295 = _9477;_6295<_9478;++_6295){ (_6294 = (_6294 && ((((*_6254)(_6295)) <= ((*_6293)(_6295))) && (((*_6293)(_6295)) < ((*_6255)(_6295)))))); }if (_6294){ (((*_6283)(_6291)) = ((*bfix)(_6292))); ( ++ _6291 ); }else {}}}else {}return ::mosek::fusion::p_Expr::_new_Expr(_6280,x,_6281,_6282,_6283,::mosek::fusion::Set::t(_6259),_6284); }}monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::index  ( std::shared_ptr< monty::ndarray< int,1 > > _6296) { return mosek::fusion::p_Expr::_get_impl(this)->index(_6296); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::index( std::shared_ptr< monty::ndarray< int,1 > > _6296){ std::shared_ptr< monty::ndarray< int,1 > > _6297 = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _9479; for (int _6298=(int)0, _9480=(int)((_6296)->size(0)); _6298 < _9480;++_6298)_9479.push_back((((*_6296)(_6298)) + (int)1)); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9479.size()),_9479.begin(),_9479.end())); })(); return slice(_6296,_6297); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::index  ( int _6299) { return mosek::fusion::p_Expr::_get_impl(this)->index(_6299); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::index( int _6299){ return slice(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{_6299}),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(_6299 + (int)1)})); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::slice  ( int _6300,    int _6301) { return mosek::fusion::p_Expr::_get_impl(this)->slice(_6300,_6301); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::slice( int _6300,int _6301){ return slice(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{_6300}),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{_6301})); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulElm  ( monty::rc_ptr< ::mosek::fusion::Matrix > _6302,    monty::rc_ptr< ::mosek::fusion::Expression > _6303) { return mosek::fusion::p_Expr::mulElm(_6302,_6303); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm( monty::rc_ptr< ::mosek::fusion::Matrix > _6302,monty::rc_ptr< ::mosek::fusion::Expression > _6303){ return ::mosek::fusion::p_Expr::mulElm_(_6302,_6303); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulElm  ( monty::rc_ptr< ::mosek::fusion::Matrix > _6304,    monty::rc_ptr< ::mosek::fusion::Variable > _6305) { return mosek::fusion::p_Expr::mulElm(_6304,_6305); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm( monty::rc_ptr< ::mosek::fusion::Matrix > _6304,monty::rc_ptr< ::mosek::fusion::Variable > _6305){ return ::mosek::fusion::p_Expr::mulElm_(_6304,_6305); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulElm  ( monty::rc_ptr< ::mosek::fusion::NDSparseArray > _6306,    monty::rc_ptr< ::mosek::fusion::Variable > _6307) { return mosek::fusion::p_Expr::mulElm(_6306,_6307); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm( monty::rc_ptr< ::mosek::fusion::NDSparseArray > _6306,monty::rc_ptr< ::mosek::fusion::Variable > _6307){ return ::mosek::fusion::p_Expr::mulElm_(_6306,_6307); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulElm  ( monty::rc_ptr< ::mosek::fusion::NDSparseArray > _6308,    monty::rc_ptr< ::mosek::fusion::Expression > _6309) { return mosek::fusion::p_Expr::mulElm(_6308,_6309); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm( monty::rc_ptr< ::mosek::fusion::NDSparseArray > _6308,monty::rc_ptr< ::mosek::fusion::Expression > _6309){ return ::mosek::fusion::p_Expr::mulElm_(_6308,_6309); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulElm  ( std::shared_ptr< monty::ndarray< double,2 > > _6310,    monty::rc_ptr< ::mosek::fusion::Variable > _6311) { return mosek::fusion::p_Expr::mulElm(_6310,_6311); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm( std::shared_ptr< monty::ndarray< double,2 > > _6310,monty::rc_ptr< ::mosek::fusion::Variable > _6311){ return ::mosek::fusion::p_Expr::mulElm_(::mosek::fusion::p_Matrix::dense(_6310),_6311); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulElm  ( std::shared_ptr< monty::ndarray< double,2 > > _6312,    monty::rc_ptr< ::mosek::fusion::Expression > _6313) { return mosek::fusion::p_Expr::mulElm(_6312,_6313); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm( std::shared_ptr< monty::ndarray< double,2 > > _6312,monty::rc_ptr< ::mosek::fusion::Expression > _6313){ return ::mosek::fusion::p_Expr::mulElm_(::mosek::fusion::p_Matrix::dense(_6312),_6313); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulElm  ( std::shared_ptr< monty::ndarray< double,1 > > _6314,    monty::rc_ptr< ::mosek::fusion::Variable > _6315) { return mosek::fusion::p_Expr::mulElm(_6314,_6315); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm( std::shared_ptr< monty::ndarray< double,1 > > _6314,monty::rc_ptr< ::mosek::fusion::Variable > _6315){ return ::mosek::fusion::p_Expr::mulElm_(_6314,_6315); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulElm  ( std::shared_ptr< monty::ndarray< double,1 > > _6316,    monty::rc_ptr< ::mosek::fusion::Expression > _6317) { return mosek::fusion::p_Expr::mulElm(_6316,_6317); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm( std::shared_ptr< monty::ndarray< double,1 > > _6316,monty::rc_ptr< ::mosek::fusion::Expression > _6317){ return ::mosek::fusion::p_Expr::mulElm_(_6316,_6317); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulElm  ( monty::rc_ptr< ::mosek::fusion::Expression > _6318,    monty::rc_ptr< ::mosek::fusion::Matrix > _6319) { return mosek::fusion::p_Expr::mulElm(_6318,_6319); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm( monty::rc_ptr< ::mosek::fusion::Expression > _6318,monty::rc_ptr< ::mosek::fusion::Matrix > _6319){ return ::mosek::fusion::p_Expr::mulElm_(_6319,_6318); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulElm  ( monty::rc_ptr< ::mosek::fusion::Expression > _6320,    std::shared_ptr< monty::ndarray< double,2 > > _6321) { return mosek::fusion::p_Expr::mulElm(_6320,_6321); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm( monty::rc_ptr< ::mosek::fusion::Expression > _6320,std::shared_ptr< monty::ndarray< double,2 > > _6321){ return ::mosek::fusion::p_Expr::mulElm_(::mosek::fusion::p_Matrix::dense(_6321),_6320); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulElm  ( monty::rc_ptr< ::mosek::fusion::Expression > _6322,    std::shared_ptr< monty::ndarray< double,1 > > _6323) { return mosek::fusion::p_Expr::mulElm(_6322,_6323); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm( monty::rc_ptr< ::mosek::fusion::Expression > _6322,std::shared_ptr< monty::ndarray< double,1 > > _6323){ return ::mosek::fusion::p_Expr::mulElm_(_6323,_6322); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulElm  ( monty::rc_ptr< ::mosek::fusion::Expression > _6324,    monty::rc_ptr< ::mosek::fusion::NDSparseArray > _6325) { return mosek::fusion::p_Expr::mulElm(_6324,_6325); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm( monty::rc_ptr< ::mosek::fusion::Expression > _6324,monty::rc_ptr< ::mosek::fusion::NDSparseArray > _6325){ return ::mosek::fusion::p_Expr::mulElm_(_6325,_6324); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulElm  ( monty::rc_ptr< ::mosek::fusion::Variable > _6326,    monty::rc_ptr< ::mosek::fusion::Matrix > _6327) { return mosek::fusion::p_Expr::mulElm(_6326,_6327); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm( monty::rc_ptr< ::mosek::fusion::Variable > _6326,monty::rc_ptr< ::mosek::fusion::Matrix > _6327){ return ::mosek::fusion::p_Expr::mulElm_(_6327,_6326); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulElm  ( monty::rc_ptr< ::mosek::fusion::Variable > _6328,    monty::rc_ptr< ::mosek::fusion::NDSparseArray > _6329) { return mosek::fusion::p_Expr::mulElm(_6328,_6329); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm( monty::rc_ptr< ::mosek::fusion::Variable > _6328,monty::rc_ptr< ::mosek::fusion::NDSparseArray > _6329){ return ::mosek::fusion::p_Expr::mulElm_(_6329,_6328); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulElm  ( monty::rc_ptr< ::mosek::fusion::Variable > _6330,    std::shared_ptr< monty::ndarray< double,2 > > _6331) { return mosek::fusion::p_Expr::mulElm(_6330,_6331); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm( monty::rc_ptr< ::mosek::fusion::Variable > _6330,std::shared_ptr< monty::ndarray< double,2 > > _6331){ return ::mosek::fusion::p_Expr::mulElm_(::mosek::fusion::p_Matrix::dense(_6331),_6330); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulElm  ( monty::rc_ptr< ::mosek::fusion::Variable > _6332,    std::shared_ptr< monty::ndarray< double,1 > > _6333) { return mosek::fusion::p_Expr::mulElm(_6332,_6333); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm( monty::rc_ptr< ::mosek::fusion::Variable > _6332,std::shared_ptr< monty::ndarray< double,1 > > _6333){ return ::mosek::fusion::p_Expr::mulElm_(_6333,_6332); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::dot  ( monty::rc_ptr< ::mosek::fusion::Matrix > _6334,    monty::rc_ptr< ::mosek::fusion::Expression > _6335) { return mosek::fusion::p_Expr::dot(_6334,_6335); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot( monty::rc_ptr< ::mosek::fusion::Matrix > _6334,monty::rc_ptr< ::mosek::fusion::Expression > _6335){ return ::mosek::fusion::p_Expr::dot_(_6334,_6335); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::dot  ( monty::rc_ptr< ::mosek::fusion::Matrix > _6336,    monty::rc_ptr< ::mosek::fusion::Variable > _6337) { return mosek::fusion::p_Expr::dot(_6336,_6337); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot( monty::rc_ptr< ::mosek::fusion::Matrix > _6336,monty::rc_ptr< ::mosek::fusion::Variable > _6337){ return ::mosek::fusion::p_Expr::dot_(_6336,_6337); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::dot  ( monty::rc_ptr< ::mosek::fusion::NDSparseArray > _6338,    monty::rc_ptr< ::mosek::fusion::Variable > _6339) { return mosek::fusion::p_Expr::dot(_6338,_6339); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot( monty::rc_ptr< ::mosek::fusion::NDSparseArray > _6338,monty::rc_ptr< ::mosek::fusion::Variable > _6339){ return ::mosek::fusion::p_Expr::dot_(_6338,_6339); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::dot  ( monty::rc_ptr< ::mosek::fusion::NDSparseArray > _6340,    monty::rc_ptr< ::mosek::fusion::Expression > _6341) { return mosek::fusion::p_Expr::dot(_6340,_6341); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot( monty::rc_ptr< ::mosek::fusion::NDSparseArray > _6340,monty::rc_ptr< ::mosek::fusion::Expression > _6341){ return ::mosek::fusion::p_Expr::dot_(_6340,_6341); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::dot  ( std::shared_ptr< monty::ndarray< double,2 > > _6342,    monty::rc_ptr< ::mosek::fusion::Variable > _6343) { return mosek::fusion::p_Expr::dot(_6342,_6343); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot( std::shared_ptr< monty::ndarray< double,2 > > _6342,monty::rc_ptr< ::mosek::fusion::Variable > _6343){ return ::mosek::fusion::p_Expr::dot_(::mosek::fusion::p_Matrix::dense(_6342),_6343); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::dot  ( std::shared_ptr< monty::ndarray< double,2 > > _6344,    monty::rc_ptr< ::mosek::fusion::Expression > _6345) { return mosek::fusion::p_Expr::dot(_6344,_6345); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot( std::shared_ptr< monty::ndarray< double,2 > > _6344,monty::rc_ptr< ::mosek::fusion::Expression > _6345){ return ::mosek::fusion::p_Expr::dot_(::mosek::fusion::p_Matrix::dense(_6344),_6345); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::dot  ( std::shared_ptr< monty::ndarray< double,1 > > _6346,    monty::rc_ptr< ::mosek::fusion::Variable > _6347) { return mosek::fusion::p_Expr::dot(_6346,_6347); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot( std::shared_ptr< monty::ndarray< double,1 > > _6346,monty::rc_ptr< ::mosek::fusion::Variable > _6347){ return ::mosek::fusion::p_Expr::dot_(_6346,_6347); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::dot  ( std::shared_ptr< monty::ndarray< double,1 > > _6348,    monty::rc_ptr< ::mosek::fusion::Expression > _6349) { return mosek::fusion::p_Expr::dot(_6348,_6349); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot( std::shared_ptr< monty::ndarray< double,1 > > _6348,monty::rc_ptr< ::mosek::fusion::Expression > _6349){ return ::mosek::fusion::p_Expr::dot_(_6348,_6349); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::dot  ( monty::rc_ptr< ::mosek::fusion::Expression > _6350,    monty::rc_ptr< ::mosek::fusion::Matrix > _6351) { return mosek::fusion::p_Expr::dot(_6350,_6351); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot( monty::rc_ptr< ::mosek::fusion::Expression > _6350,monty::rc_ptr< ::mosek::fusion::Matrix > _6351){ return ::mosek::fusion::p_Expr::dot_(_6351,_6350); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::dot  ( monty::rc_ptr< ::mosek::fusion::Expression > _6352,    std::shared_ptr< monty::ndarray< double,2 > > _6353) { return mosek::fusion::p_Expr::dot(_6352,_6353); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot( monty::rc_ptr< ::mosek::fusion::Expression > _6352,std::shared_ptr< monty::ndarray< double,2 > > _6353){ return ::mosek::fusion::p_Expr::dot_(::mosek::fusion::p_Matrix::dense(_6353),_6352); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::dot  ( monty::rc_ptr< ::mosek::fusion::Expression > _6354,    std::shared_ptr< monty::ndarray< double,1 > > _6355) { return mosek::fusion::p_Expr::dot(_6354,_6355); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot( monty::rc_ptr< ::mosek::fusion::Expression > _6354,std::shared_ptr< monty::ndarray< double,1 > > _6355){ return ::mosek::fusion::p_Expr::dot_(_6355,_6354); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::dot  ( monty::rc_ptr< ::mosek::fusion::Expression > _6356,    monty::rc_ptr< ::mosek::fusion::NDSparseArray > _6357) { return mosek::fusion::p_Expr::dot(_6356,_6357); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot( monty::rc_ptr< ::mosek::fusion::Expression > _6356,monty::rc_ptr< ::mosek::fusion::NDSparseArray > _6357){ return ::mosek::fusion::p_Expr::dot_(_6357,_6356); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::dot  ( monty::rc_ptr< ::mosek::fusion::Variable > _6358,    monty::rc_ptr< ::mosek::fusion::NDSparseArray > _6359) { return mosek::fusion::p_Expr::dot(_6358,_6359); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot( monty::rc_ptr< ::mosek::fusion::Variable > _6358,monty::rc_ptr< ::mosek::fusion::NDSparseArray > _6359){ return ::mosek::fusion::p_Expr::dot_(_6359,_6358); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::dot  ( monty::rc_ptr< ::mosek::fusion::Variable > _6360,    monty::rc_ptr< ::mosek::fusion::Matrix > _6361) { return mosek::fusion::p_Expr::dot(_6360,_6361); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot( monty::rc_ptr< ::mosek::fusion::Variable > _6360,monty::rc_ptr< ::mosek::fusion::Matrix > _6361){ return ::mosek::fusion::p_Expr::dot_(_6361,_6360); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::dot  ( monty::rc_ptr< ::mosek::fusion::Variable > _6362,    std::shared_ptr< monty::ndarray< double,2 > > _6363) { return mosek::fusion::p_Expr::dot(_6362,_6363); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot( monty::rc_ptr< ::mosek::fusion::Variable > _6362,std::shared_ptr< monty::ndarray< double,2 > > _6363){ return ::mosek::fusion::p_Expr::dot_(::mosek::fusion::p_Matrix::dense(_6363),_6362); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::dot  ( monty::rc_ptr< ::mosek::fusion::Variable > _6364,    std::shared_ptr< monty::ndarray< double,1 > > _6365) { return mosek::fusion::p_Expr::dot(_6364,_6365); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot( monty::rc_ptr< ::mosek::fusion::Variable > _6364,std::shared_ptr< monty::ndarray< double,1 > > _6365){ return ::mosek::fusion::p_Expr::dot_(_6365,_6364); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub  ( monty::rc_ptr< ::mosek::fusion::NDSparseArray > _6366,    monty::rc_ptr< ::mosek::fusion::Variable > _6367) { return mosek::fusion::p_Expr::sub(_6366,_6367); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub( monty::rc_ptr< ::mosek::fusion::NDSparseArray > _6366,monty::rc_ptr< ::mosek::fusion::Variable > _6367){ return ::mosek::fusion::p_Expr::add_(::mosek::fusion::p_Expr::constTerm(_6366),1.0,_6367->asExpr(),(- 1.0)); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub  ( monty::rc_ptr< ::mosek::fusion::Variable > _6368,    monty::rc_ptr< ::mosek::fusion::NDSparseArray > _6369) { return mosek::fusion::p_Expr::sub(_6368,_6369); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub( monty::rc_ptr< ::mosek::fusion::Variable > _6368,monty::rc_ptr< ::mosek::fusion::NDSparseArray > _6369){ return ::mosek::fusion::p_Expr::add_(_6368->asExpr(),1.0,::mosek::fusion::p_Expr::constTerm(_6369),(- 1.0)); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub  ( monty::rc_ptr< ::mosek::fusion::Matrix > _6370,    monty::rc_ptr< ::mosek::fusion::Variable > _6371) { return mosek::fusion::p_Expr::sub(_6370,_6371); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub( monty::rc_ptr< ::mosek::fusion::Matrix > _6370,monty::rc_ptr< ::mosek::fusion::Variable > _6371){ return ::mosek::fusion::p_Expr::add_(::mosek::fusion::p_Expr::constTerm(_6370),1.0,_6371->asExpr(),(- 1.0)); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub  ( monty::rc_ptr< ::mosek::fusion::Variable > _6372,    monty::rc_ptr< ::mosek::fusion::Matrix > _6373) { return mosek::fusion::p_Expr::sub(_6372,_6373); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub( monty::rc_ptr< ::mosek::fusion::Variable > _6372,monty::rc_ptr< ::mosek::fusion::Matrix > _6373){ return ::mosek::fusion::p_Expr::add_(_6372->asExpr(),1.0,::mosek::fusion::p_Expr::constTerm(_6373),(- 1.0)); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub  ( double _6374,    monty::rc_ptr< ::mosek::fusion::Variable > _6375) { return mosek::fusion::p_Expr::sub(_6374,_6375); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub( double _6374,monty::rc_ptr< ::mosek::fusion::Variable > _6375){ return ::mosek::fusion::p_Expr::add_(::mosek::fusion::p_Expr::constTerm(_6375->shape(),_6374),1.0,_6375->asExpr(),(- 1.0)); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub  ( monty::rc_ptr< ::mosek::fusion::Variable > _6376,    double _6377) { return mosek::fusion::p_Expr::sub(_6376,_6377); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub( monty::rc_ptr< ::mosek::fusion::Variable > _6376,double _6377){ return ::mosek::fusion::p_Expr::add_(_6376->asExpr(),1.0,::mosek::fusion::p_Expr::constTerm(_6376->shape(),_6377),(- 1.0)); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub  ( std::shared_ptr< monty::ndarray< double,2 > > _6378,    monty::rc_ptr< ::mosek::fusion::Variable > _6379) { return mosek::fusion::p_Expr::sub(_6378,_6379); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub( std::shared_ptr< monty::ndarray< double,2 > > _6378,monty::rc_ptr< ::mosek::fusion::Variable > _6379){ return ::mosek::fusion::p_Expr::add_(::mosek::fusion::p_Expr::constTerm(_6378),1.0,_6379->asExpr(),(- 1.0)); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub  ( std::shared_ptr< monty::ndarray< double,1 > > _6380,    monty::rc_ptr< ::mosek::fusion::Variable > _6381) { return mosek::fusion::p_Expr::sub(_6380,_6381); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub( std::shared_ptr< monty::ndarray< double,1 > > _6380,monty::rc_ptr< ::mosek::fusion::Variable > _6381){ return ::mosek::fusion::p_Expr::add_(::mosek::fusion::p_Expr::constTerm(_6380),1.0,_6381->asExpr(),(- 1.0)); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub  ( monty::rc_ptr< ::mosek::fusion::Variable > _6382,    std::shared_ptr< monty::ndarray< double,2 > > _6383) { return mosek::fusion::p_Expr::sub(_6382,_6383); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub( monty::rc_ptr< ::mosek::fusion::Variable > _6382,std::shared_ptr< monty::ndarray< double,2 > > _6383){ return ::mosek::fusion::p_Expr::add_(_6382->asExpr(),1.0,::mosek::fusion::p_Expr::constTerm(_6383),(- 1.0)); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub  ( monty::rc_ptr< ::mosek::fusion::Variable > _6384,    std::shared_ptr< monty::ndarray< double,1 > > _6385) { return mosek::fusion::p_Expr::sub(_6384,_6385); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub( monty::rc_ptr< ::mosek::fusion::Variable > _6384,std::shared_ptr< monty::ndarray< double,1 > > _6385){ return ::mosek::fusion::p_Expr::add_(_6384->asExpr(),1.0,::mosek::fusion::p_Expr::constTerm(_6385),(- 1.0)); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub  ( monty::rc_ptr< ::mosek::fusion::Variable > _6386,    monty::rc_ptr< ::mosek::fusion::Variable > _6387) { return mosek::fusion::p_Expr::sub(_6386,_6387); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub( monty::rc_ptr< ::mosek::fusion::Variable > _6386,monty::rc_ptr< ::mosek::fusion::Variable > _6387){ return ::mosek::fusion::p_Expr::add_(_6386->asExpr(),1.0,_6387->asExpr(),(- 1.0)); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub  ( monty::rc_ptr< ::mosek::fusion::NDSparseArray > _6388,    monty::rc_ptr< ::mosek::fusion::Expression > _6389) { return mosek::fusion::p_Expr::sub(_6388,_6389); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub( monty::rc_ptr< ::mosek::fusion::NDSparseArray > _6388,monty::rc_ptr< ::mosek::fusion::Expression > _6389){ return ::mosek::fusion::p_Expr::add_(::mosek::fusion::p_Expr::constTerm(_6388),1.0,_6389,(- 1.0)); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub  ( monty::rc_ptr< ::mosek::fusion::Expression > _6390,    monty::rc_ptr< ::mosek::fusion::NDSparseArray > _6391) { return mosek::fusion::p_Expr::sub(_6390,_6391); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub( monty::rc_ptr< ::mosek::fusion::Expression > _6390,monty::rc_ptr< ::mosek::fusion::NDSparseArray > _6391){ return ::mosek::fusion::p_Expr::add_(_6390,1.0,::mosek::fusion::p_Expr::constTerm(_6391),(- 1.0)); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub  ( monty::rc_ptr< ::mosek::fusion::Matrix > _6392,    monty::rc_ptr< ::mosek::fusion::Expression > _6393) { return mosek::fusion::p_Expr::sub(_6392,_6393); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub( monty::rc_ptr< ::mosek::fusion::Matrix > _6392,monty::rc_ptr< ::mosek::fusion::Expression > _6393){ return ::mosek::fusion::p_Expr::add_(::mosek::fusion::p_Expr::constTerm(_6392),1.0,_6393,(- 1.0)); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub  ( monty::rc_ptr< ::mosek::fusion::Expression > _6394,    monty::rc_ptr< ::mosek::fusion::Matrix > _6395) { return mosek::fusion::p_Expr::sub(_6394,_6395); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub( monty::rc_ptr< ::mosek::fusion::Expression > _6394,monty::rc_ptr< ::mosek::fusion::Matrix > _6395){ return ::mosek::fusion::p_Expr::add_(_6394,1.0,::mosek::fusion::p_Expr::constTerm(_6395),(- 1.0)); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub  ( double _6396,    monty::rc_ptr< ::mosek::fusion::Expression > _6397) { return mosek::fusion::p_Expr::sub(_6396,_6397); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub( double _6396,monty::rc_ptr< ::mosek::fusion::Expression > _6397){ return ::mosek::fusion::p_Expr::add_(::mosek::fusion::p_Expr::constTerm(_6397->shape(),_6396),1.0,_6397,(- 1.0)); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub  ( monty::rc_ptr< ::mosek::fusion::Expression > _6398,    double _6399) { return mosek::fusion::p_Expr::sub(_6398,_6399); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub( monty::rc_ptr< ::mosek::fusion::Expression > _6398,double _6399){ return ::mosek::fusion::p_Expr::add_(_6398,1.0,::mosek::fusion::p_Expr::constTerm(_6398->shape(),_6399),(- 1.0)); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub  ( std::shared_ptr< monty::ndarray< double,2 > > _6400,    monty::rc_ptr< ::mosek::fusion::Expression > _6401) { return mosek::fusion::p_Expr::sub(_6400,_6401); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub( std::shared_ptr< monty::ndarray< double,2 > > _6400,monty::rc_ptr< ::mosek::fusion::Expression > _6401){ return ::mosek::fusion::p_Expr::add_(::mosek::fusion::p_Expr::constTerm(_6400),1.0,_6401,(- 1.0)); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub  ( std::shared_ptr< monty::ndarray< double,1 > > _6402,    monty::rc_ptr< ::mosek::fusion::Expression > _6403) { return mosek::fusion::p_Expr::sub(_6402,_6403); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub( std::shared_ptr< monty::ndarray< double,1 > > _6402,monty::rc_ptr< ::mosek::fusion::Expression > _6403){ return ::mosek::fusion::p_Expr::add_(::mosek::fusion::p_Expr::constTerm(_6402),1.0,_6403,(- 1.0)); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub  ( monty::rc_ptr< ::mosek::fusion::Expression > _6404,    std::shared_ptr< monty::ndarray< double,2 > > _6405) { return mosek::fusion::p_Expr::sub(_6404,_6405); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub( monty::rc_ptr< ::mosek::fusion::Expression > _6404,std::shared_ptr< monty::ndarray< double,2 > > _6405){ return ::mosek::fusion::p_Expr::add_(_6404,1.0,::mosek::fusion::p_Expr::constTerm(_6405),(- 1.0)); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub  ( monty::rc_ptr< ::mosek::fusion::Expression > _6406,    std::shared_ptr< monty::ndarray< double,1 > > _6407) { return mosek::fusion::p_Expr::sub(_6406,_6407); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub( monty::rc_ptr< ::mosek::fusion::Expression > _6406,std::shared_ptr< monty::ndarray< double,1 > > _6407){ return ::mosek::fusion::p_Expr::add_(_6406,1.0,::mosek::fusion::p_Expr::constTerm(_6407),(- 1.0)); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub  ( monty::rc_ptr< ::mosek::fusion::Variable > _6408,    monty::rc_ptr< ::mosek::fusion::Expression > _6409) { return mosek::fusion::p_Expr::sub(_6408,_6409); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub( monty::rc_ptr< ::mosek::fusion::Variable > _6408,monty::rc_ptr< ::mosek::fusion::Expression > _6409){ return ::mosek::fusion::p_Expr::add_(_6408->asExpr(),1.0,_6409,(- 1.0)); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub  ( monty::rc_ptr< ::mosek::fusion::Expression > _6410,    monty::rc_ptr< ::mosek::fusion::Variable > _6411) { return mosek::fusion::p_Expr::sub(_6410,_6411); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub( monty::rc_ptr< ::mosek::fusion::Expression > _6410,monty::rc_ptr< ::mosek::fusion::Variable > _6411){ return ::mosek::fusion::p_Expr::add_(_6410,1.0,_6411->asExpr(),(- 1.0)); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub  ( monty::rc_ptr< ::mosek::fusion::Expression > _6412,    monty::rc_ptr< ::mosek::fusion::Expression > _6413) { return mosek::fusion::p_Expr::sub(_6412,_6413); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub( monty::rc_ptr< ::mosek::fusion::Expression > _6412,monty::rc_ptr< ::mosek::fusion::Expression > _6413){ return ::mosek::fusion::p_Expr::add_(_6412,1.0,_6413,(- 1.0)); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( monty::rc_ptr< ::mosek::fusion::NDSparseArray > _6414,    monty::rc_ptr< ::mosek::fusion::Variable > _6415) { return mosek::fusion::p_Expr::add(_6414,_6415); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add( monty::rc_ptr< ::mosek::fusion::NDSparseArray > _6414,monty::rc_ptr< ::mosek::fusion::Variable > _6415){ return ::mosek::fusion::p_Expr::add_(::mosek::fusion::p_Expr::constTerm(_6414),1.0,_6415->asExpr(),1.0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( monty::rc_ptr< ::mosek::fusion::Variable > _6416,    monty::rc_ptr< ::mosek::fusion::NDSparseArray > _6417) { return mosek::fusion::p_Expr::add(_6416,_6417); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add( monty::rc_ptr< ::mosek::fusion::Variable > _6416,monty::rc_ptr< ::mosek::fusion::NDSparseArray > _6417){ return ::mosek::fusion::p_Expr::add_(::mosek::fusion::p_Expr::constTerm(_6417),1.0,_6416->asExpr(),1.0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( monty::rc_ptr< ::mosek::fusion::Matrix > _6418,    monty::rc_ptr< ::mosek::fusion::Variable > _6419) { return mosek::fusion::p_Expr::add(_6418,_6419); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add( monty::rc_ptr< ::mosek::fusion::Matrix > _6418,monty::rc_ptr< ::mosek::fusion::Variable > _6419){ return ::mosek::fusion::p_Expr::add_(::mosek::fusion::p_Expr::constTerm(_6418),1.0,_6419->asExpr(),1.0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( monty::rc_ptr< ::mosek::fusion::Variable > _6420,    monty::rc_ptr< ::mosek::fusion::Matrix > _6421) { return mosek::fusion::p_Expr::add(_6420,_6421); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add( monty::rc_ptr< ::mosek::fusion::Variable > _6420,monty::rc_ptr< ::mosek::fusion::Matrix > _6421){ return ::mosek::fusion::p_Expr::add_(::mosek::fusion::p_Expr::constTerm(_6421),1.0,_6420->asExpr(),1.0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( double _6422,    monty::rc_ptr< ::mosek::fusion::Variable > _6423) { return mosek::fusion::p_Expr::add(_6422,_6423); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add( double _6422,monty::rc_ptr< ::mosek::fusion::Variable > _6423){ return ::mosek::fusion::p_Expr::add_(::mosek::fusion::p_Expr::constTerm(_6423->shape(),_6422),1.0,_6423->asExpr(),1.0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( monty::rc_ptr< ::mosek::fusion::Variable > _6424,    double _6425) { return mosek::fusion::p_Expr::add(_6424,_6425); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add( monty::rc_ptr< ::mosek::fusion::Variable > _6424,double _6425){ return ::mosek::fusion::p_Expr::add_(::mosek::fusion::p_Expr::constTerm(_6424->shape(),_6425),1.0,_6424->asExpr(),1.0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( std::shared_ptr< monty::ndarray< double,2 > > _6426,    monty::rc_ptr< ::mosek::fusion::Variable > _6427) { return mosek::fusion::p_Expr::add(_6426,_6427); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add( std::shared_ptr< monty::ndarray< double,2 > > _6426,monty::rc_ptr< ::mosek::fusion::Variable > _6427){ return ::mosek::fusion::p_Expr::add_(::mosek::fusion::p_Expr::constTerm(_6426),1.0,_6427->asExpr(),1.0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( std::shared_ptr< monty::ndarray< double,1 > > _6428,    monty::rc_ptr< ::mosek::fusion::Variable > _6429) { return mosek::fusion::p_Expr::add(_6428,_6429); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add( std::shared_ptr< monty::ndarray< double,1 > > _6428,monty::rc_ptr< ::mosek::fusion::Variable > _6429){ return ::mosek::fusion::p_Expr::add_(::mosek::fusion::p_Expr::constTerm(_6428),1.0,_6429->asExpr(),1.0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( monty::rc_ptr< ::mosek::fusion::Variable > _6430,    std::shared_ptr< monty::ndarray< double,2 > > _6431) { return mosek::fusion::p_Expr::add(_6430,_6431); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add( monty::rc_ptr< ::mosek::fusion::Variable > _6430,std::shared_ptr< monty::ndarray< double,2 > > _6431){ return ::mosek::fusion::p_Expr::add_(::mosek::fusion::p_Expr::constTerm(_6431),1.0,_6430->asExpr(),1.0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( monty::rc_ptr< ::mosek::fusion::Variable > _6432,    std::shared_ptr< monty::ndarray< double,1 > > _6433) { return mosek::fusion::p_Expr::add(_6432,_6433); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add( monty::rc_ptr< ::mosek::fusion::Variable > _6432,std::shared_ptr< monty::ndarray< double,1 > > _6433){ return ::mosek::fusion::p_Expr::add_(::mosek::fusion::p_Expr::constTerm(_6433),1.0,_6432->asExpr(),1.0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( monty::rc_ptr< ::mosek::fusion::Variable > _6434,    monty::rc_ptr< ::mosek::fusion::Variable > _6435) { return mosek::fusion::p_Expr::add(_6434,_6435); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add( monty::rc_ptr< ::mosek::fusion::Variable > _6434,monty::rc_ptr< ::mosek::fusion::Variable > _6435){ return ::mosek::fusion::p_Expr::add_(_6434->asExpr(),1.0,_6435->asExpr(),1.0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( monty::rc_ptr< ::mosek::fusion::NDSparseArray > _6436,    monty::rc_ptr< ::mosek::fusion::Expression > _6437) { return mosek::fusion::p_Expr::add(_6436,_6437); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add( monty::rc_ptr< ::mosek::fusion::NDSparseArray > _6436,monty::rc_ptr< ::mosek::fusion::Expression > _6437){ return ::mosek::fusion::p_Expr::add_(_6437,1.0,::mosek::fusion::p_Expr::constTerm(_6436),1.0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( monty::rc_ptr< ::mosek::fusion::Expression > _6438,    monty::rc_ptr< ::mosek::fusion::NDSparseArray > _6439) { return mosek::fusion::p_Expr::add(_6438,_6439); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add( monty::rc_ptr< ::mosek::fusion::Expression > _6438,monty::rc_ptr< ::mosek::fusion::NDSparseArray > _6439){ return ::mosek::fusion::p_Expr::add_(_6438,1.0,::mosek::fusion::p_Expr::constTerm(_6439),1.0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( monty::rc_ptr< ::mosek::fusion::Matrix > _6440,    monty::rc_ptr< ::mosek::fusion::Expression > _6441) { return mosek::fusion::p_Expr::add(_6440,_6441); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add( monty::rc_ptr< ::mosek::fusion::Matrix > _6440,monty::rc_ptr< ::mosek::fusion::Expression > _6441){ return ::mosek::fusion::p_Expr::add_(_6441,1.0,::mosek::fusion::p_Expr::constTerm(_6440),1.0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( monty::rc_ptr< ::mosek::fusion::Expression > _6442,    monty::rc_ptr< ::mosek::fusion::Matrix > _6443) { return mosek::fusion::p_Expr::add(_6442,_6443); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add( monty::rc_ptr< ::mosek::fusion::Expression > _6442,monty::rc_ptr< ::mosek::fusion::Matrix > _6443){ return ::mosek::fusion::p_Expr::add_(_6442,1.0,::mosek::fusion::p_Expr::constTerm(_6443),1.0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( double _6444,    monty::rc_ptr< ::mosek::fusion::Expression > _6445) { return mosek::fusion::p_Expr::add(_6444,_6445); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add( double _6444,monty::rc_ptr< ::mosek::fusion::Expression > _6445){ return ::mosek::fusion::p_Expr::add_(_6445,1.0,::mosek::fusion::p_Expr::constTerm(_6445->shape(),_6444),1.0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( monty::rc_ptr< ::mosek::fusion::Expression > _6446,    double _6447) { return mosek::fusion::p_Expr::add(_6446,_6447); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add( monty::rc_ptr< ::mosek::fusion::Expression > _6446,double _6447){ return ::mosek::fusion::p_Expr::add_(_6446,1.0,::mosek::fusion::p_Expr::constTerm(_6446->shape(),_6447),1.0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( std::shared_ptr< monty::ndarray< double,2 > > _6448,    monty::rc_ptr< ::mosek::fusion::Expression > _6449) { return mosek::fusion::p_Expr::add(_6448,_6449); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add( std::shared_ptr< monty::ndarray< double,2 > > _6448,monty::rc_ptr< ::mosek::fusion::Expression > _6449){ return ::mosek::fusion::p_Expr::add_(_6449,1.0,::mosek::fusion::p_Expr::constTerm(_6448),1.0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( std::shared_ptr< monty::ndarray< double,1 > > _6450,    monty::rc_ptr< ::mosek::fusion::Expression > _6451) { return mosek::fusion::p_Expr::add(_6450,_6451); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add( std::shared_ptr< monty::ndarray< double,1 > > _6450,monty::rc_ptr< ::mosek::fusion::Expression > _6451){ return ::mosek::fusion::p_Expr::add_(_6451,1.0,::mosek::fusion::p_Expr::constTerm(_6450),1.0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( monty::rc_ptr< ::mosek::fusion::Expression > _6452,    std::shared_ptr< monty::ndarray< double,2 > > _6453) { return mosek::fusion::p_Expr::add(_6452,_6453); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add( monty::rc_ptr< ::mosek::fusion::Expression > _6452,std::shared_ptr< monty::ndarray< double,2 > > _6453){ return ::mosek::fusion::p_Expr::add_(_6452,1.0,::mosek::fusion::p_Expr::constTerm(_6453),1.0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( monty::rc_ptr< ::mosek::fusion::Expression > _6454,    std::shared_ptr< monty::ndarray< double,1 > > _6455) { return mosek::fusion::p_Expr::add(_6454,_6455); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add( monty::rc_ptr< ::mosek::fusion::Expression > _6454,std::shared_ptr< monty::ndarray< double,1 > > _6455){ return ::mosek::fusion::p_Expr::add_(_6454,1.0,::mosek::fusion::p_Expr::constTerm(_6455),1.0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( monty::rc_ptr< ::mosek::fusion::Variable > _6456,    monty::rc_ptr< ::mosek::fusion::Expression > _6457) { return mosek::fusion::p_Expr::add(_6456,_6457); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add( monty::rc_ptr< ::mosek::fusion::Variable > _6456,monty::rc_ptr< ::mosek::fusion::Expression > _6457){ return ::mosek::fusion::p_Expr::add_(_6456->asExpr(),1.0,_6457,1.0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( monty::rc_ptr< ::mosek::fusion::Expression > _6458,    monty::rc_ptr< ::mosek::fusion::Variable > _6459) { return mosek::fusion::p_Expr::add(_6458,_6459); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add( monty::rc_ptr< ::mosek::fusion::Expression > _6458,monty::rc_ptr< ::mosek::fusion::Variable > _6459){ return ::mosek::fusion::p_Expr::add_(_6458,1.0,_6459->asExpr(),1.0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( monty::rc_ptr< ::mosek::fusion::Expression > _6460,    monty::rc_ptr< ::mosek::fusion::Expression > _6461) { return mosek::fusion::p_Expr::add(_6460,_6461); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add( monty::rc_ptr< ::mosek::fusion::Expression > _6460,monty::rc_ptr< ::mosek::fusion::Expression > _6461){ return ::mosek::fusion::p_Expr::add_(_6460,1.0,_6461,1.0); }monty::rc_ptr< ::mosek::fusion::Set > mosek::fusion::Expr::shape  ( ) { return mosek::fusion::p_Expr::_get_impl(this)->shape(); }monty::rc_ptr< ::mosek::fusion::Set > mosek::fusion::p_Expr::shape( ){ return shape_p; }monty::rc_ptr< ::mosek::fusion::Set > mosek::fusion::Expr::getShape  ( ) { return mosek::fusion::p_Expr::_get_impl(this)->getShape(); }monty::rc_ptr< ::mosek::fusion::Set > mosek::fusion::p_Expr::getShape( ){ return shape_p; }monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::Expr::getModel  ( ) { return mosek::fusion::p_Expr::_get_impl(this)->getModel(); }monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::p_Expr::getModel( ){ return model; }void mosek::fusion::p_Expr::validateData( std::shared_ptr< monty::ndarray< long long,1 > > _6462,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _6463,std::shared_ptr< monty::ndarray< long long,1 > > _6464,std::shared_ptr< monty::ndarray< double,1 > > _6465,std::shared_ptr< monty::ndarray< double,1 > > _6466,monty::rc_ptr< ::mosek::fusion::Set > _6467,std::shared_ptr< monty::ndarray< long long,1 > > _6468){ int _6469 = ((int)((_6462)->size(0)) - (int)1); long long _6470 = ((*_6462)(((int)((_6462)->size(0)) - (int)1))); long long _6471 = (long long)0; if (! _6463){ throw ::mosek::fusion::ExpressionError(std::string ("Array v must not be null"));}else {}int _9481 = (int)0; int _9482 = (int)((_6463)->size(0)); for (int _6472 = _9481;_6472<_9482;++_6472){ if (! ((*_6463)(_6472))){ throw ::mosek::fusion::ExpressionError(std::string ("Array elements of v must not be null"));}else { (_6471 = (_6471 + ((*_6463)(_6472))->size())); }}if (((int)((_6462)->size(0)) < (int)1)){ throw ::mosek::fusion::ExpressionError(std::string ("Array 'ptrb' in expression has wrong size"));}else {}if ((_6470 != (int)((_6464)->size(0)))){ throw ::mosek::fusion::ExpressionError(std::string ("Array 'subj' in expression has wrong size"));}else {}if ((_6470 != (int)((_6465)->size(0)))){ throw ::mosek::fusion::ExpressionError(std::string ("Array 'cof' in expression has wrong size"));}else {}if ((_6466 && (_6469 != (int)((_6466)->size(0))))){ throw ::mosek::fusion::ExpressionError(std::string ("Array 'bfix' in expression has wrong length"));}else {}if (_6467){ if ((_6468 && ((int)((_6468)->size(0)) < mosek::fusion::p_Set::_get_impl(_6467)->size))){ std::shared_ptr< monty::ndarray< long long,1 > > _6473 = _6468; if (((int)((_6473)->size(0)) != ((int)((_6462)->size(0)) - (int)1))){ throw ::mosek::fusion::ExpressionError(std::string ("Array 'inst' in expression has wrong length"));}else {}if (((int)((_6473)->size(0)) > (int)0)){ if (((((*_6473)((int)0)) < (int)0) || (((*_6473)((int)0)) >= mosek::fusion::p_Set::_get_impl(_6467)->size))){ throw ::mosek::fusion::ExpressionError(std::string ("Array 'inst' contains an invalid index"));}else {}bool _6474 = true; long long _6475 = mosek::fusion::p_Set::_get_impl(_6467)->size; int _9483 = (int)1; int _9484 = (int)((_6473)->size(0)); for (int _6476 = _9483;_6476<_9484;++_6476){ (_6474 = (_6474 && ((((*_6473)(_6476)) >= (int)0) && ((((*_6473)(_6476)) < _6475) && (((*_6473)(_6476)) > ((*_6473)((_6476 - (int)1)))))))); }if ((! _6474)){ throw ::mosek::fusion::ExpressionError(std::string ("Invalid array 'inst'"));}else {}}else {}}else { if ((mosek::fusion::p_Set::_get_impl(_6467)->size != ((long long)((_6462)->size(0)) - (long long)1))){ throw ::mosek::fusion::ExpressionError(std::string ("Array 'ptrb' in expression has wrong length"));}else {}}}else if (_6468){ throw ::mosek::fusion::ExpressionError(std::string ("Undefined expression shape"));}else {}bool _6477 = false; bool _6478 = false; if ((((*_6462)((int)0)) != (long long)0)){ throw ::mosek::fusion::ExpressionError(std::string ("Invalid 'ptrb' argument in expression"));}else {}bool _6479 = true; int _9485 = (int)0; int _9486 = _6469; for (int _6480 = _9485;_6480<_9486;++_6480){ (_6479 = (_6479 && (((*_6462)(_6480)) <= ((*_6462)((_6480 + (int)1)))))); }if ((! _6479)){ throw ::mosek::fusion::ExpressionError(std::string ("Invalid 'ptrb' argument in expression"));}else {}bool _6481 = true; int _9487 = (int)0; long long _9488 = _6470; for (long long _6482 = _9487;_6482<_9488;++_6482){ (_6481 = (_6481 && ((((*_6464)(_6482)) >= (int)0) && (((*_6464)(_6482)) < _6471)))); }if ((! _6481)){ throw ::mosek::fusion::ExpressionError(std::string ("Invalid 'subj' argument in expression"));}else {}}monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::p_Expr::extractModel( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _6483){ return ([&]() -> monty::rc_ptr< ::mosek::fusion::Model > { if ( (! _6483 || ((int)((_6483)->size(0)) == (int)0))) return (nullptr); else return (((*_6483)((int)0))->getModel()); })(); }void mosek::fusion::p_Expr::destroy(){varsb.reset();inst.reset();cof_v.reset();x.reset();subj.reset();ptrb.reset();bfix.reset();shape_p.reset();model.reset();}void mosek::fusion::Expr::destroy() { mosek::fusion::p_Expr::_get_impl(this)->destroy(); }mosek::fusion::FlatExpr::FlatExpr(mosek::fusion::p_FlatExpr *_impl) : _impl(_impl) { /*std::cout << "FlatExpr() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::FlatExpr::~FlatExpr() { delete _impl; _impl = nullptr; }mosek::fusion::p_FlatExpr::p_FlatExpr  (::mosek::fusion::FlatExpr * _pubthis) :     _pubthis(_pubthis){}mosek::fusion::FlatExpr::t mosek::fusion::p_FlatExpr::_new_FlatExpr  (monty::rc_ptr< ::mosek::fusion::FlatExpr > _6484){ return new mosek::fusion::FlatExpr(_6484); }mosek::fusion::FlatExpr::FlatExpr  (monty::rc_ptr< ::mosek::fusion::FlatExpr > _6484) :    FlatExpr(new mosek::fusion::p_FlatExpr(this)){ mosek::fusion::p_FlatExpr::_get_impl(this)->_initialize(_6484); }void mosek::fusion::p_FlatExpr::_initialize  (monty::rc_ptr< ::mosek::fusion::FlatExpr > _6484){monty::rc_reserve __reserve_this(_pubthis); { { if (mosek::fusion::p_FlatExpr::_get_impl(_6484)->bfix){ (bfix = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_FlatExpr::_get_impl(_6484)->bfix)); }else { (bfix = nullptr); }(ptrb = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_FlatExpr::_get_impl(_6484)->ptrb)); (subj = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_FlatExpr::_get_impl(_6484)->subj)); (x = mosek::fusion::p_FlatExpr::_get_impl(_6484)->x); (cof = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_FlatExpr::_get_impl(_6484)->cof)); (nnz = mosek::fusion::p_FlatExpr::_get_impl(_6484)->nnz); (shape = mosek::fusion::p_FlatExpr::_get_impl(_6484)->shape); (inst = mosek::fusion::p_FlatExpr::_get_impl(_6484)->inst); }}}mosek::fusion::FlatExpr::t mosek::fusion::p_FlatExpr::_new_FlatExpr  (std::shared_ptr< monty::ndarray< double,1 > > _6485,    std::shared_ptr< monty::ndarray< long long,1 > > _6486,    std::shared_ptr< monty::ndarray< long long,1 > > _6487,    std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _6488,    std::shared_ptr< monty::ndarray< double,1 > > _6489,    monty::rc_ptr< ::mosek::fusion::Set > _6490,    std::shared_ptr< monty::ndarray< long long,1 > > _6491){ return new mosek::fusion::FlatExpr(_6485,_6486,_6487,_6488,_6489,_6490,_6491); }mosek::fusion::FlatExpr::FlatExpr  (std::shared_ptr< monty::ndarray< double,1 > > _6485,    std::shared_ptr< monty::ndarray< long long,1 > > _6486,    std::shared_ptr< monty::ndarray< long long,1 > > _6487,    std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _6488,    std::shared_ptr< monty::ndarray< double,1 > > _6489,    monty::rc_ptr< ::mosek::fusion::Set > _6490,    std::shared_ptr< monty::ndarray< long long,1 > > _6491) :    FlatExpr(new mosek::fusion::p_FlatExpr(this)){ mosek::fusion::p_FlatExpr::_get_impl(this)->_initialize(_6485,_6486,_6487,_6488,_6489,_6490,_6491); }void mosek::fusion::p_FlatExpr::_initialize  (std::shared_ptr< monty::ndarray< double,1 > > _6485,    std::shared_ptr< monty::ndarray< long long,1 > > _6486,    std::shared_ptr< monty::ndarray< long long,1 > > _6487,    std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _6488,    std::shared_ptr< monty::ndarray< double,1 > > _6489,    monty::rc_ptr< ::mosek::fusion::Set > _6490,    std::shared_ptr< monty::ndarray< long long,1 > > _6491){monty::rc_reserve __reserve_this(_pubthis); { { if ((_6485 && ((int)((_6485)->size(0)) != ((int)((_6486)->size(0)) - (int)1)))){ throw ::mosek::fusion::SparseFormatError(std::string ("Mismatching lengths of bfix and ptrb"));}else {}if ((! _6489 || (! _6487 || ((int)((_6487)->size(0)) != (int)((_6489)->size(0)))))){ throw ::mosek::fusion::SparseFormatError(std::string ("Mismatching lengths of subj and cof"));}else {}if (_6490){ if (_6491){ if (((int)((_6491)->size(0)) != ((int)((_6486)->size(0)) - (int)1))){ throw ::mosek::fusion::SparseFormatError(std::string ("Mismatching lengths of inst and ptrb"));}else {}}else if ((mosek::fusion::p_Set::_get_impl(_6490)->size != ((long long)((_6486)->size(0)) - (int)1))){ throw ::mosek::fusion::SparseFormatError(std::string ("Mismatching shape and ptrb"));}else {}}else {}(bfix = _6485); (ptrb = _6486); (subj = _6487); (x = _6488); (cof = _6489); (nnz = ((*ptrb)(((int)((ptrb)->size(0)) - (int)1)))); (shape = _6490); (inst = _6491); }}}std::string mosek::fusion::FlatExpr::toString  ( ) { return mosek::fusion::p_FlatExpr::_get_impl(this)->toString(); }std::string mosek::fusion::p_FlatExpr::toString( ){ monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _6492 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer(); mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_6492.get())->a(std::string ("FlatExpr:")).get())->lf().get())->a(std::string ("+-----------------")).get())->lf().get())->a(std::string ("| ptrb[")).get())->a((int)((ptrb)->size(0))).get())->a(std::string ("] = ")).get())->a(ptrb).get())->lf().get())->a(std::string ("| subj[")).get())->a((int)((subj)->size(0))).get())->a(std::string ("] = ")).get())->a(subj).get())->lf().get())->a(std::string ("| cof [")).get())->a((int)((cof)->size(0))).get())->a(std::string ("] = ")).get())->a(cof).get())->lf().get())->a(std::string ("| bfix[")); if (bfix){ mosek::fusion::Utils::p_StringBuffer::_get_impl(_6492.get())->a((int)((bfix)->size(0))); }else {}mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_6492.get())->a(std::string ("] = ")).get())->a(bfix).get())->lf().get())->a(std::string ("| inst[")); if (inst){ mosek::fusion::Utils::p_StringBuffer::_get_impl(_6492.get())->a((int)((inst)->size(0))); }else {}mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_6492.get())->a(std::string ("] = ")).get())->a(inst).get())->lf().get())->a(std::string ("+-----------------")); return mosek::fusion::Utils::p_StringBuffer::_get_impl(_6492.get())->toString(); }int mosek::fusion::FlatExpr::size  ( ) { return mosek::fusion::p_FlatExpr::_get_impl(this)->size(); }int mosek::fusion::p_FlatExpr::size( ){ return ((int)((ptrb)->size(0)) - (int)1); }void mosek::fusion::p_FlatExpr::destroy(){inst.reset();shape.reset();cof.reset();x.reset();subj.reset();ptrb.reset();bfix.reset();}void mosek::fusion::FlatExpr::destroy() { mosek::fusion::p_FlatExpr::_get_impl(this)->destroy(); }mosek::fusion::SymmetricMatrix::SymmetricMatrix(mosek::fusion::p_SymmetricMatrix *_impl) : _impl(_impl) { /*std::cout << "SymmetricMatrix() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::SymmetricMatrix::~SymmetricMatrix() { delete _impl; _impl = nullptr; }mosek::fusion::p_SymmetricMatrix::p_SymmetricMatrix  (::mosek::fusion::SymmetricMatrix * _pubthis) :     _pubthis(_pubthis){}mosek::fusion::SymmetricMatrix::t mosek::fusion::p_SymmetricMatrix::_new_SymmetricMatrix  (int _6493,    int _6494,    std::shared_ptr< monty::ndarray< int,1 > > _6495,    std::shared_ptr< monty::ndarray< int,1 > > _6496,    std::shared_ptr< monty::ndarray< double,1 > > _6497,    std::shared_ptr< monty::ndarray< int,1 > > _6498,    std::shared_ptr< monty::ndarray< int,1 > > _6499,    std::shared_ptr< monty::ndarray< double,1 > > _6500,    double _6501){ return new mosek::fusion::SymmetricMatrix(_6493,_6494,_6495,_6496,_6497,_6498,_6499,_6500,_6501); }mosek::fusion::SymmetricMatrix::SymmetricMatrix  (int _6493,    int _6494,    std::shared_ptr< monty::ndarray< int,1 > > _6495,    std::shared_ptr< monty::ndarray< int,1 > > _6496,    std::shared_ptr< monty::ndarray< double,1 > > _6497,    std::shared_ptr< monty::ndarray< int,1 > > _6498,    std::shared_ptr< monty::ndarray< int,1 > > _6499,    std::shared_ptr< monty::ndarray< double,1 > > _6500,    double _6501) :    SymmetricMatrix(new mosek::fusion::p_SymmetricMatrix(this)){ mosek::fusion::p_SymmetricMatrix::_get_impl(this)->_initialize(_6493,_6494,_6495,_6496,_6497,_6498,_6499,_6500,_6501); }void mosek::fusion::p_SymmetricMatrix::_initialize  (int _6493,    int _6494,    std::shared_ptr< monty::ndarray< int,1 > > _6495,    std::shared_ptr< monty::ndarray< int,1 > > _6496,    std::shared_ptr< monty::ndarray< double,1 > > _6497,    std::shared_ptr< monty::ndarray< int,1 > > _6498,    std::shared_ptr< monty::ndarray< int,1 > > _6499,    std::shared_ptr< monty::ndarray< double,1 > > _6500,    double _6501){monty::rc_reserve __reserve_this(_pubthis); { { (mosek::fusion::p_SymmetricMatrix::_get_impl(_pubthis)->d0 = _6493); (mosek::fusion::p_SymmetricMatrix::_get_impl(_pubthis)->d1 = _6494); (mosek::fusion::p_SymmetricMatrix::_get_impl(_pubthis)->usubi = _6495); (mosek::fusion::p_SymmetricMatrix::_get_impl(_pubthis)->usubj = _6496); (mosek::fusion::p_SymmetricMatrix::_get_impl(_pubthis)->uval = _6497); (mosek::fusion::p_SymmetricMatrix::_get_impl(_pubthis)->vsubi = _6498); (mosek::fusion::p_SymmetricMatrix::_get_impl(_pubthis)->vsubj = _6499); (mosek::fusion::p_SymmetricMatrix::_get_impl(_pubthis)->vval = _6500); (mosek::fusion::p_SymmetricMatrix::_get_impl(_pubthis)->scale = _6501); (nnz = (- (int)1)); }}}monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::SymmetricMatrix::rankOne  ( int _6502,    std::shared_ptr< monty::ndarray< int,1 > > _6503,    std::shared_ptr< monty::ndarray< double,1 > > _6504) { return mosek::fusion::p_SymmetricMatrix::rankOne(_6502,_6503,_6504); }monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::p_SymmetricMatrix::rankOne( int _6502,std::shared_ptr< monty::ndarray< int,1 > > _6503,std::shared_ptr< monty::ndarray< double,1 > > _6504){ if (((int)((_6503)->size(0)) != (int)((_6504)->size(0)))){ throw ::mosek::fusion::LengthError(std::string ("Mismatching array lengths"));}else {}int _9489 = (int)0; int _9490 = (int)((_6503)->size(0)); for (int _6505 = _9489;_6505<_9490;++_6505){ if (((((*_6503)(_6505)) < (int)0) || (((*_6503)(_6505)) >= _6502))){ throw ::mosek::fusion::LengthError(std::string ("Invalid index in argument 'sub'"));}else {}}std::shared_ptr< monty::ndarray< int,1 > > _6506 = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _9491; for (int _6507=(int)0, _9492=(int)((_6503)->size(0)); _6507 < _9492;++_6507)_9491.push_back(((*_6503)(_6507))); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9491.size()),_9491.begin(),_9491.end())); })(); std::shared_ptr< monty::ndarray< int,1 > > _6508 = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _9493; for (int _6509=(int)0, _9494=(int)((_6503)->size(0)); _6509 < _9494;++_6509)_9493.push_back((int)1); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9493.size()),_9493.begin(),_9493.end())); })(); std::shared_ptr< monty::ndarray< double,1 > > _6510 = ([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _9495; for (int _6511=(int)0, _9496=(int)((_6504)->size(0)); _6511 < _9496;++_6511)_9495.push_back(((*_6504)(_6511))); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9495.size()),_9495.begin(),_9495.end())); })(); return ::mosek::fusion::p_SymmetricMatrix::_new_SymmetricMatrix(_6502,(int)1,_6506,_6508,_6510,_6506,_6508,_6510,1.0); }monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::SymmetricMatrix::rankOne  ( std::shared_ptr< monty::ndarray< double,1 > > _6512) { return mosek::fusion::p_SymmetricMatrix::rankOne(_6512); }monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::p_SymmetricMatrix::rankOne( std::shared_ptr< monty::ndarray< double,1 > > _6512){ int _6513 = (int)((_6512)->size(0)); std::shared_ptr< monty::ndarray< int,1 > > _6514 = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _9497; for (int _6515=(int)0, _9498=_6513; _6515 < _9498;++_6515)_9497.push_back(_6515); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9497.size()),_9497.begin(),_9497.end())); })(); std::shared_ptr< monty::ndarray< int,1 > > _6516 = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _9499; for (int _6517=(int)0, _9500=_6513; _6517 < _9500;++_6517)_9499.push_back((int)1); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9499.size()),_9499.begin(),_9499.end())); })(); std::shared_ptr< monty::ndarray< double,1 > > _6518 = ([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _9501; for (int _6519=(int)0, _9502=_6513; _6519 < _9502;++_6519)_9501.push_back(((*_6512)(_6519))); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9501.size()),_9501.begin(),_9501.end())); })(); return ::mosek::fusion::p_SymmetricMatrix::_new_SymmetricMatrix(_6513,(int)1,_6514,_6516,_6518,_6514,_6516,_6518,1.0); }monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::SymmetricMatrix::antiDiag  ( std::shared_ptr< monty::ndarray< double,1 > > _6520) { return mosek::fusion::p_SymmetricMatrix::antiDiag(_6520); }monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::p_SymmetricMatrix::antiDiag( std::shared_ptr< monty::ndarray< double,1 > > _6520){ int _6521 = (int)((_6520)->size(0)); std::shared_ptr< monty::ndarray< int,1 > > _6522 = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _9503; for (int _6523=(int)0, _9504=_6521; _6523 < _9504;++_6523)_9503.push_back(_6523); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9503.size()),_9503.begin(),_9503.end())); })(); return ::mosek::fusion::p_SymmetricMatrix::_new_SymmetricMatrix(_6521,_6521,_6522,([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _9505; for (int _6524=(int)0, _9506=_6521; _6524 < _9506;++_6524)_9505.push_back((_6521 - _6524)); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9505.size()),_9505.begin(),_9505.end())); })(),([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _9507; for (int _6525=(int)0, _9508=_6521; _6525 < _9508;++_6525)_9507.push_back(((*_6520)(_6525))); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9507.size()),_9507.begin(),_9507.end())); })(),_6522,_6522,([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _9509; for (int _6526=(int)0, _9510=_6521; _6526 < _9510;++_6526)_9509.push_back(1.0); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9509.size()),_9509.begin(),_9509.end())); })(),1.0); }monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::SymmetricMatrix::diag  ( std::shared_ptr< monty::ndarray< double,1 > > _6527) { return mosek::fusion::p_SymmetricMatrix::diag(_6527); }monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::p_SymmetricMatrix::diag( std::shared_ptr< monty::ndarray< double,1 > > _6527){ int _6528 = (int)((_6527)->size(0)); std::shared_ptr< monty::ndarray< int,1 > > _6529 = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _9511; for (int _6530=(int)0, _9512=_6528; _6530 < _9512;++_6530)_9511.push_back(_6530); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9511.size()),_9511.begin(),_9511.end())); })(); return ::mosek::fusion::p_SymmetricMatrix::_new_SymmetricMatrix(_6528,_6528,_6529,_6529,([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _9513; for (int _6531=(int)0, _9514=_6528; _6531 < _9514;++_6531)_9513.push_back(((*_6527)(_6531))); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9513.size()),_9513.begin(),_9513.end())); })(),_6529,_6529,([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _9515; for (int _6532=(int)0, _9516=_6528; _6532 < _9516;++_6532)_9515.push_back(1.0); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9515.size()),_9515.begin(),_9515.end())); })(),1.0); }monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::SymmetricMatrix::add  ( monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _6533) { return mosek::fusion::p_SymmetricMatrix::_get_impl(this)->add(_6533); }monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::p_SymmetricMatrix::add( monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _6533){ int _6534 = _pubthis->getdim(); if ((_6533->getdim() != _6534)){ throw ::mosek::fusion::DimensionError(std::string ("Mismatching dimensions"));}else {}int _6535 = (int)((usubi)->size(0)); int _6536 = (int)((mosek::fusion::p_SymmetricMatrix::_get_impl(_6533)->usubi)->size(0)); int _6537 = (_6535 + _6536); int _6538 = (int)((vsubi)->size(0)); int _6539 = (int)((mosek::fusion::p_SymmetricMatrix::_get_impl(_6533)->vsubi)->size(0)); int _6540 = (_6538 + _6539); std::shared_ptr< monty::ndarray< int,1 > > _6541 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6537))); std::shared_ptr< monty::ndarray< int,1 > > _6542 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6537))); std::shared_ptr< monty::ndarray< double,1 > > _6543 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_6537))); std::shared_ptr< monty::ndarray< int,1 > > _6544 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6540))); std::shared_ptr< monty::ndarray< int,1 > > _6545 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6540))); std::shared_ptr< monty::ndarray< double,1 > > _6546 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_6540))); ::mosek::fusion::Utils::Tools::arraycopy(usubi,(int)0,_6541,(int)0,_6535); ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SymmetricMatrix::_get_impl(_6533)->usubi,(int)0,_6541,_6535,_6536); ::mosek::fusion::Utils::Tools::arraycopy(usubj,(int)0,_6542,(int)0,_6535); int _9517 = (int)0; int _9518 = _6536; for (int _6547 = _9517;_6547<_9518;++_6547){ (((*_6542)((_6547 + _6535))) = (((*mosek::fusion::p_SymmetricMatrix::_get_impl(_6533)->usubj)(_6547)) + d1)); }if (((scale > 1.0) || (scale < 1.0))){ ::mosek::fusion::Utils::Tools::arraycopy(uval,(int)0,_6543,(int)0,_6535); }else { int _9519 = (int)0; int _9520 = _6535; for (int _6548 = _9519;_6548<_9520;++_6548){ (((*_6543)(_6548)) = (scale * ((*uval)(_6548)))); }}if (((mosek::fusion::p_SymmetricMatrix::_get_impl(_6533)->scale > 1.0) || (mosek::fusion::p_SymmetricMatrix::_get_impl(_6533)->scale < 1.0))){ ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SymmetricMatrix::_get_impl(_6533)->uval,(int)0,_6543,_6535,_6536); }else { int _9521 = (int)0; int _9522 = _6536; for (int _6549 = _9521;_6549<_9522;++_6549){ (((*_6543)((_6549 + _6535))) = (mosek::fusion::p_SymmetricMatrix::_get_impl(_6533)->scale * ((*mosek::fusion::p_SymmetricMatrix::_get_impl(_6533)->uval)(_6549)))); }}::mosek::fusion::Utils::Tools::arraycopy(usubi,(int)0,_6541,(int)0,_6535); int _9523 = (int)0; int _9524 = _6539; for (int _6550 = _9523;_6550<_9524;++_6550){ (((*_6544)((_6550 + _6538))) = (((*mosek::fusion::p_SymmetricMatrix::_get_impl(_6533)->vsubi)(_6550)) + mosek::fusion::p_SymmetricMatrix::_get_impl(_6533)->d1)); }::mosek::fusion::Utils::Tools::arraycopy(vsubj,(int)0,_6545,(int)0,_6538); ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SymmetricMatrix::_get_impl(_6533)->vsubj,_6538,_6545,_6538,_6539); if (((scale > 1.0) || (scale < 1.0))){ ::mosek::fusion::Utils::Tools::arraycopy(vval,(int)0,_6546,(int)0,_6538); }else { int _9525 = (int)0; int _9526 = _6538; for (int _6551 = _9525;_6551<_9526;++_6551){ (((*_6546)(_6551)) = (scale * ((*vval)(_6551)))); }}if (((mosek::fusion::p_SymmetricMatrix::_get_impl(_6533)->scale > 1.0) || (mosek::fusion::p_SymmetricMatrix::_get_impl(_6533)->scale < 1.0))){ ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SymmetricMatrix::_get_impl(_6533)->vval,(int)0,_6546,_6538,_6539); }else { int _9527 = (int)0; int _9528 = _6539; for (int _6552 = _9527;_6552<_9528;++_6552){ (((*_6546)((_6552 + _6538))) = (mosek::fusion::p_SymmetricMatrix::_get_impl(_6533)->scale * ((*mosek::fusion::p_SymmetricMatrix::_get_impl(_6533)->vval)(_6552)))); }}return ::mosek::fusion::p_SymmetricMatrix::_new_SymmetricMatrix(d0,(d1 + mosek::fusion::p_SymmetricMatrix::_get_impl(_6533)->d1),_6541,_6542,_6543,_6544,_6545,_6546,1.0); }monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::SymmetricMatrix::sub  ( monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _6553) { return mosek::fusion::p_SymmetricMatrix::_get_impl(this)->sub(_6553); }monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::p_SymmetricMatrix::sub( monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _6553){ return _pubthis->add(_6553->mul((- 1.0))); }monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::SymmetricMatrix::mul  ( double _6554) { return mosek::fusion::p_SymmetricMatrix::_get_impl(this)->mul(_6554); }monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::p_SymmetricMatrix::mul( double _6554){ return ::mosek::fusion::p_SymmetricMatrix::_new_SymmetricMatrix(d0,d1,usubi,usubj,uval,vsubi,vsubj,vval,(scale * _6554)); }int mosek::fusion::SymmetricMatrix::getdim  ( ) { return mosek::fusion::p_SymmetricMatrix::_get_impl(this)->getdim(); }int mosek::fusion::p_SymmetricMatrix::getdim( ){ return d0; }void mosek::fusion::p_SymmetricMatrix::destroy(){vval.reset();vsubj.reset();vsubi.reset();uval.reset();usubj.reset();usubi.reset();}void mosek::fusion::SymmetricMatrix::destroy() { mosek::fusion::p_SymmetricMatrix::_get_impl(this)->destroy(); }mosek::fusion::NDSparseArray::NDSparseArray(mosek::fusion::p_NDSparseArray *_impl) : _impl(_impl) { /*std::cout << "NDSparseArray() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::NDSparseArray::~NDSparseArray() { delete _impl; _impl = nullptr; }mosek::fusion::p_NDSparseArray::p_NDSparseArray  (::mosek::fusion::NDSparseArray * _pubthis) :     _pubthis(_pubthis){}mosek::fusion::NDSparseArray::t mosek::fusion::p_NDSparseArray::_new_NDSparseArray  (std::shared_ptr< monty::ndarray< int,1 > > _6555,    std::shared_ptr< monty::ndarray< int,2 > > _6556,    std::shared_ptr< monty::ndarray< double,1 > > _6557){ return new mosek::fusion::NDSparseArray(_6555,_6556,_6557); }mosek::fusion::NDSparseArray::NDSparseArray  (std::shared_ptr< monty::ndarray< int,1 > > _6555,    std::shared_ptr< monty::ndarray< int,2 > > _6556,    std::shared_ptr< monty::ndarray< double,1 > > _6557) :    NDSparseArray(new mosek::fusion::p_NDSparseArray(this)){ mosek::fusion::p_NDSparseArray::_get_impl(this)->_initialize(_6555,_6556,_6557); }void mosek::fusion::p_NDSparseArray::_initialize  (std::shared_ptr< monty::ndarray< int,1 > > _6555,    std::shared_ptr< monty::ndarray< int,2 > > _6556,    std::shared_ptr< monty::ndarray< double,1 > > _6557){monty::rc_reserve __reserve_this(_pubthis); { { std::shared_ptr< monty::ndarray< long long,1 > > _6558 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((_6556)->size(0))))); (size = (long long)1); int _9529 = (int)0; int _9530 = (int)((_6555)->size(0)); for (int _6559 = _9529;_6559<_9530;++_6559){ (size = (size * ((*_6555)(_6559)))); }int _6560 = (int)((_6555)->size(0)); if (((int)((_6556)->size(0)) != (int)((_6557)->size(0)))){ throw ::mosek::fusion::LengthError(std::string ("Mismatching data array length"));}else {}if (((int)((_6556)->size(1)) != _6560)){ throw ::mosek::fusion::IndexError(std::string ("An index key in sub has wrong length"));}else {}int _9531 = (int)0; int _9532 = (int)((_6556)->size(0)); for (int _6561 = _9531;_6561<_9532;++_6561){ int _9533 = (int)0; int _9534 = (int)((_6556)->size(1)); for (int _6562 = _9533;_6562<_9534;++_6562){ if (((((*_6556)(_6561,_6562)) < (int)0) || (((*_6556)(_6561,_6562)) >= ((*_6555)(_6562))))){ throw ::mosek::fusion::IndexError(std::string ("An index in sub is out of bounds"));}else {}}}int _9535 = (int)0; int _9536 = (int)((_6556)->size(0)); for (int _6563 = _9535;_6563<_9536;++_6563){ long long _6564 = (long long)0; int _9537 = (int)0; int _9538 = (int)((_6556)->size(1)); for (int _6565 = _9537;_6565<_9538;++_6565){ (_6564 = ((_6564 * ((*_6555)(((_6560 - _6565) - (int)1)))) + ((*_6556)(_6563,_6565)))); }(((*_6558)(_6563)) = _6564); }(dims = ::mosek::fusion::Utils::Tools::arraycopy(_6555)); bool _6566 = true; int _9539 = (int)1; int _9540 = (int)((_6558)->size(0)); for (int _6567 = _9539;_6567<_9540;++_6567){ (_6566 = (_6566 && (((*_6558)(_6567)) >= ((*_6558)((_6567 - (int)1)))))); }if (_6566){ int _6568 = (int)1; int _9541 = (int)1; int _9542 = (int)((_6558)->size(0)); for (int _6569 = _9541;_6569<_9542;++_6569){ if ((((*_6558)((_6569 - (int)1))) > ((*_6558)(_6569)))){ ( ++ _6568 ); }else {}}if ((_6568 == (int)((_6558)->size(0)))){ (inst = ::mosek::fusion::Utils::Tools::arraycopy(_6558)); (cof = ::mosek::fusion::Utils::Tools::arraycopy(_6557)); }else { (inst = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_6568)))); (((*inst)((int)0)) = ((*_6558)((int)0))); (cof = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_6568)))); (((*cof)((int)0)) = ((*_6557)((int)0))); int _6570 = (int)0; int _9543 = (int)1; int _9544 = (int)((_6558)->size(0)); for (int _6571 = _9543;_6571<_9544;++_6571){ if ((((*_6558)(_6571)) > ((*_6558)((_6571 - (int)1))))){ ( ++ _6570 ); (((*inst)(_6570)) = ((*_6558)(_6571))); (((*cof)(_6570)) = ((*_6557)(_6571))); }else { (((*cof)(_6570)) = (((*cof)(_6570)) + ((*_6557)(_6571)))); }}}}else { std::shared_ptr< monty::ndarray< long long,1 > > _6572 = ::mosek::fusion::Utils::Tools::range((long long)((_6558)->size(0))); ::mosek::fusion::p_CommonTools::argQsort(_6572,_6558,std::shared_ptr< monty::ndarray< long long,1 > >(nullptr),(long long)0,(long long)((_6558)->size(0))); int _6573 = (int)1; int _9545 = (int)1; int _9546 = (int)((_6558)->size(0)); for (int _6574 = _9545;_6574<_9546;++_6574){ if ((((*_6558)(((*_6572)((_6574 - (int)1))))) < ((*_6558)(((*_6572)(_6574)))))){ ( ++ _6573 ); }else {}}(inst = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_6573)))); (((*inst)((int)0)) = ((*_6558)(((*_6572)((int)0))))); (cof = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_6573)))); (((*cof)((int)0)) = ((*_6557)(((*_6572)((int)0))))); int _6575 = (int)0; int _9547 = (int)1; int _9548 = (int)((_6558)->size(0)); for (int _6576 = _9547;_6576<_9548;++_6576){ if ((((*_6558)(((*_6572)(_6576)))) > ((*_6558)(((*_6572)((_6576 - (int)1))))))){ ( ++ _6575 ); (((*inst)(_6575)) = ((*_6558)(((*_6572)(_6576))))); (((*cof)(_6575)) = ((*_6557)(((*_6572)(_6576))))); }else { (((*cof)(_6575)) = (((*cof)(_6575)) + ((*_6557)(((*_6572)(_6576)))))); }}}}}}mosek::fusion::NDSparseArray::t mosek::fusion::p_NDSparseArray::_new_NDSparseArray  (std::shared_ptr< monty::ndarray< int,1 > > _6577,    std::shared_ptr< monty::ndarray< long long,1 > > _6578,    std::shared_ptr< monty::ndarray< double,1 > > _6579){ return new mosek::fusion::NDSparseArray(_6577,_6578,_6579); }mosek::fusion::NDSparseArray::NDSparseArray  (std::shared_ptr< monty::ndarray< int,1 > > _6577,    std::shared_ptr< monty::ndarray< long long,1 > > _6578,    std::shared_ptr< monty::ndarray< double,1 > > _6579) :    NDSparseArray(new mosek::fusion::p_NDSparseArray(this)){ mosek::fusion::p_NDSparseArray::_get_impl(this)->_initialize(_6577,_6578,_6579); }void mosek::fusion::p_NDSparseArray::_initialize  (std::shared_ptr< monty::ndarray< int,1 > > _6577,    std::shared_ptr< monty::ndarray< long long,1 > > _6578,    std::shared_ptr< monty::ndarray< double,1 > > _6579){monty::rc_reserve __reserve_this(_pubthis); { { (size = (long long)1); int _9549 = (int)0; int _9550 = (int)((_6577)->size(0)); for (int _6580 = _9549;_6580<_9550;++_6580){ (size = (size * ((*_6577)(_6580)))); }if (((int)((_6578)->size(0)) != (int)((_6579)->size(0)))){ throw ::mosek::fusion::LengthError(std::string ("Mismatching data array length"));}else {}int _9551 = (int)0; int _9552 = (int)((_6578)->size(0)); for (int _6581 = _9551;_6581<_9552;++_6581){ if (((((*_6578)(_6581)) < (int)0) || (((*_6578)(_6581)) >= size))){ throw ::mosek::fusion::IndexError(std::string ("An index in inst is out of bounds"));}else {}}(dims = ::mosek::fusion::Utils::Tools::arraycopy(_6577)); bool _6582 = true; int _9553 = (int)1; int _9554 = (int)((_6578)->size(0)); for (int _6583 = _9553;_6583<_9554;++_6583){ (_6582 = (_6582 && (((*_6578)(_6583)) >= ((*_6578)((_6583 - (int)1)))))); }if (_6582){ int _6584 = (int)1; int _9555 = (int)1; int _9556 = (int)((_6578)->size(0)); for (int _6585 = _9555;_6585<_9556;++_6585){ if ((((*_6578)((_6585 - (int)1))) > ((*_6578)(_6585)))){ ( ++ _6584 ); }else {}}if ((_6584 == (int)((_6578)->size(0)))){ (inst = ::mosek::fusion::Utils::Tools::arraycopy(_6578)); (cof = ::mosek::fusion::Utils::Tools::arraycopy(_6579)); }else { (inst = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_6584)))); (((*inst)((int)0)) = ((*_6578)((int)0))); (cof = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_6584)))); (((*cof)((int)0)) = ((*_6579)((int)0))); int _6586 = (int)0; int _9557 = (int)1; int _9558 = (int)((_6578)->size(0)); for (int _6587 = _9557;_6587<_9558;++_6587){ if ((((*_6578)(_6587)) > ((*_6578)((_6587 - (int)1))))){ ( ++ _6586 ); (((*inst)(_6586)) = ((*_6578)(_6587))); (((*cof)(_6586)) = ((*_6579)(_6587))); }else { (((*cof)(_6586)) = (((*cof)(_6586)) + ((*_6579)(_6587)))); }}}}else { std::shared_ptr< monty::ndarray< long long,1 > > _6588 = ::mosek::fusion::Utils::Tools::range((long long)((_6578)->size(0))); ::mosek::fusion::p_CommonTools::argQsort(_6588,_6578,std::shared_ptr< monty::ndarray< long long,1 > >(nullptr),(long long)0,(long long)((_6578)->size(0))); int _6589 = (int)1; int _9559 = (int)1; int _9560 = (int)((_6578)->size(0)); for (int _6590 = _9559;_6590<_9560;++_6590){ if ((((*_6578)(((*_6588)((_6590 - (int)1))))) < ((*_6578)(((*_6588)(_6590)))))){ ( ++ _6589 ); }else {}}(inst = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_6589)))); (((*inst)((int)0)) = ((*_6578)(((*_6588)((int)0))))); (cof = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_6589)))); (((*cof)((int)0)) = ((*_6579)(((*_6588)((int)0))))); int _6591 = (int)0; int _9561 = (int)1; int _9562 = (int)((_6578)->size(0)); for (int _6592 = _9561;_6592<_9562;++_6592){ if ((((*_6578)(((*_6588)(_6592)))) > ((*inst)(((*_6588)((_6592 - (int)1))))))){ ( ++ _6591 ); (((*inst)(_6591)) = ((*_6578)(((*_6588)(_6592))))); (((*cof)(_6591)) = ((*_6579)(((*_6588)(_6592))))); }else { (((*cof)(_6591)) = (((*cof)(_6591)) + ((*_6579)(((*_6588)(_6592)))))); }}}}}}mosek::fusion::NDSparseArray::t mosek::fusion::p_NDSparseArray::_new_NDSparseArray  (monty::rc_ptr< ::mosek::fusion::Matrix > _6593){ return new mosek::fusion::NDSparseArray(_6593); }mosek::fusion::NDSparseArray::NDSparseArray  (monty::rc_ptr< ::mosek::fusion::Matrix > _6593) :    NDSparseArray(new mosek::fusion::p_NDSparseArray(this)){ mosek::fusion::p_NDSparseArray::_get_impl(this)->_initialize(_6593); }void mosek::fusion::p_NDSparseArray::_initialize  (monty::rc_ptr< ::mosek::fusion::Matrix > _6593){monty::rc_reserve __reserve_this(_pubthis); { { long long _6594 = _6593->numNonzeros(); int _6595 = _6593->numRows(); int _6596 = _6593->numColumns(); std::shared_ptr< monty::ndarray< int,1 > > _6597 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6594))); std::shared_ptr< monty::ndarray< int,1 > > _6598 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6594))); std::shared_ptr< monty::ndarray< double,1 > > _6599 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_6594))); _6593->getDataAsTriplets(_6597,_6598,_6599); (size = ((long long)_6593->numRows() * (long long)_6593->numColumns())); (dims = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{_6595,_6596})); (inst = ([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _9563; for (long long _6600=(long long)0, _9564=_6594; _6600 < _9564;++_6600)_9563.push_back((((long long)((*_6597)(_6600)) * _6596) + (long long)((*_6598)(_6600)))); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9563.size()),_9563.begin(),_9563.end())); })()); (cof = _6599); }}}monty::rc_ptr< ::mosek::fusion::NDSparseArray > mosek::fusion::NDSparseArray::make  ( monty::rc_ptr< ::mosek::fusion::Matrix > _6601) { return mosek::fusion::p_NDSparseArray::make(_6601); }monty::rc_ptr< ::mosek::fusion::NDSparseArray > mosek::fusion::p_NDSparseArray::make( monty::rc_ptr< ::mosek::fusion::Matrix > _6601){ return ::mosek::fusion::p_NDSparseArray::_new_NDSparseArray(_6601); }monty::rc_ptr< ::mosek::fusion::NDSparseArray > mosek::fusion::NDSparseArray::make  ( std::shared_ptr< monty::ndarray< int,1 > > _6602,    std::shared_ptr< monty::ndarray< long long,1 > > _6603,    std::shared_ptr< monty::ndarray< double,1 > > _6604) { return mosek::fusion::p_NDSparseArray::make(_6602,_6603,_6604); }monty::rc_ptr< ::mosek::fusion::NDSparseArray > mosek::fusion::p_NDSparseArray::make( std::shared_ptr< monty::ndarray< int,1 > > _6602,std::shared_ptr< monty::ndarray< long long,1 > > _6603,std::shared_ptr< monty::ndarray< double,1 > > _6604){ return ::mosek::fusion::p_NDSparseArray::_new_NDSparseArray(_6602,_6603,_6604); }monty::rc_ptr< ::mosek::fusion::NDSparseArray > mosek::fusion::NDSparseArray::make  ( std::shared_ptr< monty::ndarray< int,1 > > _6605,    std::shared_ptr< monty::ndarray< int,2 > > _6606,    std::shared_ptr< monty::ndarray< double,1 > > _6607) { return mosek::fusion::p_NDSparseArray::make(_6605,_6606,_6607); }monty::rc_ptr< ::mosek::fusion::NDSparseArray > mosek::fusion::p_NDSparseArray::make( std::shared_ptr< monty::ndarray< int,1 > > _6605,std::shared_ptr< monty::ndarray< int,2 > > _6606,std::shared_ptr< monty::ndarray< double,1 > > _6607){ return ::mosek::fusion::p_NDSparseArray::_new_NDSparseArray(_6605,_6606,_6607); }void mosek::fusion::p_NDSparseArray::destroy(){cof.reset();inst.reset();dims.reset();}void mosek::fusion::NDSparseArray::destroy() { mosek::fusion::p_NDSparseArray::_get_impl(this)->destroy(); }mosek::fusion::DenseMatrix::DenseMatrix(mosek::fusion::p_DenseMatrix *_impl) : mosek::fusion::Matrix(_impl) { /*std::cout << "DenseMatrix()" << this << std::endl; */ }mosek::fusion::DenseMatrix::~DenseMatrix() {  /* std::cout << "~DenseMatrix()" << this << std::endl << std::flush; */ }mosek::fusion::p_DenseMatrix::p_DenseMatrix  (::mosek::fusion::DenseMatrix * _pubthis) :     mosek::fusion::p_Matrix(_pubthis),    _pubthis(_pubthis){}mosek::fusion::DenseMatrix::t mosek::fusion::p_DenseMatrix::_new_DenseMatrix  (int _6608,    int _6609,    std::shared_ptr< monty::ndarray< double,1 > > _6610){ return new mosek::fusion::DenseMatrix(_6608,_6609,_6610); }mosek::fusion::DenseMatrix::DenseMatrix  (int _6608,    int _6609,    std::shared_ptr< monty::ndarray< double,1 > > _6610) :    DenseMatrix(new mosek::fusion::p_DenseMatrix(this)){ mosek::fusion::p_DenseMatrix::_get_impl(this)->_initialize(_6608,_6609,_6610); }void mosek::fusion::p_DenseMatrix::_initialize  (int _6608,    int _6609,    std::shared_ptr< monty::ndarray< double,1 > > _6610){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_Matrix::_initialize(_6608,_6609);(nnz = (long long)(_6608 * _6609)); (data = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((_6608 * _6609))))); ::mosek::fusion::Utils::Tools::arraycopy(_6610,(int)0,data,(int)0,(_6608 * _6609)); }}mosek::fusion::DenseMatrix::t mosek::fusion::p_DenseMatrix::_new_DenseMatrix  (monty::rc_ptr< ::mosek::fusion::Matrix > _6611){ return new mosek::fusion::DenseMatrix(_6611); }mosek::fusion::DenseMatrix::DenseMatrix  (monty::rc_ptr< ::mosek::fusion::Matrix > _6611) :    DenseMatrix(new mosek::fusion::p_DenseMatrix(this)){ mosek::fusion::p_DenseMatrix::_get_impl(this)->_initialize(_6611); }void mosek::fusion::p_DenseMatrix::_initialize  (monty::rc_ptr< ::mosek::fusion::Matrix > _6611){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_Matrix::_initialize(mosek::fusion::p_Matrix::_get_impl(_6611)->dimi,mosek::fusion::p_Matrix::_get_impl(_6611)->dimj);monty::rc_ptr< ::mosek::fusion::Matrix > _9565 = _6611; if (nullptr != dynamic_cast< ::mosek::fusion::DenseMatrix* >(_9565.get())) {::mosek::fusion::DenseMatrix::t _6612(dynamic_cast< ::mosek::fusion::DenseMatrix* >(_9565.get()));{ (data = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_DenseMatrix::_get_impl(_6612)->data)); }}else if (nullptr != dynamic_cast< ::mosek::fusion::SparseMatrix* >(_9565.get())) {::mosek::fusion::SparseMatrix::t _6613(dynamic_cast< ::mosek::fusion::SparseMatrix* >(_9565.get()));{ (data = ::mosek::fusion::Utils::Tools::zeros((mosek::fusion::p_Matrix::_get_impl(_6613)->dimi * mosek::fusion::p_Matrix::_get_impl(_6613)->dimj))); long long _9566 = (long long)0; long long _9567 = mosek::fusion::p_SparseMatrix::_get_impl(_6613)->nnz; for (long long _6615 = _9566;_6615<_9567;++_6615){ (((*data)(((((*mosek::fusion::p_SparseMatrix::_get_impl(_6613)->subi)(_6615)) * dimj) + ((*mosek::fusion::p_SparseMatrix::_get_impl(_6613)->subj)(_6615))))) = ((*mosek::fusion::p_SparseMatrix::_get_impl(_6613)->val)(_6615))); }}}else {mosek::fusion::Matrix::t _6614 = _9565;{ throw ::mosek::fusion::MatrixError(std::string ("Unknown matrix type."));}}(nnz = (long long)(dimi * dimj)); }}mosek::fusion::DenseMatrix::t mosek::fusion::p_DenseMatrix::_new_DenseMatrix  (std::shared_ptr< monty::ndarray< double,2 > > _6616){ return new mosek::fusion::DenseMatrix(_6616); }mosek::fusion::DenseMatrix::DenseMatrix  (std::shared_ptr< monty::ndarray< double,2 > > _6616) :    DenseMatrix(new mosek::fusion::p_DenseMatrix(this)){ mosek::fusion::p_DenseMatrix::_get_impl(this)->_initialize(_6616); }void mosek::fusion::p_DenseMatrix::_initialize  (std::shared_ptr< monty::ndarray< double,2 > > _6616){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_Matrix::_initialize((int)((_6616)->size(0)),(int)((_6616)->size(1)));(data = ([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _9568; for (int _6617=(int)0, _9569=dimi; _6617 < _9569;++_6617) for (int _6618=(int)0, _9570=dimj; _6618 < _9570;++_6618)_9568.push_back(((*_6616)(_6617,_6618))); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9568.size()),_9568.begin(),_9568.end())); })()); (nnz = (long long)(dimi * dimj)); }}mosek::fusion::DenseMatrix::t mosek::fusion::p_DenseMatrix::_new_DenseMatrix  (int _6619,    int _6620,    double _6621){ return new mosek::fusion::DenseMatrix(_6619,_6620,_6621); }mosek::fusion::DenseMatrix::DenseMatrix  (int _6619,    int _6620,    double _6621) :    DenseMatrix(new mosek::fusion::p_DenseMatrix(this)){ mosek::fusion::p_DenseMatrix::_get_impl(this)->_initialize(_6619,_6620,_6621); }void mosek::fusion::p_DenseMatrix::_initialize  (int _6619,    int _6620,    double _6621){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_Matrix::_initialize(_6619,_6620);(data = ([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _9571; for (int _6622=(int)0, _9572=_6619; _6622 < _9572;++_6622) for (int _6623=(int)0, _9573=_6620; _6623 < _9573;++_6623)_9571.push_back(_6621); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9571.size()),_9571.begin(),_9571.end())); })()); (nnz = (long long)(_6619 * _6620)); }}std::string mosek::fusion::DenseMatrix::toString  ( ) { return mosek::fusion::p_DenseMatrix::_get_impl(this)->toString(); }std::string mosek::fusion::p_DenseMatrix::toString( ){ monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _6624 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer(); mosek::fusion::Utils::p_StringBuffer::_get_impl(_6624.get())->a(std::string ("DenseMatrix(")); mosek::fusion::Utils::p_StringBuffer::_get_impl(_6624.get())->a(dimi); mosek::fusion::Utils::p_StringBuffer::_get_impl(_6624.get())->a(std::string (",")); mosek::fusion::Utils::p_StringBuffer::_get_impl(_6624.get())->a(dimj); mosek::fusion::Utils::p_StringBuffer::_get_impl(_6624.get())->a(std::string (": ")); int _6625 = (int)0; { int _6626 = (int)0; for (;(_6626 < dimi);( ++ _6626 )){ if ((_6626 > (int)0)){ mosek::fusion::Utils::p_StringBuffer::_get_impl(_6624.get())->a(std::string (",")); }else {}mosek::fusion::Utils::p_StringBuffer::_get_impl(_6624.get())->a(std::string ("[ ")); mosek::fusion::Utils::p_StringBuffer::_get_impl(_6624.get())->a(((*data)(_6625))); ( ++ _6625 ); { int _6627 = (int)1; for (;(_6627 < dimj);( ++ _6627 )){ mosek::fusion::Utils::p_StringBuffer::_get_impl(_6624.get())->a(std::string (",")); mosek::fusion::Utils::p_StringBuffer::_get_impl(_6624.get())->a(((*data)(_6625))); ( ++ _6625 ); }}mosek::fusion::Utils::p_StringBuffer::_get_impl(_6624.get())->a(std::string (" ]")); }}mosek::fusion::Utils::p_StringBuffer::_get_impl(_6624.get())->a(std::string (")")); return mosek::fusion::Utils::p_StringBuffer::_get_impl(_6624.get())->toString(); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::DenseMatrix::transpose  ( ) { return mosek::fusion::p_DenseMatrix::_get_impl(this)->transpose(); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_DenseMatrix::transpose( ){ std::shared_ptr< monty::ndarray< double,1 > > _6628 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((dimi * dimj)))); int _6629 = (int)0; int _6630 = dimi; int _9574 = (int)0; int _9575 = dimi; for (int _6631 = _9574;_6631<_9575;++_6631){ int _6632 = _6631; int _9576 = (int)0; int _9577 = dimj; for (int _6633 = _9576;_6633<_9577;++_6633){ (((*_6628)(_6632)) = ((*data)(_6629))); (_6632 = (_6632 + _6630)); ( ++ _6629 ); }}return ::mosek::fusion::p_DenseMatrix::_new_DenseMatrix(dimj,dimi,_6628); }bool mosek::fusion::DenseMatrix::isSparse  ( ) { return mosek::fusion::p_DenseMatrix::_get_impl(this)->isSparse(); }bool mosek::fusion::p_DenseMatrix::isSparse( ){ return false; }std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::DenseMatrix::getDataAsArray  ( ) { return mosek::fusion::p_DenseMatrix::_get_impl(this)->getDataAsArray(); }std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_DenseMatrix::getDataAsArray( ){ return ::mosek::fusion::Utils::Tools::arraycopy(data); }void mosek::fusion::DenseMatrix::getDataAsTriplets  ( std::shared_ptr< monty::ndarray< int,1 > > _6634,    std::shared_ptr< monty::ndarray< int,1 > > _6635,    std::shared_ptr< monty::ndarray< double,1 > > _6636) { mosek::fusion::p_DenseMatrix::_get_impl(this)->getDataAsTriplets(_6634,_6635,_6636); }void mosek::fusion::p_DenseMatrix::getDataAsTriplets( std::shared_ptr< monty::ndarray< int,1 > > _6634,std::shared_ptr< monty::ndarray< int,1 > > _6635,std::shared_ptr< monty::ndarray< double,1 > > _6636){ if ((((int)((_6634)->size(0)) < nnz) || (((int)((_6635)->size(0)) < nnz) || ((int)((_6636)->size(0)) < nnz)))){ throw ::mosek::fusion::LengthError(std::string ("Output arrays are not long enough."));}else {}::mosek::fusion::Utils::Tools::arraycopy(data,(int)0,_6636,(int)0,(int)((data)->size(0))); int _6637 = (int)0; int _9578 = (int)0; int _9579 = dimi; for (int _6638 = _9578;_6638<_9579;++_6638){ int _9580 = (int)0; int _9581 = dimj; for (int _6639 = _9580;_6639<_9581;++_6639){ (((*_6634)(_6637)) = _6638); (((*_6635)(_6637)) = _6639); ( ++ _6637 ); }}}double mosek::fusion::DenseMatrix::get  ( int _6640,    int _6641) { return mosek::fusion::p_DenseMatrix::_get_impl(this)->get(_6640,_6641); }double mosek::fusion::p_DenseMatrix::get( int _6640,int _6641){ return ((*data)(((_6640 * dimi) + _6641))); }long long mosek::fusion::DenseMatrix::numNonzeros  ( ) { return mosek::fusion::p_DenseMatrix::_get_impl(this)->numNonzeros(); }long long mosek::fusion::p_DenseMatrix::numNonzeros( ){ return (long long)(dimi * dimj); }void mosek::fusion::p_DenseMatrix::destroy(){data.reset();}void mosek::fusion::DenseMatrix::destroy() { mosek::fusion::p_DenseMatrix::_get_impl(this)->destroy(); }mosek::fusion::SparseMatrix::SparseMatrix(mosek::fusion::p_SparseMatrix *_impl) : mosek::fusion::Matrix(_impl) { /*std::cout << "SparseMatrix()" << this << std::endl; */ }mosek::fusion::SparseMatrix::~SparseMatrix() {  /* std::cout << "~SparseMatrix()" << this << std::endl << std::flush; */ }mosek::fusion::p_SparseMatrix::p_SparseMatrix  (::mosek::fusion::SparseMatrix * _pubthis) :     mosek::fusion::p_Matrix(_pubthis),    _pubthis(_pubthis){}mosek::fusion::SparseMatrix::t mosek::fusion::p_SparseMatrix::_new_SparseMatrix  (int _6642,    int _6643,    std::shared_ptr< monty::ndarray< int,1 > > _6644,    std::shared_ptr< monty::ndarray< int,1 > > _6645,    std::shared_ptr< monty::ndarray< double,1 > > _6646,    long long _6647){ return new mosek::fusion::SparseMatrix(_6642,_6643,_6644,_6645,_6646,_6647); }mosek::fusion::SparseMatrix::SparseMatrix  (int _6642,    int _6643,    std::shared_ptr< monty::ndarray< int,1 > > _6644,    std::shared_ptr< monty::ndarray< int,1 > > _6645,    std::shared_ptr< monty::ndarray< double,1 > > _6646,    long long _6647) :    SparseMatrix(new mosek::fusion::p_SparseMatrix(this)){ mosek::fusion::p_SparseMatrix::_get_impl(this)->_initialize(_6642,_6643,_6644,_6645,_6646,_6647); }void mosek::fusion::p_SparseMatrix::_initialize  (int _6642,    int _6643,    std::shared_ptr< monty::ndarray< int,1 > > _6644,    std::shared_ptr< monty::ndarray< int,1 > > _6645,    std::shared_ptr< monty::ndarray< double,1 > > _6646,    long long _6647){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_Matrix::_initialize(_6642,_6643);if ((_6647 > (int)0)){ if ((((int)((_6644)->size(0)) < _6647) || (((int)((_6645)->size(0)) < _6647) || ((int)((_6646)->size(0)) < _6647)))){ throw ::mosek::fusion::SparseFormatError(std::string ("Mismatching arrays in sparse data."));}else {}long long _9582 = (long long)0; long long _9583 = _6647; for (long long _6648 = _9582;_6648<_9583;++_6648){ if (((((*_6644)(_6648)) < (int)0) || ((((*_6644)(_6648)) >= dimi) || ((((*_6645)(_6648)) < (int)0) || (((*_6645)(_6648)) >= dimj))))){ throw ::mosek::fusion::SparseFormatError(std::string ("Subscript out of bounds."));}else {}}std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > > _6649 = std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > >(new monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 >(monty::shape((int)1))); std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > > _6650 = std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > >(new monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 >(monty::shape((int)1))); std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > _6651 = std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > >(new monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 >(monty::shape((int)1))); ::mosek::fusion::p_CommonTools::tripletSort(_6644,_6645,_6646,_6649,_6650,_6651,_6647,dimi,dimj); (subi = ((*_6649)((int)0))); (subj = ((*_6650)((int)0))); (val = ((*_6651)((int)0))); (nnz = (long long)((val)->size(0))); }else { (subi = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0)))); (subj = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0)))); (val = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)0)))); (nnz = (long long)0); }}}mosek::fusion::SparseMatrix::t mosek::fusion::p_SparseMatrix::_new_SparseMatrix  (int _6652,    int _6653,    std::shared_ptr< monty::ndarray< int,1 > > _6654,    std::shared_ptr< monty::ndarray< int,1 > > _6655,    std::shared_ptr< monty::ndarray< double,1 > > _6656){ return new mosek::fusion::SparseMatrix(_6652,_6653,_6654,_6655,_6656); }mosek::fusion::SparseMatrix::SparseMatrix  (int _6652,    int _6653,    std::shared_ptr< monty::ndarray< int,1 > > _6654,    std::shared_ptr< monty::ndarray< int,1 > > _6655,    std::shared_ptr< monty::ndarray< double,1 > > _6656) :    SparseMatrix(new mosek::fusion::p_SparseMatrix(this)){ mosek::fusion::p_SparseMatrix::_get_impl(this)->_initialize(_6652,_6653,_6654,_6655,_6656); }void mosek::fusion::p_SparseMatrix::_initialize  (int _6652,    int _6653,    std::shared_ptr< monty::ndarray< int,1 > > _6654,    std::shared_ptr< monty::ndarray< int,1 > > _6655,    std::shared_ptr< monty::ndarray< double,1 > > _6656){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_Matrix::_initialize(_6652,_6653);int _6657 = (int)0; int _9584 = (int)0; int _9585 = (int)((_6656)->size(0)); for (int _6658 = _9584;_6658<_9585;++_6658){ if (((((*_6656)(_6658)) > (int)0) || (((*_6656)(_6658)) < (int)0))){ ( ++ _6657 ); }else {}}if (((_6657 > (int)0) && (_6657 < (int)((_6654)->size(0))))){ (subi = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6657)))); (subj = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6657)))); (val = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_6657)))); (nnz = _6657); int _6659 = (int)0; int _9586 = (int)0; int _9587 = (int)((_6656)->size(0)); for (int _6660 = _9586;_6660<_9587;++_6660){ if (((((*_6656)(_6660)) < (int)0) || (((*_6656)(_6660)) > (int)0))){ (((*val)(_6659)) = ((*_6656)(_6660))); (((*subj)(_6659)) = ((*_6655)(_6660))); (((*subi)(_6659)) = ((*_6654)(_6660))); ( ++ _6659 ); }else {}}}else { (subi = _6654); (subj = _6655); (val = _6656); if (! _6654){ (nnz = (long long)0); }else { (nnz = (long long)((subi)->size(0))); }}}}std::shared_ptr< monty::ndarray< long long,1 > > mosek::fusion::p_SparseMatrix::formPtrb( ){ std::shared_ptr< monty::ndarray< long long,1 > > _6661 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((dimi + (int)1)))); long long _6662 = (long long)0; int _9588 = (int)0; int _9589 = dimi; for (int _6663 = _9588;_6663<_9589;++_6663){ (((*_6661)(_6663)) = _6662); { for (;((_6662 < nnz) && (((*subi)(_6662)) == _6663));( ++ _6662 )){ }}}(((*_6661)(dimi)) = _6662); return _6661; }std::string mosek::fusion::SparseMatrix::toString  ( ) { return mosek::fusion::p_SparseMatrix::_get_impl(this)->toString(); }std::string mosek::fusion::p_SparseMatrix::toString( ){ monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _6664 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer(); mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_6664.get())->a(std::string ("SparseMatrix(")).get())->a(dimi).get())->a(std::string (",")).get())->a(dimj).get())->a(std::string (", [")); if ((subi && ((int)((subi)->size(0)) > (int)0))){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_6664.get())->a(std::string ("(")).get())->a(((*subi)((int)0))).get())->a(std::string (",")).get())->a(((*subj)((int)0))).get())->a(std::string (",")).get())->a(((*val)((int)0))).get())->a(std::string (")")); int _9590 = (int)1; int _9591 = (int)((subi)->size(0)); for (int _6665 = _9590;_6665<_9591;++_6665){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_6664.get())->a(std::string (",(")).get())->a(((*subi)(_6665))).get())->a(std::string (",")).get())->a(((*subj)(_6665))).get())->a(std::string (",")).get())->a(((*val)(_6665))).get())->a(std::string (")")); }}else {}mosek::fusion::Utils::p_StringBuffer::_get_impl(_6664.get())->a(std::string (" ])")); return mosek::fusion::Utils::p_StringBuffer::_get_impl(_6664.get())->toString(); }long long mosek::fusion::SparseMatrix::numNonzeros  ( ) { return mosek::fusion::p_SparseMatrix::_get_impl(this)->numNonzeros(); }long long mosek::fusion::p_SparseMatrix::numNonzeros( ){ return nnz; }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::SparseMatrix::transpose  ( ) { return mosek::fusion::p_SparseMatrix::_get_impl(this)->transpose(); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_SparseMatrix::transpose( ){ return ::mosek::fusion::p_Matrix::sparse(dimj,dimi,subj,subi,val); }bool mosek::fusion::SparseMatrix::isSparse  ( ) { return mosek::fusion::p_SparseMatrix::_get_impl(this)->isSparse(); }bool mosek::fusion::p_SparseMatrix::isSparse( ){ return true; }std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::SparseMatrix::getDataAsArray  ( ) { return mosek::fusion::p_SparseMatrix::_get_impl(this)->getDataAsArray(); }std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_SparseMatrix::getDataAsArray( ){ std::shared_ptr< monty::ndarray< double,1 > > _6666 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((dimi * dimj)))); int _9592 = (int)0; int _9593 = (int)((subi)->size(0)); for (int _6667 = _9592;_6667<_9593;++_6667){ (((*_6666)(((((*subi)(_6667)) * dimj) + ((*subj)(_6667))))) = ((*val)(_6667))); }return _6666; }void mosek::fusion::SparseMatrix::getDataAsTriplets  ( std::shared_ptr< monty::ndarray< int,1 > > _6668,    std::shared_ptr< monty::ndarray< int,1 > > _6669,    std::shared_ptr< monty::ndarray< double,1 > > _6670) { mosek::fusion::p_SparseMatrix::_get_impl(this)->getDataAsTriplets(_6668,_6669,_6670); }void mosek::fusion::p_SparseMatrix::getDataAsTriplets( std::shared_ptr< monty::ndarray< int,1 > > _6668,std::shared_ptr< monty::ndarray< int,1 > > _6669,std::shared_ptr< monty::ndarray< double,1 > > _6670){ if ((((long long)((_6668)->size(0)) < nnz) || (((long long)((_6669)->size(0)) < nnz) || ((long long)((_6670)->size(0)) < nnz)))){ throw ::mosek::fusion::LengthError(std::string ("Output arrays are not long enough."));}else {}if ((subi && ((int)((subi)->size(0)) > (int)0))){ ::mosek::fusion::Utils::Tools::arraycopy(subi,(long long)0,_6668,(long long)0,nnz); ::mosek::fusion::Utils::Tools::arraycopy(subj,(long long)0,_6669,(long long)0,nnz); ::mosek::fusion::Utils::Tools::arraycopy(val,(long long)0,_6670,(long long)0,nnz); }else {}}double mosek::fusion::SparseMatrix::get  ( int _6671,    int _6672) { return mosek::fusion::p_SparseMatrix::_get_impl(this)->get(_6671,_6672); }double mosek::fusion::p_SparseMatrix::get( int _6671,int _6672){ if (((_6671 < (int)0) || ((_6671 >= dimi) || ((_6672 < (int)0) || (_6672 >= dimj))))){ throw ::mosek::fusion::IndexError(std::string ("Index out if bounds"));}else {}int _6673 = (int)0; int _6674 = (int)((subi)->size(0)); while (((_6674 - _6673) > (int)1)) { int _6675 = ((_6673 + _6674) / (int)2); if (((((*subi)(_6675)) < _6671) || ((((*subi)(_6675)) == _6671) && (((*subj)(_6675)) < _6672)))){ (_6673 = _6675); }else if (((((*subi)(_6675)) > _6671) || ((((*subi)(_6675)) == _6671) && (((*subj)(_6675)) > _6672)))){ (_6674 = _6675); }else { return ((*val)(_6675)); }}if (((((*subi)(_6673)) == _6671) && (((*subj)(_6673)) == _6672))){ return ((*val)(_6673)); }else { return 0.0; }}void mosek::fusion::p_SparseMatrix::destroy(){val.reset();subj.reset();subi.reset();}void mosek::fusion::SparseMatrix::destroy() { mosek::fusion::p_SparseMatrix::_get_impl(this)->destroy(); }mosek::fusion::Matrix::Matrix(mosek::fusion::p_Matrix *_impl) : _impl(_impl) { /*std::cout << "Matrix() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::Matrix::~Matrix() { delete _impl; _impl = nullptr; }mosek::fusion::p_Matrix::p_Matrix  (::mosek::fusion::Matrix * _pubthis) :     _pubthis(_pubthis){}void mosek::fusion::p_Matrix::_initialize  (int _6676,    int _6677){monty::rc_reserve __reserve_this(_pubthis); { { if (((_6676 < (int)0) || (_6677 < (int)0))){ throw ::mosek::fusion::DimensionError(std::string ("Invalid dimensions"));}else {}(dimi = _6676); (dimj = _6677); }}}std::string mosek::fusion::Matrix::toString  ( ) { return mosek::fusion::p_Matrix::_get_impl(this)->toString(); }std::string mosek::fusion::p_Matrix::toString( ){ return std::string (""); }void mosek::fusion::p_Matrix::switchDims( ){ int _6678 = dimi; (dimi = dimj); (dimj = _6678); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::diag  ( int _6679,    monty::rc_ptr< ::mosek::fusion::Matrix > _6680) { return mosek::fusion::p_Matrix::diag(_6679,_6680); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::diag( int _6679,monty::rc_ptr< ::mosek::fusion::Matrix > _6680){ return ::mosek::fusion::p_Matrix::diag(([=]()->std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Matrix >,1 > > { std::vector< monty::rc_ptr< ::mosek::fusion::Matrix > > _9594; for (int _6681=(int)0, _9595=_6679; _6681 < _9595;++_6681)_9594.push_back(_6680); return std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Matrix >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Matrix >,1 >(monty::shape(_9594.size()),_9594.begin(),_9594.end())); })()); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::diag  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Matrix >,1 > > _6682) { return mosek::fusion::p_Matrix::diag(_6682); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::diag( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Matrix >,1 > > _6682){ std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Matrix >,1 > > _6683 = _6682; long long _6684 = (long long)0; int _6685 = (int)0; int _6686 = (int)0; int _9596 = (int)0; int _9597 = (int)((_6682)->size(0)); for (int _6687 = _9596;_6687<_9597;++_6687){ (_6685 = (_6685 + mosek::fusion::p_Matrix::_get_impl(((*_6682)(_6687)))->dimi)); (_6686 = (_6686 + mosek::fusion::p_Matrix::_get_impl(((*_6682)(_6687)))->dimj)); (_6684 = (_6684 + ((*_6682)(_6687))->numNonzeros())); }std::shared_ptr< monty::ndarray< int,1 > > _6688 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6684))); std::shared_ptr< monty::ndarray< int,1 > > _6689 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6684))); std::shared_ptr< monty::ndarray< double,1 > > _6690 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_6684))); { int _6691 = (int)0; int _6692 = (int)0; long long _6693 = (long long)0; int _9598 = (int)0; int _9599 = (int)((_6682)->size(0)); for (int _6694 = _9598;_6694<_9599;++_6694){ long long _6695 = ((*_6682)(_6694))->numNonzeros(); std::shared_ptr< monty::ndarray< int,1 > > _6696 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6695))); std::shared_ptr< monty::ndarray< int,1 > > _6697 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6695))); std::shared_ptr< monty::ndarray< double,1 > > _6698 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_6695))); ((*_6682)(_6694))->getDataAsTriplets(_6696,_6697,_6698); ::mosek::fusion::Utils::Tools::arraycopy(_6698,(long long)0,_6690,_6693,_6695); long long _9600 = (long long)0; long long _9601 = _6695; for (long long _6699 = _9600;_6699<_9601;++_6699){ (((*_6688)((_6693 + _6699))) = (((*_6696)(_6699)) + _6691)); (((*_6689)((_6693 + _6699))) = (((*_6696)(_6699)) + _6692)); }(_6693 = (_6693 + _6695)); (_6691 = (_6691 + mosek::fusion::p_Matrix::_get_impl(((*_6682)(_6694)))->dimi)); (_6692 = (_6692 + mosek::fusion::p_Matrix::_get_impl(((*_6682)(_6694)))->dimj)); }}return ::mosek::fusion::p_SparseMatrix::_new_SparseMatrix(_6685,_6686,_6688,_6689,_6690); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::antidiag  ( int _6700,    double _6701,    int _6702) { return mosek::fusion::p_Matrix::antidiag(_6700,_6701,_6702); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::antidiag( int _6700,double _6701,int _6702){ if (((_6702 < _6700) && (_6702 >= (int)0))){ return ::mosek::fusion::p_Matrix::antidiag(::mosek::fusion::Utils::Tools::makevector(_6701,(_6700 - _6702)),_6702); }else if (((_6702 > (- _6700)) && (_6702 < (int)0))){ return ::mosek::fusion::p_Matrix::antidiag(::mosek::fusion::Utils::Tools::makevector(_6701,(_6700 + _6702)),_6702); }else { throw ::mosek::fusion::DimensionError(std::string ("Diagonal index out of bounds"));}}monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::antidiag  ( int _6703,    double _6704) { return mosek::fusion::p_Matrix::antidiag(_6703,_6704); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::antidiag( int _6703,double _6704){ return ::mosek::fusion::p_Matrix::antidiag(::mosek::fusion::Utils::Tools::makevector(_6704,_6703),(int)0); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::diag  ( int _6705,    double _6706,    int _6707) { return mosek::fusion::p_Matrix::diag(_6705,_6706,_6707); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::diag( int _6705,double _6706,int _6707){ if (((_6707 < _6705) && (_6707 >= (int)0))){ return ::mosek::fusion::p_Matrix::diag(::mosek::fusion::Utils::Tools::makevector(_6706,(_6705 - _6707)),_6707); }else if (((_6707 > (- _6705)) && (_6707 < (int)0))){ return ::mosek::fusion::p_Matrix::diag(::mosek::fusion::Utils::Tools::makevector(_6706,(_6705 + _6707)),_6707); }else { throw ::mosek::fusion::DimensionError(std::string ("Diagonal index out of bounds"));}}monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::diag  ( int _6708,    double _6709) { return mosek::fusion::p_Matrix::diag(_6708,_6709); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::diag( int _6708,double _6709){ return ::mosek::fusion::p_Matrix::diag(::mosek::fusion::Utils::Tools::makevector(_6709,_6708),(int)0); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::antidiag  ( std::shared_ptr< monty::ndarray< double,1 > > _6710,    int _6711) { return mosek::fusion::p_Matrix::antidiag(_6710,_6711); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::antidiag( std::shared_ptr< monty::ndarray< double,1 > > _6710,int _6711){ int _6712 = ([&]() -> int { if ( (_6711 > (int)0)) return (_6711); else return ((- _6711)); })(); int _6713 = ((int)((_6710)->size(0)) + _6712); int _6714 = (int)((_6710)->size(0)); if ((_6711 >= (int)0)){ std::shared_ptr< monty::ndarray< int,1 > > _6715 = ::mosek::fusion::Utils::Tools::range(_6711,(_6714 + _6711)); std::shared_ptr< monty::ndarray< int,1 > > _6716 = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _9602; for (int _6717=(int)1, _9603=(_6714 + (int)1); _6717 < _9603;++_6717)_9602.push_back(((_6714 + _6711) - _6717)); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9602.size()),_9602.begin(),_9602.end())); })(); return ::mosek::fusion::p_SparseMatrix::_new_SparseMatrix(_6713,_6713,_6715,_6716,_6710); }else { std::shared_ptr< monty::ndarray< int,1 > > _6718 = ::mosek::fusion::Utils::Tools::range((int)0,_6714); std::shared_ptr< monty::ndarray< int,1 > > _6719 = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _9604; for (int _6720=(int)1, _9605=(_6714 + (int)1); _6720 < _9605;++_6720)_9604.push_back((_6714 - _6720)); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9604.size()),_9604.begin(),_9604.end())); })(); return ::mosek::fusion::p_SparseMatrix::_new_SparseMatrix(_6713,_6713,_6718,_6719,_6710); }}monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::antidiag  ( std::shared_ptr< monty::ndarray< double,1 > > _6721) { return mosek::fusion::p_Matrix::antidiag(_6721); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::antidiag( std::shared_ptr< monty::ndarray< double,1 > > _6721){ return ::mosek::fusion::p_Matrix::antidiag(_6721,(int)0); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::diag  ( std::shared_ptr< monty::ndarray< double,1 > > _6722,    int _6723) { return mosek::fusion::p_Matrix::diag(_6722,_6723); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::diag( std::shared_ptr< monty::ndarray< double,1 > > _6722,int _6723){ int _6724 = ([&]() -> int { if ( (_6723 > (int)0)) return (_6723); else return ((- _6723)); })(); int _6725 = ((int)((_6722)->size(0)) + _6724); int _6726 = (int)((_6722)->size(0)); if ((_6723 >= (int)0)){ std::shared_ptr< monty::ndarray< int,1 > > _6727 = ::mosek::fusion::Utils::Tools::range((int)0,_6726); std::shared_ptr< monty::ndarray< int,1 > > _6728 = ::mosek::fusion::Utils::Tools::range(_6724,(_6726 + _6724)); return ::mosek::fusion::p_SparseMatrix::_new_SparseMatrix(_6725,_6725,_6727,_6728,_6722); }else { std::shared_ptr< monty::ndarray< int,1 > > _6729 = ::mosek::fusion::Utils::Tools::range(_6724,(_6726 + _6724)); std::shared_ptr< monty::ndarray< int,1 > > _6730 = ::mosek::fusion::Utils::Tools::range((int)0,_6726); return ::mosek::fusion::p_SparseMatrix::_new_SparseMatrix(_6725,_6725,_6729,_6730,_6722); }}monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::diag  ( std::shared_ptr< monty::ndarray< double,1 > > _6731) { return mosek::fusion::p_Matrix::diag(_6731); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::diag( std::shared_ptr< monty::ndarray< double,1 > > _6731){ return ::mosek::fusion::p_Matrix::diag(_6731,(int)0); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::ones  ( int _6732,    int _6733) { return mosek::fusion::p_Matrix::ones(_6732,_6733); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::ones( int _6732,int _6733){ return ::mosek::fusion::p_Matrix::dense(_6732,_6733,1.0); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::eye  ( int _6734) { return mosek::fusion::p_Matrix::eye(_6734); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::eye( int _6734){ return ::mosek::fusion::p_Matrix::diag(([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _9606; for (int _6735=(int)0, _9607=_6734; _6735 < _9607;++_6735)_9606.push_back(1.0); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9606.size()),_9606.begin(),_9606.end())); })()); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::dense  ( monty::rc_ptr< ::mosek::fusion::Matrix > _6736) { return mosek::fusion::p_Matrix::dense(_6736); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::dense( monty::rc_ptr< ::mosek::fusion::Matrix > _6736){ return ::mosek::fusion::p_DenseMatrix::_new_DenseMatrix(_6736); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::dense  ( int _6737,    int _6738,    double _6739) { return mosek::fusion::p_Matrix::dense(_6737,_6738,_6739); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::dense( int _6737,int _6738,double _6739){ return ::mosek::fusion::p_DenseMatrix::_new_DenseMatrix(_6737,_6738,_6739); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::dense  ( int _6740,    int _6741,    std::shared_ptr< monty::ndarray< double,1 > > _6742) { return mosek::fusion::p_Matrix::dense(_6740,_6741,_6742); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::dense( int _6740,int _6741,std::shared_ptr< monty::ndarray< double,1 > > _6742){ return ::mosek::fusion::p_DenseMatrix::_new_DenseMatrix(_6740,_6741,_6742); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::dense  ( std::shared_ptr< monty::ndarray< double,2 > > _6743) { return mosek::fusion::p_Matrix::dense(_6743); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::dense( std::shared_ptr< monty::ndarray< double,2 > > _6743){ return ::mosek::fusion::p_DenseMatrix::_new_DenseMatrix(_6743); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::sparse  ( monty::rc_ptr< ::mosek::fusion::Matrix > _6744) { return mosek::fusion::p_Matrix::sparse(_6744); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::sparse( monty::rc_ptr< ::mosek::fusion::Matrix > _6744){ std::shared_ptr< monty::ndarray< int,1 > > _6745 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6744->numNonzeros()))); std::shared_ptr< monty::ndarray< int,1 > > _6746 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6744->numNonzeros()))); std::shared_ptr< monty::ndarray< double,1 > > _6747 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_6744->numNonzeros()))); _6744->getDataAsTriplets(_6745,_6746,_6747); return ::mosek::fusion::p_SparseMatrix::_new_SparseMatrix(_6744->numRows(),_6744->numColumns(),_6745,_6746,_6747); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::sparse  ( std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Matrix >,1 > >,1 > > _6748) { return mosek::fusion::p_Matrix::sparse(_6748); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::sparse( std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Matrix >,1 > >,1 > > _6748){ int _6749 = (int)((_6748)->size(0)); int _6750 = (int)((((*_6748)((int)0)))->size(0)); std::shared_ptr< monty::ndarray< int,1 > > _6751 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6749))); std::shared_ptr< monty::ndarray< int,1 > > _6752 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6750))); long long _6753 = (long long)0; int _6754 = (int)0; { int _6755 = (int)0; for (;(_6755 < _6749);( ++ _6755 )){ { int _6756 = (int)0; for (;(_6756 < _6750);( ++ _6756 )){ monty::rc_ptr< ::mosek::fusion::Matrix > _6757 = ((*((*_6748)(_6755)))(_6756)); if (_6757){ if ((((*_6752)(_6756)) == (int)0)){ (((*_6752)(_6756)) = mosek::fusion::p_Matrix::_get_impl(_6757)->dimj); }else if ((((*_6752)(_6756)) != mosek::fusion::p_Matrix::_get_impl(_6757)->dimj)){ throw ::mosek::fusion::SparseFormatError(std::string ("Sparse matrix construction blocks are not aligned"));}else {}if ((((*_6751)(_6755)) == (int)0)){ (((*_6751)(_6755)) = mosek::fusion::p_Matrix::_get_impl(_6757)->dimi); }else if ((((*_6751)(_6755)) != mosek::fusion::p_Matrix::_get_impl(_6757)->dimi)){ throw ::mosek::fusion::SparseFormatError(std::string ("Sparse matrix construction blocks are not aligned"));}else {}(_6753 = (_6753 + _6757->numNonzeros())); }else {}( ++ _6754 ); }}}}std::shared_ptr< monty::ndarray< double,1 > > _6758 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_6753))); std::shared_ptr< monty::ndarray< int,1 > > _6759 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6753))); std::shared_ptr< monty::ndarray< int,1 > > _6760 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6753))); int _6761 = (int)0; int _6762 = (int)0; { int _6763 = (int)0; for (;(_6763 < _6749);( ++ _6763 )){ std::shared_ptr< monty::ndarray< int,1 > > _6764 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6750))); { int _6765 = (int)0; for (;(_6765 < ((*_6751)(_6763)));( ++ _6765 )){ int _6766 = (int)0; { int _6767 = (int)0; for (;(_6767 < _6750);( ++ _6767 )){ monty::rc_ptr< ::mosek::fusion::Matrix > _6768 = ((*((*_6748)(_6763)))(_6767)); if (_6768){ monty::rc_ptr< ::mosek::fusion::Matrix > _9608 = _6768; if (nullptr != dynamic_cast< ::mosek::fusion::DenseMatrix* >(_9608.get())) {::mosek::fusion::DenseMatrix::t _6769(dynamic_cast< ::mosek::fusion::DenseMatrix* >(_9608.get()));{ int _6772 = ((*_6764)(_6767)); { int _6773 = (int)0; for (;(_6773 < mosek::fusion::p_Matrix::_get_impl(_6769)->dimj);( ++ _6773 )){ (((*_6758)(_6761)) = ((*mosek::fusion::p_DenseMatrix::_get_impl(_6769)->data)(_6772))); (((*_6759)(_6761)) = (_6762 + _6765)); (((*_6760)(_6761)) = (_6766 + _6773)); ( ++ _6772 ); ( ++ _6761 ); }}(((*_6764)(_6767)) = _6772); }}else if (nullptr != dynamic_cast< ::mosek::fusion::SparseMatrix* >(_9608.get())) {::mosek::fusion::SparseMatrix::t _6770(dynamic_cast< ::mosek::fusion::SparseMatrix* >(_9608.get()));{ int _6774; { (_6774 = ((*_6764)(_6767))); for (;((_6774 < mosek::fusion::p_SparseMatrix::_get_impl(_6770)->nnz) && (((*mosek::fusion::p_SparseMatrix::_get_impl(_6770)->subi)(_6774)) == _6765));( ++ _6774 )){ (((*_6758)(_6761)) = ((*mosek::fusion::p_SparseMatrix::_get_impl(_6770)->val)(_6774))); (((*_6760)(_6761)) = (((*mosek::fusion::p_SparseMatrix::_get_impl(_6770)->subj)(_6774)) + _6766)); (((*_6759)(_6761)) = (_6762 + _6765)); ( ++ _6761 ); }}(((*_6764)(_6767)) = _6774); }}else {mosek::fusion::Matrix::t _6771 = _9608;{ throw ::mosek::fusion::MatrixError(std::string ("Unknown matrix type."));}}}else {}(_6766 = (_6766 + ((*_6752)(_6767)))); }}}}(_6762 = (_6762 + ((*_6751)(_6763)))); }}int _6775 = (int)0; int _6776 = (int)0; { int _6777 = (int)0; for (;(_6777 < _6749);( ++ _6777 )){ (_6775 = (_6775 + ((*_6751)(_6777)))); }}{ int _6778 = (int)0; for (;(_6778 < _6750);( ++ _6778 )){ (_6776 = (_6776 + ((*_6752)(_6778)))); }}return ::mosek::fusion::p_SparseMatrix::_new_SparseMatrix(_6775,_6776,_6759,_6760,_6758); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::sparse  ( std::shared_ptr< monty::ndarray< double,2 > > _6779) { return mosek::fusion::p_Matrix::sparse(_6779); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::sparse( std::shared_ptr< monty::ndarray< double,2 > > _6779){ int _6780 = (int)((_6779)->size(0)); int _6781 = (int)((_6779)->size(1)); long long _6782 = (long long)(_6780 * _6781); std::shared_ptr< monty::ndarray< int,1 > > _6783 = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _9609; for (int _6784=(int)0, _9610=_6780; _6784 < _9610;++_6784) for (int _6785=(int)0, _9611=_6781; _6785 < _9611;++_6785)_9609.push_back(_6784); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9609.size()),_9609.begin(),_9609.end())); })(); std::shared_ptr< monty::ndarray< int,1 > > _6786 = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _9612; for (int _6787=(int)0, _9613=_6780; _6787 < _9613;++_6787) for (int _6788=(int)0, _9614=_6781; _6788 < _9614;++_6788)_9612.push_back(_6788); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9612.size()),_9612.begin(),_9612.end())); })(); std::shared_ptr< monty::ndarray< double,1 > > _6789 = ([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _9615; for (int _6790=(int)0, _9616=_6780; _6790 < _9616;++_6790) for (int _6791=(int)0, _9617=_6781; _6791 < _9617;++_6791)_9615.push_back(((*_6779)(_6790,_6791))); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9615.size()),_9615.begin(),_9615.end())); })(); return ::mosek::fusion::p_SparseMatrix::_new_SparseMatrix(_6780,_6781,_6783,_6786,_6789); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::sparse  ( int _6792,    int _6793) { return mosek::fusion::p_Matrix::sparse(_6792,_6793); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::sparse( int _6792,int _6793){ return ::mosek::fusion::p_SparseMatrix::_new_SparseMatrix(_6792,_6793,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)0))),(long long)0); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::sparse  ( int _6794,    int _6795,    std::shared_ptr< monty::ndarray< int,1 > > _6796,    std::shared_ptr< monty::ndarray< int,1 > > _6797,    double _6798) { return mosek::fusion::p_Matrix::sparse(_6794,_6795,_6796,_6797,_6798); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::sparse( int _6794,int _6795,std::shared_ptr< monty::ndarray< int,1 > > _6796,std::shared_ptr< monty::ndarray< int,1 > > _6797,double _6798){ int _6799 = (int)0; if (_6796){ (_6799 = (int)((_6796)->size(0))); }else if (_6797){ (_6799 = (int)((_6797)->size(0))); }else {}return ::mosek::fusion::p_Matrix::sparse(_6794,_6795,_6796,_6797,::mosek::fusion::Utils::Tools::makevector(_6798,_6799)); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::sparse  ( std::shared_ptr< monty::ndarray< int,1 > > _6800,    std::shared_ptr< monty::ndarray< int,1 > > _6801,    double _6802) { return mosek::fusion::p_Matrix::sparse(_6800,_6801,_6802); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::sparse( std::shared_ptr< monty::ndarray< int,1 > > _6800,std::shared_ptr< monty::ndarray< int,1 > > _6801,double _6802){ int _6803 = (int)0; int _6804 = (int)0; int _6805 = (int)((_6800)->size(0)); if ((_6805 > (int)((_6801)->size(0)))){ (_6805 = (int)((_6801)->size(0))); }else {}int _9618 = (int)0; int _9619 = _6805; for (int _6806 = _9618;_6806<_9619;++_6806){ if ((_6803 < ((*_6800)(_6806)))){ (_6803 = ((*_6800)(_6806))); }else {}if ((_6804 < ((*_6801)(_6806)))){ (_6804 = ((*_6801)(_6806))); }else {}}return ::mosek::fusion::p_Matrix::sparse((_6803 + (int)1),(_6804 + (int)1),_6800,_6801,_6802); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::sparse  ( std::shared_ptr< monty::ndarray< int,1 > > _6807,    std::shared_ptr< monty::ndarray< int,1 > > _6808,    std::shared_ptr< monty::ndarray< double,1 > > _6809) { return mosek::fusion::p_Matrix::sparse(_6807,_6808,_6809); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::sparse( std::shared_ptr< monty::ndarray< int,1 > > _6807,std::shared_ptr< monty::ndarray< int,1 > > _6808,std::shared_ptr< monty::ndarray< double,1 > > _6809){ int _6810 = (int)0; int _6811 = (int)0; int _6812 = (int)((_6807)->size(0)); if ((_6812 > (int)((_6808)->size(0)))){ (_6812 = (int)((_6808)->size(0))); }else {}if ((_6812 > (int)((_6809)->size(0)))){ (_6812 = (int)((_6809)->size(0))); }else {}int _9620 = (int)0; int _9621 = _6812; for (int _6813 = _9620;_6813<_9621;++_6813){ if ((_6810 < ((*_6807)(_6813)))){ (_6810 = ((*_6807)(_6813))); }else {}if ((_6811 < ((*_6808)(_6813)))){ (_6811 = ((*_6808)(_6813))); }else {}}return ::mosek::fusion::p_Matrix::sparse((_6810 + (int)1),(_6811 + (int)1),_6807,_6808,_6809); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::sparse  ( int _6814,    int _6815,    std::shared_ptr< monty::ndarray< int,1 > > _6816,    std::shared_ptr< monty::ndarray< int,1 > > _6817,    std::shared_ptr< monty::ndarray< double,1 > > _6818) { return mosek::fusion::p_Matrix::sparse(_6814,_6815,_6816,_6817,_6818); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::sparse( int _6814,int _6815,std::shared_ptr< monty::ndarray< int,1 > > _6816,std::shared_ptr< monty::ndarray< int,1 > > _6817,std::shared_ptr< monty::ndarray< double,1 > > _6818){ std::shared_ptr< monty::ndarray< int,1 > > _6819 = ([&]() -> std::shared_ptr< monty::ndarray< int,1 > > { if ( _6816) return (_6816); else return (std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0)))); })(); std::shared_ptr< monty::ndarray< int,1 > > _6820 = ([&]() -> std::shared_ptr< monty::ndarray< int,1 > > { if ( _6817) return (_6817); else return (std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0)))); })(); std::shared_ptr< monty::ndarray< double,1 > > _6821 = ([&]() -> std::shared_ptr< monty::ndarray< double,1 > > { if ( _6818) return (_6818); else return (std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)0)))); })(); long long _6822 = (long long)((_6819)->size(0)); if ((((long long)((_6820)->size(0)) != _6822) || ((long long)((_6821)->size(0)) != _6822))){ throw ::mosek::fusion::SparseFormatError(std::string ("Arrays defining sparse data have different lengths"));}else {}return ::mosek::fusion::p_SparseMatrix::_new_SparseMatrix(_6814,_6815,_6819,_6820,_6821,_6822); }int mosek::fusion::Matrix::numColumns  ( ) { return mosek::fusion::p_Matrix::_get_impl(this)->numColumns(); }int mosek::fusion::p_Matrix::numColumns( ){ return dimj; }int mosek::fusion::Matrix::numRows  ( ) { return mosek::fusion::p_Matrix::_get_impl(this)->numRows(); }int mosek::fusion::p_Matrix::numRows( ){ return dimi; }void mosek::fusion::p_Matrix::destroy(){}void mosek::fusion::Matrix::destroy() { mosek::fusion::p_Matrix::_get_impl(this)->destroy(); }mosek::fusion::UnimplementedError::UnimplementedError  ( const std::string &  _6828) : RuntimeException(_6828){ }mosek::fusion::FatalError::FatalError  ( const std::string &  _6829) : RuntimeException(_6829){ }mosek::fusion::UnexpectedError::UnexpectedError  ( ::mosek::fusion::FusionException _6830) : RuntimeException(_6830.toString()){ }mosek::fusion::UnexpectedError::UnexpectedError  ( const std::string &  _6831) : RuntimeException(_6831){ }mosek::fusion::SparseFormatError::SparseFormatError  ( const std::string &  _6832) : mosek::fusion::FusionRuntimeException(_6832){ }mosek::fusion::SolutionError::SolutionError  ( ) : mosek::fusion::FusionException(std::string ("Solution is invalid or undefined")){ }mosek::fusion::SolutionError::SolutionError  ( const std::string &  _6833) : mosek::fusion::FusionException(_6833){ }mosek::fusion::SliceError::SliceError  ( ) : mosek::fusion::FusionRuntimeException(std::string ("Invalid slice range")){ }mosek::fusion::SliceError::SliceError  ( const std::string &  _6834) : mosek::fusion::FusionRuntimeException(_6834){ }mosek::fusion::SetDefinitionError::SetDefinitionError  ( const std::string &  _6835) : mosek::fusion::FusionRuntimeException(_6835){ }mosek::fusion::OptimizeError::OptimizeError  ( const std::string &  _6836) : mosek::fusion::FusionRuntimeException(_6836){ }mosek::fusion::NameError::NameError  ( const std::string &  _6837) : mosek::fusion::FusionRuntimeException(_6837){ }mosek::fusion::ModelError::ModelError  ( const std::string &  _6838) : mosek::fusion::FusionRuntimeException(_6838){ }mosek::fusion::MatrixError::MatrixError  ( const std::string &  _6839) : mosek::fusion::FusionRuntimeException(_6839){ }mosek::fusion::DimensionError::DimensionError  ( const std::string &  _6840) : mosek::fusion::FusionRuntimeException(_6840){ }mosek::fusion::LengthError::LengthError  ( const std::string &  _6841) : mosek::fusion::FusionRuntimeException(_6841){ }mosek::fusion::RangeError::RangeError  ( const std::string &  _6842) : mosek::fusion::FusionRuntimeException(_6842){ }mosek::fusion::IndexError::IndexError  ( const std::string &  _6843) : mosek::fusion::FusionRuntimeException(_6843){ }mosek::fusion::DomainError::DomainError  ( const std::string &  _6844) : mosek::fusion::FusionRuntimeException(_6844){ }mosek::fusion::ValueConversionError::ValueConversionError  ( const std::string &  _6845) : mosek::fusion::FusionRuntimeException(_6845){ }mosek::fusion::ParameterError::ParameterError  ( const std::string &  _6846) : mosek::fusion::FusionRuntimeException(_6846){ }mosek::fusion::ExpressionError::ExpressionError  ( const std::string &  _6847) : mosek::fusion::FusionRuntimeException(_6847){ }mosek::fusion::IOError::IOError  ( const std::string &  _6848) : mosek::fusion::FusionRuntimeException(_6848){ }mosek::fusion::FusionRuntimeException::FusionRuntimeException  ( const std::string &  _6849) : RuntimeException(_6849){ (msg = _6849); }std::string mosek::fusion::FusionRuntimeException::toString(){ return msg; }mosek::fusion::FusionException::FusionException  ( const std::string &  _6850) : Exception(_6850){ (msg = _6850); }std::string mosek::fusion::FusionException::toString(){ return msg; }mosek::fusion::Parameters::Parameters(mosek::fusion::p_Parameters *_impl) : _impl(_impl) { /*std::cout << "Parameters() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::Parameters::~Parameters() { delete _impl; _impl = nullptr; }mosek::fusion::p_Parameters::p_Parameters  (::mosek::fusion::Parameters * _pubthis) :     _pubthis(_pubthis){}void mosek::fusion::Parameters::setParameter  ( monty::rc_ptr< ::mosek::fusion::Model > _6851,    const std::string & _6852,    double _6853) { mosek::fusion::p_Parameters::setParameter(_6851,_6852,_6853); }void mosek::fusion::p_Parameters::setParameter( monty::rc_ptr< ::mosek::fusion::Model > _6851,const std::string & _6852,double _6853){ if (false){ }else if ((_6852 == std::string ("autoUpdateSolInfo"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (autoUpdateSolInfo)"));}else if ((_6852 == std::string ("removeUnusedSolutions"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (removeUnusedSolutions)"));}else {}if ((_6852 == std::string ("numThreads"))){ if (((_6853 - (int)_6853) == 0.0)){ double _6854 = _6853; if (((int)0 <= _6854)){ mosek::fusion::p_Model::_get_impl(_6851.get())->task_put_param(std::string ("MSK_IPAR_NUM_THREADS"),_6854); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (numThreads)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (numThreads)"));}}else if ((_6852 == std::string ("intpntMultiThread"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMultiThread)"));}else {}if ((_6852 == std::string ("mtSpincount"))){ if (((_6853 - (int)_6853) == 0.0)){ double _6855 = _6853; if ((((int)0 <= _6855) && (_6855 <= (int)1000000000))){ mosek::fusion::p_Model::_get_impl(_6851.get())->task_put_param(std::string ("MSK_IPAR_MT_SPINCOUNT"),_6855); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mtSpincount)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mtSpincount)"));}}else if ((_6852 == std::string ("optimizer"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (optimizer)"));}else {}if ((_6852 == std::string ("biMaxIterations"))){ if (((_6853 - (int)_6853) == 0.0)){ double _6856 = _6853; if (((int)0 <= _6856)){ mosek::fusion::p_Model::_get_impl(_6851.get())->task_put_param(std::string ("MSK_IPAR_BI_MAX_ITERATIONS"),_6856); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biMaxIterations)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biMaxIterations)"));}}else {}if ((_6852 == std::string ("licenseTrhExpiryWrn"))){ if (((_6853 - (int)_6853) == 0.0)){ double _6857 = _6853; if (((int)0 <= _6857)){ mosek::fusion::p_Model::_get_impl(_6851.get())->task_put_param(std::string ("MSK_IPAR_LICENSE_TRH_EXPIRY_WRN"),_6857); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseTrhExpiryWrn)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseTrhExpiryWrn)"));}}else {}if ((_6852 == std::string ("logCutSecondOpt"))){ if (((_6853 - (int)_6853) == 0.0)){ double _6858 = _6853; if (((int)0 <= _6858)){ mosek::fusion::p_Model::_get_impl(_6851.get())->task_put_param(std::string ("MSK_IPAR_LOG_CUT_SECOND_OPT"),_6858); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logCutSecondOpt)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logCutSecondOpt)"));}}else {}if ((_6852 == std::string ("logAnaPro"))){ if (((_6853 - (int)_6853) == 0.0)){ double _6859 = _6853; if (((int)0 <= _6859)){ mosek::fusion::p_Model::_get_impl(_6851.get())->task_put_param(std::string ("MSK_IPAR_LOG_ANA_PRO"),_6859); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logAnaPro)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logAnaPro)"));}}else {}if ((_6852 == std::string ("logResponse"))){ if (((_6853 - (int)_6853) == 0.0)){ double _6860 = _6853; if (((int)0 <= _6860)){ mosek::fusion::p_Model::_get_impl(_6851.get())->task_put_param(std::string ("MSK_IPAR_LOG_RESPONSE"),_6860); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logResponse)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logResponse)"));}}else {}if ((_6852 == std::string ("logBi"))){ if (((_6853 - (int)_6853) == 0.0)){ double _6861 = _6853; if (((int)0 <= _6861)){ mosek::fusion::p_Model::_get_impl(_6851.get())->task_put_param(std::string ("MSK_IPAR_LOG_BI"),_6861); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logBi)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logBi)"));}}else {}if ((_6852 == std::string ("logBiFreq"))){ if (((_6853 - (int)_6853) == 0.0)){ double _6862 = _6853; if (((int)0 <= _6862)){ mosek::fusion::p_Model::_get_impl(_6851.get())->task_put_param(std::string ("MSK_IPAR_LOG_BI_FREQ"),_6862); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logBiFreq)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logBiFreq)"));}}else if ((_6852 == std::string ("biCleanOptimizer"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biCleanOptimizer)"));}else if ((_6852 == std::string ("intpntStartingPoint"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntStartingPoint)"));}else if ((_6852 == std::string ("intpntDiffStep"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntDiffStep)"));}else if ((_6852 == std::string ("intpntScaling"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntScaling)"));}else if ((_6852 == std::string ("intpntSolveForm"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntSolveForm)"));}else {}if ((_6852 == std::string ("logIntpnt"))){ if (((_6853 - (int)_6853) == 0.0)){ double _6863 = _6853; if (((int)0 <= _6863)){ mosek::fusion::p_Model::_get_impl(_6851.get())->task_put_param(std::string ("MSK_IPAR_LOG_INTPNT"),_6863); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logIntpnt)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logIntpnt)"));}}else {}if ((_6852 == std::string ("intpntMaxIterations"))){ if (((_6853 - (int)_6853) == 0.0)){ double _6864 = _6853; if (((int)0 <= _6864)){ mosek::fusion::p_Model::_get_impl(_6851.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_MAX_ITERATIONS"),_6864); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMaxIterations)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMaxIterations)"));}}else {}if ((_6852 == std::string ("intpntOffColTrh"))){ if (((_6853 - (int)_6853) == 0.0)){ double _6865 = _6853; if (((int)0 <= _6865)){ mosek::fusion::p_Model::_get_impl(_6851.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_OFF_COL_TRH"),_6865); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOffColTrh)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOffColTrh)"));}}else if ((_6852 == std::string ("intpntOrderMethod"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOrderMethod)"));}else if ((_6852 == std::string ("intpntBasis"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntBasis)"));}else if ((_6852 == std::string ("biIgnoreMaxIter"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biIgnoreMaxIter)"));}else if ((_6852 == std::string ("biIgnoreNumError"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biIgnoreNumError)"));}else {}if ((_6852 == std::string ("intpntMaxNumCor"))){ if (((_6853 - (int)_6853) == 0.0)){ double _6866 = _6853; if (((- (int)1) <= _6866)){ mosek::fusion::p_Model::_get_impl(_6851.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_MAX_NUM_COR"),_6866); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMaxNumCor)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMaxNumCor)"));}}else if ((_6852 == std::string ("presolveUse"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveUse)"));}else {}if ((_6852 == std::string ("presolveLevel"))){ if (((_6853 - (int)_6853) == 0.0)){ double _6867 = _6853; if (true){ mosek::fusion::p_Model::_get_impl(_6851.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_LEVEL"),_6867); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLevel)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLevel)"));}}else {}if ((_6852 == std::string ("logPresolve"))){ if (((_6853 - (int)_6853) == 0.0)){ double _6868 = _6853; if (((int)0 <= _6868)){ mosek::fusion::p_Model::_get_impl(_6851.get())->task_put_param(std::string ("MSK_IPAR_LOG_PRESOLVE"),_6868); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logPresolve)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logPresolve)"));}}else if ((_6852 == std::string ("presolveLindepUse"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepUse)"));}else {}if ((_6852 == std::string ("presolveEliminatorMaxNumTries"))){ if (((_6853 - (int)_6853) == 0.0)){ double _6869 = _6853; if (true){ mosek::fusion::p_Model::_get_impl(_6851.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_ELIMINATOR_MAX_NUM_TRIES"),_6869); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveEliminatorMaxNumTries)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveEliminatorMaxNumTries)"));}}else {}if ((_6852 == std::string ("presolveEliminatorMaxFill"))){ if (((_6853 - (int)_6853) == 0.0)){ double _6870 = _6853; if (true){ mosek::fusion::p_Model::_get_impl(_6851.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_ELIMINATOR_MAX_FILL"),_6870); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveEliminatorMaxFill)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveEliminatorMaxFill)"));}}else {}if ((_6852 == std::string ("simPrimalCrash"))){ if (((_6853 - (int)_6853) == 0.0)){ double _6871 = _6853; if (((int)0 <= _6871)){ mosek::fusion::p_Model::_get_impl(_6851.get())->task_put_param(std::string ("MSK_IPAR_SIM_PRIMAL_CRASH"),_6871); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalCrash)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalCrash)"));}}else {}if ((_6852 == std::string ("logSim"))){ if (((_6853 - (int)_6853) == 0.0)){ double _6872 = _6853; if (((int)0 <= _6872)){ mosek::fusion::p_Model::_get_impl(_6851.get())->task_put_param(std::string ("MSK_IPAR_LOG_SIM"),_6872); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSim)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSim)"));}}else {}if ((_6852 == std::string ("logSimMinor"))){ if (((_6853 - (int)_6853) == 0.0)){ double _6873 = _6853; if (((int)0 <= _6873)){ mosek::fusion::p_Model::_get_impl(_6851.get())->task_put_param(std::string ("MSK_IPAR_LOG_SIM_MINOR"),_6873); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSimMinor)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSimMinor)"));}}else {}if ((_6852 == std::string ("logSimFreq"))){ if (((_6853 - (int)_6853) == 0.0)){ double _6874 = _6853; if (((int)0 <= _6874)){ mosek::fusion::p_Model::_get_impl(_6851.get())->task_put_param(std::string ("MSK_IPAR_LOG_SIM_FREQ"),_6874); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSimFreq)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSimFreq)"));}}else {}if ((_6852 == std::string ("simPrimalRestrictSelection"))){ if (((_6853 - (int)_6853) == 0.0)){ double _6875 = _6853; if ((((int)0 <= _6875) && (_6875 <= (int)100))){ mosek::fusion::p_Model::_get_impl(_6851.get())->task_put_param(std::string ("MSK_IPAR_SIM_PRIMAL_RESTRICT_SELECTION"),_6875); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalRestrictSelection)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalRestrictSelection)"));}}else if ((_6852 == std::string ("simPrimalSelection"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalSelection)"));}else {}if ((_6852 == std::string ("simDualRestrictSelection"))){ if (((_6853 - (int)_6853) == 0.0)){ double _6876 = _6853; if ((((int)0 <= _6876) && (_6876 <= (int)100))){ mosek::fusion::p_Model::_get_impl(_6851.get())->task_put_param(std::string ("MSK_IPAR_SIM_DUAL_RESTRICT_SELECTION"),_6876); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualRestrictSelection)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualRestrictSelection)"));}}else if ((_6852 == std::string ("simDualSelection"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualSelection)"));}else {}if ((_6852 == std::string ("simMaxIterations"))){ if (((_6853 - (int)_6853) == 0.0)){ double _6877 = _6853; if (((int)0 <= _6877)){ mosek::fusion::p_Model::_get_impl(_6851.get())->task_put_param(std::string ("MSK_IPAR_SIM_MAX_ITERATIONS"),_6877); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simMaxIterations)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simMaxIterations)"));}}else if ((_6852 == std::string ("simHotstartLu"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simHotstartLu)"));}else {}if ((_6852 == std::string ("simRefactorFreq"))){ if (((_6853 - (int)_6853) == 0.0)){ double _6878 = _6853; if (((int)0 <= _6878)){ mosek::fusion::p_Model::_get_impl(_6851.get())->task_put_param(std::string ("MSK_IPAR_SIM_REFACTOR_FREQ"),_6878); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simRefactorFreq)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simRefactorFreq)"));}}else if ((_6852 == std::string ("mioMode"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMode)"));}else {}if ((_6852 == std::string ("logMio"))){ if (((_6853 - (int)_6853) == 0.0)){ double _6879 = _6853; if (((int)0 <= _6879)){ mosek::fusion::p_Model::_get_impl(_6851.get())->task_put_param(std::string ("MSK_IPAR_LOG_MIO"),_6879); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logMio)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logMio)"));}}else {}if ((_6852 == std::string ("logMioFreq"))){ if (((_6853 - (int)_6853) == 0.0)){ double _6880 = _6853; if (true){ mosek::fusion::p_Model::_get_impl(_6851.get())->task_put_param(std::string ("MSK_IPAR_LOG_MIO_FREQ"),_6880); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logMioFreq)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logMioFreq)"));}}else {}if ((_6852 == std::string ("mioMaxNumRelaxs"))){ if (((_6853 - (int)_6853) == 0.0)){ double _6881 = _6853; if (true){ mosek::fusion::p_Model::_get_impl(_6851.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_RELAXS"),_6881); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumRelaxs)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumRelaxs)"));}}else {}if ((_6852 == std::string ("mioMaxNumBranches"))){ if (((_6853 - (int)_6853) == 0.0)){ double _6882 = _6853; if (true){ mosek::fusion::p_Model::_get_impl(_6851.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_BRANCHES"),_6882); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumBranches)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumBranches)"));}}else {}if ((_6852 == std::string ("mioMaxNumSolutions"))){ if (((_6853 - (int)_6853) == 0.0)){ double _6883 = _6853; if (true){ mosek::fusion::p_Model::_get_impl(_6851.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_SOLUTIONS"),_6883); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumSolutions)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumSolutions)"));}}else if ((_6852 == std::string ("mioNodeSelection"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioNodeSelection)"));}else {}if ((_6852 == std::string ("mioHeuristicLevel"))){ if (((_6853 - (int)_6853) == 0.0)){ double _6884 = _6853; if (true){ mosek::fusion::p_Model::_get_impl(_6851.get())->task_put_param(std::string ("MSK_IPAR_MIO_HEURISTIC_LEVEL"),_6884); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioHeuristicLevel)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioHeuristicLevel)"));}}else {}if ((_6852 == std::string ("mioProbingLevel"))){ if (((_6853 - (int)_6853) == 0.0)){ double _6885 = _6853; if ((((- (int)1) <= _6885) && (_6885 <= (int)3))){ mosek::fusion::p_Model::_get_impl(_6851.get())->task_put_param(std::string ("MSK_IPAR_MIO_PROBING_LEVEL"),_6885); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioProbingLevel)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioProbingLevel)"));}}else {}if ((_6852 == std::string ("mioCutSelectionLevel"))){ if (((_6853 - (int)_6853) == 0.0)){ double _6886 = _6853; if ((((- (int)1) <= _6886) && (_6886 <= (int)1))){ mosek::fusion::p_Model::_get_impl(_6851.get())->task_put_param(std::string ("MSK_IPAR_MIO_CUT_SELECTION_LEVEL"),_6886); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutSelectionLevel)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutSelectionLevel)"));}}else {}if ((_6852 == std::string ("mioVbDetectionLevel"))){ if (((_6853 - (int)_6853) == 0.0)){ double _6887 = _6853; if ((((- (int)1) <= _6887) && (_6887 <= (int)2))){ mosek::fusion::p_Model::_get_impl(_6851.get())->task_put_param(std::string ("MSK_IPAR_MIO_VB_DETECTION_LEVEL"),_6887); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioVbDetectionLevel)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioVbDetectionLevel)"));}}else if ((_6852 == std::string ("mioBranchDir"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioBranchDir)"));}else if ((_6852 == std::string ("mioRootOptimizer"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRootOptimizer)"));}else if ((_6852 == std::string ("mioNodeOptimizer"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioNodeOptimizer)"));}else if ((_6852 == std::string ("mioPerspectiveReformulate"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioPerspectiveReformulate)"));}else if ((_6852 == std::string ("writeLpQuotedNames"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpQuotedNames)"));}else {}if ((_6852 == std::string ("writeLpLineWidth"))){ if (((_6853 - (int)_6853) == 0.0)){ double _6888 = _6853; if (((int)40 <= _6888)){ mosek::fusion::p_Model::_get_impl(_6851.get())->task_put_param(std::string ("MSK_IPAR_WRITE_LP_LINE_WIDTH"),_6888); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpLineWidth)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpLineWidth)"));}}else {}if ((_6852 == std::string ("writeLpTermsPerLine"))){ if (((_6853 - (int)_6853) == 0.0)){ double _6889 = _6853; if (((int)0 <= _6889)){ mosek::fusion::p_Model::_get_impl(_6851.get())->task_put_param(std::string ("MSK_IPAR_WRITE_LP_TERMS_PER_LINE"),_6889); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpTermsPerLine)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpTermsPerLine)"));}}else if ((_6852 == std::string ("writeLpFullObj"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpFullObj)"));}else {}if ((_6852 == std::string ("logInfeasAna"))){ if (((_6853 - (int)_6853) == 0.0)){ double _6890 = _6853; if (((int)0 <= _6890)){ mosek::fusion::p_Model::_get_impl(_6851.get())->task_put_param(std::string ("MSK_IPAR_LOG_INFEAS_ANA"),_6890); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logInfeasAna)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logInfeasAna)"));}}else if ((_6852 == std::string ("licenseWait"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseWait)"));}else if ((_6852 == std::string ("licenseSuppressExpireWrns"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseSuppressExpireWrns)"));}else {}if ((_6852 == std::string ("licensePauseTime"))){ if (((_6853 - (int)_6853) == 0.0)){ double _6891 = _6853; if ((((int)0 <= _6891) && (_6891 <= (int)1000000))){ mosek::fusion::p_Model::_get_impl(_6851.get())->task_put_param(std::string ("MSK_IPAR_LICENSE_PAUSE_TIME"),_6891); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licensePauseTime)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licensePauseTime)"));}}else if ((_6852 == std::string ("licenseDebug"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseDebug)"));}else {}if ((_6852 == std::string ("log"))){ if (((_6853 - (int)_6853) == 0.0)){ double _6892 = _6853; if (((int)0 <= _6892)){ mosek::fusion::p_Model::_get_impl(_6851.get())->task_put_param(std::string ("MSK_IPAR_LOG"),_6892); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (log)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (log)"));}}else {}if ((_6852 == std::string ("logExpand"))){ if (((_6853 - (int)_6853) == 0.0)){ double _6893 = _6853; if (((int)0 <= _6893)){ mosek::fusion::p_Model::_get_impl(_6851.get())->task_put_param(std::string ("MSK_IPAR_LOG_EXPAND"),_6893); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logExpand)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logExpand)"));}}else {}if ((_6852 == std::string ("logFile"))){ if (((_6853 - (int)_6853) == 0.0)){ double _6894 = _6853; if (((int)0 <= _6894)){ mosek::fusion::p_Model::_get_impl(_6851.get())->task_put_param(std::string ("MSK_IPAR_LOG_FILE"),_6894); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logFile)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logFile)"));}}else {}if ((_6852 == std::string ("logOrder"))){ if (((_6853 - (int)_6853) == 0.0)){ double _6895 = _6853; if (((int)0 <= _6895)){ mosek::fusion::p_Model::_get_impl(_6851.get())->task_put_param(std::string ("MSK_IPAR_LOG_ORDER"),_6895); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logOrder)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logOrder)"));}}else if ((_6852 == std::string ("simScaling"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simScaling)"));}else if ((_6852 == std::string ("simScalingMethod"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simScalingMethod)"));}else {}if ((_6852 == std::string ("simPrimalPhaseoneMethod"))){ if (((_6853 - (int)_6853) == 0.0)){ double _6896 = _6853; if ((((int)0 <= _6896) && (_6896 <= (int)10))){ mosek::fusion::p_Model::_get_impl(_6851.get())->task_put_param(std::string ("MSK_IPAR_SIM_PRIMAL_PHASEONE_METHOD"),_6896); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalPhaseoneMethod)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalPhaseoneMethod)"));}}else {}if ((_6852 == std::string ("simDualPhaseoneMethod"))){ if (((_6853 - (int)_6853) == 0.0)){ double _6897 = _6853; if ((((int)0 <= _6897) && (_6897 <= (int)10))){ mosek::fusion::p_Model::_get_impl(_6851.get())->task_put_param(std::string ("MSK_IPAR_SIM_DUAL_PHASEONE_METHOD"),_6897); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualPhaseoneMethod)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualPhaseoneMethod)"));}}else {}if ((_6852 == std::string ("simMaxNumSetbacks"))){ if (((_6853 - (int)_6853) == 0.0)){ double _6898 = _6853; if (((int)0 <= _6898)){ mosek::fusion::p_Model::_get_impl(_6851.get())->task_put_param(std::string ("MSK_IPAR_SIM_MAX_NUM_SETBACKS"),_6898); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simMaxNumSetbacks)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simMaxNumSetbacks)"));}}else if ((_6852 == std::string ("simHotstart"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simHotstart)"));}else if ((_6852 == std::string ("simBasisFactorUse"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simBasisFactorUse)"));}else if ((_6852 == std::string ("simDegen"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDegen)"));}else if ((_6852 == std::string ("simReformulation"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simReformulation)"));}else if ((_6852 == std::string ("simExploitDupvec"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simExploitDupvec)"));}else if ((_6852 == std::string ("simSaveLu"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSaveLu)"));}else if ((_6852 == std::string ("simNonSingular"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simNonSingular)"));}else {}if ((_6852 == std::string ("simDualCrash"))){ if (((_6853 - (int)_6853) == 0.0)){ double _6899 = _6853; if (((int)0 <= _6899)){ mosek::fusion::p_Model::_get_impl(_6851.get())->task_put_param(std::string ("MSK_IPAR_SIM_DUAL_CRASH"),_6899); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualCrash)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualCrash)"));}}else if ((_6852 == std::string ("infeasPreferPrimal"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (infeasPreferPrimal)"));}else {}if ((_6852 == std::string ("mioRootRepeatPresolveLevel"))){ if (((_6853 - (int)_6853) == 0.0)){ double _6900 = _6853; if ((((- (int)1) <= _6900) && (_6900 <= (int)1))){ mosek::fusion::p_Model::_get_impl(_6851.get())->task_put_param(std::string ("MSK_IPAR_MIO_ROOT_REPEAT_PRESOLVE_LEVEL"),_6900); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRootRepeatPresolveLevel)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRootRepeatPresolveLevel)"));}}else if ((_6852 == std::string ("mioCutCmir"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutCmir)"));}else if ((_6852 == std::string ("mioCutClique"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutClique)"));}else if ((_6852 == std::string ("mioCutImpliedBound"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutImpliedBound)"));}else if ((_6852 == std::string ("mioCutKnapsackCover"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutKnapsackCover)"));}else if ((_6852 == std::string ("mioCutGmi"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutGmi)"));}else if ((_6852 == std::string ("mioConstructSol"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioConstructSol)"));}else {}if ((_6852 == std::string ("presolveLindepRelWorkTrh"))){ if (((_6853 - (int)_6853) == 0.0)){ double _6901 = _6853; if (true){ mosek::fusion::p_Model::_get_impl(_6851.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_LINDEP_REL_WORK_TRH"),_6901); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepRelWorkTrh)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepRelWorkTrh)"));}}else {}if ((_6852 == std::string ("presolveLindepAbsWorkTrh"))){ if (((_6853 - (int)_6853) == 0.0)){ double _6902 = _6853; if (true){ mosek::fusion::p_Model::_get_impl(_6851.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_LINDEP_ABS_WORK_TRH"),_6902); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepAbsWorkTrh)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepAbsWorkTrh)"));}}else if ((_6852 == std::string ("cacheLicense"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (cacheLicense)"));}else if ((_6852 == std::string ("intpntRegularizationUse"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntRegularizationUse)"));}else if ((_6852 == std::string ("simSolveForm"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSolveForm)"));}else if ((_6852 == std::string ("simSwitchOptimizer"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSwitchOptimizer)"));}else {}if ((_6852 == std::string ("mioRinsMaxNodes"))){ if (((_6853 - (int)_6853) == 0.0)){ double _6903 = _6853; if (((- (int)1) <= _6903)){ mosek::fusion::p_Model::_get_impl(_6851.get())->task_put_param(std::string ("MSK_IPAR_MIO_RINS_MAX_NODES"),_6903); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRinsMaxNodes)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRinsMaxNodes)"));}}else {}if ((_6852 == std::string ("optimizerMaxTime"))){ double _6904 = _6853; if (true){ mosek::fusion::p_Model::_get_impl(_6851.get())->task_put_param(std::string ("MSK_DPAR_OPTIMIZER_MAX_TIME"),_6904); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (optimizerMaxTime)"));}}else {}if ((_6852 == std::string ("lowerObjCut"))){ double _6905 = _6853; if (true){ mosek::fusion::p_Model::_get_impl(_6851.get())->task_put_param(std::string ("MSK_DPAR_LOWER_OBJ_CUT"),_6905); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (lowerObjCut)"));}}else {}if ((_6852 == std::string ("upperObjCut"))){ double _6906 = _6853; if (true){ mosek::fusion::p_Model::_get_impl(_6851.get())->task_put_param(std::string ("MSK_DPAR_UPPER_OBJ_CUT"),_6906); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (upperObjCut)"));}}else {}if ((_6852 == std::string ("upperObjCutFiniteTrh"))){ double _6907 = _6853; if (true){ mosek::fusion::p_Model::_get_impl(_6851.get())->task_put_param(std::string ("MSK_DPAR_UPPER_OBJ_CUT_FINITE_TRH"),_6907); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (upperObjCutFiniteTrh)"));}}else {}if ((_6852 == std::string ("lowerObjCutFiniteTrh"))){ double _6908 = _6853; if (true){ mosek::fusion::p_Model::_get_impl(_6851.get())->task_put_param(std::string ("MSK_DPAR_LOWER_OBJ_CUT_FINITE_TRH"),_6908); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (lowerObjCutFiniteTrh)"));}}else {}if ((_6852 == std::string ("intpntTolRelGap"))){ double _6909 = _6853; if ((1.000000e-14 <= _6909)){ mosek::fusion::p_Model::_get_impl(_6851.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_REL_GAP"),_6909); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolRelGap)"));}}else {}if ((_6852 == std::string ("intpntTolStepSize"))){ double _6910 = _6853; if (((0.000000e+00 <= _6910) && (_6910 <= 1.000000e+00))){ mosek::fusion::p_Model::_get_impl(_6851.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_STEP_SIZE"),_6910); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolStepSize)"));}}else {}if ((_6852 == std::string ("simLuTolRelPiv"))){ double _6911 = _6853; if (((1.000000e-06 <= _6911) && (_6911 <= 9.999990e-01))){ mosek::fusion::p_Model::_get_impl(_6851.get())->task_put_param(std::string ("MSK_DPAR_SIM_LU_TOL_REL_PIV"),_6911); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simLuTolRelPiv)"));}}else {}if ((_6852 == std::string ("intpntTolRelStep"))){ double _6912 = _6853; if (((1.000000e-04 <= _6912) && (_6912 <= 9.999990e-01))){ mosek::fusion::p_Model::_get_impl(_6851.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_REL_STEP"),_6912); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolRelStep)"));}}else {}if ((_6852 == std::string ("intpntTolPath"))){ double _6913 = _6853; if (((0.000000e+00 <= _6913) && (_6913 <= 9.999000e-01))){ mosek::fusion::p_Model::_get_impl(_6851.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_PATH"),_6913); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPath)"));}}else {}if ((_6852 == std::string ("intpntTolPfeas"))){ double _6914 = _6853; if (((0.000000e+00 <= _6914) && (_6914 <= 1.000000e+00))){ mosek::fusion::p_Model::_get_impl(_6851.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_PFEAS"),_6914); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPfeas)"));}}else {}if ((_6852 == std::string ("intpntTolDfeas"))){ double _6915 = _6853; if (((0.000000e+00 <= _6915) && (_6915 <= 1.000000e+00))){ mosek::fusion::p_Model::_get_impl(_6851.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_DFEAS"),_6915); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolDfeas)"));}}else {}if ((_6852 == std::string ("intpntTolMuRed"))){ double _6916 = _6853; if (((0.000000e+00 <= _6916) && (_6916 <= 1.000000e+00))){ mosek::fusion::p_Model::_get_impl(_6851.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_MU_RED"),_6916); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolMuRed)"));}}else {}if ((_6852 == std::string ("intpntTolInfeas"))){ double _6917 = _6853; if (((0.000000e+00 <= _6917) && (_6917 <= 1.000000e+00))){ mosek::fusion::p_Model::_get_impl(_6851.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_INFEAS"),_6917); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolInfeas)"));}}else {}if ((_6852 == std::string ("intpntCoTolRelGap"))){ double _6918 = _6853; if (((0.000000e+00 <= _6918) && (_6918 <= 1.000000e+00))){ mosek::fusion::p_Model::_get_impl(_6851.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_REL_GAP"),_6918); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolRelGap)"));}}else {}if ((_6852 == std::string ("intpntCoTolPfeas"))){ double _6919 = _6853; if (((0.000000e+00 <= _6919) && (_6919 <= 1.000000e+00))){ mosek::fusion::p_Model::_get_impl(_6851.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_PFEAS"),_6919); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolPfeas)"));}}else {}if ((_6852 == std::string ("intpntCoTolDfeas"))){ double _6920 = _6853; if (((0.000000e+00 <= _6920) && (_6920 <= 1.000000e+00))){ mosek::fusion::p_Model::_get_impl(_6851.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_DFEAS"),_6920); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolDfeas)"));}}else {}if ((_6852 == std::string ("intpntCoTolMuRed"))){ double _6921 = _6853; if (((0.000000e+00 <= _6921) && (_6921 <= 1.000000e+00))){ mosek::fusion::p_Model::_get_impl(_6851.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_MU_RED"),_6921); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolMuRed)"));}}else {}if ((_6852 == std::string ("intpntCoTolNearRel"))){ double _6922 = _6853; if ((1.000000e+00 <= _6922)){ mosek::fusion::p_Model::_get_impl(_6851.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_NEAR_REL"),_6922); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolNearRel)"));}}else {}if ((_6852 == std::string ("intpntCoTolInfeas"))){ double _6923 = _6853; if (((0.000000e+00 <= _6923) && (_6923 <= 1.000000e+00))){ mosek::fusion::p_Model::_get_impl(_6851.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_INFEAS"),_6923); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolInfeas)"));}}else {}if ((_6852 == std::string ("intpntQoTolRelGap"))){ double _6924 = _6853; if (((0.000000e+00 <= _6924) && (_6924 <= 1.000000e+00))){ mosek::fusion::p_Model::_get_impl(_6851.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_QO_TOL_REL_GAP"),_6924); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntQoTolRelGap)"));}}else {}if ((_6852 == std::string ("intpntQoTolPfeas"))){ double _6925 = _6853; if (((0.000000e+00 <= _6925) && (_6925 <= 1.000000e+00))){ mosek::fusion::p_Model::_get_impl(_6851.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_QO_TOL_PFEAS"),_6925); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntQoTolPfeas)"));}}else {}if ((_6852 == std::string ("intpntQoTolDfeas"))){ double _6926 = _6853; if (((0.000000e+00 <= _6926) && (_6926 <= 1.000000e+00))){ mosek::fusion::p_Model::_get_impl(_6851.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_QO_TOL_DFEAS"),_6926); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntQoTolDfeas)"));}}else {}if ((_6852 == std::string ("intpntQoTolMuRed"))){ double _6927 = _6853; if (((0.000000e+00 <= _6927) && (_6927 <= 1.000000e+00))){ mosek::fusion::p_Model::_get_impl(_6851.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_QO_TOL_MU_RED"),_6927); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntQoTolMuRed)"));}}else {}if ((_6852 == std::string ("intpntQoTolNearRel"))){ double _6928 = _6853; if ((1.000000e+00 <= _6928)){ mosek::fusion::p_Model::_get_impl(_6851.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_QO_TOL_NEAR_REL"),_6928); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntQoTolNearRel)"));}}else {}if ((_6852 == std::string ("intpntQoTolInfeas"))){ double _6929 = _6853; if (((0.000000e+00 <= _6929) && (_6929 <= 1.000000e+00))){ mosek::fusion::p_Model::_get_impl(_6851.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_QO_TOL_INFEAS"),_6929); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntQoTolInfeas)"));}}else {}if ((_6852 == std::string ("intpntTolPsafe"))){ double _6930 = _6853; if ((1.000000e-04 <= _6930)){ mosek::fusion::p_Model::_get_impl(_6851.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_PSAFE"),_6930); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPsafe)"));}}else {}if ((_6852 == std::string ("intpntTolDsafe"))){ double _6931 = _6853; if ((1.000000e-04 <= _6931)){ mosek::fusion::p_Model::_get_impl(_6851.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_DSAFE"),_6931); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolDsafe)"));}}else {}if ((_6852 == std::string ("mioMaxTime"))){ double _6932 = _6853; if (true){ mosek::fusion::p_Model::_get_impl(_6851.get())->task_put_param(std::string ("MSK_DPAR_MIO_MAX_TIME"),_6932); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxTime)"));}}else {}if ((_6852 == std::string ("mioDisableTermTime"))){ double _6933 = _6853; if (true){ mosek::fusion::p_Model::_get_impl(_6851.get())->task_put_param(std::string ("MSK_DPAR_MIO_DISABLE_TERM_TIME"),_6933); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioDisableTermTime)"));}}else {}if ((_6852 == std::string ("mioRelGapConst"))){ double _6934 = _6853; if ((1.000000e-15 <= _6934)){ mosek::fusion::p_Model::_get_impl(_6851.get())->task_put_param(std::string ("MSK_DPAR_MIO_REL_GAP_CONST"),_6934); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRelGapConst)"));}}else {}if ((_6852 == std::string ("mioTolRelGap"))){ double _6935 = _6853; if ((0.000000e+00 <= _6935)){ mosek::fusion::p_Model::_get_impl(_6851.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_REL_GAP"),_6935); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolRelGap)"));}}else {}if ((_6852 == std::string ("mioNearTolRelGap"))){ double _6936 = _6853; if ((0.000000e+00 <= _6936)){ mosek::fusion::p_Model::_get_impl(_6851.get())->task_put_param(std::string ("MSK_DPAR_MIO_NEAR_TOL_REL_GAP"),_6936); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioNearTolRelGap)"));}}else {}if ((_6852 == std::string ("mioTolAbsGap"))){ double _6937 = _6853; if ((0.000000e+00 <= _6937)){ mosek::fusion::p_Model::_get_impl(_6851.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_ABS_GAP"),_6937); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolAbsGap)"));}}else {}if ((_6852 == std::string ("mioNearTolAbsGap"))){ double _6938 = _6853; if ((0.000000e+00 <= _6938)){ mosek::fusion::p_Model::_get_impl(_6851.get())->task_put_param(std::string ("MSK_DPAR_MIO_NEAR_TOL_ABS_GAP"),_6938); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioNearTolAbsGap)"));}}else {}if ((_6852 == std::string ("mioTolAbsRelaxInt"))){ double _6939 = _6853; if ((1.000000e-09 <= _6939)){ mosek::fusion::p_Model::_get_impl(_6851.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_ABS_RELAX_INT"),_6939); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolAbsRelaxInt)"));}}else {}if ((_6852 == std::string ("basisTolX"))){ double _6940 = _6853; if ((1.000000e-09 <= _6940)){ mosek::fusion::p_Model::_get_impl(_6851.get())->task_put_param(std::string ("MSK_DPAR_BASIS_TOL_X"),_6940); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisTolX)"));}}else {}if ((_6852 == std::string ("basisTolS"))){ double _6941 = _6853; if ((1.000000e-09 <= _6941)){ mosek::fusion::p_Model::_get_impl(_6851.get())->task_put_param(std::string ("MSK_DPAR_BASIS_TOL_S"),_6941); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisTolS)"));}}else {}if ((_6852 == std::string ("basisRelTolS"))){ double _6942 = _6853; if ((0.000000e+00 <= _6942)){ mosek::fusion::p_Model::_get_impl(_6851.get())->task_put_param(std::string ("MSK_DPAR_BASIS_REL_TOL_S"),_6942); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisRelTolS)"));}}else {}if ((_6852 == std::string ("presolveTolX"))){ double _6943 = _6853; if ((0.000000e+00 <= _6943)){ mosek::fusion::p_Model::_get_impl(_6851.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_X"),_6943); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolX)"));}}else {}if ((_6852 == std::string ("presolveTolS"))){ double _6944 = _6853; if ((0.000000e+00 <= _6944)){ mosek::fusion::p_Model::_get_impl(_6851.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_S"),_6944); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolS)"));}}else {}if ((_6852 == std::string ("presolveTolAij"))){ double _6945 = _6853; if ((1.000000e-15 <= _6945)){ mosek::fusion::p_Model::_get_impl(_6851.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_AIJ"),_6945); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolAij)"));}}else {}if ((_6852 == std::string ("presolveTolAbsLindep"))){ double _6946 = _6853; if ((0.000000e+00 <= _6946)){ mosek::fusion::p_Model::_get_impl(_6851.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_ABS_LINDEP"),_6946); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolAbsLindep)"));}}else {}if ((_6852 == std::string ("presolveTolRelLindep"))){ double _6947 = _6853; if ((0.000000e+00 <= _6947)){ mosek::fusion::p_Model::_get_impl(_6851.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_REL_LINDEP"),_6947); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolRelLindep)"));}}else {}if ((_6852 == std::string ("simplexAbsTolPiv"))){ double _6948 = _6853; if ((1.000000e-12 <= _6948)){ mosek::fusion::p_Model::_get_impl(_6851.get())->task_put_param(std::string ("MSK_DPAR_SIMPLEX_ABS_TOL_PIV"),_6948); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simplexAbsTolPiv)"));}}else {}if ((_6852 == std::string ("mioTolFeas"))){ double _6949 = _6853; if (((1.000000e-09 <= _6949) && (_6949 <= 1.000000e-03))){ mosek::fusion::p_Model::_get_impl(_6851.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_FEAS"),_6949); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolFeas)"));}}else {}if ((_6852 == std::string ("anaSolInfeasTol"))){ double _6950 = _6853; if ((0.000000e+00 <= _6950)){ mosek::fusion::p_Model::_get_impl(_6851.get())->task_put_param(std::string ("MSK_DPAR_ANA_SOL_INFEAS_TOL"),_6950); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (anaSolInfeasTol)"));}}else {}if ((_6852 == std::string ("mioTolRelDualBoundImprovement"))){ double _6951 = _6853; if (((0.000000e+00 <= _6951) && (_6951 <= 1.000000e+00))){ mosek::fusion::p_Model::_get_impl(_6851.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_REL_DUAL_BOUND_IMPROVEMENT"),_6951); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolRelDualBoundImprovement)"));}}else {}throw ::mosek::fusion::ParameterError(std::string ("Unknown parameter"));}void mosek::fusion::Parameters::setParameter  ( monty::rc_ptr< ::mosek::fusion::Model > _6952,    const std::string & _6953,    int _6954) { mosek::fusion::p_Parameters::setParameter(_6952,_6953,_6954); }void mosek::fusion::p_Parameters::setParameter( monty::rc_ptr< ::mosek::fusion::Model > _6952,const std::string & _6953,int _6954){ if (false){ }else if ((_6953 == std::string ("autoUpdateSolInfo"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (autoUpdateSolInfo)"));}else if ((_6953 == std::string ("removeUnusedSolutions"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (removeUnusedSolutions)"));}else {}if ((_6953 == std::string ("numThreads"))){ int _6955 = _6954; if (((int)0 <= _6955)){ mosek::fusion::p_Model::_get_impl(_6952.get())->task_put_param(std::string ("MSK_IPAR_NUM_THREADS"),_6955); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (numThreads)"));}}else if ((_6953 == std::string ("intpntMultiThread"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMultiThread)"));}else {}if ((_6953 == std::string ("mtSpincount"))){ int _6956 = _6954; if ((((int)0 <= _6956) && (_6956 <= (int)1000000000))){ mosek::fusion::p_Model::_get_impl(_6952.get())->task_put_param(std::string ("MSK_IPAR_MT_SPINCOUNT"),_6956); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mtSpincount)"));}}else if ((_6953 == std::string ("optimizer"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (optimizer)"));}else {}if ((_6953 == std::string ("biMaxIterations"))){ int _6957 = _6954; if (((int)0 <= _6957)){ mosek::fusion::p_Model::_get_impl(_6952.get())->task_put_param(std::string ("MSK_IPAR_BI_MAX_ITERATIONS"),_6957); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biMaxIterations)"));}}else {}if ((_6953 == std::string ("licenseTrhExpiryWrn"))){ int _6958 = _6954; if (((int)0 <= _6958)){ mosek::fusion::p_Model::_get_impl(_6952.get())->task_put_param(std::string ("MSK_IPAR_LICENSE_TRH_EXPIRY_WRN"),_6958); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseTrhExpiryWrn)"));}}else {}if ((_6953 == std::string ("logCutSecondOpt"))){ int _6959 = _6954; if (((int)0 <= _6959)){ mosek::fusion::p_Model::_get_impl(_6952.get())->task_put_param(std::string ("MSK_IPAR_LOG_CUT_SECOND_OPT"),_6959); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logCutSecondOpt)"));}}else {}if ((_6953 == std::string ("logAnaPro"))){ int _6960 = _6954; if (((int)0 <= _6960)){ mosek::fusion::p_Model::_get_impl(_6952.get())->task_put_param(std::string ("MSK_IPAR_LOG_ANA_PRO"),_6960); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logAnaPro)"));}}else {}if ((_6953 == std::string ("logResponse"))){ int _6961 = _6954; if (((int)0 <= _6961)){ mosek::fusion::p_Model::_get_impl(_6952.get())->task_put_param(std::string ("MSK_IPAR_LOG_RESPONSE"),_6961); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logResponse)"));}}else {}if ((_6953 == std::string ("logBi"))){ int _6962 = _6954; if (((int)0 <= _6962)){ mosek::fusion::p_Model::_get_impl(_6952.get())->task_put_param(std::string ("MSK_IPAR_LOG_BI"),_6962); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logBi)"));}}else {}if ((_6953 == std::string ("logBiFreq"))){ int _6963 = _6954; if (((int)0 <= _6963)){ mosek::fusion::p_Model::_get_impl(_6952.get())->task_put_param(std::string ("MSK_IPAR_LOG_BI_FREQ"),_6963); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logBiFreq)"));}}else if ((_6953 == std::string ("biCleanOptimizer"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biCleanOptimizer)"));}else if ((_6953 == std::string ("intpntStartingPoint"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntStartingPoint)"));}else if ((_6953 == std::string ("intpntDiffStep"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntDiffStep)"));}else if ((_6953 == std::string ("intpntScaling"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntScaling)"));}else if ((_6953 == std::string ("intpntSolveForm"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntSolveForm)"));}else {}if ((_6953 == std::string ("logIntpnt"))){ int _6964 = _6954; if (((int)0 <= _6964)){ mosek::fusion::p_Model::_get_impl(_6952.get())->task_put_param(std::string ("MSK_IPAR_LOG_INTPNT"),_6964); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logIntpnt)"));}}else {}if ((_6953 == std::string ("intpntMaxIterations"))){ int _6965 = _6954; if (((int)0 <= _6965)){ mosek::fusion::p_Model::_get_impl(_6952.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_MAX_ITERATIONS"),_6965); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMaxIterations)"));}}else {}if ((_6953 == std::string ("intpntOffColTrh"))){ int _6966 = _6954; if (((int)0 <= _6966)){ mosek::fusion::p_Model::_get_impl(_6952.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_OFF_COL_TRH"),_6966); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOffColTrh)"));}}else if ((_6953 == std::string ("intpntOrderMethod"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOrderMethod)"));}else if ((_6953 == std::string ("intpntBasis"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntBasis)"));}else if ((_6953 == std::string ("biIgnoreMaxIter"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biIgnoreMaxIter)"));}else if ((_6953 == std::string ("biIgnoreNumError"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biIgnoreNumError)"));}else {}if ((_6953 == std::string ("intpntMaxNumCor"))){ int _6967 = _6954; if (((- (int)1) <= _6967)){ mosek::fusion::p_Model::_get_impl(_6952.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_MAX_NUM_COR"),_6967); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMaxNumCor)"));}}else if ((_6953 == std::string ("presolveUse"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveUse)"));}else {}if ((_6953 == std::string ("presolveLevel"))){ int _6968 = _6954; if (true){ mosek::fusion::p_Model::_get_impl(_6952.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_LEVEL"),_6968); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLevel)"));}}else {}if ((_6953 == std::string ("logPresolve"))){ int _6969 = _6954; if (((int)0 <= _6969)){ mosek::fusion::p_Model::_get_impl(_6952.get())->task_put_param(std::string ("MSK_IPAR_LOG_PRESOLVE"),_6969); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logPresolve)"));}}else if ((_6953 == std::string ("presolveLindepUse"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepUse)"));}else {}if ((_6953 == std::string ("presolveEliminatorMaxNumTries"))){ int _6970 = _6954; if (true){ mosek::fusion::p_Model::_get_impl(_6952.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_ELIMINATOR_MAX_NUM_TRIES"),_6970); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveEliminatorMaxNumTries)"));}}else {}if ((_6953 == std::string ("presolveEliminatorMaxFill"))){ int _6971 = _6954; if (true){ mosek::fusion::p_Model::_get_impl(_6952.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_ELIMINATOR_MAX_FILL"),_6971); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveEliminatorMaxFill)"));}}else {}if ((_6953 == std::string ("simPrimalCrash"))){ int _6972 = _6954; if (((int)0 <= _6972)){ mosek::fusion::p_Model::_get_impl(_6952.get())->task_put_param(std::string ("MSK_IPAR_SIM_PRIMAL_CRASH"),_6972); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalCrash)"));}}else {}if ((_6953 == std::string ("logSim"))){ int _6973 = _6954; if (((int)0 <= _6973)){ mosek::fusion::p_Model::_get_impl(_6952.get())->task_put_param(std::string ("MSK_IPAR_LOG_SIM"),_6973); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSim)"));}}else {}if ((_6953 == std::string ("logSimMinor"))){ int _6974 = _6954; if (((int)0 <= _6974)){ mosek::fusion::p_Model::_get_impl(_6952.get())->task_put_param(std::string ("MSK_IPAR_LOG_SIM_MINOR"),_6974); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSimMinor)"));}}else {}if ((_6953 == std::string ("logSimFreq"))){ int _6975 = _6954; if (((int)0 <= _6975)){ mosek::fusion::p_Model::_get_impl(_6952.get())->task_put_param(std::string ("MSK_IPAR_LOG_SIM_FREQ"),_6975); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSimFreq)"));}}else {}if ((_6953 == std::string ("simPrimalRestrictSelection"))){ int _6976 = _6954; if ((((int)0 <= _6976) && (_6976 <= (int)100))){ mosek::fusion::p_Model::_get_impl(_6952.get())->task_put_param(std::string ("MSK_IPAR_SIM_PRIMAL_RESTRICT_SELECTION"),_6976); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalRestrictSelection)"));}}else if ((_6953 == std::string ("simPrimalSelection"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalSelection)"));}else {}if ((_6953 == std::string ("simDualRestrictSelection"))){ int _6977 = _6954; if ((((int)0 <= _6977) && (_6977 <= (int)100))){ mosek::fusion::p_Model::_get_impl(_6952.get())->task_put_param(std::string ("MSK_IPAR_SIM_DUAL_RESTRICT_SELECTION"),_6977); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualRestrictSelection)"));}}else if ((_6953 == std::string ("simDualSelection"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualSelection)"));}else {}if ((_6953 == std::string ("simMaxIterations"))){ int _6978 = _6954; if (((int)0 <= _6978)){ mosek::fusion::p_Model::_get_impl(_6952.get())->task_put_param(std::string ("MSK_IPAR_SIM_MAX_ITERATIONS"),_6978); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simMaxIterations)"));}}else if ((_6953 == std::string ("simHotstartLu"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simHotstartLu)"));}else {}if ((_6953 == std::string ("simRefactorFreq"))){ int _6979 = _6954; if (((int)0 <= _6979)){ mosek::fusion::p_Model::_get_impl(_6952.get())->task_put_param(std::string ("MSK_IPAR_SIM_REFACTOR_FREQ"),_6979); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simRefactorFreq)"));}}else if ((_6953 == std::string ("mioMode"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMode)"));}else {}if ((_6953 == std::string ("logMio"))){ int _6980 = _6954; if (((int)0 <= _6980)){ mosek::fusion::p_Model::_get_impl(_6952.get())->task_put_param(std::string ("MSK_IPAR_LOG_MIO"),_6980); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logMio)"));}}else {}if ((_6953 == std::string ("logMioFreq"))){ int _6981 = _6954; if (true){ mosek::fusion::p_Model::_get_impl(_6952.get())->task_put_param(std::string ("MSK_IPAR_LOG_MIO_FREQ"),_6981); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logMioFreq)"));}}else {}if ((_6953 == std::string ("mioMaxNumRelaxs"))){ int _6982 = _6954; if (true){ mosek::fusion::p_Model::_get_impl(_6952.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_RELAXS"),_6982); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumRelaxs)"));}}else {}if ((_6953 == std::string ("mioMaxNumBranches"))){ int _6983 = _6954; if (true){ mosek::fusion::p_Model::_get_impl(_6952.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_BRANCHES"),_6983); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumBranches)"));}}else {}if ((_6953 == std::string ("mioMaxNumSolutions"))){ int _6984 = _6954; if (true){ mosek::fusion::p_Model::_get_impl(_6952.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_SOLUTIONS"),_6984); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumSolutions)"));}}else if ((_6953 == std::string ("mioNodeSelection"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioNodeSelection)"));}else {}if ((_6953 == std::string ("mioHeuristicLevel"))){ int _6985 = _6954; if (true){ mosek::fusion::p_Model::_get_impl(_6952.get())->task_put_param(std::string ("MSK_IPAR_MIO_HEURISTIC_LEVEL"),_6985); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioHeuristicLevel)"));}}else {}if ((_6953 == std::string ("mioProbingLevel"))){ int _6986 = _6954; if ((((- (int)1) <= _6986) && (_6986 <= (int)3))){ mosek::fusion::p_Model::_get_impl(_6952.get())->task_put_param(std::string ("MSK_IPAR_MIO_PROBING_LEVEL"),_6986); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioProbingLevel)"));}}else {}if ((_6953 == std::string ("mioCutSelectionLevel"))){ int _6987 = _6954; if ((((- (int)1) <= _6987) && (_6987 <= (int)1))){ mosek::fusion::p_Model::_get_impl(_6952.get())->task_put_param(std::string ("MSK_IPAR_MIO_CUT_SELECTION_LEVEL"),_6987); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutSelectionLevel)"));}}else {}if ((_6953 == std::string ("mioVbDetectionLevel"))){ int _6988 = _6954; if ((((- (int)1) <= _6988) && (_6988 <= (int)2))){ mosek::fusion::p_Model::_get_impl(_6952.get())->task_put_param(std::string ("MSK_IPAR_MIO_VB_DETECTION_LEVEL"),_6988); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioVbDetectionLevel)"));}}else if ((_6953 == std::string ("mioBranchDir"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioBranchDir)"));}else if ((_6953 == std::string ("mioRootOptimizer"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRootOptimizer)"));}else if ((_6953 == std::string ("mioNodeOptimizer"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioNodeOptimizer)"));}else if ((_6953 == std::string ("mioPerspectiveReformulate"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioPerspectiveReformulate)"));}else if ((_6953 == std::string ("writeLpQuotedNames"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpQuotedNames)"));}else {}if ((_6953 == std::string ("writeLpLineWidth"))){ int _6989 = _6954; if (((int)40 <= _6989)){ mosek::fusion::p_Model::_get_impl(_6952.get())->task_put_param(std::string ("MSK_IPAR_WRITE_LP_LINE_WIDTH"),_6989); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpLineWidth)"));}}else {}if ((_6953 == std::string ("writeLpTermsPerLine"))){ int _6990 = _6954; if (((int)0 <= _6990)){ mosek::fusion::p_Model::_get_impl(_6952.get())->task_put_param(std::string ("MSK_IPAR_WRITE_LP_TERMS_PER_LINE"),_6990); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpTermsPerLine)"));}}else if ((_6953 == std::string ("writeLpFullObj"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpFullObj)"));}else {}if ((_6953 == std::string ("logInfeasAna"))){ int _6991 = _6954; if (((int)0 <= _6991)){ mosek::fusion::p_Model::_get_impl(_6952.get())->task_put_param(std::string ("MSK_IPAR_LOG_INFEAS_ANA"),_6991); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logInfeasAna)"));}}else if ((_6953 == std::string ("licenseWait"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseWait)"));}else if ((_6953 == std::string ("licenseSuppressExpireWrns"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseSuppressExpireWrns)"));}else {}if ((_6953 == std::string ("licensePauseTime"))){ int _6992 = _6954; if ((((int)0 <= _6992) && (_6992 <= (int)1000000))){ mosek::fusion::p_Model::_get_impl(_6952.get())->task_put_param(std::string ("MSK_IPAR_LICENSE_PAUSE_TIME"),_6992); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licensePauseTime)"));}}else if ((_6953 == std::string ("licenseDebug"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseDebug)"));}else {}if ((_6953 == std::string ("log"))){ int _6993 = _6954; if (((int)0 <= _6993)){ mosek::fusion::p_Model::_get_impl(_6952.get())->task_put_param(std::string ("MSK_IPAR_LOG"),_6993); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (log)"));}}else {}if ((_6953 == std::string ("logExpand"))){ int _6994 = _6954; if (((int)0 <= _6994)){ mosek::fusion::p_Model::_get_impl(_6952.get())->task_put_param(std::string ("MSK_IPAR_LOG_EXPAND"),_6994); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logExpand)"));}}else {}if ((_6953 == std::string ("logFile"))){ int _6995 = _6954; if (((int)0 <= _6995)){ mosek::fusion::p_Model::_get_impl(_6952.get())->task_put_param(std::string ("MSK_IPAR_LOG_FILE"),_6995); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logFile)"));}}else {}if ((_6953 == std::string ("logOrder"))){ int _6996 = _6954; if (((int)0 <= _6996)){ mosek::fusion::p_Model::_get_impl(_6952.get())->task_put_param(std::string ("MSK_IPAR_LOG_ORDER"),_6996); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logOrder)"));}}else if ((_6953 == std::string ("simScaling"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simScaling)"));}else if ((_6953 == std::string ("simScalingMethod"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simScalingMethod)"));}else {}if ((_6953 == std::string ("simPrimalPhaseoneMethod"))){ int _6997 = _6954; if ((((int)0 <= _6997) && (_6997 <= (int)10))){ mosek::fusion::p_Model::_get_impl(_6952.get())->task_put_param(std::string ("MSK_IPAR_SIM_PRIMAL_PHASEONE_METHOD"),_6997); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalPhaseoneMethod)"));}}else {}if ((_6953 == std::string ("simDualPhaseoneMethod"))){ int _6998 = _6954; if ((((int)0 <= _6998) && (_6998 <= (int)10))){ mosek::fusion::p_Model::_get_impl(_6952.get())->task_put_param(std::string ("MSK_IPAR_SIM_DUAL_PHASEONE_METHOD"),_6998); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualPhaseoneMethod)"));}}else {}if ((_6953 == std::string ("simMaxNumSetbacks"))){ int _6999 = _6954; if (((int)0 <= _6999)){ mosek::fusion::p_Model::_get_impl(_6952.get())->task_put_param(std::string ("MSK_IPAR_SIM_MAX_NUM_SETBACKS"),_6999); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simMaxNumSetbacks)"));}}else if ((_6953 == std::string ("simHotstart"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simHotstart)"));}else if ((_6953 == std::string ("simBasisFactorUse"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simBasisFactorUse)"));}else if ((_6953 == std::string ("simDegen"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDegen)"));}else if ((_6953 == std::string ("simReformulation"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simReformulation)"));}else if ((_6953 == std::string ("simExploitDupvec"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simExploitDupvec)"));}else if ((_6953 == std::string ("simSaveLu"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSaveLu)"));}else if ((_6953 == std::string ("simNonSingular"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simNonSingular)"));}else {}if ((_6953 == std::string ("simDualCrash"))){ int _7000 = _6954; if (((int)0 <= _7000)){ mosek::fusion::p_Model::_get_impl(_6952.get())->task_put_param(std::string ("MSK_IPAR_SIM_DUAL_CRASH"),_7000); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualCrash)"));}}else if ((_6953 == std::string ("infeasPreferPrimal"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (infeasPreferPrimal)"));}else {}if ((_6953 == std::string ("mioRootRepeatPresolveLevel"))){ int _7001 = _6954; if ((((- (int)1) <= _7001) && (_7001 <= (int)1))){ mosek::fusion::p_Model::_get_impl(_6952.get())->task_put_param(std::string ("MSK_IPAR_MIO_ROOT_REPEAT_PRESOLVE_LEVEL"),_7001); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRootRepeatPresolveLevel)"));}}else if ((_6953 == std::string ("mioCutCmir"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutCmir)"));}else if ((_6953 == std::string ("mioCutClique"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutClique)"));}else if ((_6953 == std::string ("mioCutImpliedBound"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutImpliedBound)"));}else if ((_6953 == std::string ("mioCutKnapsackCover"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutKnapsackCover)"));}else if ((_6953 == std::string ("mioCutGmi"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutGmi)"));}else if ((_6953 == std::string ("mioConstructSol"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioConstructSol)"));}else {}if ((_6953 == std::string ("presolveLindepRelWorkTrh"))){ int _7002 = _6954; if (true){ mosek::fusion::p_Model::_get_impl(_6952.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_LINDEP_REL_WORK_TRH"),_7002); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepRelWorkTrh)"));}}else {}if ((_6953 == std::string ("presolveLindepAbsWorkTrh"))){ int _7003 = _6954; if (true){ mosek::fusion::p_Model::_get_impl(_6952.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_LINDEP_ABS_WORK_TRH"),_7003); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepAbsWorkTrh)"));}}else if ((_6953 == std::string ("cacheLicense"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (cacheLicense)"));}else if ((_6953 == std::string ("intpntRegularizationUse"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntRegularizationUse)"));}else if ((_6953 == std::string ("simSolveForm"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSolveForm)"));}else if ((_6953 == std::string ("simSwitchOptimizer"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSwitchOptimizer)"));}else {}if ((_6953 == std::string ("mioRinsMaxNodes"))){ int _7004 = _6954; if (((- (int)1) <= _7004)){ mosek::fusion::p_Model::_get_impl(_6952.get())->task_put_param(std::string ("MSK_IPAR_MIO_RINS_MAX_NODES"),_7004); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRinsMaxNodes)"));}}else {}if ((_6953 == std::string ("optimizerMaxTime"))){ double _7005 = (double)_6954; if (true){ mosek::fusion::p_Model::_get_impl(_6952.get())->task_put_param(std::string ("MSK_DPAR_OPTIMIZER_MAX_TIME"),_7005); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (optimizerMaxTime)"));}}else {}if ((_6953 == std::string ("lowerObjCut"))){ double _7006 = (double)_6954; if (true){ mosek::fusion::p_Model::_get_impl(_6952.get())->task_put_param(std::string ("MSK_DPAR_LOWER_OBJ_CUT"),_7006); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (lowerObjCut)"));}}else {}if ((_6953 == std::string ("upperObjCut"))){ double _7007 = (double)_6954; if (true){ mosek::fusion::p_Model::_get_impl(_6952.get())->task_put_param(std::string ("MSK_DPAR_UPPER_OBJ_CUT"),_7007); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (upperObjCut)"));}}else {}if ((_6953 == std::string ("upperObjCutFiniteTrh"))){ double _7008 = (double)_6954; if (true){ mosek::fusion::p_Model::_get_impl(_6952.get())->task_put_param(std::string ("MSK_DPAR_UPPER_OBJ_CUT_FINITE_TRH"),_7008); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (upperObjCutFiniteTrh)"));}}else {}if ((_6953 == std::string ("lowerObjCutFiniteTrh"))){ double _7009 = (double)_6954; if (true){ mosek::fusion::p_Model::_get_impl(_6952.get())->task_put_param(std::string ("MSK_DPAR_LOWER_OBJ_CUT_FINITE_TRH"),_7009); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (lowerObjCutFiniteTrh)"));}}else {}if ((_6953 == std::string ("intpntTolRelGap"))){ double _7010 = (double)_6954; if ((1.000000e-14 <= _7010)){ mosek::fusion::p_Model::_get_impl(_6952.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_REL_GAP"),_7010); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolRelGap)"));}}else {}if ((_6953 == std::string ("intpntTolStepSize"))){ double _7011 = (double)_6954; if (((0.000000e+00 <= _7011) && (_7011 <= 1.000000e+00))){ mosek::fusion::p_Model::_get_impl(_6952.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_STEP_SIZE"),_7011); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolStepSize)"));}}else {}if ((_6953 == std::string ("simLuTolRelPiv"))){ double _7012 = (double)_6954; if (((1.000000e-06 <= _7012) && (_7012 <= 9.999990e-01))){ mosek::fusion::p_Model::_get_impl(_6952.get())->task_put_param(std::string ("MSK_DPAR_SIM_LU_TOL_REL_PIV"),_7012); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simLuTolRelPiv)"));}}else {}if ((_6953 == std::string ("intpntTolRelStep"))){ double _7013 = (double)_6954; if (((1.000000e-04 <= _7013) && (_7013 <= 9.999990e-01))){ mosek::fusion::p_Model::_get_impl(_6952.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_REL_STEP"),_7013); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolRelStep)"));}}else {}if ((_6953 == std::string ("intpntTolPath"))){ double _7014 = (double)_6954; if (((0.000000e+00 <= _7014) && (_7014 <= 9.999000e-01))){ mosek::fusion::p_Model::_get_impl(_6952.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_PATH"),_7014); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPath)"));}}else {}if ((_6953 == std::string ("intpntTolPfeas"))){ double _7015 = (double)_6954; if (((0.000000e+00 <= _7015) && (_7015 <= 1.000000e+00))){ mosek::fusion::p_Model::_get_impl(_6952.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_PFEAS"),_7015); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPfeas)"));}}else {}if ((_6953 == std::string ("intpntTolDfeas"))){ double _7016 = (double)_6954; if (((0.000000e+00 <= _7016) && (_7016 <= 1.000000e+00))){ mosek::fusion::p_Model::_get_impl(_6952.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_DFEAS"),_7016); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolDfeas)"));}}else {}if ((_6953 == std::string ("intpntTolMuRed"))){ double _7017 = (double)_6954; if (((0.000000e+00 <= _7017) && (_7017 <= 1.000000e+00))){ mosek::fusion::p_Model::_get_impl(_6952.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_MU_RED"),_7017); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolMuRed)"));}}else {}if ((_6953 == std::string ("intpntTolInfeas"))){ double _7018 = (double)_6954; if (((0.000000e+00 <= _7018) && (_7018 <= 1.000000e+00))){ mosek::fusion::p_Model::_get_impl(_6952.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_INFEAS"),_7018); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolInfeas)"));}}else {}if ((_6953 == std::string ("intpntCoTolRelGap"))){ double _7019 = (double)_6954; if (((0.000000e+00 <= _7019) && (_7019 <= 1.000000e+00))){ mosek::fusion::p_Model::_get_impl(_6952.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_REL_GAP"),_7019); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolRelGap)"));}}else {}if ((_6953 == std::string ("intpntCoTolPfeas"))){ double _7020 = (double)_6954; if (((0.000000e+00 <= _7020) && (_7020 <= 1.000000e+00))){ mosek::fusion::p_Model::_get_impl(_6952.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_PFEAS"),_7020); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolPfeas)"));}}else {}if ((_6953 == std::string ("intpntCoTolDfeas"))){ double _7021 = (double)_6954; if (((0.000000e+00 <= _7021) && (_7021 <= 1.000000e+00))){ mosek::fusion::p_Model::_get_impl(_6952.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_DFEAS"),_7021); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolDfeas)"));}}else {}if ((_6953 == std::string ("intpntCoTolMuRed"))){ double _7022 = (double)_6954; if (((0.000000e+00 <= _7022) && (_7022 <= 1.000000e+00))){ mosek::fusion::p_Model::_get_impl(_6952.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_MU_RED"),_7022); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolMuRed)"));}}else {}if ((_6953 == std::string ("intpntCoTolNearRel"))){ double _7023 = (double)_6954; if ((1.000000e+00 <= _7023)){ mosek::fusion::p_Model::_get_impl(_6952.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_NEAR_REL"),_7023); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolNearRel)"));}}else {}if ((_6953 == std::string ("intpntCoTolInfeas"))){ double _7024 = (double)_6954; if (((0.000000e+00 <= _7024) && (_7024 <= 1.000000e+00))){ mosek::fusion::p_Model::_get_impl(_6952.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_INFEAS"),_7024); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolInfeas)"));}}else {}if ((_6953 == std::string ("intpntQoTolRelGap"))){ double _7025 = (double)_6954; if (((0.000000e+00 <= _7025) && (_7025 <= 1.000000e+00))){ mosek::fusion::p_Model::_get_impl(_6952.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_QO_TOL_REL_GAP"),_7025); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntQoTolRelGap)"));}}else {}if ((_6953 == std::string ("intpntQoTolPfeas"))){ double _7026 = (double)_6954; if (((0.000000e+00 <= _7026) && (_7026 <= 1.000000e+00))){ mosek::fusion::p_Model::_get_impl(_6952.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_QO_TOL_PFEAS"),_7026); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntQoTolPfeas)"));}}else {}if ((_6953 == std::string ("intpntQoTolDfeas"))){ double _7027 = (double)_6954; if (((0.000000e+00 <= _7027) && (_7027 <= 1.000000e+00))){ mosek::fusion::p_Model::_get_impl(_6952.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_QO_TOL_DFEAS"),_7027); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntQoTolDfeas)"));}}else {}if ((_6953 == std::string ("intpntQoTolMuRed"))){ double _7028 = (double)_6954; if (((0.000000e+00 <= _7028) && (_7028 <= 1.000000e+00))){ mosek::fusion::p_Model::_get_impl(_6952.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_QO_TOL_MU_RED"),_7028); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntQoTolMuRed)"));}}else {}if ((_6953 == std::string ("intpntQoTolNearRel"))){ double _7029 = (double)_6954; if ((1.000000e+00 <= _7029)){ mosek::fusion::p_Model::_get_impl(_6952.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_QO_TOL_NEAR_REL"),_7029); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntQoTolNearRel)"));}}else {}if ((_6953 == std::string ("intpntQoTolInfeas"))){ double _7030 = (double)_6954; if (((0.000000e+00 <= _7030) && (_7030 <= 1.000000e+00))){ mosek::fusion::p_Model::_get_impl(_6952.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_QO_TOL_INFEAS"),_7030); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntQoTolInfeas)"));}}else {}if ((_6953 == std::string ("intpntTolPsafe"))){ double _7031 = (double)_6954; if ((1.000000e-04 <= _7031)){ mosek::fusion::p_Model::_get_impl(_6952.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_PSAFE"),_7031); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPsafe)"));}}else {}if ((_6953 == std::string ("intpntTolDsafe"))){ double _7032 = (double)_6954; if ((1.000000e-04 <= _7032)){ mosek::fusion::p_Model::_get_impl(_6952.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_DSAFE"),_7032); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolDsafe)"));}}else {}if ((_6953 == std::string ("mioMaxTime"))){ double _7033 = (double)_6954; if (true){ mosek::fusion::p_Model::_get_impl(_6952.get())->task_put_param(std::string ("MSK_DPAR_MIO_MAX_TIME"),_7033); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxTime)"));}}else {}if ((_6953 == std::string ("mioDisableTermTime"))){ double _7034 = (double)_6954; if (true){ mosek::fusion::p_Model::_get_impl(_6952.get())->task_put_param(std::string ("MSK_DPAR_MIO_DISABLE_TERM_TIME"),_7034); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioDisableTermTime)"));}}else {}if ((_6953 == std::string ("mioRelGapConst"))){ double _7035 = (double)_6954; if ((1.000000e-15 <= _7035)){ mosek::fusion::p_Model::_get_impl(_6952.get())->task_put_param(std::string ("MSK_DPAR_MIO_REL_GAP_CONST"),_7035); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRelGapConst)"));}}else {}if ((_6953 == std::string ("mioTolRelGap"))){ double _7036 = (double)_6954; if ((0.000000e+00 <= _7036)){ mosek::fusion::p_Model::_get_impl(_6952.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_REL_GAP"),_7036); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolRelGap)"));}}else {}if ((_6953 == std::string ("mioNearTolRelGap"))){ double _7037 = (double)_6954; if ((0.000000e+00 <= _7037)){ mosek::fusion::p_Model::_get_impl(_6952.get())->task_put_param(std::string ("MSK_DPAR_MIO_NEAR_TOL_REL_GAP"),_7037); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioNearTolRelGap)"));}}else {}if ((_6953 == std::string ("mioTolAbsGap"))){ double _7038 = (double)_6954; if ((0.000000e+00 <= _7038)){ mosek::fusion::p_Model::_get_impl(_6952.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_ABS_GAP"),_7038); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolAbsGap)"));}}else {}if ((_6953 == std::string ("mioNearTolAbsGap"))){ double _7039 = (double)_6954; if ((0.000000e+00 <= _7039)){ mosek::fusion::p_Model::_get_impl(_6952.get())->task_put_param(std::string ("MSK_DPAR_MIO_NEAR_TOL_ABS_GAP"),_7039); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioNearTolAbsGap)"));}}else {}if ((_6953 == std::string ("mioTolAbsRelaxInt"))){ double _7040 = (double)_6954; if ((1.000000e-09 <= _7040)){ mosek::fusion::p_Model::_get_impl(_6952.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_ABS_RELAX_INT"),_7040); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolAbsRelaxInt)"));}}else {}if ((_6953 == std::string ("basisTolX"))){ double _7041 = (double)_6954; if ((1.000000e-09 <= _7041)){ mosek::fusion::p_Model::_get_impl(_6952.get())->task_put_param(std::string ("MSK_DPAR_BASIS_TOL_X"),_7041); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisTolX)"));}}else {}if ((_6953 == std::string ("basisTolS"))){ double _7042 = (double)_6954; if ((1.000000e-09 <= _7042)){ mosek::fusion::p_Model::_get_impl(_6952.get())->task_put_param(std::string ("MSK_DPAR_BASIS_TOL_S"),_7042); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisTolS)"));}}else {}if ((_6953 == std::string ("basisRelTolS"))){ double _7043 = (double)_6954; if ((0.000000e+00 <= _7043)){ mosek::fusion::p_Model::_get_impl(_6952.get())->task_put_param(std::string ("MSK_DPAR_BASIS_REL_TOL_S"),_7043); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisRelTolS)"));}}else {}if ((_6953 == std::string ("presolveTolX"))){ double _7044 = (double)_6954; if ((0.000000e+00 <= _7044)){ mosek::fusion::p_Model::_get_impl(_6952.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_X"),_7044); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolX)"));}}else {}if ((_6953 == std::string ("presolveTolS"))){ double _7045 = (double)_6954; if ((0.000000e+00 <= _7045)){ mosek::fusion::p_Model::_get_impl(_6952.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_S"),_7045); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolS)"));}}else {}if ((_6953 == std::string ("presolveTolAij"))){ double _7046 = (double)_6954; if ((1.000000e-15 <= _7046)){ mosek::fusion::p_Model::_get_impl(_6952.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_AIJ"),_7046); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolAij)"));}}else {}if ((_6953 == std::string ("presolveTolAbsLindep"))){ double _7047 = (double)_6954; if ((0.000000e+00 <= _7047)){ mosek::fusion::p_Model::_get_impl(_6952.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_ABS_LINDEP"),_7047); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolAbsLindep)"));}}else {}if ((_6953 == std::string ("presolveTolRelLindep"))){ double _7048 = (double)_6954; if ((0.000000e+00 <= _7048)){ mosek::fusion::p_Model::_get_impl(_6952.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_REL_LINDEP"),_7048); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolRelLindep)"));}}else {}if ((_6953 == std::string ("simplexAbsTolPiv"))){ double _7049 = (double)_6954; if ((1.000000e-12 <= _7049)){ mosek::fusion::p_Model::_get_impl(_6952.get())->task_put_param(std::string ("MSK_DPAR_SIMPLEX_ABS_TOL_PIV"),_7049); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simplexAbsTolPiv)"));}}else {}if ((_6953 == std::string ("mioTolFeas"))){ double _7050 = (double)_6954; if (((1.000000e-09 <= _7050) && (_7050 <= 1.000000e-03))){ mosek::fusion::p_Model::_get_impl(_6952.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_FEAS"),_7050); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolFeas)"));}}else {}if ((_6953 == std::string ("anaSolInfeasTol"))){ double _7051 = (double)_6954; if ((0.000000e+00 <= _7051)){ mosek::fusion::p_Model::_get_impl(_6952.get())->task_put_param(std::string ("MSK_DPAR_ANA_SOL_INFEAS_TOL"),_7051); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (anaSolInfeasTol)"));}}else {}if ((_6953 == std::string ("mioTolRelDualBoundImprovement"))){ double _7052 = (double)_6954; if (((0.000000e+00 <= _7052) && (_7052 <= 1.000000e+00))){ mosek::fusion::p_Model::_get_impl(_6952.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_REL_DUAL_BOUND_IMPROVEMENT"),_7052); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolRelDualBoundImprovement)"));}}else {}throw ::mosek::fusion::ParameterError(std::string ("Unknown parameter"));}void mosek::fusion::Parameters::setParameter  ( monty::rc_ptr< ::mosek::fusion::Model > _7053,    const std::string & _7054,    const std::string & _7055) { mosek::fusion::p_Parameters::setParameter(_7053,_7054,_7055); }void mosek::fusion::p_Parameters::setParameter( monty::rc_ptr< ::mosek::fusion::Model > _7053,const std::string & _7054,const std::string & _7055){ if (false){ }else {}if ((_7054 == std::string ("autoUpdateSolInfo"))){ int _7056 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_7055); if ((_7056 < (int)0)){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (autoUpdateSolInfo)"));}else {}mosek::fusion::p_Model::_get_impl(_7053.get())->task_put_param(std::string ("MSK_IPAR_AUTO_UPDATE_SOL_INFO"),_7056); return ; }else {}if ((_7054 == std::string ("removeUnusedSolutions"))){ int _7057 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_7055); if ((_7057 < (int)0)){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (removeUnusedSolutions)"));}else {}mosek::fusion::p_Model::_get_impl(_7053.get())->task_put_param(std::string ("MSK_IPAR_REMOVE_UNUSED_SOLUTIONS"),_7057); return ; }else {}if ((_7054 == std::string ("numThreads"))){ try { int _7059 = ::mosek::fusion::Utils::Tools::toInt(_7055); if (((int)0 <= _7059)){ mosek::fusion::p_Model::_get_impl(_7053.get())->task_put_param(std::string ("MSK_IPAR_NUM_THREADS"),_7059); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (numThreads)"));}}catch (mosek::fusion::ValueConversionError _7058){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (numThreads)"));}}else {}if ((_7054 == std::string ("intpntMultiThread"))){ int _7060 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_7055); if ((_7060 < (int)0)){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMultiThread)"));}else {}mosek::fusion::p_Model::_get_impl(_7053.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_MULTI_THREAD"),_7060); return ; }else {}if ((_7054 == std::string ("mtSpincount"))){ try { int _7062 = ::mosek::fusion::Utils::Tools::toInt(_7055); if ((((int)0 <= _7062) && (_7062 <= (int)1000000000))){ mosek::fusion::p_Model::_get_impl(_7053.get())->task_put_param(std::string ("MSK_IPAR_MT_SPINCOUNT"),_7062); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mtSpincount)"));}}catch (mosek::fusion::ValueConversionError _7061){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mtSpincount)"));}}else {}if ((_7054 == std::string ("optimizer"))){ int _7063 = ::mosek::fusion::p_Parameters::string_to_optimizertype_value(_7055); if ((_7063 < (int)0)){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (optimizer)"));}else {}mosek::fusion::p_Model::_get_impl(_7053.get())->task_put_param(std::string ("MSK_IPAR_OPTIMIZER"),_7063); return ; }else {}if ((_7054 == std::string ("biMaxIterations"))){ try { int _7065 = ::mosek::fusion::Utils::Tools::toInt(_7055); if (((int)0 <= _7065)){ mosek::fusion::p_Model::_get_impl(_7053.get())->task_put_param(std::string ("MSK_IPAR_BI_MAX_ITERATIONS"),_7065); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biMaxIterations)"));}}catch (mosek::fusion::ValueConversionError _7064){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biMaxIterations)"));}}else {}if ((_7054 == std::string ("licenseTrhExpiryWrn"))){ try { int _7067 = ::mosek::fusion::Utils::Tools::toInt(_7055); if (((int)0 <= _7067)){ mosek::fusion::p_Model::_get_impl(_7053.get())->task_put_param(std::string ("MSK_IPAR_LICENSE_TRH_EXPIRY_WRN"),_7067); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseTrhExpiryWrn)"));}}catch (mosek::fusion::ValueConversionError _7066){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseTrhExpiryWrn)"));}}else {}if ((_7054 == std::string ("logCutSecondOpt"))){ try { int _7069 = ::mosek::fusion::Utils::Tools::toInt(_7055); if (((int)0 <= _7069)){ mosek::fusion::p_Model::_get_impl(_7053.get())->task_put_param(std::string ("MSK_IPAR_LOG_CUT_SECOND_OPT"),_7069); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logCutSecondOpt)"));}}catch (mosek::fusion::ValueConversionError _7068){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logCutSecondOpt)"));}}else {}if ((_7054 == std::string ("logAnaPro"))){ try { int _7071 = ::mosek::fusion::Utils::Tools::toInt(_7055); if (((int)0 <= _7071)){ mosek::fusion::p_Model::_get_impl(_7053.get())->task_put_param(std::string ("MSK_IPAR_LOG_ANA_PRO"),_7071); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logAnaPro)"));}}catch (mosek::fusion::ValueConversionError _7070){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logAnaPro)"));}}else {}if ((_7054 == std::string ("logResponse"))){ try { int _7073 = ::mosek::fusion::Utils::Tools::toInt(_7055); if (((int)0 <= _7073)){ mosek::fusion::p_Model::_get_impl(_7053.get())->task_put_param(std::string ("MSK_IPAR_LOG_RESPONSE"),_7073); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logResponse)"));}}catch (mosek::fusion::ValueConversionError _7072){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logResponse)"));}}else {}if ((_7054 == std::string ("logBi"))){ try { int _7075 = ::mosek::fusion::Utils::Tools::toInt(_7055); if (((int)0 <= _7075)){ mosek::fusion::p_Model::_get_impl(_7053.get())->task_put_param(std::string ("MSK_IPAR_LOG_BI"),_7075); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logBi)"));}}catch (mosek::fusion::ValueConversionError _7074){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logBi)"));}}else {}if ((_7054 == std::string ("logBiFreq"))){ try { int _7077 = ::mosek::fusion::Utils::Tools::toInt(_7055); if (((int)0 <= _7077)){ mosek::fusion::p_Model::_get_impl(_7053.get())->task_put_param(std::string ("MSK_IPAR_LOG_BI_FREQ"),_7077); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logBiFreq)"));}}catch (mosek::fusion::ValueConversionError _7076){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logBiFreq)"));}}else {}if ((_7054 == std::string ("biCleanOptimizer"))){ int _7078 = ::mosek::fusion::p_Parameters::string_to_optimizertype_value(_7055); if ((_7078 < (int)0)){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biCleanOptimizer)"));}else {}mosek::fusion::p_Model::_get_impl(_7053.get())->task_put_param(std::string ("MSK_IPAR_BI_CLEAN_OPTIMIZER"),_7078); return ; }else {}if ((_7054 == std::string ("intpntStartingPoint"))){ int _7079 = ::mosek::fusion::p_Parameters::string_to_startpointtype_value(_7055); if ((_7079 < (int)0)){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntStartingPoint)"));}else {}mosek::fusion::p_Model::_get_impl(_7053.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_STARTING_POINT"),_7079); return ; }else {}if ((_7054 == std::string ("intpntDiffStep"))){ int _7080 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_7055); if ((_7080 < (int)0)){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntDiffStep)"));}else {}mosek::fusion::p_Model::_get_impl(_7053.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_DIFF_STEP"),_7080); return ; }else {}if ((_7054 == std::string ("intpntScaling"))){ int _7081 = ::mosek::fusion::p_Parameters::string_to_scalingtype_value(_7055); if ((_7081 < (int)0)){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntScaling)"));}else {}mosek::fusion::p_Model::_get_impl(_7053.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_SCALING"),_7081); return ; }else {}if ((_7054 == std::string ("intpntSolveForm"))){ int _7082 = ::mosek::fusion::p_Parameters::string_to_solveform_value(_7055); if ((_7082 < (int)0)){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntSolveForm)"));}else {}mosek::fusion::p_Model::_get_impl(_7053.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_SOLVE_FORM"),_7082); return ; }else {}if ((_7054 == std::string ("logIntpnt"))){ try { int _7084 = ::mosek::fusion::Utils::Tools::toInt(_7055); if (((int)0 <= _7084)){ mosek::fusion::p_Model::_get_impl(_7053.get())->task_put_param(std::string ("MSK_IPAR_LOG_INTPNT"),_7084); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logIntpnt)"));}}catch (mosek::fusion::ValueConversionError _7083){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logIntpnt)"));}}else {}if ((_7054 == std::string ("intpntMaxIterations"))){ try { int _7086 = ::mosek::fusion::Utils::Tools::toInt(_7055); if (((int)0 <= _7086)){ mosek::fusion::p_Model::_get_impl(_7053.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_MAX_ITERATIONS"),_7086); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMaxIterations)"));}}catch (mosek::fusion::ValueConversionError _7085){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMaxIterations)"));}}else {}if ((_7054 == std::string ("intpntOffColTrh"))){ try { int _7088 = ::mosek::fusion::Utils::Tools::toInt(_7055); if (((int)0 <= _7088)){ mosek::fusion::p_Model::_get_impl(_7053.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_OFF_COL_TRH"),_7088); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOffColTrh)"));}}catch (mosek::fusion::ValueConversionError _7087){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOffColTrh)"));}}else {}if ((_7054 == std::string ("intpntOrderMethod"))){ int _7089 = ::mosek::fusion::p_Parameters::string_to_orderingtype_value(_7055); if ((_7089 < (int)0)){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOrderMethod)"));}else {}mosek::fusion::p_Model::_get_impl(_7053.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_ORDER_METHOD"),_7089); return ; }else {}if ((_7054 == std::string ("intpntBasis"))){ int _7090 = ::mosek::fusion::p_Parameters::string_to_basindtype_value(_7055); if ((_7090 < (int)0)){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntBasis)"));}else {}mosek::fusion::p_Model::_get_impl(_7053.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_BASIS"),_7090); return ; }else {}if ((_7054 == std::string ("biIgnoreMaxIter"))){ int _7091 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_7055); if ((_7091 < (int)0)){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biIgnoreMaxIter)"));}else {}mosek::fusion::p_Model::_get_impl(_7053.get())->task_put_param(std::string ("MSK_IPAR_BI_IGNORE_MAX_ITER"),_7091); return ; }else {}if ((_7054 == std::string ("biIgnoreNumError"))){ int _7092 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_7055); if ((_7092 < (int)0)){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biIgnoreNumError)"));}else {}mosek::fusion::p_Model::_get_impl(_7053.get())->task_put_param(std::string ("MSK_IPAR_BI_IGNORE_NUM_ERROR"),_7092); return ; }else {}if ((_7054 == std::string ("intpntMaxNumCor"))){ try { int _7094 = ::mosek::fusion::Utils::Tools::toInt(_7055); if (((- (int)1) <= _7094)){ mosek::fusion::p_Model::_get_impl(_7053.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_MAX_NUM_COR"),_7094); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMaxNumCor)"));}}catch (mosek::fusion::ValueConversionError _7093){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMaxNumCor)"));}}else {}if ((_7054 == std::string ("presolveUse"))){ int _7095 = ::mosek::fusion::p_Parameters::string_to_presolvemode_value(_7055); if ((_7095 < (int)0)){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveUse)"));}else {}mosek::fusion::p_Model::_get_impl(_7053.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_USE"),_7095); return ; }else {}if ((_7054 == std::string ("presolveLevel"))){ try { int _7097 = ::mosek::fusion::Utils::Tools::toInt(_7055); if (true){ mosek::fusion::p_Model::_get_impl(_7053.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_LEVEL"),_7097); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLevel)"));}}catch (mosek::fusion::ValueConversionError _7096){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLevel)"));}}else {}if ((_7054 == std::string ("logPresolve"))){ try { int _7099 = ::mosek::fusion::Utils::Tools::toInt(_7055); if (((int)0 <= _7099)){ mosek::fusion::p_Model::_get_impl(_7053.get())->task_put_param(std::string ("MSK_IPAR_LOG_PRESOLVE"),_7099); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logPresolve)"));}}catch (mosek::fusion::ValueConversionError _7098){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logPresolve)"));}}else {}if ((_7054 == std::string ("presolveLindepUse"))){ int _7100 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_7055); if ((_7100 < (int)0)){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepUse)"));}else {}mosek::fusion::p_Model::_get_impl(_7053.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_LINDEP_USE"),_7100); return ; }else {}if ((_7054 == std::string ("presolveEliminatorMaxNumTries"))){ try { int _7102 = ::mosek::fusion::Utils::Tools::toInt(_7055); if (true){ mosek::fusion::p_Model::_get_impl(_7053.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_ELIMINATOR_MAX_NUM_TRIES"),_7102); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveEliminatorMaxNumTries)"));}}catch (mosek::fusion::ValueConversionError _7101){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveEliminatorMaxNumTries)"));}}else {}if ((_7054 == std::string ("presolveEliminatorMaxFill"))){ try { int _7104 = ::mosek::fusion::Utils::Tools::toInt(_7055); if (true){ mosek::fusion::p_Model::_get_impl(_7053.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_ELIMINATOR_MAX_FILL"),_7104); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveEliminatorMaxFill)"));}}catch (mosek::fusion::ValueConversionError _7103){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveEliminatorMaxFill)"));}}else {}if ((_7054 == std::string ("simPrimalCrash"))){ try { int _7106 = ::mosek::fusion::Utils::Tools::toInt(_7055); if (((int)0 <= _7106)){ mosek::fusion::p_Model::_get_impl(_7053.get())->task_put_param(std::string ("MSK_IPAR_SIM_PRIMAL_CRASH"),_7106); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalCrash)"));}}catch (mosek::fusion::ValueConversionError _7105){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalCrash)"));}}else {}if ((_7054 == std::string ("logSim"))){ try { int _7108 = ::mosek::fusion::Utils::Tools::toInt(_7055); if (((int)0 <= _7108)){ mosek::fusion::p_Model::_get_impl(_7053.get())->task_put_param(std::string ("MSK_IPAR_LOG_SIM"),_7108); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSim)"));}}catch (mosek::fusion::ValueConversionError _7107){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSim)"));}}else {}if ((_7054 == std::string ("logSimMinor"))){ try { int _7110 = ::mosek::fusion::Utils::Tools::toInt(_7055); if (((int)0 <= _7110)){ mosek::fusion::p_Model::_get_impl(_7053.get())->task_put_param(std::string ("MSK_IPAR_LOG_SIM_MINOR"),_7110); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSimMinor)"));}}catch (mosek::fusion::ValueConversionError _7109){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSimMinor)"));}}else {}if ((_7054 == std::string ("logSimFreq"))){ try { int _7112 = ::mosek::fusion::Utils::Tools::toInt(_7055); if (((int)0 <= _7112)){ mosek::fusion::p_Model::_get_impl(_7053.get())->task_put_param(std::string ("MSK_IPAR_LOG_SIM_FREQ"),_7112); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSimFreq)"));}}catch (mosek::fusion::ValueConversionError _7111){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSimFreq)"));}}else {}if ((_7054 == std::string ("simPrimalRestrictSelection"))){ try { int _7114 = ::mosek::fusion::Utils::Tools::toInt(_7055); if ((((int)0 <= _7114) && (_7114 <= (int)100))){ mosek::fusion::p_Model::_get_impl(_7053.get())->task_put_param(std::string ("MSK_IPAR_SIM_PRIMAL_RESTRICT_SELECTION"),_7114); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalRestrictSelection)"));}}catch (mosek::fusion::ValueConversionError _7113){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalRestrictSelection)"));}}else {}if ((_7054 == std::string ("simPrimalSelection"))){ int _7115 = ::mosek::fusion::p_Parameters::string_to_simseltype_value(_7055); if ((_7115 < (int)0)){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalSelection)"));}else {}mosek::fusion::p_Model::_get_impl(_7053.get())->task_put_param(std::string ("MSK_IPAR_SIM_PRIMAL_SELECTION"),_7115); return ; }else {}if ((_7054 == std::string ("simDualRestrictSelection"))){ try { int _7117 = ::mosek::fusion::Utils::Tools::toInt(_7055); if ((((int)0 <= _7117) && (_7117 <= (int)100))){ mosek::fusion::p_Model::_get_impl(_7053.get())->task_put_param(std::string ("MSK_IPAR_SIM_DUAL_RESTRICT_SELECTION"),_7117); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualRestrictSelection)"));}}catch (mosek::fusion::ValueConversionError _7116){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualRestrictSelection)"));}}else {}if ((_7054 == std::string ("simDualSelection"))){ int _7118 = ::mosek::fusion::p_Parameters::string_to_simseltype_value(_7055); if ((_7118 < (int)0)){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualSelection)"));}else {}mosek::fusion::p_Model::_get_impl(_7053.get())->task_put_param(std::string ("MSK_IPAR_SIM_DUAL_SELECTION"),_7118); return ; }else {}if ((_7054 == std::string ("simMaxIterations"))){ try { int _7120 = ::mosek::fusion::Utils::Tools::toInt(_7055); if (((int)0 <= _7120)){ mosek::fusion::p_Model::_get_impl(_7053.get())->task_put_param(std::string ("MSK_IPAR_SIM_MAX_ITERATIONS"),_7120); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simMaxIterations)"));}}catch (mosek::fusion::ValueConversionError _7119){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simMaxIterations)"));}}else {}if ((_7054 == std::string ("simHotstartLu"))){ int _7121 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_7055); if ((_7121 < (int)0)){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simHotstartLu)"));}else {}mosek::fusion::p_Model::_get_impl(_7053.get())->task_put_param(std::string ("MSK_IPAR_SIM_HOTSTART_LU"),_7121); return ; }else {}if ((_7054 == std::string ("simRefactorFreq"))){ try { int _7123 = ::mosek::fusion::Utils::Tools::toInt(_7055); if (((int)0 <= _7123)){ mosek::fusion::p_Model::_get_impl(_7053.get())->task_put_param(std::string ("MSK_IPAR_SIM_REFACTOR_FREQ"),_7123); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simRefactorFreq)"));}}catch (mosek::fusion::ValueConversionError _7122){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simRefactorFreq)"));}}else {}if ((_7054 == std::string ("mioMode"))){ int _7124 = ::mosek::fusion::p_Parameters::string_to_miomode_value(_7055); if ((_7124 < (int)0)){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMode)"));}else {}mosek::fusion::p_Model::_get_impl(_7053.get())->task_put_param(std::string ("MSK_IPAR_MIO_MODE"),_7124); return ; }else {}if ((_7054 == std::string ("logMio"))){ try { int _7126 = ::mosek::fusion::Utils::Tools::toInt(_7055); if (((int)0 <= _7126)){ mosek::fusion::p_Model::_get_impl(_7053.get())->task_put_param(std::string ("MSK_IPAR_LOG_MIO"),_7126); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logMio)"));}}catch (mosek::fusion::ValueConversionError _7125){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logMio)"));}}else {}if ((_7054 == std::string ("logMioFreq"))){ try { int _7128 = ::mosek::fusion::Utils::Tools::toInt(_7055); if (true){ mosek::fusion::p_Model::_get_impl(_7053.get())->task_put_param(std::string ("MSK_IPAR_LOG_MIO_FREQ"),_7128); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logMioFreq)"));}}catch (mosek::fusion::ValueConversionError _7127){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logMioFreq)"));}}else {}if ((_7054 == std::string ("mioMaxNumRelaxs"))){ try { int _7130 = ::mosek::fusion::Utils::Tools::toInt(_7055); if (true){ mosek::fusion::p_Model::_get_impl(_7053.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_RELAXS"),_7130); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumRelaxs)"));}}catch (mosek::fusion::ValueConversionError _7129){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumRelaxs)"));}}else {}if ((_7054 == std::string ("mioMaxNumBranches"))){ try { int _7132 = ::mosek::fusion::Utils::Tools::toInt(_7055); if (true){ mosek::fusion::p_Model::_get_impl(_7053.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_BRANCHES"),_7132); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumBranches)"));}}catch (mosek::fusion::ValueConversionError _7131){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumBranches)"));}}else {}if ((_7054 == std::string ("mioMaxNumSolutions"))){ try { int _7134 = ::mosek::fusion::Utils::Tools::toInt(_7055); if (true){ mosek::fusion::p_Model::_get_impl(_7053.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_SOLUTIONS"),_7134); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumSolutions)"));}}catch (mosek::fusion::ValueConversionError _7133){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumSolutions)"));}}else {}if ((_7054 == std::string ("mioNodeSelection"))){ int _7135 = ::mosek::fusion::p_Parameters::string_to_mionodeseltype_value(_7055); if ((_7135 < (int)0)){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioNodeSelection)"));}else {}mosek::fusion::p_Model::_get_impl(_7053.get())->task_put_param(std::string ("MSK_IPAR_MIO_NODE_SELECTION"),_7135); return ; }else {}if ((_7054 == std::string ("mioHeuristicLevel"))){ try { int _7137 = ::mosek::fusion::Utils::Tools::toInt(_7055); if (true){ mosek::fusion::p_Model::_get_impl(_7053.get())->task_put_param(std::string ("MSK_IPAR_MIO_HEURISTIC_LEVEL"),_7137); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioHeuristicLevel)"));}}catch (mosek::fusion::ValueConversionError _7136){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioHeuristicLevel)"));}}else {}if ((_7054 == std::string ("mioProbingLevel"))){ try { int _7139 = ::mosek::fusion::Utils::Tools::toInt(_7055); if ((((- (int)1) <= _7139) && (_7139 <= (int)3))){ mosek::fusion::p_Model::_get_impl(_7053.get())->task_put_param(std::string ("MSK_IPAR_MIO_PROBING_LEVEL"),_7139); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioProbingLevel)"));}}catch (mosek::fusion::ValueConversionError _7138){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioProbingLevel)"));}}else {}if ((_7054 == std::string ("mioCutSelectionLevel"))){ try { int _7141 = ::mosek::fusion::Utils::Tools::toInt(_7055); if ((((- (int)1) <= _7141) && (_7141 <= (int)1))){ mosek::fusion::p_Model::_get_impl(_7053.get())->task_put_param(std::string ("MSK_IPAR_MIO_CUT_SELECTION_LEVEL"),_7141); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutSelectionLevel)"));}}catch (mosek::fusion::ValueConversionError _7140){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutSelectionLevel)"));}}else {}if ((_7054 == std::string ("mioVbDetectionLevel"))){ try { int _7143 = ::mosek::fusion::Utils::Tools::toInt(_7055); if ((((- (int)1) <= _7143) && (_7143 <= (int)2))){ mosek::fusion::p_Model::_get_impl(_7053.get())->task_put_param(std::string ("MSK_IPAR_MIO_VB_DETECTION_LEVEL"),_7143); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioVbDetectionLevel)"));}}catch (mosek::fusion::ValueConversionError _7142){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioVbDetectionLevel)"));}}else {}if ((_7054 == std::string ("mioBranchDir"))){ int _7144 = ::mosek::fusion::p_Parameters::string_to_branchdir_value(_7055); if ((_7144 < (int)0)){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioBranchDir)"));}else {}mosek::fusion::p_Model::_get_impl(_7053.get())->task_put_param(std::string ("MSK_IPAR_MIO_BRANCH_DIR"),_7144); return ; }else {}if ((_7054 == std::string ("mioRootOptimizer"))){ int _7145 = ::mosek::fusion::p_Parameters::string_to_optimizertype_value(_7055); if ((_7145 < (int)0)){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRootOptimizer)"));}else {}mosek::fusion::p_Model::_get_impl(_7053.get())->task_put_param(std::string ("MSK_IPAR_MIO_ROOT_OPTIMIZER"),_7145); return ; }else {}if ((_7054 == std::string ("mioNodeOptimizer"))){ int _7146 = ::mosek::fusion::p_Parameters::string_to_optimizertype_value(_7055); if ((_7146 < (int)0)){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioNodeOptimizer)"));}else {}mosek::fusion::p_Model::_get_impl(_7053.get())->task_put_param(std::string ("MSK_IPAR_MIO_NODE_OPTIMIZER"),_7146); return ; }else {}if ((_7054 == std::string ("mioPerspectiveReformulate"))){ int _7147 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_7055); if ((_7147 < (int)0)){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioPerspectiveReformulate)"));}else {}mosek::fusion::p_Model::_get_impl(_7053.get())->task_put_param(std::string ("MSK_IPAR_MIO_PERSPECTIVE_REFORMULATE"),_7147); return ; }else {}if ((_7054 == std::string ("writeLpQuotedNames"))){ int _7148 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_7055); if ((_7148 < (int)0)){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpQuotedNames)"));}else {}mosek::fusion::p_Model::_get_impl(_7053.get())->task_put_param(std::string ("MSK_IPAR_WRITE_LP_QUOTED_NAMES"),_7148); return ; }else {}if ((_7054 == std::string ("writeLpLineWidth"))){ try { int _7150 = ::mosek::fusion::Utils::Tools::toInt(_7055); if (((int)40 <= _7150)){ mosek::fusion::p_Model::_get_impl(_7053.get())->task_put_param(std::string ("MSK_IPAR_WRITE_LP_LINE_WIDTH"),_7150); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpLineWidth)"));}}catch (mosek::fusion::ValueConversionError _7149){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpLineWidth)"));}}else {}if ((_7054 == std::string ("writeLpTermsPerLine"))){ try { int _7152 = ::mosek::fusion::Utils::Tools::toInt(_7055); if (((int)0 <= _7152)){ mosek::fusion::p_Model::_get_impl(_7053.get())->task_put_param(std::string ("MSK_IPAR_WRITE_LP_TERMS_PER_LINE"),_7152); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpTermsPerLine)"));}}catch (mosek::fusion::ValueConversionError _7151){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpTermsPerLine)"));}}else {}if ((_7054 == std::string ("writeLpFullObj"))){ int _7153 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_7055); if ((_7153 < (int)0)){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpFullObj)"));}else {}mosek::fusion::p_Model::_get_impl(_7053.get())->task_put_param(std::string ("MSK_IPAR_WRITE_LP_FULL_OBJ"),_7153); return ; }else {}if ((_7054 == std::string ("logInfeasAna"))){ try { int _7155 = ::mosek::fusion::Utils::Tools::toInt(_7055); if (((int)0 <= _7155)){ mosek::fusion::p_Model::_get_impl(_7053.get())->task_put_param(std::string ("MSK_IPAR_LOG_INFEAS_ANA"),_7155); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logInfeasAna)"));}}catch (mosek::fusion::ValueConversionError _7154){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logInfeasAna)"));}}else {}if ((_7054 == std::string ("licenseWait"))){ int _7156 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_7055); if ((_7156 < (int)0)){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseWait)"));}else {}mosek::fusion::p_Model::_get_impl(_7053.get())->task_put_param(std::string ("MSK_IPAR_LICENSE_WAIT"),_7156); return ; }else {}if ((_7054 == std::string ("licenseSuppressExpireWrns"))){ int _7157 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_7055); if ((_7157 < (int)0)){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseSuppressExpireWrns)"));}else {}mosek::fusion::p_Model::_get_impl(_7053.get())->task_put_param(std::string ("MSK_IPAR_LICENSE_SUPPRESS_EXPIRE_WRNS"),_7157); return ; }else {}if ((_7054 == std::string ("licensePauseTime"))){ try { int _7159 = ::mosek::fusion::Utils::Tools::toInt(_7055); if ((((int)0 <= _7159) && (_7159 <= (int)1000000))){ mosek::fusion::p_Model::_get_impl(_7053.get())->task_put_param(std::string ("MSK_IPAR_LICENSE_PAUSE_TIME"),_7159); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licensePauseTime)"));}}catch (mosek::fusion::ValueConversionError _7158){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licensePauseTime)"));}}else {}if ((_7054 == std::string ("licenseDebug"))){ int _7160 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_7055); if ((_7160 < (int)0)){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseDebug)"));}else {}mosek::fusion::p_Model::_get_impl(_7053.get())->task_put_param(std::string ("MSK_IPAR_LICENSE_DEBUG"),_7160); return ; }else {}if ((_7054 == std::string ("log"))){ try { int _7162 = ::mosek::fusion::Utils::Tools::toInt(_7055); if (((int)0 <= _7162)){ mosek::fusion::p_Model::_get_impl(_7053.get())->task_put_param(std::string ("MSK_IPAR_LOG"),_7162); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (log)"));}}catch (mosek::fusion::ValueConversionError _7161){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (log)"));}}else {}if ((_7054 == std::string ("logExpand"))){ try { int _7164 = ::mosek::fusion::Utils::Tools::toInt(_7055); if (((int)0 <= _7164)){ mosek::fusion::p_Model::_get_impl(_7053.get())->task_put_param(std::string ("MSK_IPAR_LOG_EXPAND"),_7164); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logExpand)"));}}catch (mosek::fusion::ValueConversionError _7163){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logExpand)"));}}else {}if ((_7054 == std::string ("logFile"))){ try { int _7166 = ::mosek::fusion::Utils::Tools::toInt(_7055); if (((int)0 <= _7166)){ mosek::fusion::p_Model::_get_impl(_7053.get())->task_put_param(std::string ("MSK_IPAR_LOG_FILE"),_7166); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logFile)"));}}catch (mosek::fusion::ValueConversionError _7165){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logFile)"));}}else {}if ((_7054 == std::string ("logOrder"))){ try { int _7168 = ::mosek::fusion::Utils::Tools::toInt(_7055); if (((int)0 <= _7168)){ mosek::fusion::p_Model::_get_impl(_7053.get())->task_put_param(std::string ("MSK_IPAR_LOG_ORDER"),_7168); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logOrder)"));}}catch (mosek::fusion::ValueConversionError _7167){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logOrder)"));}}else {}if ((_7054 == std::string ("simScaling"))){ int _7169 = ::mosek::fusion::p_Parameters::string_to_scalingtype_value(_7055); if ((_7169 < (int)0)){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simScaling)"));}else {}mosek::fusion::p_Model::_get_impl(_7053.get())->task_put_param(std::string ("MSK_IPAR_SIM_SCALING"),_7169); return ; }else {}if ((_7054 == std::string ("simScalingMethod"))){ int _7170 = ::mosek::fusion::p_Parameters::string_to_scalingmethod_value(_7055); if ((_7170 < (int)0)){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simScalingMethod)"));}else {}mosek::fusion::p_Model::_get_impl(_7053.get())->task_put_param(std::string ("MSK_IPAR_SIM_SCALING_METHOD"),_7170); return ; }else {}if ((_7054 == std::string ("simPrimalPhaseoneMethod"))){ try { int _7172 = ::mosek::fusion::Utils::Tools::toInt(_7055); if ((((int)0 <= _7172) && (_7172 <= (int)10))){ mosek::fusion::p_Model::_get_impl(_7053.get())->task_put_param(std::string ("MSK_IPAR_SIM_PRIMAL_PHASEONE_METHOD"),_7172); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalPhaseoneMethod)"));}}catch (mosek::fusion::ValueConversionError _7171){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalPhaseoneMethod)"));}}else {}if ((_7054 == std::string ("simDualPhaseoneMethod"))){ try { int _7174 = ::mosek::fusion::Utils::Tools::toInt(_7055); if ((((int)0 <= _7174) && (_7174 <= (int)10))){ mosek::fusion::p_Model::_get_impl(_7053.get())->task_put_param(std::string ("MSK_IPAR_SIM_DUAL_PHASEONE_METHOD"),_7174); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualPhaseoneMethod)"));}}catch (mosek::fusion::ValueConversionError _7173){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualPhaseoneMethod)"));}}else {}if ((_7054 == std::string ("simMaxNumSetbacks"))){ try { int _7176 = ::mosek::fusion::Utils::Tools::toInt(_7055); if (((int)0 <= _7176)){ mosek::fusion::p_Model::_get_impl(_7053.get())->task_put_param(std::string ("MSK_IPAR_SIM_MAX_NUM_SETBACKS"),_7176); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simMaxNumSetbacks)"));}}catch (mosek::fusion::ValueConversionError _7175){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simMaxNumSetbacks)"));}}else {}if ((_7054 == std::string ("simHotstart"))){ int _7177 = ::mosek::fusion::p_Parameters::string_to_simhotstart_value(_7055); if ((_7177 < (int)0)){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simHotstart)"));}else {}mosek::fusion::p_Model::_get_impl(_7053.get())->task_put_param(std::string ("MSK_IPAR_SIM_HOTSTART"),_7177); return ; }else {}if ((_7054 == std::string ("simBasisFactorUse"))){ int _7178 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_7055); if ((_7178 < (int)0)){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simBasisFactorUse)"));}else {}mosek::fusion::p_Model::_get_impl(_7053.get())->task_put_param(std::string ("MSK_IPAR_SIM_BASIS_FACTOR_USE"),_7178); return ; }else {}if ((_7054 == std::string ("simDegen"))){ int _7179 = ::mosek::fusion::p_Parameters::string_to_simdegen_value(_7055); if ((_7179 < (int)0)){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDegen)"));}else {}mosek::fusion::p_Model::_get_impl(_7053.get())->task_put_param(std::string ("MSK_IPAR_SIM_DEGEN"),_7179); return ; }else {}if ((_7054 == std::string ("simReformulation"))){ int _7180 = ::mosek::fusion::p_Parameters::string_to_simreform_value(_7055); if ((_7180 < (int)0)){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simReformulation)"));}else {}mosek::fusion::p_Model::_get_impl(_7053.get())->task_put_param(std::string ("MSK_IPAR_SIM_REFORMULATION"),_7180); return ; }else {}if ((_7054 == std::string ("simExploitDupvec"))){ int _7181 = ::mosek::fusion::p_Parameters::string_to_simdupvec_value(_7055); if ((_7181 < (int)0)){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simExploitDupvec)"));}else {}mosek::fusion::p_Model::_get_impl(_7053.get())->task_put_param(std::string ("MSK_IPAR_SIM_EXPLOIT_DUPVEC"),_7181); return ; }else {}if ((_7054 == std::string ("simSaveLu"))){ int _7182 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_7055); if ((_7182 < (int)0)){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSaveLu)"));}else {}mosek::fusion::p_Model::_get_impl(_7053.get())->task_put_param(std::string ("MSK_IPAR_SIM_SAVE_LU"),_7182); return ; }else {}if ((_7054 == std::string ("simNonSingular"))){ int _7183 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_7055); if ((_7183 < (int)0)){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simNonSingular)"));}else {}mosek::fusion::p_Model::_get_impl(_7053.get())->task_put_param(std::string ("MSK_IPAR_SIM_NON_SINGULAR"),_7183); return ; }else {}if ((_7054 == std::string ("simDualCrash"))){ try { int _7185 = ::mosek::fusion::Utils::Tools::toInt(_7055); if (((int)0 <= _7185)){ mosek::fusion::p_Model::_get_impl(_7053.get())->task_put_param(std::string ("MSK_IPAR_SIM_DUAL_CRASH"),_7185); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualCrash)"));}}catch (mosek::fusion::ValueConversionError _7184){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualCrash)"));}}else {}if ((_7054 == std::string ("infeasPreferPrimal"))){ int _7186 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_7055); if ((_7186 < (int)0)){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (infeasPreferPrimal)"));}else {}mosek::fusion::p_Model::_get_impl(_7053.get())->task_put_param(std::string ("MSK_IPAR_INFEAS_PREFER_PRIMAL"),_7186); return ; }else {}if ((_7054 == std::string ("mioRootRepeatPresolveLevel"))){ try { int _7188 = ::mosek::fusion::Utils::Tools::toInt(_7055); if ((((- (int)1) <= _7188) && (_7188 <= (int)1))){ mosek::fusion::p_Model::_get_impl(_7053.get())->task_put_param(std::string ("MSK_IPAR_MIO_ROOT_REPEAT_PRESOLVE_LEVEL"),_7188); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRootRepeatPresolveLevel)"));}}catch (mosek::fusion::ValueConversionError _7187){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRootRepeatPresolveLevel)"));}}else {}if ((_7054 == std::string ("mioCutCmir"))){ int _7189 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_7055); if ((_7189 < (int)0)){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutCmir)"));}else {}mosek::fusion::p_Model::_get_impl(_7053.get())->task_put_param(std::string ("MSK_IPAR_MIO_CUT_CMIR"),_7189); return ; }else {}if ((_7054 == std::string ("mioCutClique"))){ int _7190 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_7055); if ((_7190 < (int)0)){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutClique)"));}else {}mosek::fusion::p_Model::_get_impl(_7053.get())->task_put_param(std::string ("MSK_IPAR_MIO_CUT_CLIQUE"),_7190); return ; }else {}if ((_7054 == std::string ("mioCutImpliedBound"))){ int _7191 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_7055); if ((_7191 < (int)0)){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutImpliedBound)"));}else {}mosek::fusion::p_Model::_get_impl(_7053.get())->task_put_param(std::string ("MSK_IPAR_MIO_CUT_IMPLIED_BOUND"),_7191); return ; }else {}if ((_7054 == std::string ("mioCutKnapsackCover"))){ int _7192 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_7055); if ((_7192 < (int)0)){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutKnapsackCover)"));}else {}mosek::fusion::p_Model::_get_impl(_7053.get())->task_put_param(std::string ("MSK_IPAR_MIO_CUT_KNAPSACK_COVER"),_7192); return ; }else {}if ((_7054 == std::string ("mioCutGmi"))){ int _7193 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_7055); if ((_7193 < (int)0)){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutGmi)"));}else {}mosek::fusion::p_Model::_get_impl(_7053.get())->task_put_param(std::string ("MSK_IPAR_MIO_CUT_GMI"),_7193); return ; }else {}if ((_7054 == std::string ("mioConstructSol"))){ int _7194 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_7055); if ((_7194 < (int)0)){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioConstructSol)"));}else {}mosek::fusion::p_Model::_get_impl(_7053.get())->task_put_param(std::string ("MSK_IPAR_MIO_CONSTRUCT_SOL"),_7194); return ; }else {}if ((_7054 == std::string ("presolveLindepRelWorkTrh"))){ try { int _7196 = ::mosek::fusion::Utils::Tools::toInt(_7055); if (true){ mosek::fusion::p_Model::_get_impl(_7053.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_LINDEP_REL_WORK_TRH"),_7196); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepRelWorkTrh)"));}}catch (mosek::fusion::ValueConversionError _7195){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepRelWorkTrh)"));}}else {}if ((_7054 == std::string ("presolveLindepAbsWorkTrh"))){ try { int _7198 = ::mosek::fusion::Utils::Tools::toInt(_7055); if (true){ mosek::fusion::p_Model::_get_impl(_7053.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_LINDEP_ABS_WORK_TRH"),_7198); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepAbsWorkTrh)"));}}catch (mosek::fusion::ValueConversionError _7197){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepAbsWorkTrh)"));}}else {}if ((_7054 == std::string ("cacheLicense"))){ int _7199 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_7055); if ((_7199 < (int)0)){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (cacheLicense)"));}else {}mosek::fusion::p_Model::_get_impl(_7053.get())->task_put_param(std::string ("MSK_IPAR_CACHE_LICENSE"),_7199); return ; }else {}if ((_7054 == std::string ("intpntRegularizationUse"))){ int _7200 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_7055); if ((_7200 < (int)0)){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntRegularizationUse)"));}else {}mosek::fusion::p_Model::_get_impl(_7053.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_REGULARIZATION_USE"),_7200); return ; }else {}if ((_7054 == std::string ("simSolveForm"))){ int _7201 = ::mosek::fusion::p_Parameters::string_to_solveform_value(_7055); if ((_7201 < (int)0)){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSolveForm)"));}else {}mosek::fusion::p_Model::_get_impl(_7053.get())->task_put_param(std::string ("MSK_IPAR_SIM_SOLVE_FORM"),_7201); return ; }else {}if ((_7054 == std::string ("simSwitchOptimizer"))){ int _7202 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_7055); if ((_7202 < (int)0)){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSwitchOptimizer)"));}else {}mosek::fusion::p_Model::_get_impl(_7053.get())->task_put_param(std::string ("MSK_IPAR_SIM_SWITCH_OPTIMIZER"),_7202); return ; }else {}if ((_7054 == std::string ("mioRinsMaxNodes"))){ try { int _7204 = ::mosek::fusion::Utils::Tools::toInt(_7055); if (((- (int)1) <= _7204)){ mosek::fusion::p_Model::_get_impl(_7053.get())->task_put_param(std::string ("MSK_IPAR_MIO_RINS_MAX_NODES"),_7204); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRinsMaxNodes)"));}}catch (mosek::fusion::ValueConversionError _7203){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRinsMaxNodes)"));}}else {}if ((_7054 == std::string ("optimizerMaxTime"))){ try { double _7206 = ::mosek::fusion::Utils::Tools::toDouble(_7055); if (true){ mosek::fusion::p_Model::_get_impl(_7053.get())->task_put_param(std::string ("MSK_DPAR_OPTIMIZER_MAX_TIME"),_7206); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (optimizerMaxTime)"));}}catch (mosek::fusion::ValueConversionError _7205){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (optimizerMaxTime)"));}}else {}if ((_7054 == std::string ("lowerObjCut"))){ try { double _7208 = ::mosek::fusion::Utils::Tools::toDouble(_7055); if (true){ mosek::fusion::p_Model::_get_impl(_7053.get())->task_put_param(std::string ("MSK_DPAR_LOWER_OBJ_CUT"),_7208); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (lowerObjCut)"));}}catch (mosek::fusion::ValueConversionError _7207){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (lowerObjCut)"));}}else {}if ((_7054 == std::string ("upperObjCut"))){ try { double _7210 = ::mosek::fusion::Utils::Tools::toDouble(_7055); if (true){ mosek::fusion::p_Model::_get_impl(_7053.get())->task_put_param(std::string ("MSK_DPAR_UPPER_OBJ_CUT"),_7210); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (upperObjCut)"));}}catch (mosek::fusion::ValueConversionError _7209){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (upperObjCut)"));}}else {}if ((_7054 == std::string ("upperObjCutFiniteTrh"))){ try { double _7212 = ::mosek::fusion::Utils::Tools::toDouble(_7055); if (true){ mosek::fusion::p_Model::_get_impl(_7053.get())->task_put_param(std::string ("MSK_DPAR_UPPER_OBJ_CUT_FINITE_TRH"),_7212); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (upperObjCutFiniteTrh)"));}}catch (mosek::fusion::ValueConversionError _7211){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (upperObjCutFiniteTrh)"));}}else {}if ((_7054 == std::string ("lowerObjCutFiniteTrh"))){ try { double _7214 = ::mosek::fusion::Utils::Tools::toDouble(_7055); if (true){ mosek::fusion::p_Model::_get_impl(_7053.get())->task_put_param(std::string ("MSK_DPAR_LOWER_OBJ_CUT_FINITE_TRH"),_7214); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (lowerObjCutFiniteTrh)"));}}catch (mosek::fusion::ValueConversionError _7213){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (lowerObjCutFiniteTrh)"));}}else {}if ((_7054 == std::string ("intpntTolRelGap"))){ try { double _7216 = ::mosek::fusion::Utils::Tools::toDouble(_7055); if ((1.000000e-14 <= _7216)){ mosek::fusion::p_Model::_get_impl(_7053.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_REL_GAP"),_7216); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolRelGap)"));}}catch (mosek::fusion::ValueConversionError _7215){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolRelGap)"));}}else {}if ((_7054 == std::string ("intpntTolStepSize"))){ try { double _7218 = ::mosek::fusion::Utils::Tools::toDouble(_7055); if (((0.000000e+00 <= _7218) && (_7218 <= 1.000000e+00))){ mosek::fusion::p_Model::_get_impl(_7053.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_STEP_SIZE"),_7218); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolStepSize)"));}}catch (mosek::fusion::ValueConversionError _7217){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolStepSize)"));}}else {}if ((_7054 == std::string ("simLuTolRelPiv"))){ try { double _7220 = ::mosek::fusion::Utils::Tools::toDouble(_7055); if (((1.000000e-06 <= _7220) && (_7220 <= 9.999990e-01))){ mosek::fusion::p_Model::_get_impl(_7053.get())->task_put_param(std::string ("MSK_DPAR_SIM_LU_TOL_REL_PIV"),_7220); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simLuTolRelPiv)"));}}catch (mosek::fusion::ValueConversionError _7219){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simLuTolRelPiv)"));}}else {}if ((_7054 == std::string ("intpntTolRelStep"))){ try { double _7222 = ::mosek::fusion::Utils::Tools::toDouble(_7055); if (((1.000000e-04 <= _7222) && (_7222 <= 9.999990e-01))){ mosek::fusion::p_Model::_get_impl(_7053.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_REL_STEP"),_7222); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolRelStep)"));}}catch (mosek::fusion::ValueConversionError _7221){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolRelStep)"));}}else {}if ((_7054 == std::string ("intpntTolPath"))){ try { double _7224 = ::mosek::fusion::Utils::Tools::toDouble(_7055); if (((0.000000e+00 <= _7224) && (_7224 <= 9.999000e-01))){ mosek::fusion::p_Model::_get_impl(_7053.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_PATH"),_7224); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPath)"));}}catch (mosek::fusion::ValueConversionError _7223){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPath)"));}}else {}if ((_7054 == std::string ("intpntTolPfeas"))){ try { double _7226 = ::mosek::fusion::Utils::Tools::toDouble(_7055); if (((0.000000e+00 <= _7226) && (_7226 <= 1.000000e+00))){ mosek::fusion::p_Model::_get_impl(_7053.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_PFEAS"),_7226); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPfeas)"));}}catch (mosek::fusion::ValueConversionError _7225){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPfeas)"));}}else {}if ((_7054 == std::string ("intpntTolDfeas"))){ try { double _7228 = ::mosek::fusion::Utils::Tools::toDouble(_7055); if (((0.000000e+00 <= _7228) && (_7228 <= 1.000000e+00))){ mosek::fusion::p_Model::_get_impl(_7053.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_DFEAS"),_7228); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolDfeas)"));}}catch (mosek::fusion::ValueConversionError _7227){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolDfeas)"));}}else {}if ((_7054 == std::string ("intpntTolMuRed"))){ try { double _7230 = ::mosek::fusion::Utils::Tools::toDouble(_7055); if (((0.000000e+00 <= _7230) && (_7230 <= 1.000000e+00))){ mosek::fusion::p_Model::_get_impl(_7053.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_MU_RED"),_7230); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolMuRed)"));}}catch (mosek::fusion::ValueConversionError _7229){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolMuRed)"));}}else {}if ((_7054 == std::string ("intpntTolInfeas"))){ try { double _7232 = ::mosek::fusion::Utils::Tools::toDouble(_7055); if (((0.000000e+00 <= _7232) && (_7232 <= 1.000000e+00))){ mosek::fusion::p_Model::_get_impl(_7053.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_INFEAS"),_7232); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolInfeas)"));}}catch (mosek::fusion::ValueConversionError _7231){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolInfeas)"));}}else {}if ((_7054 == std::string ("intpntCoTolRelGap"))){ try { double _7234 = ::mosek::fusion::Utils::Tools::toDouble(_7055); if (((0.000000e+00 <= _7234) && (_7234 <= 1.000000e+00))){ mosek::fusion::p_Model::_get_impl(_7053.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_REL_GAP"),_7234); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolRelGap)"));}}catch (mosek::fusion::ValueConversionError _7233){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolRelGap)"));}}else {}if ((_7054 == std::string ("intpntCoTolPfeas"))){ try { double _7236 = ::mosek::fusion::Utils::Tools::toDouble(_7055); if (((0.000000e+00 <= _7236) && (_7236 <= 1.000000e+00))){ mosek::fusion::p_Model::_get_impl(_7053.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_PFEAS"),_7236); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolPfeas)"));}}catch (mosek::fusion::ValueConversionError _7235){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolPfeas)"));}}else {}if ((_7054 == std::string ("intpntCoTolDfeas"))){ try { double _7238 = ::mosek::fusion::Utils::Tools::toDouble(_7055); if (((0.000000e+00 <= _7238) && (_7238 <= 1.000000e+00))){ mosek::fusion::p_Model::_get_impl(_7053.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_DFEAS"),_7238); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolDfeas)"));}}catch (mosek::fusion::ValueConversionError _7237){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolDfeas)"));}}else {}if ((_7054 == std::string ("intpntCoTolMuRed"))){ try { double _7240 = ::mosek::fusion::Utils::Tools::toDouble(_7055); if (((0.000000e+00 <= _7240) && (_7240 <= 1.000000e+00))){ mosek::fusion::p_Model::_get_impl(_7053.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_MU_RED"),_7240); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolMuRed)"));}}catch (mosek::fusion::ValueConversionError _7239){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolMuRed)"));}}else {}if ((_7054 == std::string ("intpntCoTolNearRel"))){ try { double _7242 = ::mosek::fusion::Utils::Tools::toDouble(_7055); if ((1.000000e+00 <= _7242)){ mosek::fusion::p_Model::_get_impl(_7053.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_NEAR_REL"),_7242); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolNearRel)"));}}catch (mosek::fusion::ValueConversionError _7241){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolNearRel)"));}}else {}if ((_7054 == std::string ("intpntCoTolInfeas"))){ try { double _7244 = ::mosek::fusion::Utils::Tools::toDouble(_7055); if (((0.000000e+00 <= _7244) && (_7244 <= 1.000000e+00))){ mosek::fusion::p_Model::_get_impl(_7053.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_INFEAS"),_7244); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolInfeas)"));}}catch (mosek::fusion::ValueConversionError _7243){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolInfeas)"));}}else {}if ((_7054 == std::string ("intpntQoTolRelGap"))){ try { double _7246 = ::mosek::fusion::Utils::Tools::toDouble(_7055); if (((0.000000e+00 <= _7246) && (_7246 <= 1.000000e+00))){ mosek::fusion::p_Model::_get_impl(_7053.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_QO_TOL_REL_GAP"),_7246); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntQoTolRelGap)"));}}catch (mosek::fusion::ValueConversionError _7245){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntQoTolRelGap)"));}}else {}if ((_7054 == std::string ("intpntQoTolPfeas"))){ try { double _7248 = ::mosek::fusion::Utils::Tools::toDouble(_7055); if (((0.000000e+00 <= _7248) && (_7248 <= 1.000000e+00))){ mosek::fusion::p_Model::_get_impl(_7053.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_QO_TOL_PFEAS"),_7248); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntQoTolPfeas)"));}}catch (mosek::fusion::ValueConversionError _7247){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntQoTolPfeas)"));}}else {}if ((_7054 == std::string ("intpntQoTolDfeas"))){ try { double _7250 = ::mosek::fusion::Utils::Tools::toDouble(_7055); if (((0.000000e+00 <= _7250) && (_7250 <= 1.000000e+00))){ mosek::fusion::p_Model::_get_impl(_7053.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_QO_TOL_DFEAS"),_7250); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntQoTolDfeas)"));}}catch (mosek::fusion::ValueConversionError _7249){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntQoTolDfeas)"));}}else {}if ((_7054 == std::string ("intpntQoTolMuRed"))){ try { double _7252 = ::mosek::fusion::Utils::Tools::toDouble(_7055); if (((0.000000e+00 <= _7252) && (_7252 <= 1.000000e+00))){ mosek::fusion::p_Model::_get_impl(_7053.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_QO_TOL_MU_RED"),_7252); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntQoTolMuRed)"));}}catch (mosek::fusion::ValueConversionError _7251){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntQoTolMuRed)"));}}else {}if ((_7054 == std::string ("intpntQoTolNearRel"))){ try { double _7254 = ::mosek::fusion::Utils::Tools::toDouble(_7055); if ((1.000000e+00 <= _7254)){ mosek::fusion::p_Model::_get_impl(_7053.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_QO_TOL_NEAR_REL"),_7254); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntQoTolNearRel)"));}}catch (mosek::fusion::ValueConversionError _7253){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntQoTolNearRel)"));}}else {}if ((_7054 == std::string ("intpntQoTolInfeas"))){ try { double _7256 = ::mosek::fusion::Utils::Tools::toDouble(_7055); if (((0.000000e+00 <= _7256) && (_7256 <= 1.000000e+00))){ mosek::fusion::p_Model::_get_impl(_7053.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_QO_TOL_INFEAS"),_7256); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntQoTolInfeas)"));}}catch (mosek::fusion::ValueConversionError _7255){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntQoTolInfeas)"));}}else {}if ((_7054 == std::string ("intpntTolPsafe"))){ try { double _7258 = ::mosek::fusion::Utils::Tools::toDouble(_7055); if ((1.000000e-04 <= _7258)){ mosek::fusion::p_Model::_get_impl(_7053.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_PSAFE"),_7258); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPsafe)"));}}catch (mosek::fusion::ValueConversionError _7257){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPsafe)"));}}else {}if ((_7054 == std::string ("intpntTolDsafe"))){ try { double _7260 = ::mosek::fusion::Utils::Tools::toDouble(_7055); if ((1.000000e-04 <= _7260)){ mosek::fusion::p_Model::_get_impl(_7053.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_DSAFE"),_7260); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolDsafe)"));}}catch (mosek::fusion::ValueConversionError _7259){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolDsafe)"));}}else {}if ((_7054 == std::string ("mioMaxTime"))){ try { double _7262 = ::mosek::fusion::Utils::Tools::toDouble(_7055); if (true){ mosek::fusion::p_Model::_get_impl(_7053.get())->task_put_param(std::string ("MSK_DPAR_MIO_MAX_TIME"),_7262); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxTime)"));}}catch (mosek::fusion::ValueConversionError _7261){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxTime)"));}}else {}if ((_7054 == std::string ("mioDisableTermTime"))){ try { double _7264 = ::mosek::fusion::Utils::Tools::toDouble(_7055); if (true){ mosek::fusion::p_Model::_get_impl(_7053.get())->task_put_param(std::string ("MSK_DPAR_MIO_DISABLE_TERM_TIME"),_7264); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioDisableTermTime)"));}}catch (mosek::fusion::ValueConversionError _7263){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioDisableTermTime)"));}}else {}if ((_7054 == std::string ("mioRelGapConst"))){ try { double _7266 = ::mosek::fusion::Utils::Tools::toDouble(_7055); if ((1.000000e-15 <= _7266)){ mosek::fusion::p_Model::_get_impl(_7053.get())->task_put_param(std::string ("MSK_DPAR_MIO_REL_GAP_CONST"),_7266); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRelGapConst)"));}}catch (mosek::fusion::ValueConversionError _7265){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRelGapConst)"));}}else {}if ((_7054 == std::string ("mioTolRelGap"))){ try { double _7268 = ::mosek::fusion::Utils::Tools::toDouble(_7055); if ((0.000000e+00 <= _7268)){ mosek::fusion::p_Model::_get_impl(_7053.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_REL_GAP"),_7268); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolRelGap)"));}}catch (mosek::fusion::ValueConversionError _7267){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolRelGap)"));}}else {}if ((_7054 == std::string ("mioNearTolRelGap"))){ try { double _7270 = ::mosek::fusion::Utils::Tools::toDouble(_7055); if ((0.000000e+00 <= _7270)){ mosek::fusion::p_Model::_get_impl(_7053.get())->task_put_param(std::string ("MSK_DPAR_MIO_NEAR_TOL_REL_GAP"),_7270); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioNearTolRelGap)"));}}catch (mosek::fusion::ValueConversionError _7269){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioNearTolRelGap)"));}}else {}if ((_7054 == std::string ("mioTolAbsGap"))){ try { double _7272 = ::mosek::fusion::Utils::Tools::toDouble(_7055); if ((0.000000e+00 <= _7272)){ mosek::fusion::p_Model::_get_impl(_7053.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_ABS_GAP"),_7272); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolAbsGap)"));}}catch (mosek::fusion::ValueConversionError _7271){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolAbsGap)"));}}else {}if ((_7054 == std::string ("mioNearTolAbsGap"))){ try { double _7274 = ::mosek::fusion::Utils::Tools::toDouble(_7055); if ((0.000000e+00 <= _7274)){ mosek::fusion::p_Model::_get_impl(_7053.get())->task_put_param(std::string ("MSK_DPAR_MIO_NEAR_TOL_ABS_GAP"),_7274); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioNearTolAbsGap)"));}}catch (mosek::fusion::ValueConversionError _7273){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioNearTolAbsGap)"));}}else {}if ((_7054 == std::string ("mioTolAbsRelaxInt"))){ try { double _7276 = ::mosek::fusion::Utils::Tools::toDouble(_7055); if ((1.000000e-09 <= _7276)){ mosek::fusion::p_Model::_get_impl(_7053.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_ABS_RELAX_INT"),_7276); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolAbsRelaxInt)"));}}catch (mosek::fusion::ValueConversionError _7275){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolAbsRelaxInt)"));}}else {}if ((_7054 == std::string ("basisTolX"))){ try { double _7278 = ::mosek::fusion::Utils::Tools::toDouble(_7055); if ((1.000000e-09 <= _7278)){ mosek::fusion::p_Model::_get_impl(_7053.get())->task_put_param(std::string ("MSK_DPAR_BASIS_TOL_X"),_7278); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisTolX)"));}}catch (mosek::fusion::ValueConversionError _7277){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisTolX)"));}}else {}if ((_7054 == std::string ("basisTolS"))){ try { double _7280 = ::mosek::fusion::Utils::Tools::toDouble(_7055); if ((1.000000e-09 <= _7280)){ mosek::fusion::p_Model::_get_impl(_7053.get())->task_put_param(std::string ("MSK_DPAR_BASIS_TOL_S"),_7280); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisTolS)"));}}catch (mosek::fusion::ValueConversionError _7279){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisTolS)"));}}else {}if ((_7054 == std::string ("basisRelTolS"))){ try { double _7282 = ::mosek::fusion::Utils::Tools::toDouble(_7055); if ((0.000000e+00 <= _7282)){ mosek::fusion::p_Model::_get_impl(_7053.get())->task_put_param(std::string ("MSK_DPAR_BASIS_REL_TOL_S"),_7282); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisRelTolS)"));}}catch (mosek::fusion::ValueConversionError _7281){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisRelTolS)"));}}else {}if ((_7054 == std::string ("presolveTolX"))){ try { double _7284 = ::mosek::fusion::Utils::Tools::toDouble(_7055); if ((0.000000e+00 <= _7284)){ mosek::fusion::p_Model::_get_impl(_7053.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_X"),_7284); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolX)"));}}catch (mosek::fusion::ValueConversionError _7283){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolX)"));}}else {}if ((_7054 == std::string ("presolveTolS"))){ try { double _7286 = ::mosek::fusion::Utils::Tools::toDouble(_7055); if ((0.000000e+00 <= _7286)){ mosek::fusion::p_Model::_get_impl(_7053.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_S"),_7286); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolS)"));}}catch (mosek::fusion::ValueConversionError _7285){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolS)"));}}else {}if ((_7054 == std::string ("presolveTolAij"))){ try { double _7288 = ::mosek::fusion::Utils::Tools::toDouble(_7055); if ((1.000000e-15 <= _7288)){ mosek::fusion::p_Model::_get_impl(_7053.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_AIJ"),_7288); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolAij)"));}}catch (mosek::fusion::ValueConversionError _7287){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolAij)"));}}else {}if ((_7054 == std::string ("presolveTolAbsLindep"))){ try { double _7290 = ::mosek::fusion::Utils::Tools::toDouble(_7055); if ((0.000000e+00 <= _7290)){ mosek::fusion::p_Model::_get_impl(_7053.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_ABS_LINDEP"),_7290); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolAbsLindep)"));}}catch (mosek::fusion::ValueConversionError _7289){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolAbsLindep)"));}}else {}if ((_7054 == std::string ("presolveTolRelLindep"))){ try { double _7292 = ::mosek::fusion::Utils::Tools::toDouble(_7055); if ((0.000000e+00 <= _7292)){ mosek::fusion::p_Model::_get_impl(_7053.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_REL_LINDEP"),_7292); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolRelLindep)"));}}catch (mosek::fusion::ValueConversionError _7291){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolRelLindep)"));}}else {}if ((_7054 == std::string ("simplexAbsTolPiv"))){ try { double _7294 = ::mosek::fusion::Utils::Tools::toDouble(_7055); if ((1.000000e-12 <= _7294)){ mosek::fusion::p_Model::_get_impl(_7053.get())->task_put_param(std::string ("MSK_DPAR_SIMPLEX_ABS_TOL_PIV"),_7294); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simplexAbsTolPiv)"));}}catch (mosek::fusion::ValueConversionError _7293){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simplexAbsTolPiv)"));}}else {}if ((_7054 == std::string ("mioTolFeas"))){ try { double _7296 = ::mosek::fusion::Utils::Tools::toDouble(_7055); if (((1.000000e-09 <= _7296) && (_7296 <= 1.000000e-03))){ mosek::fusion::p_Model::_get_impl(_7053.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_FEAS"),_7296); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolFeas)"));}}catch (mosek::fusion::ValueConversionError _7295){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolFeas)"));}}else {}if ((_7054 == std::string ("anaSolInfeasTol"))){ try { double _7298 = ::mosek::fusion::Utils::Tools::toDouble(_7055); if ((0.000000e+00 <= _7298)){ mosek::fusion::p_Model::_get_impl(_7053.get())->task_put_param(std::string ("MSK_DPAR_ANA_SOL_INFEAS_TOL"),_7298); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (anaSolInfeasTol)"));}}catch (mosek::fusion::ValueConversionError _7297){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (anaSolInfeasTol)"));}}else {}if ((_7054 == std::string ("mioTolRelDualBoundImprovement"))){ try { double _7300 = ::mosek::fusion::Utils::Tools::toDouble(_7055); if (((0.000000e+00 <= _7300) && (_7300 <= 1.000000e+00))){ mosek::fusion::p_Model::_get_impl(_7053.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_REL_DUAL_BOUND_IMPROVEMENT"),_7300); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolRelDualBoundImprovement)"));}}catch (mosek::fusion::ValueConversionError _7299){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolRelDualBoundImprovement)"));}}else {}throw ::mosek::fusion::ParameterError(std::string ("Unknown parameter"));}int mosek::fusion::p_Parameters::string_to_miocontsoltype_value( const std::string & _7301){ if ((_7301 == std::string ("none"))){ return (int)0; }else {}if ((_7301 == std::string ("root"))){ return (int)1; }else {}if ((_7301 == std::string ("itg"))){ return (int)2; }else {}if ((_7301 == std::string ("itgRel"))){ return (int)3; }else {}return (- (int)1); }int mosek::fusion::p_Parameters::string_to_internal_dinf_value( const std::string & _7302){ if ((_7302 == std::string ("sensitivityPrimalTime"))){ return (int)79; }else {}if ((_7302 == std::string ("sensitivityDualTime"))){ return (int)78; }else {}if ((_7302 == std::string ("intpntCompGap"))){ return (int)11; }else {}if ((_7302 == std::string ("intpntGfeas"))){ return (int)57; }else {}if ((_7302 == std::string ("intpntMu"))){ return (int)64; }else {}if ((_7302 == std::string ("intpntInitIterTime"))){ return (int)59; }else {}if ((_7302 == std::string ("intpntFactorTime"))){ return (int)55; }else {}if ((_7302 == std::string ("intpntInitSearchTime"))){ return (int)60; }else {}if ((_7302 == std::string ("intpntFormSearchTime"))){ return (int)56; }else {}if ((_7302 == std::string ("intpntUpdateTime"))){ return (int)68; }else {}if ((_7302 == std::string ("intpntFactorSetupTime"))){ return (int)52; }else {}if ((_7302 == std::string ("intpntFactorSchurTime"))){ return (int)46; }else {}if ((_7302 == std::string ("intpntFactorHatSchurTime"))){ return (int)31; }else {}if ((_7302 == std::string ("intpntFactorHatSchurPushTime"))){ return (int)30; }else {}if ((_7302 == std::string ("intpntFactorHatSchurPullTime"))){ return (int)28; }else {}if ((_7302 == std::string ("intpntFactorBarSchurTime"))){ return (int)15; }else {}if ((_7302 == std::string ("intpntFactorBarSchurDeTabTime"))){ return (int)12; }else {}if ((_7302 == std::string ("intpntFactorBarSchurSpTabTime"))){ return (int)14; }else {}if ((_7302 == std::string ("intpntFactorSparseLTime"))){ return (int)54; }else {}if ((_7302 == std::string ("intpntFactorDenseLTime"))){ return (int)20; }else {}if ((_7302 == std::string ("intpntFactorHataTime"))){ return (int)34; }else {}if ((_7302 == std::string ("intpntFactorHataSolveTime"))){ return (int)33; }else {}if ((_7302 == std::string ("intpntFactorHatvTime"))){ return (int)41; }else {}if ((_7302 == std::string ("intpntFactorHatathataTime"))){ return (int)36; }else {}if ((_7302 == std::string ("intpntFactorHatvthatvTime"))){ return (int)43; }else {}if ((_7302 == std::string ("intpntFactorDotlInitTime"))){ return (int)24; }else {}if ((_7302 == std::string ("intpntFactorDotlFactorTime"))){ return (int)23; }else {}if ((_7302 == std::string ("intpntFactorHatldInitTime"))){ return (int)39; }else {}if ((_7302 == std::string ("intpntFactorHatldFactorTime"))){ return (int)38; }else {}if ((_7302 == std::string ("intpntFactorDenseTime"))){ return (int)21; }else {}if ((_7302 == std::string ("intpntIterNonCorrectorFlops"))){ return (int)61; }else {}if ((_7302 == std::string ("intpntIterOneCorrectorFlops"))){ return (int)62; }else {}if ((_7302 == std::string ("intpntSolveTime"))){ return (int)67; }else {}if ((_7302 == std::string ("intpntIterRefTime"))){ return (int)63; }else {}if ((_7302 == std::string ("intpntSolveSparseLTime"))){ return (int)66; }else {}if ((_7302 == std::string ("intpntSolveDenseLTime"))){ return (int)65; }else {}if ((_7302 == std::string ("intpntFactorSetupFlops"))){ return (int)48; }else {}if ((_7302 == std::string ("intpntFactorSetupHatSchurFlops"))){ return (int)50; }else {}if ((_7302 == std::string ("intpntFactorSchurFlops"))){ return (int)45; }else {}if ((_7302 == std::string ("intpntFactorHatSchurFlops"))){ return (int)26; }else {}if ((_7302 == std::string ("intpntFactorHatSchurPushFlops"))){ return (int)29; }else {}if ((_7302 == std::string ("intpntFactorHatSchurPullFlops"))){ return (int)27; }else {}if ((_7302 == std::string ("intpntFactorBarSchurFlops"))){ return (int)13; }else {}if ((_7302 == std::string ("intpntFactorSparseLFlops"))){ return (int)53; }else {}if ((_7302 == std::string ("intpntFactorMlOrderSparseLFlops"))){ return (int)44; }else {}if ((_7302 == std::string ("intpntFactorGpOrderSparseLFlops"))){ return (int)25; }else {}if ((_7302 == std::string ("intpntFactorDenseLFlops"))){ return (int)19; }else {}if ((_7302 == std::string ("intpntFactorBvFlops"))){ return (int)16; }else {}if ((_7302 == std::string ("intpntFactorBvtbvFlops"))){ return (int)17; }else {}if ((_7302 == std::string ("intpntFactorHataFlops"))){ return (int)32; }else {}if ((_7302 == std::string ("intpntFactorHatvFlops"))){ return (int)40; }else {}if ((_7302 == std::string ("intpntFactorDenseFlops"))){ return (int)18; }else {}if ((_7302 == std::string ("intpntFactorHatathataFlops"))){ return (int)35; }else {}if ((_7302 == std::string ("intpntFactorHatvthatvFlops"))){ return (int)42; }else {}if ((_7302 == std::string ("intpntFactorDotlFactorFlops"))){ return (int)22; }else {}if ((_7302 == std::string ("intpntFactorHatldFactorFlops"))){ return (int)37; }else {}if ((_7302 == std::string ("presolveAcoltTime"))){ return (int)69; }else {}if ((_7302 == std::string ("presolveSetupTime"))){ return (int)74; }else {}if ((_7302 == std::string ("presolveCheckproTime"))){ return (int)70; }else {}if ((_7302 == std::string ("presolveDupconTime"))){ return (int)71; }else {}if ((_7302 == std::string ("presolveDupvarTime"))){ return (int)72; }else {}if ((_7302 == std::string ("presolveFinalTime"))){ return (int)73; }else {}if ((_7302 == std::string ("presolveSubDomvarTime"))){ return (int)75; }else {}if ((_7302 == std::string ("presolveSubRelaxTime"))){ return (int)76; }else {}if ((_7302 == std::string ("primalSimplexInftime"))){ return (int)77; }else {}if ((_7302 == std::string ("dualSimplexInftime"))){ return (int)10; }else {}if ((_7302 == std::string ("intpntGpOrderSavedFlops"))){ return (int)58; }else {}if ((_7302 == std::string ("intpntFactorSetupDetectDenseTime"))){ return (int)47; }else {}if ((_7302 == std::string ("intpntFactorSetupMlOrderTime"))){ return (int)51; }else {}if ((_7302 == std::string ("intpntFactorSetupGpOrderTime"))){ return (int)49; }else {}if ((_7302 == std::string ("biCrashTime"))){ return (int)1; }else {}if ((_7302 == std::string ("biCrashLuTime"))){ return (int)0; }else {}if ((_7302 == std::string ("biFactorTime"))){ return (int)5; }else {}if ((_7302 == std::string ("biFactorWork"))){ return (int)6; }else {}if ((_7302 == std::string ("biPrimalDone"))){ return (int)7; }else {}if ((_7302 == std::string ("biDualDone"))){ return (int)2; }else {}if ((_7302 == std::string ("simPrimalObj"))){ return (int)83; }else {}if ((_7302 == std::string ("simPrimalFeas"))){ return (int)82; }else {}if ((_7302 == std::string ("simDualObj"))){ return (int)81; }else {}if ((_7302 == std::string ("simDualFeas"))){ return (int)80; }else {}if ((_7302 == std::string ("biPrimalObj"))){ return (int)9; }else {}if ((_7302 == std::string ("biDualObj"))){ return (int)4; }else {}if ((_7302 == std::string ("biPrimalFeas"))){ return (int)8; }else {}if ((_7302 == std::string ("biDualFeas"))){ return (int)3; }else {}return (- (int)1); }int mosek::fusion::p_Parameters::string_to_presolvemode_value( const std::string & _7303){ if ((_7303 == std::string ("off"))){ return (int)0; }else {}if ((_7303 == std::string ("on"))){ return (int)1; }else {}if ((_7303 == std::string ("free"))){ return (int)2; }else {}return (- (int)1); }int mosek::fusion::p_Parameters::string_to_optimizertype_value( const std::string & _7304){ if ((_7304 == std::string ("free"))){ return (int)2; }else {}if ((_7304 == std::string ("intpnt"))){ return (int)4; }else {}if ((_7304 == std::string ("conic"))){ return (int)0; }else {}if ((_7304 == std::string ("primalSimplex"))){ return (int)6; }else {}if ((_7304 == std::string ("dualSimplex"))){ return (int)1; }else {}if ((_7304 == std::string ("freeSimplex"))){ return (int)3; }else {}if ((_7304 == std::string ("mixedInt"))){ return (int)5; }else {}return (- (int)1); }int mosek::fusion::p_Parameters::string_to_stakey_value( const std::string & _7305){ if ((_7305 == std::string ("unk"))){ return (int)0; }else {}if ((_7305 == std::string ("bas"))){ return (int)1; }else {}if ((_7305 == std::string ("supbas"))){ return (int)2; }else {}if ((_7305 == std::string ("low"))){ return (int)3; }else {}if ((_7305 == std::string ("upr"))){ return (int)4; }else {}if ((_7305 == std::string ("fix"))){ return (int)5; }else {}if ((_7305 == std::string ("inf"))){ return (int)6; }else {}return (- (int)1); }int mosek::fusion::p_Parameters::string_to_iinfitem_value( const std::string & _7306){ if ((_7306 == std::string ("anaProNumCon"))){ return (int)0; }else {}if ((_7306 == std::string ("anaProNumConLo"))){ return (int)3; }else {}if ((_7306 == std::string ("anaProNumConUp"))){ return (int)5; }else {}if ((_7306 == std::string ("anaProNumConRa"))){ return (int)4; }else {}if ((_7306 == std::string ("anaProNumConEq"))){ return (int)1; }else {}if ((_7306 == std::string ("anaProNumConFr"))){ return (int)2; }else {}if ((_7306 == std::string ("anaProNumVar"))){ return (int)6; }else {}if ((_7306 == std::string ("anaProNumVarLo"))){ return (int)12; }else {}if ((_7306 == std::string ("anaProNumVarUp"))){ return (int)14; }else {}if ((_7306 == std::string ("anaProNumVarRa"))){ return (int)13; }else {}if ((_7306 == std::string ("anaProNumVarEq"))){ return (int)9; }else {}if ((_7306 == std::string ("anaProNumVarFr"))){ return (int)10; }else {}if ((_7306 == std::string ("anaProNumVarCont"))){ return (int)8; }else {}if ((_7306 == std::string ("anaProNumVarBin"))){ return (int)7; }else {}if ((_7306 == std::string ("anaProNumVarInt"))){ return (int)11; }else {}if ((_7306 == std::string ("optimizeResponse"))){ return (int)51; }else {}if ((_7306 == std::string ("intpntIter"))){ return (int)16; }else {}if ((_7306 == std::string ("intpntFactorDimDense"))){ return (int)15; }else {}if ((_7306 == std::string ("intpntSolveDual"))){ return (int)18; }else {}if ((_7306 == std::string ("mioNodeDepth"))){ return (int)26; }else {}if ((_7306 == std::string ("mioNumcon"))){ return (int)37; }else {}if ((_7306 == std::string ("mioNumvar"))){ return (int)39; }else {}if ((_7306 == std::string ("mioNumint"))){ return (int)38; }else {}if ((_7306 == std::string ("mioPresolvedNumcont"))){ return (int)43; }else {}if ((_7306 == std::string ("mioPresolvedNumbin"))){ return (int)41; }else {}if ((_7306 == std::string ("mioPresolvedNumcon"))){ return (int)42; }else {}if ((_7306 == std::string ("mioPresolvedNumvar"))){ return (int)45; }else {}if ((_7306 == std::string ("mioPresolvedNumint"))){ return (int)44; }else {}if ((_7306 == std::string ("mioCliqueTableSize"))){ return (int)20; }else {}if ((_7306 == std::string ("mioConstructSolution"))){ return (int)22; }else {}if ((_7306 == std::string ("mioConstructNumRoundings"))){ return (int)21; }else {}if ((_7306 == std::string ("mioNumIntSolutions"))){ return (int)33; }else {}if ((_7306 == std::string ("mioObjBoundDefined"))){ return (int)40; }else {}if ((_7306 == std::string ("mioNumActiveNodes"))){ return (int)27; }else {}if ((_7306 == std::string ("mioNumRelax"))){ return (int)35; }else {}if ((_7306 == std::string ("mioNumBranch"))){ return (int)28; }else {}if ((_7306 == std::string ("mioTotalNumCuts"))){ return (int)47; }else {}if ((_7306 == std::string ("mioNumCmirCuts"))){ return (int)30; }else {}if ((_7306 == std::string ("mioNumCliqueCuts"))){ return (int)29; }else {}if ((_7306 == std::string ("mioNumImpliedBoundCuts"))){ return (int)32; }else {}if ((_7306 == std::string ("mioNumKnapsackCoverCuts"))){ return (int)34; }else {}if ((_7306 == std::string ("mioNumGomoryCuts"))){ return (int)31; }else {}if ((_7306 == std::string ("mioNumRepeatedPresolve"))){ return (int)36; }else {}if ((_7306 == std::string ("mioInitialSolution"))){ return (int)23; }else {}if ((_7306 == std::string ("mioUserObjCut"))){ return (int)48; }else {}if ((_7306 == std::string ("mioRelgapSatisfied"))){ return (int)46; }else {}if ((_7306 == std::string ("mioAbsgapSatisfied"))){ return (int)19; }else {}if ((_7306 == std::string ("mioNearRelgapSatisfied"))){ return (int)25; }else {}if ((_7306 == std::string ("mioNearAbsgapSatisfied"))){ return (int)24; }else {}if ((_7306 == std::string ("rdProtype"))){ return (int)58; }else {}if ((_7306 == std::string ("rdNumcon"))){ return (int)53; }else {}if ((_7306 == std::string ("rdNumvar"))){ return (int)57; }else {}if ((_7306 == std::string ("rdNumbarvar"))){ return (int)52; }else {}if ((_7306 == std::string ("rdNumintvar"))){ return (int)55; }else {}if ((_7306 == std::string ("rdNumq"))){ return (int)56; }else {}if ((_7306 == std::string ("simDualDegIter"))){ return (int)59; }else {}if ((_7306 == std::string ("simDualInfIter"))){ return (int)62; }else {}if ((_7306 == std::string ("simDualHotstartLu"))){ return (int)61; }else {}if ((_7306 == std::string ("simPrimalIter"))){ return (int)70; }else {}if ((_7306 == std::string ("simDualIter"))){ return (int)63; }else {}if ((_7306 == std::string ("intpntNumThreads"))){ return (int)17; }else {}if ((_7306 == std::string ("simPrimalInfIter"))){ return (int)69; }else {}if ((_7306 == std::string ("simPrimalDegIter"))){ return (int)66; }else {}if ((_7306 == std::string ("simPrimalHotstart"))){ return (int)67; }else {}if ((_7306 == std::string ("simPrimalHotstartLu"))){ return (int)68; }else {}if ((_7306 == std::string ("simDualHotstart"))){ return (int)60; }else {}if ((_7306 == std::string ("solItrProsta"))){ return (int)76; }else {}if ((_7306 == std::string ("solItrSolsta"))){ return (int)77; }else {}if ((_7306 == std::string ("solBasProsta"))){ return (int)72; }else {}if ((_7306 == std::string ("solBasSolsta"))){ return (int)73; }else {}if ((_7306 == std::string ("solItgProsta"))){ return (int)74; }else {}if ((_7306 == std::string ("solItgSolsta"))){ return (int)75; }else {}if ((_7306 == std::string ("simNumcon"))){ return (int)64; }else {}if ((_7306 == std::string ("simNumvar"))){ return (int)65; }else {}if ((_7306 == std::string ("optNumcon"))){ return (int)49; }else {}if ((_7306 == std::string ("optNumvar"))){ return (int)50; }else {}if ((_7306 == std::string ("stoNumARealloc"))){ return (int)78; }else {}if ((_7306 == std::string ("rdNumcone"))){ return (int)54; }else {}if ((_7306 == std::string ("simSolveDual"))){ return (int)71; }else {}return (- (int)1); }int mosek::fusion::p_Parameters::string_to_simreform_value( const std::string & _7307){ if ((_7307 == std::string ("on"))){ return (int)1; }else {}if ((_7307 == std::string ("off"))){ return (int)0; }else {}if ((_7307 == std::string ("free"))){ return (int)2; }else {}if ((_7307 == std::string ("aggressive"))){ return (int)3; }else {}return (- (int)1); }int mosek::fusion::p_Parameters::string_to_value_value( const std::string & _7308){ if ((_7308 == std::string ("maxStrLen"))){ return (int)1024; }else {}if ((_7308 == std::string ("licenseBufferLength"))){ return (int)21; }else {}return (- (int)1); }int mosek::fusion::p_Parameters::string_to_scalingmethod_value( const std::string & _7309){ if ((_7309 == std::string ("pow2"))){ return (int)0; }else {}if ((_7309 == std::string ("free"))){ return (int)1; }else {}return (- (int)1); }int mosek::fusion::p_Parameters::string_to_soltype_value( const std::string & _7310){ if ((_7310 == std::string ("bas"))){ return (int)1; }else {}if ((_7310 == std::string ("itr"))){ return (int)0; }else {}if ((_7310 == std::string ("itg"))){ return (int)2; }else {}return (- (int)1); }int mosek::fusion::p_Parameters::string_to_startpointtype_value( const std::string & _7311){ if ((_7311 == std::string ("free"))){ return (int)0; }else {}if ((_7311 == std::string ("guess"))){ return (int)1; }else {}if ((_7311 == std::string ("constant"))){ return (int)2; }else {}if ((_7311 == std::string ("satisfyBounds"))){ return (int)3; }else {}return (- (int)1); }int mosek::fusion::p_Parameters::string_to_language_value( const std::string & _7312){ if ((_7312 == std::string ("eng"))){ return (int)0; }else {}if ((_7312 == std::string ("dan"))){ return (int)1; }else {}return (- (int)1); }int mosek::fusion::p_Parameters::string_to_checkconvexitytype_value( const std::string & _7313){ if ((_7313 == std::string ("none"))){ return (int)0; }else {}if ((_7313 == std::string ("simple"))){ return (int)1; }else {}if ((_7313 == std::string ("full"))){ return (int)2; }else {}return (- (int)1); }int mosek::fusion::p_Parameters::string_to_variabletype_value( const std::string & _7314){ if ((_7314 == std::string ("typeCont"))){ return (int)0; }else {}if ((_7314 == std::string ("typeInt"))){ return (int)1; }else {}return (- (int)1); }int mosek::fusion::p_Parameters::string_to_mpsformat_value( const std::string & _7315){ if ((_7315 == std::string ("strict"))){ return (int)0; }else {}if ((_7315 == std::string ("relaxed"))){ return (int)1; }else {}if ((_7315 == std::string ("free"))){ return (int)2; }else {}if ((_7315 == std::string ("cplex"))){ return (int)3; }else {}return (- (int)1); }int mosek::fusion::p_Parameters::string_to_nametype_value( const std::string & _7316){ if ((_7316 == std::string ("gen"))){ return (int)0; }else {}if ((_7316 == std::string ("mps"))){ return (int)1; }else {}if ((_7316 == std::string ("lp"))){ return (int)2; }else {}return (- (int)1); }int mosek::fusion::p_Parameters::string_to_compresstype_value( const std::string & _7317){ if ((_7317 == std::string ("none"))){ return (int)0; }else {}if ((_7317 == std::string ("free"))){ return (int)1; }else {}if ((_7317 == std::string ("gzip"))){ return (int)2; }else {}return (- (int)1); }int mosek::fusion::p_Parameters::string_to_simdupvec_value( const std::string & _7318){ if ((_7318 == std::string ("on"))){ return (int)1; }else {}if ((_7318 == std::string ("off"))){ return (int)0; }else {}if ((_7318 == std::string ("free"))){ return (int)2; }else {}return (- (int)1); }int mosek::fusion::p_Parameters::string_to_dparam_value( const std::string & _7319){ if ((_7319 == std::string ("dataTolCjLarge"))){ return (int)14; }else {}if ((_7319 == std::string ("dataTolCHuge"))){ return (int)13; }else {}if ((_7319 == std::string ("dataTolAij"))){ return (int)8; }else {}if ((_7319 == std::string ("dataTolAijLarge"))){ return (int)10; }else {}if ((_7319 == std::string ("dataTolAijHuge"))){ return (int)9; }else {}if ((_7319 == std::string ("dataSymMatTol"))){ return (int)5; }else {}if ((_7319 == std::string ("dataSymMatTolLarge"))){ return (int)7; }else {}if ((_7319 == std::string ("dataSymMatTolHuge"))){ return (int)6; }else {}if ((_7319 == std::string ("dataTolBoundInf"))){ return (int)11; }else {}if ((_7319 == std::string ("dataTolBoundWrn"))){ return (int)12; }else {}if ((_7319 == std::string ("dataTolQij"))){ return (int)15; }else {}if ((_7319 == std::string ("dataTolX"))){ return (int)16; }else {}if ((_7319 == std::string ("semidefiniteTolApprox"))){ return (int)65; }else {}if ((_7319 == std::string ("optimizerMaxTime"))){ return (int)58; }else {}if ((_7319 == std::string ("lowerObjCut"))){ return (int)46; }else {}if ((_7319 == std::string ("upperObjCut"))){ return (int)68; }else {}if ((_7319 == std::string ("upperObjCutFiniteTrh"))){ return (int)69; }else {}if ((_7319 == std::string ("lowerObjCutFiniteTrh"))){ return (int)47; }else {}if ((_7319 == std::string ("intpntTolRelGap"))){ return (int)43; }else {}if ((_7319 == std::string ("intpntNlTolRelGap"))){ return (int)28; }else {}if ((_7319 == std::string ("intpntTolStepSize"))){ return (int)45; }else {}if ((_7319 == std::string ("simLuTolRelPiv"))){ return (int)66; }else {}if ((_7319 == std::string ("intpntTolRelStep"))){ return (int)44; }else {}if ((_7319 == std::string ("intpntNlTolRelStep"))){ return (int)29; }else {}if ((_7319 == std::string ("intpntNlMeritBal"))){ return (int)23; }else {}if ((_7319 == std::string ("intpntTolPath"))){ return (int)40; }else {}if ((_7319 == std::string ("intpntTolPfeas"))){ return (int)41; }else {}if ((_7319 == std::string ("intpntTolDfeas"))){ return (int)36; }else {}if ((_7319 == std::string ("intpntTolMuRed"))){ return (int)39; }else {}if ((_7319 == std::string ("intpntNlTolPfeas"))){ return (int)27; }else {}if ((_7319 == std::string ("intpntNlTolDfeas"))){ return (int)24; }else {}if ((_7319 == std::string ("intpntNlTolMuRed"))){ return (int)25; }else {}if ((_7319 == std::string ("intpntNlTolNearRel"))){ return (int)26; }else {}if ((_7319 == std::string ("intpntTolInfeas"))){ return (int)38; }else {}if ((_7319 == std::string ("intpntCoTolRelGap"))){ return (int)22; }else {}if ((_7319 == std::string ("intpntCoTolPfeas"))){ return (int)21; }else {}if ((_7319 == std::string ("intpntCoTolDfeas"))){ return (int)17; }else {}if ((_7319 == std::string ("intpntCoTolMuRed"))){ return (int)19; }else {}if ((_7319 == std::string ("intpntCoTolNearRel"))){ return (int)20; }else {}if ((_7319 == std::string ("intpntCoTolInfeas"))){ return (int)18; }else {}if ((_7319 == std::string ("intpntQoTolRelGap"))){ return (int)35; }else {}if ((_7319 == std::string ("intpntQoTolPfeas"))){ return (int)34; }else {}if ((_7319 == std::string ("intpntQoTolDfeas"))){ return (int)30; }else {}if ((_7319 == std::string ("intpntQoTolMuRed"))){ return (int)32; }else {}if ((_7319 == std::string ("intpntQoTolNearRel"))){ return (int)33; }else {}if ((_7319 == std::string ("intpntQoTolInfeas"))){ return (int)31; }else {}if ((_7319 == std::string ("intpntTolPsafe"))){ return (int)42; }else {}if ((_7319 == std::string ("intpntTolDsafe"))){ return (int)37; }else {}if ((_7319 == std::string ("mioMaxTime"))){ return (int)49; }else {}if ((_7319 == std::string ("mioDisableTermTime"))){ return (int)48; }else {}if ((_7319 == std::string ("mioRelGapConst"))){ return (int)52; }else {}if ((_7319 == std::string ("mioTolRelGap"))){ return (int)57; }else {}if ((_7319 == std::string ("mioNearTolRelGap"))){ return (int)51; }else {}if ((_7319 == std::string ("mioTolAbsGap"))){ return (int)53; }else {}if ((_7319 == std::string ("mioNearTolAbsGap"))){ return (int)50; }else {}if ((_7319 == std::string ("mioTolAbsRelaxInt"))){ return (int)54; }else {}if ((_7319 == std::string ("basisTolX"))){ return (int)3; }else {}if ((_7319 == std::string ("basisTolS"))){ return (int)2; }else {}if ((_7319 == std::string ("basisRelTolS"))){ return (int)1; }else {}if ((_7319 == std::string ("presolveTolX"))){ return (int)63; }else {}if ((_7319 == std::string ("presolveTolS"))){ return (int)62; }else {}if ((_7319 == std::string ("presolveTolAij"))){ return (int)60; }else {}if ((_7319 == std::string ("presolveTolAbsLindep"))){ return (int)59; }else {}if ((_7319 == std::string ("presolveTolRelLindep"))){ return (int)61; }else {}if ((_7319 == std::string ("simplexAbsTolPiv"))){ return (int)67; }else {}if ((_7319 == std::string ("mioTolFeas"))){ return (int)55; }else {}if ((_7319 == std::string ("anaSolInfeasTol"))){ return (int)0; }else {}if ((_7319 == std::string ("checkConvexityRelTol"))){ return (int)4; }else {}if ((_7319 == std::string ("qcqoReformulateRelDropTol"))){ return (int)64; }else {}if ((_7319 == std::string ("mioTolRelDualBoundImprovement"))){ return (int)56; }else {}return (- (int)1); }int mosek::fusion::p_Parameters::string_to_inftype_value( const std::string & _7320){ if ((_7320 == std::string ("douType"))){ return (int)0; }else {}if ((_7320 == std::string ("intType"))){ return (int)1; }else {}if ((_7320 == std::string ("lintType"))){ return (int)2; }else {}return (- (int)1); }int mosek::fusion::p_Parameters::string_to_problemtype_value( const std::string & _7321){ if ((_7321 == std::string ("lo"))){ return (int)0; }else {}if ((_7321 == std::string ("qo"))){ return (int)1; }else {}if ((_7321 == std::string ("qcqo"))){ return (int)2; }else {}if ((_7321 == std::string ("geco"))){ return (int)3; }else {}if ((_7321 == std::string ("conic"))){ return (int)4; }else {}if ((_7321 == std::string ("mixed"))){ return (int)5; }else {}return (- (int)1); }int mosek::fusion::p_Parameters::string_to_orderingtype_value( const std::string & _7322){ if ((_7322 == std::string ("free"))){ return (int)0; }else {}if ((_7322 == std::string ("appminloc"))){ return (int)1; }else {}if ((_7322 == std::string ("experimental"))){ return (int)2; }else {}if ((_7322 == std::string ("tryGraphpar"))){ return (int)3; }else {}if ((_7322 == std::string ("forceGraphpar"))){ return (int)4; }else {}if ((_7322 == std::string ("none"))){ return (int)5; }else {}return (- (int)1); }int mosek::fusion::p_Parameters::string_to_dataformat_value( const std::string & _7323){ if ((_7323 == std::string ("extension"))){ return (int)0; }else {}if ((_7323 == std::string ("mps"))){ return (int)1; }else {}if ((_7323 == std::string ("lp"))){ return (int)2; }else {}if ((_7323 == std::string ("op"))){ return (int)3; }else {}if ((_7323 == std::string ("xml"))){ return (int)4; }else {}if ((_7323 == std::string ("freeMps"))){ return (int)5; }else {}if ((_7323 == std::string ("task"))){ return (int)6; }else {}if ((_7323 == std::string ("cb"))){ return (int)7; }else {}if ((_7323 == std::string ("jsonTask"))){ return (int)8; }else {}return (- (int)1); }int mosek::fusion::p_Parameters::string_to_simdegen_value( const std::string & _7324){ if ((_7324 == std::string ("none"))){ return (int)0; }else {}if ((_7324 == std::string ("free"))){ return (int)1; }else {}if ((_7324 == std::string ("aggressive"))){ return (int)2; }else {}if ((_7324 == std::string ("moderate"))){ return (int)3; }else {}if ((_7324 == std::string ("minimum"))){ return (int)4; }else {}return (- (int)1); }int mosek::fusion::p_Parameters::string_to_onoffkey_value( const std::string & _7325){ if ((_7325 == std::string ("on"))){ return (int)1; }else {}if ((_7325 == std::string ("off"))){ return (int)0; }else {}return (- (int)1); }int mosek::fusion::p_Parameters::string_to_transpose_value( const std::string & _7326){ if ((_7326 == std::string ("no"))){ return (int)0; }else {}if ((_7326 == std::string ("yes"))){ return (int)1; }else {}return (- (int)1); }int mosek::fusion::p_Parameters::string_to_mionodeseltype_value( const std::string & _7327){ if ((_7327 == std::string ("free"))){ return (int)0; }else {}if ((_7327 == std::string ("first"))){ return (int)1; }else {}if ((_7327 == std::string ("best"))){ return (int)2; }else {}if ((_7327 == std::string ("worst"))){ return (int)3; }else {}if ((_7327 == std::string ("hybrid"))){ return (int)4; }else {}if ((_7327 == std::string ("pseudo"))){ return (int)5; }else {}return (- (int)1); }int mosek::fusion::p_Parameters::string_to_rescode_value( const std::string & _7328){ if ((_7328 == std::string ("ok"))){ return (int)0; }else {}if ((_7328 == std::string ("wrnOpenParamFile"))){ return (int)50; }else {}if ((_7328 == std::string ("wrnLargeBound"))){ return (int)51; }else {}if ((_7328 == std::string ("wrnLargeLoBound"))){ return (int)52; }else {}if ((_7328 == std::string ("wrnLargeUpBound"))){ return (int)53; }else {}if ((_7328 == std::string ("wrnLargeConFx"))){ return (int)54; }else {}if ((_7328 == std::string ("wrnLargeCj"))){ return (int)57; }else {}if ((_7328 == std::string ("wrnLargeAij"))){ return (int)62; }else {}if ((_7328 == std::string ("wrnZeroAij"))){ return (int)63; }else {}if ((_7328 == std::string ("wrnNameMaxLen"))){ return (int)65; }else {}if ((_7328 == std::string ("wrnSparMaxLen"))){ return (int)66; }else {}if ((_7328 == std::string ("wrnMpsSplitRhsVector"))){ return (int)70; }else {}if ((_7328 == std::string ("wrnMpsSplitRanVector"))){ return (int)71; }else {}if ((_7328 == std::string ("wrnMpsSplitBouVector"))){ return (int)72; }else {}if ((_7328 == std::string ("wrnLpOldQuadFormat"))){ return (int)80; }else {}if ((_7328 == std::string ("wrnLpDropVariable"))){ return (int)85; }else {}if ((_7328 == std::string ("wrnNzInUprTri"))){ return (int)200; }else {}if ((_7328 == std::string ("wrnDroppedNzQobj"))){ return (int)201; }else {}if ((_7328 == std::string ("wrnIgnoreInteger"))){ return (int)250; }else {}if ((_7328 == std::string ("wrnNoGlobalOptimizer"))){ return (int)251; }else {}if ((_7328 == std::string ("wrnMioInfeasibleFinal"))){ return (int)270; }else {}if ((_7328 == std::string ("wrnSolFilter"))){ return (int)300; }else {}if ((_7328 == std::string ("wrnUndefSolFileName"))){ return (int)350; }else {}if ((_7328 == std::string ("wrnSolFileIgnoredCon"))){ return (int)351; }else {}if ((_7328 == std::string ("wrnSolFileIgnoredVar"))){ return (int)352; }else {}if ((_7328 == std::string ("wrnTooFewBasisVars"))){ return (int)400; }else {}if ((_7328 == std::string ("wrnTooManyBasisVars"))){ return (int)405; }else {}if ((_7328 == std::string ("wrnNoNonlinearFunctionWrite"))){ return (int)450; }else {}if ((_7328 == std::string ("wrnLicenseExpire"))){ return (int)500; }else {}if ((_7328 == std::string ("wrnLicenseServer"))){ return (int)501; }else {}if ((_7328 == std::string ("wrnEmptyName"))){ return (int)502; }else {}if ((_7328 == std::string ("wrnUsingGenericNames"))){ return (int)503; }else {}if ((_7328 == std::string ("wrnLicenseFeatureExpire"))){ return (int)505; }else {}if ((_7328 == std::string ("wrnParamNameDou"))){ return (int)510; }else {}if ((_7328 == std::string ("wrnParamNameInt"))){ return (int)511; }else {}if ((_7328 == std::string ("wrnParamNameStr"))){ return (int)512; }else {}if ((_7328 == std::string ("wrnParamStrValue"))){ return (int)515; }else {}if ((_7328 == std::string ("wrnParamIgnoredCmio"))){ return (int)516; }else {}if ((_7328 == std::string ("wrnZerosInSparseRow"))){ return (int)705; }else {}if ((_7328 == std::string ("wrnZerosInSparseCol"))){ return (int)710; }else {}if ((_7328 == std::string ("wrnIncompleteLinearDependencyCheck"))){ return (int)800; }else {}if ((_7328 == std::string ("wrnEliminatorSpace"))){ return (int)801; }else {}if ((_7328 == std::string ("wrnPresolveOutofspace"))){ return (int)802; }else {}if ((_7328 == std::string ("wrnWriteChangedNames"))){ return (int)803; }else {}if ((_7328 == std::string ("wrnWriteDiscardedCfix"))){ return (int)804; }else {}if ((_7328 == std::string ("wrnConstructSolutionInfeas"))){ return (int)805; }else {}if ((_7328 == std::string ("wrnConstructInvalidSolItg"))){ return (int)807; }else {}if ((_7328 == std::string ("wrnConstructNoSolItg"))){ return (int)810; }else {}if ((_7328 == std::string ("wrnDuplicateConstraintNames"))){ return (int)850; }else {}if ((_7328 == std::string ("wrnDuplicateVariableNames"))){ return (int)851; }else {}if ((_7328 == std::string ("wrnDuplicateBarvariableNames"))){ return (int)852; }else {}if ((_7328 == std::string ("wrnDuplicateConeNames"))){ return (int)853; }else {}if ((_7328 == std::string ("wrnAnaLargeBounds"))){ return (int)900; }else {}if ((_7328 == std::string ("wrnAnaCZero"))){ return (int)901; }else {}if ((_7328 == std::string ("wrnAnaEmptyCols"))){ return (int)902; }else {}if ((_7328 == std::string ("wrnAnaCloseBounds"))){ return (int)903; }else {}if ((_7328 == std::string ("wrnAnaAlmostIntBounds"))){ return (int)904; }else {}if ((_7328 == std::string ("wrnQuadConesWithRootFixedAtZero"))){ return (int)930; }else {}if ((_7328 == std::string ("wrnRquadConesWithRootFixedAtZero"))){ return (int)931; }else {}if ((_7328 == std::string ("wrnNoDualizer"))){ return (int)950; }else {}if ((_7328 == std::string ("wrnSymMatLarge"))){ return (int)960; }else {}if ((_7328 == std::string ("errLicense"))){ return (int)1000; }else {}if ((_7328 == std::string ("errLicenseExpired"))){ return (int)1001; }else {}if ((_7328 == std::string ("errLicenseVersion"))){ return (int)1002; }else {}if ((_7328 == std::string ("errSizeLicense"))){ return (int)1005; }else {}if ((_7328 == std::string ("errProbLicense"))){ return (int)1006; }else {}if ((_7328 == std::string ("errFileLicense"))){ return (int)1007; }else {}if ((_7328 == std::string ("errMissingLicenseFile"))){ return (int)1008; }else {}if ((_7328 == std::string ("errSizeLicenseCon"))){ return (int)1010; }else {}if ((_7328 == std::string ("errSizeLicenseVar"))){ return (int)1011; }else {}if ((_7328 == std::string ("errSizeLicenseIntvar"))){ return (int)1012; }else {}if ((_7328 == std::string ("errOptimizerLicense"))){ return (int)1013; }else {}if ((_7328 == std::string ("errFlexlm"))){ return (int)1014; }else {}if ((_7328 == std::string ("errLicenseServer"))){ return (int)1015; }else {}if ((_7328 == std::string ("errLicenseMax"))){ return (int)1016; }else {}if ((_7328 == std::string ("errLicenseMoseklmDaemon"))){ return (int)1017; }else {}if ((_7328 == std::string ("errLicenseFeature"))){ return (int)1018; }else {}if ((_7328 == std::string ("errPlatformNotLicensed"))){ return (int)1019; }else {}if ((_7328 == std::string ("errLicenseCannotAllocate"))){ return (int)1020; }else {}if ((_7328 == std::string ("errLicenseCannotConnect"))){ return (int)1021; }else {}if ((_7328 == std::string ("errLicenseInvalidHostid"))){ return (int)1025; }else {}if ((_7328 == std::string ("errLicenseServerVersion"))){ return (int)1026; }else {}if ((_7328 == std::string ("errLicenseNoServerSupport"))){ return (int)1027; }else {}if ((_7328 == std::string ("errLicenseNoServerLine"))){ return (int)1028; }else {}if ((_7328 == std::string ("errOpenDl"))){ return (int)1030; }else {}if ((_7328 == std::string ("errOlderDll"))){ return (int)1035; }else {}if ((_7328 == std::string ("errNewerDll"))){ return (int)1036; }else {}if ((_7328 == std::string ("errLinkFileDll"))){ return (int)1040; }else {}if ((_7328 == std::string ("errThreadMutexInit"))){ return (int)1045; }else {}if ((_7328 == std::string ("errThreadMutexLock"))){ return (int)1046; }else {}if ((_7328 == std::string ("errThreadMutexUnlock"))){ return (int)1047; }else {}if ((_7328 == std::string ("errThreadCreate"))){ return (int)1048; }else {}if ((_7328 == std::string ("errThreadCondInit"))){ return (int)1049; }else {}if ((_7328 == std::string ("errUnknown"))){ return (int)1050; }else {}if ((_7328 == std::string ("errSpace"))){ return (int)1051; }else {}if ((_7328 == std::string ("errFileOpen"))){ return (int)1052; }else {}if ((_7328 == std::string ("errFileRead"))){ return (int)1053; }else {}if ((_7328 == std::string ("errFileWrite"))){ return (int)1054; }else {}if ((_7328 == std::string ("errDataFileExt"))){ return (int)1055; }else {}if ((_7328 == std::string ("errInvalidFileName"))){ return (int)1056; }else {}if ((_7328 == std::string ("errInvalidSolFileName"))){ return (int)1057; }else {}if ((_7328 == std::string ("errEndOfFile"))){ return (int)1059; }else {}if ((_7328 == std::string ("errNullEnv"))){ return (int)1060; }else {}if ((_7328 == std::string ("errNullTask"))){ return (int)1061; }else {}if ((_7328 == std::string ("errInvalidStream"))){ return (int)1062; }else {}if ((_7328 == std::string ("errNoInitEnv"))){ return (int)1063; }else {}if ((_7328 == std::string ("errInvalidTask"))){ return (int)1064; }else {}if ((_7328 == std::string ("errNullPointer"))){ return (int)1065; }else {}if ((_7328 == std::string ("errLivingTasks"))){ return (int)1066; }else {}if ((_7328 == std::string ("errBlankName"))){ return (int)1070; }else {}if ((_7328 == std::string ("errDupName"))){ return (int)1071; }else {}if ((_7328 == std::string ("errInvalidObjName"))){ return (int)1075; }else {}if ((_7328 == std::string ("errInvalidConName"))){ return (int)1076; }else {}if ((_7328 == std::string ("errInvalidVarName"))){ return (int)1077; }else {}if ((_7328 == std::string ("errInvalidConeName"))){ return (int)1078; }else {}if ((_7328 == std::string ("errInvalidBarvarName"))){ return (int)1079; }else {}if ((_7328 == std::string ("errSpaceLeaking"))){ return (int)1080; }else {}if ((_7328 == std::string ("errSpaceNoInfo"))){ return (int)1081; }else {}if ((_7328 == std::string ("errReadFormat"))){ return (int)1090; }else {}if ((_7328 == std::string ("errMpsFile"))){ return (int)1100; }else {}if ((_7328 == std::string ("errMpsInvField"))){ return (int)1101; }else {}if ((_7328 == std::string ("errMpsInvMarker"))){ return (int)1102; }else {}if ((_7328 == std::string ("errMpsNullConName"))){ return (int)1103; }else {}if ((_7328 == std::string ("errMpsNullVarName"))){ return (int)1104; }else {}if ((_7328 == std::string ("errMpsUndefConName"))){ return (int)1105; }else {}if ((_7328 == std::string ("errMpsUndefVarName"))){ return (int)1106; }else {}if ((_7328 == std::string ("errMpsInvConKey"))){ return (int)1107; }else {}if ((_7328 == std::string ("errMpsInvBoundKey"))){ return (int)1108; }else {}if ((_7328 == std::string ("errMpsInvSecName"))){ return (int)1109; }else {}if ((_7328 == std::string ("errMpsNoObjective"))){ return (int)1110; }else {}if ((_7328 == std::string ("errMpsSplittedVar"))){ return (int)1111; }else {}if ((_7328 == std::string ("errMpsMulConName"))){ return (int)1112; }else {}if ((_7328 == std::string ("errMpsMulQsec"))){ return (int)1113; }else {}if ((_7328 == std::string ("errMpsMulQobj"))){ return (int)1114; }else {}if ((_7328 == std::string ("errMpsInvSecOrder"))){ return (int)1115; }else {}if ((_7328 == std::string ("errMpsMulCsec"))){ return (int)1116; }else {}if ((_7328 == std::string ("errMpsConeType"))){ return (int)1117; }else {}if ((_7328 == std::string ("errMpsConeOverlap"))){ return (int)1118; }else {}if ((_7328 == std::string ("errMpsConeRepeat"))){ return (int)1119; }else {}if ((_7328 == std::string ("errMpsNonSymmetricQ"))){ return (int)1120; }else {}if ((_7328 == std::string ("errMpsDuplicateQElement"))){ return (int)1121; }else {}if ((_7328 == std::string ("errMpsInvalidObjsense"))){ return (int)1122; }else {}if ((_7328 == std::string ("errMpsTabInField2"))){ return (int)1125; }else {}if ((_7328 == std::string ("errMpsTabInField3"))){ return (int)1126; }else {}if ((_7328 == std::string ("errMpsTabInField5"))){ return (int)1127; }else {}if ((_7328 == std::string ("errMpsInvalidObjName"))){ return (int)1128; }else {}if ((_7328 == std::string ("errLpIncompatible"))){ return (int)1150; }else {}if ((_7328 == std::string ("errLpEmpty"))){ return (int)1151; }else {}if ((_7328 == std::string ("errLpDupSlackName"))){ return (int)1152; }else {}if ((_7328 == std::string ("errWriteMpsInvalidName"))){ return (int)1153; }else {}if ((_7328 == std::string ("errLpInvalidVarName"))){ return (int)1154; }else {}if ((_7328 == std::string ("errLpFreeConstraint"))){ return (int)1155; }else {}if ((_7328 == std::string ("errWriteOpfInvalidVarName"))){ return (int)1156; }else {}if ((_7328 == std::string ("errLpFileFormat"))){ return (int)1157; }else {}if ((_7328 == std::string ("errWriteLpFormat"))){ return (int)1158; }else {}if ((_7328 == std::string ("errReadLpMissingEndTag"))){ return (int)1159; }else {}if ((_7328 == std::string ("errLpFormat"))){ return (int)1160; }else {}if ((_7328 == std::string ("errWriteLpNonUniqueName"))){ return (int)1161; }else {}if ((_7328 == std::string ("errReadLpNonexistingName"))){ return (int)1162; }else {}if ((_7328 == std::string ("errLpWriteConicProblem"))){ return (int)1163; }else {}if ((_7328 == std::string ("errLpWriteGecoProblem"))){ return (int)1164; }else {}if ((_7328 == std::string ("errWritingFile"))){ return (int)1166; }else {}if ((_7328 == std::string ("errOpfFormat"))){ return (int)1168; }else {}if ((_7328 == std::string ("errOpfNewVariable"))){ return (int)1169; }else {}if ((_7328 == std::string ("errInvalidNameInSolFile"))){ return (int)1170; }else {}if ((_7328 == std::string ("errLpInvalidConName"))){ return (int)1171; }else {}if ((_7328 == std::string ("errOpfPrematureEof"))){ return (int)1172; }else {}if ((_7328 == std::string ("errJsonSyntax"))){ return (int)1175; }else {}if ((_7328 == std::string ("errJsonString"))){ return (int)1176; }else {}if ((_7328 == std::string ("errJsonNumberOverflow"))){ return (int)1177; }else {}if ((_7328 == std::string ("errJsonFormat"))){ return (int)1178; }else {}if ((_7328 == std::string ("errJsonData"))){ return (int)1179; }else {}if ((_7328 == std::string ("errJsonMissingData"))){ return (int)1180; }else {}if ((_7328 == std::string ("errArgumentLenneq"))){ return (int)1197; }else {}if ((_7328 == std::string ("errArgumentType"))){ return (int)1198; }else {}if ((_7328 == std::string ("errNrArguments"))){ return (int)1199; }else {}if ((_7328 == std::string ("errInArgument"))){ return (int)1200; }else {}if ((_7328 == std::string ("errArgumentDimension"))){ return (int)1201; }else {}if ((_7328 == std::string ("errIndexIsTooSmall"))){ return (int)1203; }else {}if ((_7328 == std::string ("errIndexIsTooLarge"))){ return (int)1204; }else {}if ((_7328 == std::string ("errParamName"))){ return (int)1205; }else {}if ((_7328 == std::string ("errParamNameDou"))){ return (int)1206; }else {}if ((_7328 == std::string ("errParamNameInt"))){ return (int)1207; }else {}if ((_7328 == std::string ("errParamNameStr"))){ return (int)1208; }else {}if ((_7328 == std::string ("errParamIndex"))){ return (int)1210; }else {}if ((_7328 == std::string ("errParamIsTooLarge"))){ return (int)1215; }else {}if ((_7328 == std::string ("errParamIsTooSmall"))){ return (int)1216; }else {}if ((_7328 == std::string ("errParamValueStr"))){ return (int)1217; }else {}if ((_7328 == std::string ("errParamType"))){ return (int)1218; }else {}if ((_7328 == std::string ("errInfDouIndex"))){ return (int)1219; }else {}if ((_7328 == std::string ("errInfIntIndex"))){ return (int)1220; }else {}if ((_7328 == std::string ("errIndexArrIsTooSmall"))){ return (int)1221; }else {}if ((_7328 == std::string ("errIndexArrIsTooLarge"))){ return (int)1222; }else {}if ((_7328 == std::string ("errInfLintIndex"))){ return (int)1225; }else {}if ((_7328 == std::string ("errArgIsTooSmall"))){ return (int)1226; }else {}if ((_7328 == std::string ("errArgIsTooLarge"))){ return (int)1227; }else {}if ((_7328 == std::string ("errInvalidWhichsol"))){ return (int)1228; }else {}if ((_7328 == std::string ("errInfDouName"))){ return (int)1230; }else {}if ((_7328 == std::string ("errInfIntName"))){ return (int)1231; }else {}if ((_7328 == std::string ("errInfType"))){ return (int)1232; }else {}if ((_7328 == std::string ("errInfLintName"))){ return (int)1234; }else {}if ((_7328 == std::string ("errIndex"))){ return (int)1235; }else {}if ((_7328 == std::string ("errWhichsol"))){ return (int)1236; }else {}if ((_7328 == std::string ("errSolitem"))){ return (int)1237; }else {}if ((_7328 == std::string ("errWhichitemNotAllowed"))){ return (int)1238; }else {}if ((_7328 == std::string ("errMaxnumcon"))){ return (int)1240; }else {}if ((_7328 == std::string ("errMaxnumvar"))){ return (int)1241; }else {}if ((_7328 == std::string ("errMaxnumbarvar"))){ return (int)1242; }else {}if ((_7328 == std::string ("errMaxnumqnz"))){ return (int)1243; }else {}if ((_7328 == std::string ("errTooSmallMaxNumNz"))){ return (int)1245; }else {}if ((_7328 == std::string ("errInvalidIdx"))){ return (int)1246; }else {}if ((_7328 == std::string ("errInvalidMaxNum"))){ return (int)1247; }else {}if ((_7328 == std::string ("errNumconlim"))){ return (int)1250; }else {}if ((_7328 == std::string ("errNumvarlim"))){ return (int)1251; }else {}if ((_7328 == std::string ("errTooSmallMaxnumanz"))){ return (int)1252; }else {}if ((_7328 == std::string ("errInvAptre"))){ return (int)1253; }else {}if ((_7328 == std::string ("errMulAElement"))){ return (int)1254; }else {}if ((_7328 == std::string ("errInvBk"))){ return (int)1255; }else {}if ((_7328 == std::string ("errInvBkc"))){ return (int)1256; }else {}if ((_7328 == std::string ("errInvBkx"))){ return (int)1257; }else {}if ((_7328 == std::string ("errInvVarType"))){ return (int)1258; }else {}if ((_7328 == std::string ("errSolverProbtype"))){ return (int)1259; }else {}if ((_7328 == std::string ("errObjectiveRange"))){ return (int)1260; }else {}if ((_7328 == std::string ("errFirst"))){ return (int)1261; }else {}if ((_7328 == std::string ("errLast"))){ return (int)1262; }else {}if ((_7328 == std::string ("errNegativeSurplus"))){ return (int)1263; }else {}if ((_7328 == std::string ("errNegativeAppend"))){ return (int)1264; }else {}if ((_7328 == std::string ("errUndefSolution"))){ return (int)1265; }else {}if ((_7328 == std::string ("errBasis"))){ return (int)1266; }else {}if ((_7328 == std::string ("errInvSkc"))){ return (int)1267; }else {}if ((_7328 == std::string ("errInvSkx"))){ return (int)1268; }else {}if ((_7328 == std::string ("errInvSkn"))){ return (int)1274; }else {}if ((_7328 == std::string ("errInvSkStr"))){ return (int)1269; }else {}if ((_7328 == std::string ("errInvSk"))){ return (int)1270; }else {}if ((_7328 == std::string ("errInvConeTypeStr"))){ return (int)1271; }else {}if ((_7328 == std::string ("errInvConeType"))){ return (int)1272; }else {}if ((_7328 == std::string ("errInvalidSurplus"))){ return (int)1275; }else {}if ((_7328 == std::string ("errInvNameItem"))){ return (int)1280; }else {}if ((_7328 == std::string ("errProItem"))){ return (int)1281; }else {}if ((_7328 == std::string ("errInvalidFormatType"))){ return (int)1283; }else {}if ((_7328 == std::string ("errFirsti"))){ return (int)1285; }else {}if ((_7328 == std::string ("errLasti"))){ return (int)1286; }else {}if ((_7328 == std::string ("errFirstj"))){ return (int)1287; }else {}if ((_7328 == std::string ("errLastj"))){ return (int)1288; }else {}if ((_7328 == std::string ("errMaxLenIsTooSmall"))){ return (int)1289; }else {}if ((_7328 == std::string ("errNonlinearEquality"))){ return (int)1290; }else {}if ((_7328 == std::string ("errNonconvex"))){ return (int)1291; }else {}if ((_7328 == std::string ("errNonlinearRanged"))){ return (int)1292; }else {}if ((_7328 == std::string ("errConQNotPsd"))){ return (int)1293; }else {}if ((_7328 == std::string ("errConQNotNsd"))){ return (int)1294; }else {}if ((_7328 == std::string ("errObjQNotPsd"))){ return (int)1295; }else {}if ((_7328 == std::string ("errObjQNotNsd"))){ return (int)1296; }else {}if ((_7328 == std::string ("errArgumentPermArray"))){ return (int)1299; }else {}if ((_7328 == std::string ("errConeIndex"))){ return (int)1300; }else {}if ((_7328 == std::string ("errConeSize"))){ return (int)1301; }else {}if ((_7328 == std::string ("errConeOverlap"))){ return (int)1302; }else {}if ((_7328 == std::string ("errConeRepVar"))){ return (int)1303; }else {}if ((_7328 == std::string ("errMaxnumcone"))){ return (int)1304; }else {}if ((_7328 == std::string ("errConeType"))){ return (int)1305; }else {}if ((_7328 == std::string ("errConeTypeStr"))){ return (int)1306; }else {}if ((_7328 == std::string ("errConeOverlapAppend"))){ return (int)1307; }else {}if ((_7328 == std::string ("errRemoveConeVariable"))){ return (int)1310; }else {}if ((_7328 == std::string ("errSolFileInvalidNumber"))){ return (int)1350; }else {}if ((_7328 == std::string ("errHugeC"))){ return (int)1375; }else {}if ((_7328 == std::string ("errHugeAij"))){ return (int)1380; }else {}if ((_7328 == std::string ("errDuplicateAij"))){ return (int)1385; }else {}if ((_7328 == std::string ("errLowerBoundIsANan"))){ return (int)1390; }else {}if ((_7328 == std::string ("errUpperBoundIsANan"))){ return (int)1391; }else {}if ((_7328 == std::string ("errInfiniteBound"))){ return (int)1400; }else {}if ((_7328 == std::string ("errInvQobjSubi"))){ return (int)1401; }else {}if ((_7328 == std::string ("errInvQobjSubj"))){ return (int)1402; }else {}if ((_7328 == std::string ("errInvQobjVal"))){ return (int)1403; }else {}if ((_7328 == std::string ("errInvQconSubk"))){ return (int)1404; }else {}if ((_7328 == std::string ("errInvQconSubi"))){ return (int)1405; }else {}if ((_7328 == std::string ("errInvQconSubj"))){ return (int)1406; }else {}if ((_7328 == std::string ("errInvQconVal"))){ return (int)1407; }else {}if ((_7328 == std::string ("errQconSubiTooSmall"))){ return (int)1408; }else {}if ((_7328 == std::string ("errQconSubiTooLarge"))){ return (int)1409; }else {}if ((_7328 == std::string ("errQobjUpperTriangle"))){ return (int)1415; }else {}if ((_7328 == std::string ("errQconUpperTriangle"))){ return (int)1417; }else {}if ((_7328 == std::string ("errFixedBoundValues"))){ return (int)1425; }else {}if ((_7328 == std::string ("errNonlinearFunctionsNotAllowed"))){ return (int)1428; }else {}if ((_7328 == std::string ("errUserFuncRet"))){ return (int)1430; }else {}if ((_7328 == std::string ("errUserFuncRetData"))){ return (int)1431; }else {}if ((_7328 == std::string ("errUserNloFunc"))){ return (int)1432; }else {}if ((_7328 == std::string ("errUserNloEval"))){ return (int)1433; }else {}if ((_7328 == std::string ("errUserNloEvalHessubi"))){ return (int)1440; }else {}if ((_7328 == std::string ("errUserNloEvalHessubj"))){ return (int)1441; }else {}if ((_7328 == std::string ("errInvalidObjectiveSense"))){ return (int)1445; }else {}if ((_7328 == std::string ("errUndefinedObjectiveSense"))){ return (int)1446; }else {}if ((_7328 == std::string ("errYIsUndefined"))){ return (int)1449; }else {}if ((_7328 == std::string ("errNanInDoubleData"))){ return (int)1450; }else {}if ((_7328 == std::string ("errNanInBlc"))){ return (int)1461; }else {}if ((_7328 == std::string ("errNanInBuc"))){ return (int)1462; }else {}if ((_7328 == std::string ("errNanInC"))){ return (int)1470; }else {}if ((_7328 == std::string ("errNanInBlx"))){ return (int)1471; }else {}if ((_7328 == std::string ("errNanInBux"))){ return (int)1472; }else {}if ((_7328 == std::string ("errInvalidAij"))){ return (int)1473; }else {}if ((_7328 == std::string ("errSymMatInvalid"))){ return (int)1480; }else {}if ((_7328 == std::string ("errSymMatHuge"))){ return (int)1482; }else {}if ((_7328 == std::string ("errInvProblem"))){ return (int)1500; }else {}if ((_7328 == std::string ("errMixedConicAndNl"))){ return (int)1501; }else {}if ((_7328 == std::string ("errGlobalInvConicProblem"))){ return (int)1503; }else {}if ((_7328 == std::string ("errInvOptimizer"))){ return (int)1550; }else {}if ((_7328 == std::string ("errMioNoOptimizer"))){ return (int)1551; }else {}if ((_7328 == std::string ("errNoOptimizerVarType"))){ return (int)1552; }else {}if ((_7328 == std::string ("errFinalSolution"))){ return (int)1560; }else {}if ((_7328 == std::string ("errPostsolve"))){ return (int)1580; }else {}if ((_7328 == std::string ("errOverflow"))){ return (int)1590; }else {}if ((_7328 == std::string ("errNoBasisSol"))){ return (int)1600; }else {}if ((_7328 == std::string ("errBasisFactor"))){ return (int)1610; }else {}if ((_7328 == std::string ("errBasisSingular"))){ return (int)1615; }else {}if ((_7328 == std::string ("errFactor"))){ return (int)1650; }else {}if ((_7328 == std::string ("errFeasrepairCannotRelax"))){ return (int)1700; }else {}if ((_7328 == std::string ("errFeasrepairSolvingRelaxed"))){ return (int)1701; }else {}if ((_7328 == std::string ("errFeasrepairInconsistentBound"))){ return (int)1702; }else {}if ((_7328 == std::string ("errRepairInvalidProblem"))){ return (int)1710; }else {}if ((_7328 == std::string ("errRepairOptimizationFailed"))){ return (int)1711; }else {}if ((_7328 == std::string ("errNameMaxLen"))){ return (int)1750; }else {}if ((_7328 == std::string ("errNameIsNull"))){ return (int)1760; }else {}if ((_7328 == std::string ("errInvalidCompression"))){ return (int)1800; }else {}if ((_7328 == std::string ("errInvalidIomode"))){ return (int)1801; }else {}if ((_7328 == std::string ("errNoPrimalInfeasCer"))){ return (int)2000; }else {}if ((_7328 == std::string ("errNoDualInfeasCer"))){ return (int)2001; }else {}if ((_7328 == std::string ("errNoSolutionInCallback"))){ return (int)2500; }else {}if ((_7328 == std::string ("errInvMarki"))){ return (int)2501; }else {}if ((_7328 == std::string ("errInvMarkj"))){ return (int)2502; }else {}if ((_7328 == std::string ("errInvNumi"))){ return (int)2503; }else {}if ((_7328 == std::string ("errInvNumj"))){ return (int)2504; }else {}if ((_7328 == std::string ("errCannotCloneNl"))){ return (int)2505; }else {}if ((_7328 == std::string ("errCannotHandleNl"))){ return (int)2506; }else {}if ((_7328 == std::string ("errInvalidAccmode"))){ return (int)2520; }else {}if ((_7328 == std::string ("errTaskIncompatible"))){ return (int)2560; }else {}if ((_7328 == std::string ("errTaskInvalid"))){ return (int)2561; }else {}if ((_7328 == std::string ("errTaskWrite"))){ return (int)2562; }else {}if ((_7328 == std::string ("errLuMaxNumTries"))){ return (int)2800; }else {}if ((_7328 == std::string ("errInvalidUtf8"))){ return (int)2900; }else {}if ((_7328 == std::string ("errInvalidWchar"))){ return (int)2901; }else {}if ((_7328 == std::string ("errNoDualForItgSol"))){ return (int)2950; }else {}if ((_7328 == std::string ("errNoSnxForBasSol"))){ return (int)2953; }else {}if ((_7328 == std::string ("errInternal"))){ return (int)3000; }else {}if ((_7328 == std::string ("errApiArrayTooSmall"))){ return (int)3001; }else {}if ((_7328 == std::string ("errApiCbConnect"))){ return (int)3002; }else {}if ((_7328 == std::string ("errApiFatalError"))){ return (int)3005; }else {}if ((_7328 == std::string ("errApiInternal"))){ return (int)3999; }else {}if ((_7328 == std::string ("errSenFormat"))){ return (int)3050; }else {}if ((_7328 == std::string ("errSenUndefName"))){ return (int)3051; }else {}if ((_7328 == std::string ("errSenIndexRange"))){ return (int)3052; }else {}if ((_7328 == std::string ("errSenBoundInvalidUp"))){ return (int)3053; }else {}if ((_7328 == std::string ("errSenBoundInvalidLo"))){ return (int)3054; }else {}if ((_7328 == std::string ("errSenIndexInvalid"))){ return (int)3055; }else {}if ((_7328 == std::string ("errSenInvalidRegexp"))){ return (int)3056; }else {}if ((_7328 == std::string ("errSenSolutionStatus"))){ return (int)3057; }else {}if ((_7328 == std::string ("errSenNumerical"))){ return (int)3058; }else {}if ((_7328 == std::string ("errSenUnhandledProblemType"))){ return (int)3080; }else {}if ((_7328 == std::string ("errUnbStepSize"))){ return (int)3100; }else {}if ((_7328 == std::string ("errIdenticalTasks"))){ return (int)3101; }else {}if ((_7328 == std::string ("errAdInvalidCodelist"))){ return (int)3102; }else {}if ((_7328 == std::string ("errInternalTestFailed"))){ return (int)3500; }else {}if ((_7328 == std::string ("errXmlInvalidProblemType"))){ return (int)3600; }else {}if ((_7328 == std::string ("errInvalidAmplStub"))){ return (int)3700; }else {}if ((_7328 == std::string ("errInt64ToInt32Cast"))){ return (int)3800; }else {}if ((_7328 == std::string ("errSizeLicenseNumcores"))){ return (int)3900; }else {}if ((_7328 == std::string ("errInfeasUndefined"))){ return (int)3910; }else {}if ((_7328 == std::string ("errNoBarxForSolution"))){ return (int)3915; }else {}if ((_7328 == std::string ("errNoBarsForSolution"))){ return (int)3916; }else {}if ((_7328 == std::string ("errBarVarDim"))){ return (int)3920; }else {}if ((_7328 == std::string ("errSymMatInvalidRowIndex"))){ return (int)3940; }else {}if ((_7328 == std::string ("errSymMatInvalidColIndex"))){ return (int)3941; }else {}if ((_7328 == std::string ("errSymMatNotLowerTringular"))){ return (int)3942; }else {}if ((_7328 == std::string ("errSymMatInvalidValue"))){ return (int)3943; }else {}if ((_7328 == std::string ("errSymMatDuplicate"))){ return (int)3944; }else {}if ((_7328 == std::string ("errInvalidSymMatDim"))){ return (int)3950; }else {}if ((_7328 == std::string ("errInvalidFileFormatForSymMat"))){ return (int)4000; }else {}if ((_7328 == std::string ("errInvalidFileFormatForCones"))){ return (int)4005; }else {}if ((_7328 == std::string ("errInvalidFileFormatForGeneralNl"))){ return (int)4010; }else {}if ((_7328 == std::string ("errDuplicateConstraintNames"))){ return (int)4500; }else {}if ((_7328 == std::string ("errDuplicateVariableNames"))){ return (int)4501; }else {}if ((_7328 == std::string ("errDuplicateBarvariableNames"))){ return (int)4502; }else {}if ((_7328 == std::string ("errDuplicateConeNames"))){ return (int)4503; }else {}if ((_7328 == std::string ("errNonUniqueArray"))){ return (int)5000; }else {}if ((_7328 == std::string ("errArgumentIsTooLarge"))){ return (int)5005; }else {}if ((_7328 == std::string ("errMioInternal"))){ return (int)5010; }else {}if ((_7328 == std::string ("errInvalidProblemType"))){ return (int)6000; }else {}if ((_7328 == std::string ("errUnhandledSolutionStatus"))){ return (int)6010; }else {}if ((_7328 == std::string ("errUpperTriangle"))){ return (int)6020; }else {}if ((_7328 == std::string ("errLauSingularMatrix"))){ return (int)7000; }else {}if ((_7328 == std::string ("errLauNotPositiveDefinite"))){ return (int)7001; }else {}if ((_7328 == std::string ("errLauInvalidLowerTriangularMatrix"))){ return (int)7002; }else {}if ((_7328 == std::string ("errLauUnknown"))){ return (int)7005; }else {}if ((_7328 == std::string ("errLauArgM"))){ return (int)7010; }else {}if ((_7328 == std::string ("errLauArgN"))){ return (int)7011; }else {}if ((_7328 == std::string ("errLauArgK"))){ return (int)7012; }else {}if ((_7328 == std::string ("errLauArgTransa"))){ return (int)7015; }else {}if ((_7328 == std::string ("errLauArgTransb"))){ return (int)7016; }else {}if ((_7328 == std::string ("errLauArgUplo"))){ return (int)7017; }else {}if ((_7328 == std::string ("errLauArgTrans"))){ return (int)7018; }else {}if ((_7328 == std::string ("errLauInvalidSparseSymmetricMatrix"))){ return (int)7019; }else {}if ((_7328 == std::string ("errCbfParse"))){ return (int)7100; }else {}if ((_7328 == std::string ("errCbfObjSense"))){ return (int)7101; }else {}if ((_7328 == std::string ("errCbfNoVariables"))){ return (int)7102; }else {}if ((_7328 == std::string ("errCbfTooManyConstraints"))){ return (int)7103; }else {}if ((_7328 == std::string ("errCbfTooManyVariables"))){ return (int)7104; }else {}if ((_7328 == std::string ("errCbfNoVersionSpecified"))){ return (int)7105; }else {}if ((_7328 == std::string ("errCbfSyntax"))){ return (int)7106; }else {}if ((_7328 == std::string ("errCbfDuplicateObj"))){ return (int)7107; }else {}if ((_7328 == std::string ("errCbfDuplicateCon"))){ return (int)7108; }else {}if ((_7328 == std::string ("errCbfDuplicateVar"))){ return (int)7109; }else {}if ((_7328 == std::string ("errCbfDuplicateInt"))){ return (int)7110; }else {}if ((_7328 == std::string ("errCbfInvalidVarType"))){ return (int)7111; }else {}if ((_7328 == std::string ("errCbfInvalidConType"))){ return (int)7112; }else {}if ((_7328 == std::string ("errCbfInvalidDomainDimension"))){ return (int)7113; }else {}if ((_7328 == std::string ("errCbfDuplicateObjacoord"))){ return (int)7114; }else {}if ((_7328 == std::string ("errCbfDuplicateBcoord"))){ return (int)7115; }else {}if ((_7328 == std::string ("errCbfDuplicateAcoord"))){ return (int)7116; }else {}if ((_7328 == std::string ("errCbfTooFewVariables"))){ return (int)7117; }else {}if ((_7328 == std::string ("errCbfTooFewConstraints"))){ return (int)7118; }else {}if ((_7328 == std::string ("errCbfTooFewInts"))){ return (int)7119; }else {}if ((_7328 == std::string ("errCbfTooManyInts"))){ return (int)7120; }else {}if ((_7328 == std::string ("errCbfInvalidIntIndex"))){ return (int)7121; }else {}if ((_7328 == std::string ("errCbfUnsupported"))){ return (int)7122; }else {}if ((_7328 == std::string ("errCbfDuplicatePsdvar"))){ return (int)7123; }else {}if ((_7328 == std::string ("errCbfInvalidPsdvarDimension"))){ return (int)7124; }else {}if ((_7328 == std::string ("errCbfTooFewPsdvar"))){ return (int)7125; }else {}if ((_7328 == std::string ("errMioInvalidRootOptimizer"))){ return (int)7130; }else {}if ((_7328 == std::string ("errMioInvalidNodeOptimizer"))){ return (int)7131; }else {}if ((_7328 == std::string ("errToconicConstrQNotPsd"))){ return (int)7150; }else {}if ((_7328 == std::string ("errToconicConstraintFx"))){ return (int)7151; }else {}if ((_7328 == std::string ("errToconicConstraintRa"))){ return (int)7152; }else {}if ((_7328 == std::string ("errToconicConstrNotConic"))){ return (int)7153; }else {}if ((_7328 == std::string ("errToconicObjectiveNotPsd"))){ return (int)7155; }else {}if ((_7328 == std::string ("errServerConnect"))){ return (int)8000; }else {}if ((_7328 == std::string ("errServerProtocol"))){ return (int)8001; }else {}if ((_7328 == std::string ("errServerStatus"))){ return (int)8002; }else {}if ((_7328 == std::string ("errServerToken"))){ return (int)8003; }else {}if ((_7328 == std::string ("trmMaxIterations"))){ return (int)10000; }else {}if ((_7328 == std::string ("trmMaxTime"))){ return (int)10001; }else {}if ((_7328 == std::string ("trmObjectiveRange"))){ return (int)10002; }else {}if ((_7328 == std::string ("trmMioNearRelGap"))){ return (int)10003; }else {}if ((_7328 == std::string ("trmMioNearAbsGap"))){ return (int)10004; }else {}if ((_7328 == std::string ("trmMioNumRelaxs"))){ return (int)10008; }else {}if ((_7328 == std::string ("trmMioNumBranches"))){ return (int)10009; }else {}if ((_7328 == std::string ("trmNumMaxNumIntSolutions"))){ return (int)10015; }else {}if ((_7328 == std::string ("trmStall"))){ return (int)10006; }else {}if ((_7328 == std::string ("trmUserCallback"))){ return (int)10007; }else {}if ((_7328 == std::string ("trmMaxNumSetbacks"))){ return (int)10020; }else {}if ((_7328 == std::string ("trmNumericalProblem"))){ return (int)10025; }else {}if ((_7328 == std::string ("trmInternal"))){ return (int)10030; }else {}if ((_7328 == std::string ("trmInternalStop"))){ return (int)10031; }else {}return (- (int)1); }int mosek::fusion::p_Parameters::string_to_scalingtype_value( const std::string & _7329){ if ((_7329 == std::string ("free"))){ return (int)0; }else {}if ((_7329 == std::string ("none"))){ return (int)1; }else {}if ((_7329 == std::string ("moderate"))){ return (int)2; }else {}if ((_7329 == std::string ("aggressive"))){ return (int)3; }else {}return (- (int)1); }int mosek::fusion::p_Parameters::string_to_prosta_value( const std::string & _7330){ if ((_7330 == std::string ("unknown"))){ return (int)0; }else {}if ((_7330 == std::string ("primAndDualFeas"))){ return (int)1; }else {}if ((_7330 == std::string ("primFeas"))){ return (int)2; }else {}if ((_7330 == std::string ("dualFeas"))){ return (int)3; }else {}if ((_7330 == std::string ("nearPrimAndDualFeas"))){ return (int)8; }else {}if ((_7330 == std::string ("nearPrimFeas"))){ return (int)9; }else {}if ((_7330 == std::string ("nearDualFeas"))){ return (int)10; }else {}if ((_7330 == std::string ("primInfeas"))){ return (int)4; }else {}if ((_7330 == std::string ("dualInfeas"))){ return (int)5; }else {}if ((_7330 == std::string ("primAndDualInfeas"))){ return (int)6; }else {}if ((_7330 == std::string ("illPosed"))){ return (int)7; }else {}if ((_7330 == std::string ("primInfeasOrUnbounded"))){ return (int)11; }else {}return (- (int)1); }int mosek::fusion::p_Parameters::string_to_rescodetype_value( const std::string & _7331){ if ((_7331 == std::string ("ok"))){ return (int)0; }else {}if ((_7331 == std::string ("wrn"))){ return (int)1; }else {}if ((_7331 == std::string ("trm"))){ return (int)2; }else {}if ((_7331 == std::string ("err"))){ return (int)3; }else {}if ((_7331 == std::string ("unk"))){ return (int)4; }else {}return (- (int)1); }int mosek::fusion::p_Parameters::string_to_parametertype_value( const std::string & _7332){ if ((_7332 == std::string ("invalidType"))){ return (int)0; }else {}if ((_7332 == std::string ("douType"))){ return (int)1; }else {}if ((_7332 == std::string ("intType"))){ return (int)2; }else {}if ((_7332 == std::string ("strType"))){ return (int)3; }else {}return (- (int)1); }int mosek::fusion::p_Parameters::string_to_dinfitem_value( const std::string & _7333){ if ((_7333 == std::string ("biTime"))){ return (int)5; }else {}if ((_7333 == std::string ("biPrimalTime"))){ return (int)4; }else {}if ((_7333 == std::string ("biDualTime"))){ return (int)3; }else {}if ((_7333 == std::string ("biCleanTime"))){ return (int)2; }else {}if ((_7333 == std::string ("biCleanPrimalTime"))){ return (int)1; }else {}if ((_7333 == std::string ("biCleanDualTime"))){ return (int)0; }else {}if ((_7333 == std::string ("intpntTime"))){ return (int)13; }else {}if ((_7333 == std::string ("intpntOrderTime"))){ return (int)10; }else {}if ((_7333 == std::string ("intpntPrimalObj"))){ return (int)12; }else {}if ((_7333 == std::string ("intpntDualObj"))){ return (int)7; }else {}if ((_7333 == std::string ("intpntPrimalFeas"))){ return (int)11; }else {}if ((_7333 == std::string ("intpntDualFeas"))){ return (int)6; }else {}if ((_7333 == std::string ("intpntOptStatus"))){ return (int)9; }else {}if ((_7333 == std::string ("simTime"))){ return (int)47; }else {}if ((_7333 == std::string ("simPrimalTime"))){ return (int)46; }else {}if ((_7333 == std::string ("simDualTime"))){ return (int)43; }else {}if ((_7333 == std::string ("simObj"))){ return (int)45; }else {}if ((_7333 == std::string ("simFeas"))){ return (int)44; }else {}if ((_7333 == std::string ("mioTime"))){ return (int)31; }else {}if ((_7333 == std::string ("mioRootPresolveTime"))){ return (int)30; }else {}if ((_7333 == std::string ("mioRootOptimizerTime"))){ return (int)29; }else {}if ((_7333 == std::string ("mioOptimizerTime"))){ return (int)26; }else {}if ((_7333 == std::string ("mioHeuristicTime"))){ return (int)19; }else {}if ((_7333 == std::string ("toConicTime"))){ return (int)91; }else {}if ((_7333 == std::string ("mioConstructSolutionObj"))){ return (int)16; }else {}if ((_7333 == std::string ("mioObjInt"))){ return (int)24; }else {}if ((_7333 == std::string ("mioObjBound"))){ return (int)23; }else {}if ((_7333 == std::string ("mioObjRelGap"))){ return (int)25; }else {}if ((_7333 == std::string ("mioObjAbsGap"))){ return (int)22; }else {}if ((_7333 == std::string ("mioUserObjCut"))){ return (int)32; }else {}if ((_7333 == std::string ("mioCmirSeparationTime"))){ return (int)15; }else {}if ((_7333 == std::string ("mioCliqueSeparationTime"))){ return (int)14; }else {}if ((_7333 == std::string ("mioKnapsackCoverSeparationTime"))){ return (int)21; }else {}if ((_7333 == std::string ("mioGmiSeparationTime"))){ return (int)18; }else {}if ((_7333 == std::string ("mioImpliedBoundTime"))){ return (int)20; }else {}if ((_7333 == std::string ("mioRootCutgenTime"))){ return (int)28; }else {}if ((_7333 == std::string ("mioProbingTime"))){ return (int)27; }else {}if ((_7333 == std::string ("optimizerTime"))){ return (int)33; }else {}if ((_7333 == std::string ("presolveTime"))){ return (int)36; }else {}if ((_7333 == std::string ("mioDualBoundAfterPresolve"))){ return (int)17; }else {}if ((_7333 == std::string ("presolveEliTime"))){ return (int)34; }else {}if ((_7333 == std::string ("presolveLindepTime"))){ return (int)35; }else {}if ((_7333 == std::string ("rdTime"))){ return (int)42; }else {}if ((_7333 == std::string ("solItrPrimalObj"))){ return (int)86; }else {}if ((_7333 == std::string ("solItrPviolcon"))){ return (int)88; }else {}if ((_7333 == std::string ("solItrPviolvar"))){ return (int)90; }else {}if ((_7333 == std::string ("solItrPviolbarvar"))){ return (int)87; }else {}if ((_7333 == std::string ("solItrPviolcones"))){ return (int)89; }else {}if ((_7333 == std::string ("solItrDualObj"))){ return (int)71; }else {}if ((_7333 == std::string ("solItrDviolcon"))){ return (int)73; }else {}if ((_7333 == std::string ("solItrDviolvar"))){ return (int)75; }else {}if ((_7333 == std::string ("solItrDviolbarvar"))){ return (int)72; }else {}if ((_7333 == std::string ("solItrDviolcones"))){ return (int)74; }else {}if ((_7333 == std::string ("solItrNrmXc"))){ return (int)83; }else {}if ((_7333 == std::string ("solItrNrmXx"))){ return (int)84; }else {}if ((_7333 == std::string ("solItrNrmBarx"))){ return (int)77; }else {}if ((_7333 == std::string ("solItrNrmY"))){ return (int)85; }else {}if ((_7333 == std::string ("solItrNrmSlc"))){ return (int)78; }else {}if ((_7333 == std::string ("solItrNrmSuc"))){ return (int)81; }else {}if ((_7333 == std::string ("solItrNrmSlx"))){ return (int)79; }else {}if ((_7333 == std::string ("solItrNrmSux"))){ return (int)82; }else {}if ((_7333 == std::string ("solItrNrmSnx"))){ return (int)80; }else {}if ((_7333 == std::string ("solItrNrmBars"))){ return (int)76; }else {}if ((_7333 == std::string ("solBasPrimalObj"))){ return (int)59; }else {}if ((_7333 == std::string ("solBasPviolcon"))){ return (int)60; }else {}if ((_7333 == std::string ("solBasPviolvar"))){ return (int)61; }else {}if ((_7333 == std::string ("solBasDualObj"))){ return (int)48; }else {}if ((_7333 == std::string ("solBasDviolcon"))){ return (int)49; }else {}if ((_7333 == std::string ("solBasDviolvar"))){ return (int)50; }else {}if ((_7333 == std::string ("solBasNrmXc"))){ return (int)56; }else {}if ((_7333 == std::string ("solBasNrmXx"))){ return (int)57; }else {}if ((_7333 == std::string ("solBasNrmBarx"))){ return (int)51; }else {}if ((_7333 == std::string ("solBasNrmY"))){ return (int)58; }else {}if ((_7333 == std::string ("solBasNrmSlc"))){ return (int)52; }else {}if ((_7333 == std::string ("solBasNrmSuc"))){ return (int)54; }else {}if ((_7333 == std::string ("solBasNrmSlx"))){ return (int)53; }else {}if ((_7333 == std::string ("solBasNrmSux"))){ return (int)55; }else {}if ((_7333 == std::string ("solItgPrimalObj"))){ return (int)65; }else {}if ((_7333 == std::string ("solItgPviolcon"))){ return (int)67; }else {}if ((_7333 == std::string ("solItgPviolvar"))){ return (int)70; }else {}if ((_7333 == std::string ("solItgPviolbarvar"))){ return (int)66; }else {}if ((_7333 == std::string ("solItgPviolcones"))){ return (int)68; }else {}if ((_7333 == std::string ("solItgPviolitg"))){ return (int)69; }else {}if ((_7333 == std::string ("solItgNrmXc"))){ return (int)63; }else {}if ((_7333 == std::string ("solItgNrmXx"))){ return (int)64; }else {}if ((_7333 == std::string ("solItgNrmBarx"))){ return (int)62; }else {}if ((_7333 == std::string ("intpntFactorNumFlops"))){ return (int)8; }else {}if ((_7333 == std::string ("qcqoReformulateTime"))){ return (int)39; }else {}if ((_7333 == std::string ("qcqoReformulateMaxPerturbation"))){ return (int)38; }else {}if ((_7333 == std::string ("qcqoReformulateWorstCholeskyDiagScaling"))){ return (int)41; }else {}if ((_7333 == std::string ("qcqoReformulateWorstCholeskyColumnScaling"))){ return (int)40; }else {}if ((_7333 == std::string ("primalRepairPenaltyObj"))){ return (int)37; }else {}return (- (int)1); }int mosek::fusion::p_Parameters::string_to_miomode_value( const std::string & _7334){ if ((_7334 == std::string ("ignored"))){ return (int)0; }else {}if ((_7334 == std::string ("satisfied"))){ return (int)1; }else {}return (- (int)1); }int mosek::fusion::p_Parameters::string_to_xmlwriteroutputtype_value( const std::string & _7335){ if ((_7335 == std::string ("row"))){ return (int)0; }else {}if ((_7335 == std::string ("col"))){ return (int)1; }else {}return (- (int)1); }int mosek::fusion::p_Parameters::string_to_simseltype_value( const std::string & _7336){ if ((_7336 == std::string ("free"))){ return (int)0; }else {}if ((_7336 == std::string ("full"))){ return (int)1; }else {}if ((_7336 == std::string ("ase"))){ return (int)2; }else {}if ((_7336 == std::string ("devex"))){ return (int)3; }else {}if ((_7336 == std::string ("se"))){ return (int)4; }else {}if ((_7336 == std::string ("partial"))){ return (int)5; }else {}return (- (int)1); }int mosek::fusion::p_Parameters::string_to_internal_liinf_value( const std::string & _7337){ if ((_7337 == std::string ("intpntLenbarvar"))){ return (int)5; }else {}if ((_7337 == std::string ("intpntFactorNumNzBefore"))){ return (int)2; }else {}if ((_7337 == std::string ("intpntFactorMlOrderSparseLNz"))){ return (int)1; }else {}if ((_7337 == std::string ("intpntFactorGpOrderSparseLNz"))){ return (int)0; }else {}if ((_7337 == std::string ("presolveStackSize"))){ return (int)6; }else {}if ((_7337 == std::string ("intpntFactorVNz"))){ return (int)4; }else {}if ((_7337 == std::string ("intpntFactorUpdatedVNz"))){ return (int)3; }else {}return (- (int)1); }int mosek::fusion::p_Parameters::string_to_iomode_value( const std::string & _7338){ if ((_7338 == std::string ("read"))){ return (int)0; }else {}if ((_7338 == std::string ("write"))){ return (int)1; }else {}if ((_7338 == std::string ("readwrite"))){ return (int)2; }else {}return (- (int)1); }int mosek::fusion::p_Parameters::string_to_streamtype_value( const std::string & _7339){ if ((_7339 == std::string ("log"))){ return (int)0; }else {}if ((_7339 == std::string ("msg"))){ return (int)1; }else {}if ((_7339 == std::string ("err"))){ return (int)2; }else {}if ((_7339 == std::string ("wrn"))){ return (int)3; }else {}return (- (int)1); }int mosek::fusion::p_Parameters::string_to_conetype_value( const std::string & _7340){ if ((_7340 == std::string ("quad"))){ return (int)0; }else {}if ((_7340 == std::string ("rquad"))){ return (int)1; }else {}return (- (int)1); }int mosek::fusion::p_Parameters::string_to_mark_value( const std::string & _7341){ if ((_7341 == std::string ("lo"))){ return (int)0; }else {}if ((_7341 == std::string ("up"))){ return (int)1; }else {}return (- (int)1); }int mosek::fusion::p_Parameters::string_to_feature_value( const std::string & _7342){ if ((_7342 == std::string ("pts"))){ return (int)0; }else {}if ((_7342 == std::string ("pton"))){ return (int)1; }else {}return (- (int)1); }int mosek::fusion::p_Parameters::string_to_symmattype_value( const std::string & _7343){ if ((_7343 == std::string ("sparse"))){ return (int)0; }else {}return (- (int)1); }int mosek::fusion::p_Parameters::string_to_callbackcode_value( const std::string & _7344){ if ((_7344 == std::string ("beginRootCutgen"))){ return (int)22; }else {}if ((_7344 == std::string ("imRootCutgen"))){ return (int)76; }else {}if ((_7344 == std::string ("endRootCutgen"))){ return (int)51; }else {}if ((_7344 == std::string ("beginOptimizer"))){ return (int)12; }else {}if ((_7344 == std::string ("endOptimizer"))){ return (int)41; }else {}if ((_7344 == std::string ("beginPresolve"))){ return (int)13; }else {}if ((_7344 == std::string ("updatePresolve"))){ return (int)88; }else {}if ((_7344 == std::string ("imPresolve"))){ return (int)70; }else {}if ((_7344 == std::string ("endPresolve"))){ return (int)42; }else {}if ((_7344 == std::string ("beginIntpnt"))){ return (int)9; }else {}if ((_7344 == std::string ("intpnt"))){ return (int)79; }else {}if ((_7344 == std::string ("imIntpnt"))){ return (int)62; }else {}if ((_7344 == std::string ("endIntpnt"))){ return (int)38; }else {}if ((_7344 == std::string ("beginConic"))){ return (int)1; }else {}if ((_7344 == std::string ("conic"))){ return (int)27; }else {}if ((_7344 == std::string ("imConic"))){ return (int)57; }else {}if ((_7344 == std::string ("endConic"))){ return (int)30; }else {}if ((_7344 == std::string ("primalSimplex"))){ return (int)81; }else {}if ((_7344 == std::string ("dualSimplex"))){ return (int)28; }else {}if ((_7344 == std::string ("beginBi"))){ return (int)0; }else {}if ((_7344 == std::string ("imBi"))){ return (int)56; }else {}if ((_7344 == std::string ("endBi"))){ return (int)29; }else {}if ((_7344 == std::string ("beginPrimalBi"))){ return (int)14; }else {}if ((_7344 == std::string ("imPrimalBi"))){ return (int)71; }else {}if ((_7344 == std::string ("updatePrimalBi"))){ return (int)89; }else {}if ((_7344 == std::string ("endPrimalBi"))){ return (int)43; }else {}if ((_7344 == std::string ("beginDualBi"))){ return (int)2; }else {}if ((_7344 == std::string ("imDualBi"))){ return (int)58; }else {}if ((_7344 == std::string ("updateDualBi"))){ return (int)85; }else {}if ((_7344 == std::string ("endDualBi"))){ return (int)31; }else {}if ((_7344 == std::string ("beginSimplexBi"))){ return (int)24; }else {}if ((_7344 == std::string ("imSimplexBi"))){ return (int)78; }else {}if ((_7344 == std::string ("beginPrimalSimplexBi"))){ return (int)19; }else {}if ((_7344 == std::string ("updatePrimalSimplexBi"))){ return (int)91; }else {}if ((_7344 == std::string ("endPrimalSimplexBi"))){ return (int)48; }else {}if ((_7344 == std::string ("beginDualSimplexBi"))){ return (int)6; }else {}if ((_7344 == std::string ("updateDualSimplexBi"))){ return (int)87; }else {}if ((_7344 == std::string ("endDualSimplexBi"))){ return (int)35; }else {}if ((_7344 == std::string ("endSimplexBi"))){ return (int)53; }else {}if ((_7344 == std::string ("beginMio"))){ return (int)11; }else {}if ((_7344 == std::string ("imMio"))){ return (int)65; }else {}if ((_7344 == std::string ("newIntMio"))){ return (int)80; }else {}if ((_7344 == std::string ("endMio"))){ return (int)40; }else {}if ((_7344 == std::string ("beginSimplex"))){ return (int)23; }else {}if ((_7344 == std::string ("beginDualSimplex"))){ return (int)5; }else {}if ((_7344 == std::string ("imDualSimplex"))){ return (int)60; }else {}if ((_7344 == std::string ("updateDualSimplex"))){ return (int)86; }else {}if ((_7344 == std::string ("endDualSimplex"))){ return (int)34; }else {}if ((_7344 == std::string ("beginPrimalSimplex"))){ return (int)18; }else {}if ((_7344 == std::string ("imPrimalSimplex"))){ return (int)73; }else {}if ((_7344 == std::string ("updatePrimalSimplex"))){ return (int)90; }else {}if ((_7344 == std::string ("endPrimalSimplex"))){ return (int)47; }else {}if ((_7344 == std::string ("endSimplex"))){ return (int)52; }else {}if ((_7344 == std::string ("beginInfeasAna"))){ return (int)8; }else {}if ((_7344 == std::string ("endInfeasAna"))){ return (int)37; }else {}if ((_7344 == std::string ("imPrimalSensivity"))){ return (int)72; }else {}if ((_7344 == std::string ("imDualSensivity"))){ return (int)59; }else {}if ((_7344 == std::string ("imMioIntpnt"))){ return (int)67; }else {}if ((_7344 == std::string ("imMioPrimalSimplex"))){ return (int)68; }else {}if ((_7344 == std::string ("imMioDualSimplex"))){ return (int)66; }else {}if ((_7344 == std::string ("beginPrimalSetupBi"))){ return (int)17; }else {}if ((_7344 == std::string ("endPrimalSetupBi"))){ return (int)46; }else {}if ((_7344 == std::string ("beginDualSetupBi"))){ return (int)4; }else {}if ((_7344 == std::string ("endDualSetupBi"))){ return (int)33; }else {}if ((_7344 == std::string ("beginPrimalSensitivity"))){ return (int)16; }else {}if ((_7344 == std::string ("endPrimalSensitivity"))){ return (int)45; }else {}if ((_7344 == std::string ("beginDualSensitivity"))){ return (int)3; }else {}if ((_7344 == std::string ("endDualSensitivity"))){ return (int)32; }else {}if ((_7344 == std::string ("beginLicenseWait"))){ return (int)10; }else {}if ((_7344 == std::string ("endLicenseWait"))){ return (int)39; }else {}if ((_7344 == std::string ("imLicenseWait"))){ return (int)63; }else {}if ((_7344 == std::string ("beginQcqoReformulate"))){ return (int)20; }else {}if ((_7344 == std::string ("endQcqoReformulate"))){ return (int)49; }else {}if ((_7344 == std::string ("imQoReformulate"))){ return (int)74; }else {}if ((_7344 == std::string ("beginToConic"))){ return (int)25; }else {}if ((_7344 == std::string ("endToConic"))){ return (int)54; }else {}if ((_7344 == std::string ("beginFullConvexityCheck"))){ return (int)7; }else {}if ((_7344 == std::string ("endFullConvexityCheck"))){ return (int)36; }else {}if ((_7344 == std::string ("imFullConvexityCheck"))){ return (int)61; }else {}if ((_7344 == std::string ("beginPrimalRepair"))){ return (int)15; }else {}if ((_7344 == std::string ("endPrimalRepair"))){ return (int)44; }else {}if ((_7344 == std::string ("beginRead"))){ return (int)21; }else {}if ((_7344 == std::string ("imRead"))){ return (int)75; }else {}if ((_7344 == std::string ("endRead"))){ return (int)50; }else {}if ((_7344 == std::string ("beginWrite"))){ return (int)26; }else {}if ((_7344 == std::string ("endWrite"))){ return (int)55; }else {}if ((_7344 == std::string ("readOpfSection"))){ return (int)83; }else {}if ((_7344 == std::string ("imLu"))){ return (int)64; }else {}if ((_7344 == std::string ("imOrder"))){ return (int)69; }else {}if ((_7344 == std::string ("imSimplex"))){ return (int)77; }else {}if ((_7344 == std::string ("readOpf"))){ return (int)82; }else {}if ((_7344 == std::string ("writeOpf"))){ return (int)92; }else {}if ((_7344 == std::string ("solvingRemote"))){ return (int)84; }else {}return (- (int)1); }int mosek::fusion::p_Parameters::string_to_simhotstart_value( const std::string & _7345){ if ((_7345 == std::string ("none"))){ return (int)0; }else {}if ((_7345 == std::string ("free"))){ return (int)1; }else {}if ((_7345 == std::string ("statusKeys"))){ return (int)2; }else {}return (- (int)1); }int mosek::fusion::p_Parameters::string_to_liinfitem_value( const std::string & _7346){ if ((_7346 == std::string ("mioPresolvedAnz"))){ return (int)8; }else {}if ((_7346 == std::string ("mioSimplexIter"))){ return (int)10; }else {}if ((_7346 == std::string ("mioIntpntIter"))){ return (int)7; }else {}if ((_7346 == std::string ("biPrimalIter"))){ return (int)5; }else {}if ((_7346 == std::string ("biDualIter"))){ return (int)4; }else {}if ((_7346 == std::string ("biCleanPrimalIter"))){ return (int)3; }else {}if ((_7346 == std::string ("biCleanDualIter"))){ return (int)1; }else {}if ((_7346 == std::string ("biCleanPrimalDegIter"))){ return (int)2; }else {}if ((_7346 == std::string ("biCleanDualDegIter"))){ return (int)0; }else {}if ((_7346 == std::string ("intpntFactorNumNz"))){ return (int)6; }else {}if ((_7346 == std::string ("rdNumanz"))){ return (int)11; }else {}if ((_7346 == std::string ("rdNumqnz"))){ return (int)12; }else {}if ((_7346 == std::string ("mioSimMaxiterSetbacks"))){ return (int)9; }else {}return (- (int)1); }int mosek::fusion::p_Parameters::string_to_branchdir_value( const std::string & _7347){ if ((_7347 == std::string ("free"))){ return (int)0; }else {}if ((_7347 == std::string ("up"))){ return (int)1; }else {}if ((_7347 == std::string ("down"))){ return (int)2; }else {}if ((_7347 == std::string ("near"))){ return (int)3; }else {}if ((_7347 == std::string ("far"))){ return (int)4; }else {}if ((_7347 == std::string ("rootLp"))){ return (int)5; }else {}if ((_7347 == std::string ("guided"))){ return (int)6; }else {}if ((_7347 == std::string ("pseudocost"))){ return (int)7; }else {}return (- (int)1); }int mosek::fusion::p_Parameters::string_to_basindtype_value( const std::string & _7348){ if ((_7348 == std::string ("never"))){ return (int)0; }else {}if ((_7348 == std::string ("always"))){ return (int)1; }else {}if ((_7348 == std::string ("noError"))){ return (int)2; }else {}if ((_7348 == std::string ("ifFeasible"))){ return (int)3; }else {}if ((_7348 == std::string ("reservered"))){ return (int)4; }else {}return (- (int)1); }int mosek::fusion::p_Parameters::string_to_internal_iinf_value( const std::string & _7349){ if ((_7349 == std::string ("presolveCompressedStackSize"))){ return (int)31; }else {}if ((_7349 == std::string ("presolveLindepWork"))){ return (int)59; }else {}if ((_7349 == std::string ("presolveLindepPivots"))){ return (int)57; }else {}if ((_7349 == std::string ("presolveLindepSkipped"))){ return (int)58; }else {}if ((_7349 == std::string ("presolveOutofspace"))){ return (int)77; }else {}if ((_7349 == std::string ("presolveBadPrecision"))){ return (int)30; }else {}if ((_7349 == std::string ("optObjectiveSense"))){ return (int)28; }else {}if ((_7349 == std::string ("optimizer"))){ return (int)29; }else {}if ((_7349 == std::string ("intpntFirRefIter"))){ return (int)9; }else {}if ((_7349 == std::string ("intpntNumRefSteps"))){ return (int)14; }else {}if ((_7349 == std::string ("intpntFactorDim"))){ return (int)2; }else {}if ((_7349 == std::string ("intpntFactorNumDenseA"))){ return (int)4; }else {}if ((_7349 == std::string ("intpntFactorNumDenseADup"))){ return (int)5; }else {}if ((_7349 == std::string ("intpntFactorNumDenseW"))){ return (int)6; }else {}if ((_7349 == std::string ("intpntFactorNumDenseWANull"))){ return (int)7; }else {}if ((_7349 == std::string ("intpntNumcon"))){ return (int)21; }else {}if ((_7349 == std::string ("intpntNumvar"))){ return (int)26; }else {}if ((_7349 == std::string ("intpntNumbarvar"))){ return (int)15; }else {}if ((_7349 == std::string ("intpntNumblo"))){ return (int)18; }else {}if ((_7349 == std::string ("intpntNumbup"))){ return (int)20; }else {}if ((_7349 == std::string ("intpntNumbfr"))){ return (int)16; }else {}if ((_7349 == std::string ("intpntNumbfx"))){ return (int)17; }else {}if ((_7349 == std::string ("intpntNumcone"))){ return (int)22; }else {}if ((_7349 == std::string ("intpntNumconevar"))){ return (int)23; }else {}if ((_7349 == std::string ("intpntNumbndcone"))){ return (int)19; }else {}if ((_7349 == std::string ("intpntNumrqcones"))){ return (int)25; }else {}if ((_7349 == std::string ("intpntNumqcones"))){ return (int)24; }else {}if ((_7349 == std::string ("intpntMinconedim"))){ return (int)13; }else {}if ((_7349 == std::string ("intpntMaxconedim"))){ return (int)12; }else {}if ((_7349 == std::string ("intpntMaxbarvardim"))){ return (int)11; }else {}if ((_7349 == std::string ("presolveNumcon"))){ return (int)66; }else {}if ((_7349 == std::string ("presolveNumcfr"))){ return (int)62; }else {}if ((_7349 == std::string ("presolveNumcfx"))){ return (int)63; }else {}if ((_7349 == std::string ("presolveNumclo"))){ return (int)64; }else {}if ((_7349 == std::string ("presolveNumcup"))){ return (int)68; }else {}if ((_7349 == std::string ("presolveNumcra"))){ return (int)67; }else {}if ((_7349 == std::string ("presolveNumcnl"))){ return (int)65; }else {}if ((_7349 == std::string ("presolveNumvar"))){ return (int)70; }else {}if ((_7349 == std::string ("presolveNumvfr"))){ return (int)71; }else {}if ((_7349 == std::string ("presolveNumvfx"))){ return (int)72; }else {}if ((_7349 == std::string ("presolveNumvlo"))){ return (int)73; }else {}if ((_7349 == std::string ("presolveNumvup"))){ return (int)76; }else {}if ((_7349 == std::string ("presolveNumvra"))){ return (int)75; }else {}if ((_7349 == std::string ("presolveNumvnl"))){ return (int)74; }else {}if ((_7349 == std::string ("presolveNumnza"))){ return (int)69; }else {}if ((_7349 == std::string ("presolveFnumcon"))){ return (int)39; }else {}if ((_7349 == std::string ("presolveFnumcfr"))){ return (int)35; }else {}if ((_7349 == std::string ("presolveFnumcfx"))){ return (int)36; }else {}if ((_7349 == std::string ("presolveFnumclo"))){ return (int)37; }else {}if ((_7349 == std::string ("presolveFnumcup"))){ return (int)41; }else {}if ((_7349 == std::string ("presolveFnumcra"))){ return (int)40; }else {}if ((_7349 == std::string ("presolveFnumcnl"))){ return (int)38; }else {}if ((_7349 == std::string ("presolveFnumvar"))){ return (int)43; }else {}if ((_7349 == std::string ("presolveFnumvfr"))){ return (int)44; }else {}if ((_7349 == std::string ("presolveFnumvfx"))){ return (int)45; }else {}if ((_7349 == std::string ("presolveFnumvlo"))){ return (int)46; }else {}if ((_7349 == std::string ("presolveFnumvup"))){ return (int)49; }else {}if ((_7349 == std::string ("presolveFnumvra"))){ return (int)48; }else {}if ((_7349 == std::string ("presolveFnumvnl"))){ return (int)47; }else {}if ((_7349 == std::string ("presolveFnumnza"))){ return (int)42; }else {}if ((_7349 == std::string ("presolveNumElimns"))){ return (int)61; }else {}if ((_7349 == std::string ("presolveEliNumTries"))){ return (int)34; }else {}if ((_7349 == std::string ("presolveEliNumFreedCon"))){ return (int)32; }else {}if ((_7349 == std::string ("presolveEliNumFreedConTotal"))){ return (int)33; }else {}if ((_7349 == std::string ("presolveLindepNumTries"))){ return (int)55; }else {}if ((_7349 == std::string ("presolveLindepNum"))){ return (int)54; }else {}if ((_7349 == std::string ("presolveForceConNum"))){ return (int)50; }else {}if ((_7349 == std::string ("presolveForceConNumVar"))){ return (int)51; }else {}if ((_7349 == std::string ("presolveForceVarNum"))){ return (int)52; }else {}if ((_7349 == std::string ("presolveForceVarNumCon"))){ return (int)53; }else {}if ((_7349 == std::string ("presolvePivOnConNum"))){ return (int)78; }else {}if ((_7349 == std::string ("presolveNumDouBlocks"))){ return (int)60; }else {}if ((_7349 == std::string ("intpntFactorNum"))){ return (int)3; }else {}if ((_7349 == std::string ("intpntFactorNumSolve"))){ return (int)8; }else {}if ((_7349 == std::string ("simPrimalHotstartNumBasics"))){ return (int)88; }else {}if ((_7349 == std::string ("simPrimalHotstartBasisRank"))){ return (int)87; }else {}if ((_7349 == std::string ("simDualHotstartNumBasics"))){ return (int)80; }else {}if ((_7349 == std::string ("simDualHotstartBasisRank"))){ return (int)79; }else {}if ((_7349 == std::string ("intpntGpOrderEmployed"))){ return (int)10; }else {}if ((_7349 == std::string ("numLuFactorizations"))){ return (int)27; }else {}if ((_7349 == std::string ("simPrimalTrust"))){ return (int)90; }else {}if ((_7349 == std::string ("simDualTrust"))){ return (int)82; }else {}if ((_7349 == std::string ("simPrimalNumSetbacks"))){ return (int)89; }else {}if ((_7349 == std::string ("simDualNumSetbacks"))){ return (int)81; }else {}if ((_7349 == std::string ("simNumDupvec"))){ return (int)85; }else {}if ((_7349 == std::string ("simNumPrimalBoundswaps"))){ return (int)86; }else {}if ((_7349 == std::string ("simNumDualBoundswaps"))){ return (int)83; }else {}if ((_7349 == std::string ("simNumDualIntegerPivots"))){ return (int)84; }else {}if ((_7349 == std::string ("biPrimalInfo"))){ return (int)1; }else {}if ((_7349 == std::string ("biDualInfo"))){ return (int)0; }else {}if ((_7349 == std::string ("presolveLindepNumTruncTries"))){ return (int)56; }else {}return (- (int)1); }int mosek::fusion::p_Parameters::string_to_boundkey_value( const std::string & _7350){ if ((_7350 == std::string ("lo"))){ return (int)0; }else {}if ((_7350 == std::string ("up"))){ return (int)1; }else {}if ((_7350 == std::string ("fx"))){ return (int)2; }else {}if ((_7350 == std::string ("fr"))){ return (int)3; }else {}if ((_7350 == std::string ("ra"))){ return (int)4; }else {}return (- (int)1); }int mosek::fusion::p_Parameters::string_to_solitem_value( const std::string & _7351){ if ((_7351 == std::string ("xc"))){ return (int)0; }else {}if ((_7351 == std::string ("xx"))){ return (int)1; }else {}if ((_7351 == std::string ("y"))){ return (int)2; }else {}if ((_7351 == std::string ("slc"))){ return (int)3; }else {}if ((_7351 == std::string ("suc"))){ return (int)4; }else {}if ((_7351 == std::string ("slx"))){ return (int)5; }else {}if ((_7351 == std::string ("sux"))){ return (int)6; }else {}if ((_7351 == std::string ("snx"))){ return (int)7; }else {}return (- (int)1); }int mosek::fusion::p_Parameters::string_to_objsense_value( const std::string & _7352){ if ((_7352 == std::string ("minimize"))){ return (int)0; }else {}if ((_7352 == std::string ("maximize"))){ return (int)1; }else {}return (- (int)1); }int mosek::fusion::p_Parameters::string_to_solsta_value( const std::string & _7353){ if ((_7353 == std::string ("unknown"))){ return (int)0; }else {}if ((_7353 == std::string ("optimal"))){ return (int)1; }else {}if ((_7353 == std::string ("primFeas"))){ return (int)2; }else {}if ((_7353 == std::string ("dualFeas"))){ return (int)3; }else {}if ((_7353 == std::string ("primAndDualFeas"))){ return (int)4; }else {}if ((_7353 == std::string ("nearOptimal"))){ return (int)7; }else {}if ((_7353 == std::string ("nearPrimFeas"))){ return (int)8; }else {}if ((_7353 == std::string ("nearDualFeas"))){ return (int)9; }else {}if ((_7353 == std::string ("nearPrimAndDualFeas"))){ return (int)10; }else {}if ((_7353 == std::string ("primInfeasCer"))){ return (int)5; }else {}if ((_7353 == std::string ("dualInfeasCer"))){ return (int)6; }else {}if ((_7353 == std::string ("nearPrimInfeasCer"))){ return (int)11; }else {}if ((_7353 == std::string ("nearDualInfeasCer"))){ return (int)12; }else {}if ((_7353 == std::string ("primIllposedCer"))){ return (int)13; }else {}if ((_7353 == std::string ("dualIllposedCer"))){ return (int)14; }else {}if ((_7353 == std::string ("integerOptimal"))){ return (int)15; }else {}if ((_7353 == std::string ("nearIntegerOptimal"))){ return (int)16; }else {}return (- (int)1); }int mosek::fusion::p_Parameters::string_to_iparam_value( const std::string & _7354){ if ((_7354 == std::string ("autoUpdateSolInfo"))){ return (int)3; }else {}if ((_7354 == std::string ("removeUnusedSolutions"))){ return (int)111; }else {}if ((_7354 == std::string ("intpntHotstart"))){ return (int)18; }else {}if ((_7354 == std::string ("mioMtUserCb"))){ return (int)70; }else {}if ((_7354 == std::string ("numThreads"))){ return (int)80; }else {}if ((_7354 == std::string ("intpntMultiThread"))){ return (int)22; }else {}if ((_7354 == std::string ("timingLevel"))){ return (int)144; }else {}if ((_7354 == std::string ("mtSpincount"))){ return (int)79; }else {}if ((_7354 == std::string ("maxNumWarnings"))){ return (int)56; }else {}if ((_7354 == std::string ("optimizer"))){ return (int)90; }else {}if ((_7354 == std::string ("biMaxIterations"))){ return (int)8; }else {}if ((_7354 == std::string ("licenseTrhExpiryWrn"))){ return (int)32; }else {}if ((_7354 == std::string ("logCutSecondOpt"))){ return (int)39; }else {}if ((_7354 == std::string ("logAnaPro"))){ return (int)35; }else {}if ((_7354 == std::string ("logResponse"))){ return (int)49; }else {}if ((_7354 == std::string ("logBi"))){ return (int)36; }else {}if ((_7354 == std::string ("logBiFreq"))){ return (int)37; }else {}if ((_7354 == std::string ("biCleanOptimizer"))){ return (int)5; }else {}if ((_7354 == std::string ("intpntMaxNumRefinementSteps"))){ return (int)21; }else {}if ((_7354 == std::string ("intpntStartingPoint"))){ return (int)28; }else {}if ((_7354 == std::string ("intpntDiffStep"))){ return (int)17; }else {}if ((_7354 == std::string ("intpntScaling"))){ return (int)26; }else {}if ((_7354 == std::string ("intpntSolveForm"))){ return (int)27; }else {}if ((_7354 == std::string ("logIntpnt"))){ return (int)44; }else {}if ((_7354 == std::string ("intpntMaxIterations"))){ return (int)19; }else {}if ((_7354 == std::string ("intpntOffColTrh"))){ return (int)23; }else {}if ((_7354 == std::string ("intpntOrderMethod"))){ return (int)24; }else {}if ((_7354 == std::string ("intpntBasis"))){ return (int)16; }else {}if ((_7354 == std::string ("biIgnoreMaxIter"))){ return (int)6; }else {}if ((_7354 == std::string ("biIgnoreNumError"))){ return (int)7; }else {}if ((_7354 == std::string ("intpntMaxNumCor"))){ return (int)20; }else {}if ((_7354 == std::string ("presolveUse"))){ return (int)100; }else {}if ((_7354 == std::string ("presolveLevel"))){ return (int)95; }else {}if ((_7354 == std::string ("logPresolve"))){ return (int)48; }else {}if ((_7354 == std::string ("presolveLindepUse"))){ return (int)98; }else {}if ((_7354 == std::string ("presolveEliminatorMaxNumTries"))){ return (int)94; }else {}if ((_7354 == std::string ("presolveEliminatorMaxFill"))){ return (int)93; }else {}if ((_7354 == std::string ("presolveMaxNumReductions"))){ return (int)99; }else {}if ((_7354 == std::string ("simStabilityPriority"))){ return (int)137; }else {}if ((_7354 == std::string ("simPrimalCrash"))){ return (int)127; }else {}if ((_7354 == std::string ("logSim"))){ return (int)52; }else {}if ((_7354 == std::string ("logSimMinor"))){ return (int)54; }else {}if ((_7354 == std::string ("logSimFreq"))){ return (int)53; }else {}if ((_7354 == std::string ("simPrimalRestrictSelection"))){ return (int)129; }else {}if ((_7354 == std::string ("simPrimalSelection"))){ return (int)130; }else {}if ((_7354 == std::string ("simDualRestrictSelection"))){ return (int)119; }else {}if ((_7354 == std::string ("simDualSelection"))){ return (int)120; }else {}if ((_7354 == std::string ("simMaxIterations"))){ return (int)124; }else {}if ((_7354 == std::string ("simHotstartLu"))){ return (int)123; }else {}if ((_7354 == std::string ("simRefactorFreq"))){ return (int)131; }else {}if ((_7354 == std::string ("mioMode"))){ return (int)69; }else {}if ((_7354 == std::string ("logMio"))){ return (int)45; }else {}if ((_7354 == std::string ("logMioFreq"))){ return (int)46; }else {}if ((_7354 == std::string ("mioMaxNumRelaxs"))){ return (int)67; }else {}if ((_7354 == std::string ("mioMaxNumBranches"))){ return (int)66; }else {}if ((_7354 == std::string ("mioMaxNumSolutions"))){ return (int)68; }else {}if ((_7354 == std::string ("mioNodeSelection"))){ return (int)72; }else {}if ((_7354 == std::string ("mioHeuristicLevel"))){ return (int)65; }else {}if ((_7354 == std::string ("mioProbingLevel"))){ return (int)74; }else {}if ((_7354 == std::string ("mioCutSelectionLevel"))){ return (int)64; }else {}if ((_7354 == std::string ("mioVbDetectionLevel"))){ return (int)78; }else {}if ((_7354 == std::string ("mioBranchDir"))){ return (int)57; }else {}if ((_7354 == std::string ("mioRootOptimizer"))){ return (int)76; }else {}if ((_7354 == std::string ("mioNodeOptimizer"))){ return (int)71; }else {}if ((_7354 == std::string ("mioPerspectiveReformulate"))){ return (int)73; }else {}if ((_7354 == std::string ("readDataFormat"))){ return (int)103; }else {}if ((_7354 == std::string ("readDataCompressed"))){ return (int)102; }else {}if ((_7354 == std::string ("readKeepFreeCon"))){ return (int)105; }else {}if ((_7354 == std::string ("readMpsFormat"))){ return (int)108; }else {}if ((_7354 == std::string ("writeMpsFormat"))){ return (int)163; }else {}if ((_7354 == std::string ("readMpsWidth"))){ return (int)109; }else {}if ((_7354 == std::string ("readDebug"))){ return (int)104; }else {}if ((_7354 == std::string ("readLpQuotedNames"))){ return (int)107; }else {}if ((_7354 == std::string ("writeDataFormat"))){ return (int)149; }else {}if ((_7354 == std::string ("writeDataParam"))){ return (int)150; }else {}if ((_7354 == std::string ("writeFreeCon"))){ return (int)151; }else {}if ((_7354 == std::string ("writeGenericNames"))){ return (int)152; }else {}if ((_7354 == std::string ("writeGenericNamesIo"))){ return (int)153; }else {}if ((_7354 == std::string ("writeDataCompressed"))){ return (int)148; }else {}if ((_7354 == std::string ("writeMpsInt"))){ return (int)164; }else {}if ((_7354 == std::string ("writeLpStrictFormat"))){ return (int)161; }else {}if ((_7354 == std::string ("writeLpQuotedNames"))){ return (int)160; }else {}if ((_7354 == std::string ("writeLpLineWidth"))){ return (int)159; }else {}if ((_7354 == std::string ("writeLpTermsPerLine"))){ return (int)162; }else {}if ((_7354 == std::string ("writeLpFullObj"))){ return (int)158; }else {}if ((_7354 == std::string ("writePrecision"))){ return (int)165; }else {}if ((_7354 == std::string ("writeSolIgnoreInvalidNames"))){ return (int)169; }else {}if ((_7354 == std::string ("writeSolHead"))){ return (int)168; }else {}if ((_7354 == std::string ("writeSolConstraints"))){ return (int)167; }else {}if ((_7354 == std::string ("writeSolVariables"))){ return (int)170; }else {}if ((_7354 == std::string ("writeSolBarvariables"))){ return (int)166; }else {}if ((_7354 == std::string ("writeBasHead"))){ return (int)146; }else {}if ((_7354 == std::string ("writeBasConstraints"))){ return (int)145; }else {}if ((_7354 == std::string ("writeBasVariables"))){ return (int)147; }else {}if ((_7354 == std::string ("writeIntHead"))){ return (int)156; }else {}if ((_7354 == std::string ("writeIntConstraints"))){ return (int)155; }else {}if ((_7354 == std::string ("writeIntVariables"))){ return (int)157; }else {}if ((_7354 == std::string ("solReadNameWidth"))){ return (int)141; }else {}if ((_7354 == std::string ("solReadWidth"))){ return (int)142; }else {}if ((_7354 == std::string ("infeasReportAuto"))){ return (int)14; }else {}if ((_7354 == std::string ("infeasReportLevel"))){ return (int)15; }else {}if ((_7354 == std::string ("infeasGenericNames"))){ return (int)12; }else {}if ((_7354 == std::string ("logInfeasAna"))){ return (int)43; }else {}if ((_7354 == std::string ("licenseWait"))){ return (int)33; }else {}if ((_7354 == std::string ("licenseSuppressExpireWrns"))){ return (int)31; }else {}if ((_7354 == std::string ("licensePauseTime"))){ return (int)30; }else {}if ((_7354 == std::string ("licenseDebug"))){ return (int)29; }else {}if ((_7354 == std::string ("solFilterKeepBasic"))){ return (int)139; }else {}if ((_7354 == std::string ("solFilterKeepRanged"))){ return (int)140; }else {}if ((_7354 == std::string ("log"))){ return (int)34; }else {}if ((_7354 == std::string ("logExpand"))){ return (int)40; }else {}if ((_7354 == std::string ("logFile"))){ return (int)42; }else {}if ((_7354 == std::string ("logOrder"))){ return (int)47; }else {}if ((_7354 == std::string ("logSensitivity"))){ return (int)50; }else {}if ((_7354 == std::string ("logSensitivityOpt"))){ return (int)51; }else {}if ((_7354 == std::string ("readTaskIgnoreParam"))){ return (int)110; }else {}if ((_7354 == std::string ("writeTaskIncSol"))){ return (int)171; }else {}if ((_7354 == std::string ("paramReadCaseName"))){ return (int)91; }else {}if ((_7354 == std::string ("paramReadIgnError"))){ return (int)92; }else {}if ((_7354 == std::string ("solutionCallback"))){ return (int)143; }else {}if ((_7354 == std::string ("simScaling"))){ return (int)134; }else {}if ((_7354 == std::string ("simScalingMethod"))){ return (int)135; }else {}if ((_7354 == std::string ("simPrimalPhaseoneMethod"))){ return (int)128; }else {}if ((_7354 == std::string ("simDualPhaseoneMethod"))){ return (int)118; }else {}if ((_7354 == std::string ("simMaxNumSetbacks"))){ return (int)125; }else {}if ((_7354 == std::string ("simHotstart"))){ return (int)122; }else {}if ((_7354 == std::string ("simBasisFactorUse"))){ return (int)115; }else {}if ((_7354 == std::string ("simDegen"))){ return (int)116; }else {}if ((_7354 == std::string ("simReformulation"))){ return (int)132; }else {}if ((_7354 == std::string ("simExploitDupvec"))){ return (int)121; }else {}if ((_7354 == std::string ("simSaveLu"))){ return (int)133; }else {}if ((_7354 == std::string ("simNonSingular"))){ return (int)126; }else {}if ((_7354 == std::string ("simDualCrash"))){ return (int)117; }else {}if ((_7354 == std::string ("logStorage"))){ return (int)55; }else {}if ((_7354 == std::string ("infeasPreferPrimal"))){ return (int)13; }else {}if ((_7354 == std::string ("readLpDropNewVarsInBou"))){ return (int)106; }else {}if ((_7354 == std::string ("opfMaxTermsPerLine"))){ return (int)81; }else {}if ((_7354 == std::string ("opfWriteHints"))){ return (int)83; }else {}if ((_7354 == std::string ("opfWriteParameters"))){ return (int)84; }else {}if ((_7354 == std::string ("opfWriteProblem"))){ return (int)85; }else {}if ((_7354 == std::string ("opfWriteHeader"))){ return (int)82; }else {}if ((_7354 == std::string ("opfWriteSolutions"))){ return (int)89; }else {}if ((_7354 == std::string ("opfWriteSolBas"))){ return (int)86; }else {}if ((_7354 == std::string ("opfWriteSolItg"))){ return (int)87; }else {}if ((_7354 == std::string ("opfWriteSolItr"))){ return (int)88; }else {}if ((_7354 == std::string ("primalRepairOptimizer"))){ return (int)101; }else {}if ((_7354 == std::string ("mioRootRepeatPresolveLevel"))){ return (int)77; }else {}if ((_7354 == std::string ("mioCutCmir"))){ return (int)60; }else {}if ((_7354 == std::string ("mioCutClique"))){ return (int)59; }else {}if ((_7354 == std::string ("mioCutImpliedBound"))){ return (int)62; }else {}if ((_7354 == std::string ("mioCutKnapsackCover"))){ return (int)63; }else {}if ((_7354 == std::string ("mioCutGmi"))){ return (int)61; }else {}if ((_7354 == std::string ("sensitivityType"))){ return (int)114; }else {}if ((_7354 == std::string ("mioConstructSol"))){ return (int)58; }else {}if ((_7354 == std::string ("presolveLindepRelWorkTrh"))){ return (int)97; }else {}if ((_7354 == std::string ("presolveLindepAbsWorkTrh"))){ return (int)96; }else {}if ((_7354 == std::string ("sensitivityAll"))){ return (int)112; }else {}if ((_7354 == std::string ("logFeasRepair"))){ return (int)41; }else {}if ((_7354 == std::string ("cacheLicense"))){ return (int)9; }else {}if ((_7354 == std::string ("intpntRegularizationUse"))){ return (int)25; }else {}if ((_7354 == std::string ("simSolveForm"))){ return (int)136; }else {}if ((_7354 == std::string ("simSwitchOptimizer"))){ return (int)138; }else {}if ((_7354 == std::string ("writeIgnoreIncompatibleItems"))){ return (int)154; }else {}if ((_7354 == std::string ("checkConvexity"))){ return (int)10; }else {}if ((_7354 == std::string ("logCheckConvexity"))){ return (int)38; }else {}if ((_7354 == std::string ("autoSortABeforeOpt"))){ return (int)2; }else {}if ((_7354 == std::string ("sensitivityOptimizer"))){ return (int)113; }else {}if ((_7354 == std::string ("writeXmlMode"))){ return (int)172; }else {}if ((_7354 == std::string ("anaSolBasis"))){ return (int)0; }else {}if ((_7354 == std::string ("anaSolPrintViolated"))){ return (int)1; }else {}if ((_7354 == std::string ("basisSolveUsePlusOne"))){ return (int)4; }else {}if ((_7354 == std::string ("compressStatfile"))){ return (int)11; }else {}if ((_7354 == std::string ("mioRinsMaxNodes"))){ return (int)75; }else {}return (- (int)1); }int mosek::fusion::p_Parameters::string_to_sparam_value( const std::string & _7355){ if ((_7355 == std::string ("dataFileName"))){ return (int)1; }else {}if ((_7355 == std::string ("paramReadFileName"))){ return (int)7; }else {}if ((_7355 == std::string ("paramWriteFileName"))){ return (int)8; }else {}if ((_7355 == std::string ("paramCommentSign"))){ return (int)6; }else {}if ((_7355 == std::string ("debugFileName"))){ return (int)2; }else {}if ((_7355 == std::string ("basSolFileName"))){ return (int)0; }else {}if ((_7355 == std::string ("itrSolFileName"))){ return (int)4; }else {}if ((_7355 == std::string ("intSolFileName"))){ return (int)3; }else {}if ((_7355 == std::string ("solFilterXcLow"))){ return (int)16; }else {}if ((_7355 == std::string ("solFilterXcUpr"))){ return (int)17; }else {}if ((_7355 == std::string ("solFilterXxLow"))){ return (int)18; }else {}if ((_7355 == std::string ("solFilterXxUpr"))){ return (int)19; }else {}if ((_7355 == std::string ("readMpsObjName"))){ return (int)10; }else {}if ((_7355 == std::string ("readMpsRanName"))){ return (int)11; }else {}if ((_7355 == std::string ("readMpsRhsName"))){ return (int)12; }else {}if ((_7355 == std::string ("readMpsBouName"))){ return (int)9; }else {}if ((_7355 == std::string ("statFileName"))){ return (int)20; }else {}if ((_7355 == std::string ("statName"))){ return (int)22; }else {}if ((_7355 == std::string ("statKey"))){ return (int)21; }else {}if ((_7355 == std::string ("writeLpGenVarName"))){ return (int)23; }else {}if ((_7355 == std::string ("sensitivityResFileName"))){ return (int)15; }else {}if ((_7355 == std::string ("sensitivityFileName"))){ return (int)14; }else {}if ((_7355 == std::string ("mioDebugString"))){ return (int)5; }else {}if ((_7355 == std::string ("remoteAccessToken"))){ return (int)13; }else {}return (- (int)1); }int mosek::fusion::p_Parameters::string_to_intpnthotstart_value( const std::string & _7356){ if ((_7356 == std::string ("none"))){ return (int)0; }else {}if ((_7356 == std::string ("primal"))){ return (int)1; }else {}if ((_7356 == std::string ("dual"))){ return (int)2; }else {}if ((_7356 == std::string ("primalDual"))){ return (int)3; }else {}return (- (int)1); }int mosek::fusion::p_Parameters::string_to_uplo_value( const std::string & _7357){ if ((_7357 == std::string ("lo"))){ return (int)0; }else {}if ((_7357 == std::string ("up"))){ return (int)1; }else {}return (- (int)1); }int mosek::fusion::p_Parameters::string_to_sensitivitytype_value( const std::string & _7358){ if ((_7358 == std::string ("basis"))){ return (int)0; }else {}if ((_7358 == std::string ("optimalPartition"))){ return (int)1; }else {}return (- (int)1); }int mosek::fusion::p_Parameters::string_to_accmode_value( const std::string & _7359){ if ((_7359 == std::string ("var"))){ return (int)0; }else {}if ((_7359 == std::string ("con"))){ return (int)1; }else {}return (- (int)1); }int mosek::fusion::p_Parameters::string_to_problemitem_value( const std::string & _7360){ if ((_7360 == std::string ("var"))){ return (int)0; }else {}if ((_7360 == std::string ("con"))){ return (int)1; }else {}if ((_7360 == std::string ("cone"))){ return (int)2; }else {}return (- (int)1); }int mosek::fusion::p_Parameters::string_to_solveform_value( const std::string & _7361){ if ((_7361 == std::string ("free"))){ return (int)0; }else {}if ((_7361 == std::string ("primal"))){ return (int)1; }else {}if ((_7361 == std::string ("dual"))){ return (int)2; }else {}return (- (int)1); }void mosek::fusion::p_Parameters::destroy(){}void mosek::fusion::Parameters::destroy() { mosek::fusion::p_Parameters::_get_impl(this)->destroy(); }
